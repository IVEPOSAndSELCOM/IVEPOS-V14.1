package com.intuition.ivepos;

import android.app.Dialog;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothDevice;
import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.IBinder;
import android.text.Editable;
import android.text.Html;
import android.text.TextWatcher;
import android.util.Log;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FilterQueryProvider;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.SimpleCursorAdapter;
import android.widget.Spinner;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.epson.epos2.Epos2Exception;
import com.epson.epos2.printer.Printer;
import com.epson.epos2.printer.PrinterStatusInfo;
import com.epson.epos2.printer.ReceiveListener;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.material.textfield.TextInputLayout;
import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
import com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException;
import com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.repackaged.org.apache.commons.codec.binary.Base64;
import com.google.api.client.util.ExponentialBackOff;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.GmailScopes;
import com.google.api.services.gmail.model.Label;
import com.google.api.services.gmail.model.ListLabelsResponse;
import com.intuition.ivepos.A4.A4_Printer_Refund_Wise_new;
import com.intuition.ivepos.mSwipe.ApplicationData;
import com.intuition.ivepos.mSwipe.Logs;
import com.intuition.ivepos.wisepos.ReceiptBitmap;
import com.mswipetech.wisepad.sdk.Print;
import com.mswipetech.wisepad.sdk.device.MSWisepadDeviceController;
import com.mswipetech.wisepad.sdk.device.MSWisepadDeviceControllerResponseListener;
import com.mswipetech.wisepad.sdk.device.WisePadConnection;
import com.socsi.smartposapi.printer.Align;
import com.socsi.smartposapi.printer.FontLattice;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import au.com.bytecode.opencsv.CSVWriter;
import pub.devrel.easypermissions.AfterPermissionGranted;
import pub.devrel.easypermissions.EasyPermissions;

import static com.intuition.ivepos.BluetoothPrintDriver.BT_Write;

/**
 * Created by Rohithkumar on 7/19/2017.
 */

public class Refundswise_Saleslist extends AppCompatActivity implements ReceiveListener {

    public SQLiteDatabase db = null;
    public SQLiteDatabase db1 = null;

    EditText email_id_send; String emailPattern = "[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";

    TextView refundamount, refundpercentage, crasherpercentage, crashername, refundamount_aa, refundamount_bill;

    String statussusbs, statusnets, ipnamegets, portgets, addgets, namegets, papersizeget;
    String statusnets_counter, ipnamegets_counter, portgets_counter;
    String tableida, billtypea, paymmethoda, tableidaa, billtypeaa, paymmethodaa;
    byte[][] allbuf, allbuf1, allbuf2, allbuf3, allbuf4, allbuf5, allbuf6, allbuf7, allbuf8, allbuf9, allbuf10, allbuf11, allbufqty, allbufitems, allbufmodifiers, allbufsubtot,
            allbuftax, allbufdisc, allbufrounded, allbuffulltot, allbuf12, allbuf13, allbuf14,allbufbillno,allbuftime,allbufline1,allbufline,allbufcust,allbufcustname,
            allbufcustadd,allbufcustph,allbufcustemail, allbuftaxestype2, allbuftaxestype1, allbuf1122, allbufKOT;
    String billnoget;

    ImageView imageViewPicture;
    View mView;

    byte[] img;

    String compna;

    float sub1, sub2;

    String taxpe, dsirs, dsirs1, alltotal1;
    String refundamounta, on1;

    String username, billno, mumstr;
    String date, time, user;

    TextView alltotal;

    String total_disc_print_q;

    String total, total1, sumtotal, max, pone, one1, salesee1, bilcc;

    String ipnameget, portget, statusnet, nameget, addget, statussusb;
    String ipnameget_counter, portget_counter, statusnet_counter;
    String assa, assa1, assa2;
    float aqq1;
    String aqq2;
    String sub;

    byte[] setHT32, setHT321, setHT33, setHT34, setHT3212, setHTKOT, feedcut2;
    int nPaperWidth;
    String strcompanyname, straddress1, straddress2, straddress3, strphone, stremailid, strwebsite, strtaxone, strbillone;
    String NAME;
    int charlength, charlength1, charlength2, quanlentha;

    TextView tv8, disc_tv;
    float ss;
    String ss1;
    float sub2a;


    File file=null;
    SimpleDateFormat sdff2, sdff1;
    String currentDateandTimee1;
    String timee1;

    String companynameis;

    List toEmailList;

    SimpleCursorAdapter adapter;
    Cursor cursor1;

    String billnumb, datee, timee, bill_coun;
    ListView listView;
    EditText search;

    TextView tvkot;
    TextView totalsales, totalsales_r, noofbills, avgsales, avgsales_r;
    Spinner getlisting, getreason;
    String text1, Text;
    private int hour;
    private int minute;


    String response;
    GoogleAccountCredential mCredential;
    ProgressDialog mProgress;

    static final int REQUEST_ACCOUNT_PICKER = 1000;
    static final int REQUEST_AUTHORIZATION = 1001;
    static final int REQUEST_GOOGLE_PLAY_SERVICES = 1002;
    static final int REQUEST_PERMISSION_GET_ACCOUNTS = 1003;

    private static final String BUTTON_TEXT = "Call Gmail API";
    private static final String PREF_ACCOUNT_NAME = "accountName";
    private static final String[] SCOPES = { GmailScopes.GMAIL_SEND };

    EditText editText1_filter, editText2_filter;

    TextView editText1, editText2, editText11, editText22;
    TextView editText_from_day_hide, editText_from_day_visible, editText_to_day_hide, editText_to_day_visible;
    private int year, year1;
    private int month, month1;
    private int day, day1;

    String onee, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve;
    String onee1, two1, three1, four1, five1, six1, seven1, eight1, nine1, ten1, eleven1, twelve1;

    int clickcount=1, clickcounts = 1;

    String str_print_ty;

    private Context mContext = null;

    private Printer mPrinter = null;
    int barcodeWidth, barcodeHeight, pageAreaHeight, pageAreaWidth;

    private EditText mEditTarget = null;
    private Spinner mSpnSeries = null;
    private Spinner mSpnLang = null;
    Bitmap logoData, yourBitmap;

    private WifiPrintDriver wifiSocket = null;
    private WifiPrintDriver2 wifiSocket2 = null;

    TextView mTextView1, mTextView2;

    String insert1_cc = "", insert1_rs = "", str_country;
    String account_selection;

    public MSWisepadDeviceController mMSWisepadDeviceController = null;
    private ArrayList<byte[]> mPrintData;

    boolean mswipe_text = true;

    byte[] testBytes;
    byte[] command;
    private UsbManager mUsbManager;
    private UsbDevice mDevice;
    private UsbDeviceConnection mConnection;
    private UsbInterface mInterface;
    private UsbEndpoint mEndPoint;
    private static Boolean forceCLaim = true;
    HashMap<String, UsbDevice> mDeviceList;
    Iterator<UsbDevice> mDeviceIterator;

    Formatter fmt;
    
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.refundswise_saleslist);

        SharedPreferences sharedpreferences_select =  SplashScreenActivity_Selection.getDefaultSharedPreferencesMultiProcess(Refundswise_Saleslist.this);
        account_selection= sharedpreferences_select.getString("account_selection", null);

        mContext = this;

        mSpnSeries = (Spinner) findViewById(R.id.spnModel);
        ArrayAdapter<SpnModelsItem> seriesAdapter = new ArrayAdapter<SpnModelsItem>(Refundswise_Saleslist.this, android.R.layout.simple_spinner_item);
        seriesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        seriesAdapter.add(new SpnModelsItem(getString(R.string.printerseries_t82), Printer.TM_T82));
        mSpnSeries.setAdapter(seriesAdapter);
        mSpnSeries.setSelection(0);

        mSpnLang = (Spinner) findViewById(R.id.spnLang);
        ArrayAdapter<SpnModelsItem> langAdapter = new ArrayAdapter<SpnModelsItem>(Refundswise_Saleslist.this, android.R.layout.simple_spinner_item);
        langAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        langAdapter.add(new SpnModelsItem(getString(R.string.lang_ank), Printer.MODEL_ANK));
        mSpnLang.setAdapter(langAdapter);
        mSpnLang.setSelection(0);


//        try {
//            com.epson.epos2.Log.setLogSettings(mContext, com.epson.epos2.Log.PERIOD_TEMPORARY, com.epson.epos2.Log.OUTPUT_STORAGE, null, 0, 1, com.epson.epos2.Log.LOGLEVEL_LOW);
//        } catch (Exception e) {
////            Toast.makeText(Refundswise_Saleslist.this, "Here8", Toast.LENGTH_SHORT).show();
//            ShowMsg.showException(e, "setLogSettings", mContext);
//        }
        mEditTarget = (EditText) findViewById(R.id.edtTarget);

        editText1_filter = new EditText(Refundswise_Saleslist.this);
        editText2_filter = new EditText(Refundswise_Saleslist.this);

        editText1 = (TextView) findViewById(R.id.editText1);
//        editText1.setText(currentDateandTime1);
        editText2 = (TextView) findViewById(R.id.editText2);
//        editText2.setText(currentDateandTime1);

        editText11 = (TextView) findViewById(R.id.editText11);
//        editText11.setText(currentDateandTime2);


        editText22 = (TextView) findViewById(R.id.editText22);
//        editText22.setText(currentDateandTime2);


        editText_from_day_hide = (TextView) findViewById(R.id.editText_from_day_hide);
        editText_from_day_visible = (TextView) findViewById(R.id.editText_from_day_visible);


        editText_to_day_hide = (TextView) findViewById(R.id.editText_to_day_hide);
        editText_to_day_visible = (TextView) findViewById(R.id.editText_to_day_visible);


        editText11.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                Calendar now = Calendar.getInstance();
                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
                        datePickerListener,now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH)
                );

                dpd.show(Refundswise_Saleslist.this.getFragmentManager(), "Datepickerdialog");




            }

            com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener datePickerListener
                    = new com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener() {

                @Override
                public void onDateSet(com.wdullaer.materialdatetimepicker.date.DatePickerDialog datePickerDialog, int selectedYear1, int selectedMonth1, int selectedDay1) {
                    year1 = selectedYear1;
                    month1 = selectedMonth1;
                    day1 = selectedDay1;

                    // set selected date into textview
                    populateSetDate(year1, month1 + 1, day1);
                }
            };





            public void populateSetDate(int year, int month, int day) {
                TextView mEdit = (TextView) findViewById(R.id.editText1);
                TextView mEdit1  = (TextView) findViewById(R.id.editText11);
                if (month == 1 && day < 10) {
                    mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                    onee1 = "0" + day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee1);
                } else {
                    if (month == 1) {
                        mEdit.setText(year + " " + "0" + 1 + " " + day);
                        onee = day + " " + "Jan" + " " + year;
                        mEdit1.setText(onee);
                    }
                }

                if (month == 2 && day < 10) {
                    mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                    two1 = "0" + day + " " + "Feb" + " " + year;
                    mEdit1.setText(two1);
                } else {
                    if (month == 2) {
                        mEdit.setText(year + " " + "0" + 2 + " " + day);
                        two = day + " " + "Feb" + " " + year;
                        mEdit1.setText(two);
                    }
                }

                if (month == 3 && day < 10) {
                    mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                    three1 = "0" + day + " " + "Mar" + " " + year;
                    mEdit1.setText(three1);
                } else {
                    if (month == 3) {
                        mEdit.setText(year + " " + "0" + 3 + " " + day);
                        three = day + " " + "Mar" + " " + year;
                        mEdit1.setText(three);
                    }
                }

                if (month == 4 && day < 10) {
                    mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                    four1 = "0" + day + " " + "Apr" + " " + year;
                    mEdit1.setText(four1);
                } else {
                    if (month == 4) {
                        mEdit.setText(year + " " + "0" + 4 + " " + day);
                        four = day + " " + "Apr" + " " + year;
                        mEdit1.setText(four);
                    }
                }

                if (month == 5 && day < 10) {
                    mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                    five1 = "0" + day + " " + "May" + " " + year;
                    mEdit1.setText(five1);
                } else {
                    if (month == 5) {
                        mEdit.setText(year + " " + "0" + 5 + " " + day);
                        five = day + " " + "May" + " " + year;
                        mEdit1.setText(five);
                    }
                }

                if (month == 6 && day < 10) {
                    mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                    six1 = "0" + day + " " + "Jun" + " " + year;
                    mEdit1.setText(six1);
                } else {
                    if (month == 6) {
                        mEdit.setText(year + " " + "0" + 6 + " " + day);
                        six = day + " " + "Jun" + " " + year;
                        mEdit1.setText(six);
                    }
                }

                if (month == 7 && day < 10) {
                    mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                    seven1 = "0" + day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven1);
                } else {
                    if (month == 7) {
                        mEdit.setText(year + " " + "0" + 7 + " " + day);
                        seven = day + " " + "Jul" + " " + year;
                        mEdit1.setText(seven);
                    }
                }

                if (month == 8 && day < 10) {
                    mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                    eight1 = "0" + day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight1);
                } else {
                    if (month == 8) {
                        mEdit.setText(year + " " + "0" + 8 + " " + day);
                        eight = day + " " + "Aug" + " " + year;
                        mEdit1.setText(eight);
                    }
                }

                if (month == 9 && day < 10) {
                    mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                    nine1 = "0" + day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine1);
                } else {
                    if (month == 9) {
                        mEdit.setText(year + " " + "0" + 9 + " " + day);
                        nine = day + " " + "Sep" + " " + year;
                        mEdit1.setText(nine);
                    }
                }

                if (month == 10 && day < 10) {
                    mEdit.setText(year + " " + 10 + " " + "0" + day);
                    ten1 = "0" + day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten1);
                } else {
                    if (month == 10) {
                        mEdit.setText(year + " " + 10 + " " + day);
                        ten = day + " " + "Oct" + " " + year;
                        mEdit1.setText(ten);
                    }
                }

                if (month == 11 && day < 10) {
                    mEdit.setText(year + " " + 11 + " " + "0" + day);
                    eleven1 = "0" + day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven1);
                } else {
                    if (month == 11) {
                        mEdit.setText(year + " " + 11 + " " + day);
                        eleven = day + " " + "Nov" + " " + year;
                        mEdit1.setText(eleven);
                    }
                }

                if (month == 12 && day < 10) {
                    mEdit.setText(year + " " + 12 + " " + "0" + day);
                    twelve1 = "0" + day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve1);
                } else {
                    if (month == 12) {
                        mEdit.setText(year + " " + 12 + " " + day);
                        twelve = day + " " + "Dec" + " " + year;
                        mEdit1.setText(twelve);
                    }
                }

            }

        });


        editText22.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
//                Calendar now = Calendar.getInstance();
//                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
//                        datePickerListener,
//                        now.get(Calendar.YEAR),
//                        now.get(Calendar.MONTH),
//                        now.get(Calendar.DAY_OF_MONTH)
//
//
//                );
//
//                dpd.show(Itemwise_Saleslist.this.getFragmentManager(), "Datepickerdialog");
                //if (clickcount == 1){
                Calendar now = Calendar.getInstance();
                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
                        datePickerListener,now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH)
                );

                dpd.show(Refundswise_Saleslist.this.getFragmentManager(), "Datepickerdialog");
                clickcount++;
//                }else {
//                    Calendar now = Calendar.getInstance();
//                    com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
//                            datePickerListener, year, month, day
//                    );
//
//                    dpd.show(Itemwise_Saleslist.this.getFragmentManager(), "Datepickerdialog");
//                }

            }

            com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener datePickerListener
                    = new com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener() {

                @Override
                public void onDateSet(com.wdullaer.materialdatetimepicker.date.DatePickerDialog datePickerDialog, int selectedYear, int selectedMonth, int selectedDay) {
                    year = selectedYear;
                    month = selectedMonth;
                    day = selectedDay;

                    // set selected date into textview
                    populateSetDate(year, month + 1, day);
                }
            };

//                // when dialog box is closed, below method will be called.
//                public void onDateSet(DatePicker view, int selectedYear,
//                                      int selectedMonth, int selectedDay) {
//
//
//
//
//                }
//            };


            public void populateSetDate(int year, int month, int day) {
                TextView mEdit = (TextView) findViewById(R.id.editText2);
                TextView mEdit1  = (TextView) findViewById(R.id.editText22);
                if (month == 1 && day < 10) {
                    mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                    onee1 = "0" + day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee1);
                } else {
                    if (month == 1) {
                        mEdit.setText(year + " " + "0" + 1 + " " + day);
                        onee = day + " " + "Jan" + " " + year;
                        mEdit1.setText(onee);
                    }
                }

                if (month == 2 && day < 10) {
                    mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                    two1 = "0" + day + " " + "Feb" + " " + year;
                    mEdit1.setText(two1);
                } else {
                    if (month == 2) {
                        mEdit.setText(year + " " + "0" + 2 + " " + day);
                        two = day + " " + "Feb" + " " + year;
                        mEdit1.setText(two);
                    }
                }

                if (month == 3 && day < 10) {
                    mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                    three1 = "0" + day + " " + "Mar" + " " + year;
                    mEdit1.setText(three1);
                } else {
                    if (month == 3) {
                        mEdit.setText(year + " " + "0" + 3 + " " + day);
                        three = day + " " + "Mar" + " " + year;
                        mEdit1.setText(three);
                    }
                }

                if (month == 4 && day < 10) {
                    mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                    four1 = "0" + day + " " + "Apr" + " " + year;
                    mEdit1.setText(four1);
                } else {
                    if (month == 4) {
                        mEdit.setText(year + " " + "0" + 4 + " " + day);
                        four = day + " " + "Apr" + " " + year;
                        mEdit1.setText(four);
                    }
                }

                if (month == 5 && day < 10) {
                    mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                    five1 = "0" + day + " " + "May" + " " + year;
                    mEdit1.setText(five1);
                } else {
                    if (month == 5) {
                        mEdit.setText(year + " " + "0" + 5 + " " + day);
                        five = day + " " + "May" + " " + year;
                        mEdit1.setText(five);
                    }
                }

                if (month == 6 && day < 10) {
                    mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                    six1 = "0" + day + " " + "Jun" + " " + year;
                    mEdit1.setText(six1);
                } else {
                    if (month == 6) {
                        mEdit.setText(year + " " + "0" + 6 + " " + day);
                        six = day + " " + "Jun" + " " + year;
                        mEdit1.setText(six);
                    }
                }

                if (month == 7 && day < 10) {
                    mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                    seven1 = "0" + day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven1);
                } else {
                    if (month == 7) {
                        mEdit.setText(year + " " + "0" + 7 + " " + day);
                        seven = day + " " + "Jul" + " " + year;
                        mEdit1.setText(seven);
                    }
                }

                if (month == 8 && day < 10) {
                    mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                    eight1 = "0" + day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight1);
                } else {
                    if (month == 8) {
                        mEdit.setText(year + " " + "0" + 8 + " " + day);
                        eight = day + " " + "Aug" + " " + year;
                        mEdit1.setText(eight);
                    }
                }

                if (month == 9 && day < 10) {
                    mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                    nine1 = "0" + day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine1);
                } else {
                    if (month == 9) {
                        mEdit.setText(year + " " + "0" + 9 + " " + day);
                        nine = day + " " + "Sep" + " " + year;
                        mEdit1.setText(nine);
                    }
                }

                if (month == 10 && day < 10) {
                    mEdit.setText(year + " " + 10 + " " + "0" + day);
                    ten1 = "0" + day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten1);
                } else {
                    if (month == 10) {
                        mEdit.setText(year + " " + 10 + " " + day);
                        ten = day + " " + "Oct" + " " + year;
                        mEdit1.setText(ten);
                    }
                }

                if (month == 11 && day < 10) {
                    mEdit.setText(year + " " + 11 + " " + "0" + day);
                    eleven1 = "0" + day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven1);
                } else {
                    if (month == 11) {
                        mEdit.setText(year + " " + 11 + " " + day);
                        eleven = day + " " + "Nov" + " " + year;
                        mEdit1.setText(eleven);
                    }
                }

                if (month == 12 && day < 10) {
                    mEdit.setText(year + " " + 12 + " " + "0" + day);
                    twelve1 = "0" + day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve1);
                } else {
                    if (month == 12) {
                        mEdit.setText(year + " " + 12 + " " + day);
                        twelve = day + " " + "Dec" + " " + year;
                        mEdit1.setText(twelve);
                    }
                }

            }

//            class SelectDateFragment extends DialogFragment implements DatePickerDialog.OnDateSetListener {
//                @Override
//                public Dialog onCreateDialog(Bundle savedInstanceState) {
//                    final Calendar calendar = Calendar.getInstance();
//                    int yy = calendar.get(Calendar.YEAR);
//                    int mm = calendar.get(Calendar.MONTH);
//                    int dd = calendar.get(Calendar.DAY_OF_MONTH);
//                    return new DatePickerDialog(Itemwise_Saleslist.this, this, yy, mm, dd);
//                }
//
//
//                @Override
//                public void onDateSet(DatePicker view, int yy, int mm, int dd) {
//                    populateSetDate(yy, mm + 1, dd);
//                }
//            }

        });

        editText_from_day_visible.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                android.app.TimePickerDialog timePickerDialog = new android.app.TimePickerDialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog, timePickerListener_open, hour, minute,
                        false);

                timePickerDialog.show();
            }
        });

        editText_to_day_visible.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                android.app.TimePickerDialog timePickerDialog = new android.app.TimePickerDialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog, timePickerListener_close, hour, minute,
                        false);

                timePickerDialog.show();
            }
        });


        listView = (ListView) findViewById(R.id.listView11);

        search = (EditText) findViewById(R.id.searchView);

        InputMethodManager imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(search.getWindowToken(), 0);

        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);

        ImageView deleteicon = (ImageView) findViewById(R.id.delete_icon);
        deleteicon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                search.setText("");
            }
        });

        LinearLayout back_activity = (LinearLayout) findViewById(R.id.back_activity);
        back_activity.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

        db = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);
        db1 = openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);

        Cursor cursor_country = db1.rawQuery("SELECT * FROM Country_Selection", null);
        if (cursor_country.moveToFirst()){
            str_country = cursor_country.getString(1);
        }

        if (str_country.toString().equals("Rupee") || str_country.toString().equals("India")) {
            insert1_cc = "\u20B9";
            insert1_rs = "Rs.";
        }else {
            if (str_country.toString().equals("Pound") || str_country.toString().equals("UK Pound")) {
                insert1_cc = "\u00a3";
                insert1_rs = "BP.";
            }else {
                if (str_country.toString().equals("Euro") || str_country.toString().equals("UK Euro")) {
                    insert1_cc = "\u20ac";
                    insert1_rs = "EU.";
                }else {
                    if (str_country.toString().equals("Dollar")) {
                        insert1_cc = "\u0024";
                        insert1_rs = "\u0024";
                    }else {
                        if (str_country.toString().equals("Dinars")) {
                            insert1_cc = "D";
                            insert1_rs = "KD.";
                        }else {
                            if (str_country.toString().equals("Shilling")) {
                                insert1_cc = "S";
                                insert1_rs = "S.";
                            }else {
                                if (str_country.toString().equals("Ringitt")) {
                                    insert1_cc = "R";
                                    insert1_rs = "RM.";
                                }else {
                                    if (str_country.toString().equals("Rial")) {
                                        insert1_cc = "R";
                                        insert1_rs = "OR.";
                                    }else {
                                        if (str_country.toString().equals("Yen")) {
                                            insert1_cc = "\u00a5";
                                            insert1_rs = "\u00a5";
                                        }else {
                                            if (str_country.toString().equals("Papua New Guinean")) {
                                                insert1_cc = "K";
                                                insert1_rs = "K.";
                                            }else {
                                                if (str_country.toString().equals("UAE")) {
                                                    insert1_cc = "D";
                                                    insert1_rs = "DH.";
                                                }else {
                                                    if (str_country.toString().equals("South African Rand")) {
                                                        insert1_cc = "R";
                                                        insert1_rs = "R.";
                                                    }else {
                                                        if (str_country.toString().equals("Congolese Franc")) {
                                                            insert1_cc = "F";
                                                            insert1_rs = "FC.";
                                                        }else {
                                                            if (str_country.toString().equals("Qatari Riyals")) {
                                                                insert1_cc = "QAR";
                                                                insert1_rs = "QAR.";
                                                            }else {
                                                                if (str_country.toString().equals("Dirhams")) {
                                                                    insert1_cc = "AED";
                                                                    insert1_rs = "AED.";
                                                                }else {
                                                                    if (str_country.toString().equals("Kuwait Dinar")) {
                                                                        insert1_cc = "KWD";
                                                                        insert1_rs = "KWD.";
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        Cursor ccornn = db1.rawQuery("SELECT * FROM BTConn", null);
        if (ccornn.moveToFirst()) {
            nameget = ccornn.getString(1);
            addget = ccornn.getString(2);
            statussusb = ccornn.getString(3);
            mEditTarget.setText(addget);
        }

        getreason = (Spinner) findViewById(R.id.chocolate_category);

        tvkot = new TextView(Refundswise_Saleslist.this);
        totalsales_r = new TextView(Refundswise_Saleslist.this);
        avgsales_r = new TextView(Refundswise_Saleslist.this);

        refundamount = new TextView(Refundswise_Saleslist.this);
        refundpercentage = new TextView(Refundswise_Saleslist.this);
        crasherpercentage = new TextView(Refundswise_Saleslist.this);
        crashername = new TextView(Refundswise_Saleslist.this);

        refundamount_aa = new TextView(Refundswise_Saleslist.this);

        final Calendar c = Calendar.getInstance();
        // Current Hour
        hour = c.get(Calendar.HOUR_OF_DAY);
        // Current Minute
        minute = c.get(Calendar.MINUTE);

        mCredential = GoogleAccountCredential.usingOAuth2(
                Refundswise_Saleslist.this.getApplicationContext(), Arrays.asList(SCOPES))
                .setBackOff(new ExponentialBackOff());

        mProgress = new ProgressDialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog);
        mProgress.setMessage(getString(R.string.setmessage14));

        Bundle extras = getIntent().getExtras();
        String player1name = extras.getString("PLAYER1NAME");
        String player2name = extras.getString("PLAYER2NAME");
        String player3name = extras.getString("PLAYER3NAME");
        String str_edittext1 = extras.getString("edittext1");
        String str_edittext11 = extras.getString("edittext11");
        String str_edittext2 = extras.getString("edittext2");
        String str_edittext22 = extras.getString("edittext22");
        String str_edittext_from_day_visible = extras.getString("edittext_from_day_visible");
        String str_edittext_from_day_hide = extras.getString("edittext_from_day_hide");
        String str_edittext_to_day_visible = extras.getString("edittext_to_day_visible");
        String str_edittext_to_day_hide = extras.getString("edittext_to_day_hide");

        editText1_filter.setText(player1name);
        editText2_filter.setText(player2name);

        editText1.setText(str_edittext1);
        editText11.setText(str_edittext11);
        editText2.setText(str_edittext2);
        editText22.setText(str_edittext22);
        editText_from_day_visible.setText(str_edittext_from_day_visible);
        editText_from_day_hide.setText(str_edittext_from_day_hide);
        editText_to_day_visible.setText(str_edittext_to_day_visible);
        editText_to_day_hide.setText(str_edittext_to_day_hide);

        DownloadMusicfromInternet downloadMusicfromInternet = new DownloadMusicfromInternet();
        downloadMusicfromInternet.execute(editText1.getText().toString() + editText2.getText().toString());

        final Cursor cursor_country1 = db1.rawQuery("SELECT * FROM Country_Selection", null);
        if (cursor_country1.moveToFirst()){
            str_country = cursor_country1.getString(1);
        }

        final String Text = getreason.getSelectedItem().toString();

        //dialog.dismiss();
        if (Text.equals("All")) {
            final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems ORDER BY refund ASC";

            cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
            // The desired columns to be bound
            final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
            // the XML defined views which the data will be bound to
            final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
            //Log.e("Checamos que hay id", String.valueOf(R.id.name));
            adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//            listView.setAdapter(adapter);
            adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                @Override
                public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                    if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                        final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                        TextView dateTextView = (TextView) view;
                        if (tadl_id.toString().equals("India")){
                            dateTextView.setText(insert1_cc);
                        }else {
                            dateTextView.setText(insert1_cc);
                        }
                        return true;
                    }
                    return false;
                }
            });
            listView.setAdapter(adapter);
            
            adapter.setFilterQueryProvider(new FilterQueryProvider() {
                public Cursor runQuery(CharSequence constraint) {
                    return fetchCountriesByName_all(constraint.toString());
                }
            });
        }


        search.addTextChangedListener(new TextWatcher() {

            public void afterTextChanged(Editable s) {
            }

            public void beforeTextChanged(CharSequence s, int start,
                                          int count, int after) {
            }

            public void onTextChanged(CharSequence s, int start,
                                      int before, int count) {
                adapter.getFilter().filter(s.toString());
            }
        });



        getreason.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                text1 = parent.getItemAtPosition(position).toString();
                if (text1.toString().equals("All")){
                    final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems ORDER BY refund ASC";

                    cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                    // The desired columns to be bound
                    final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                    // the XML defined views which the data will be bound to
                    final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                    //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                    adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                    listView.setAdapter(adapter);
                    adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                        @Override
                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                            if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                                final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                                TextView dateTextView = (TextView) view;
                                if (tadl_id.toString().equals("India")){
                                    dateTextView.setText(insert1_cc);
                                }else {
                                    dateTextView.setText(insert1_cc);
                                }
                                return true;
                            }
                            return false;
                        }
                    });
                    listView.setAdapter(adapter);
                    
                    adapter.setFilterQueryProvider(new FilterQueryProvider() {
                        public Cursor runQuery(CharSequence constraint) {
                            return fetchCountriesByName_all(constraint.toString());
                        }
                    });

                }else {
                    final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems WHERE reason = '" + text1 + "'";

                    cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                    // The desired columns to be bound
                    final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                    // the XML defined views which the data will be bound to
                    final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                    //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                    adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                    listView.setAdapter(adapter);
                    adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                        @Override
                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                            if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                                final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                                TextView dateTextView = (TextView) view;
                                if (tadl_id.toString().equals("India")){
                                    dateTextView.setText(insert1_cc);
                                }else {
                                    dateTextView.setText(insert1_cc);
                                }
                                return true;
                            }
                            return false;
                        }
                    });
                    listView.setAdapter(adapter);
                    
                    adapter.setFilterQueryProvider(new FilterQueryProvider() {
                        public Cursor runQuery(CharSequence constraint) {
                            return fetchCountriesByName_text1(constraint.toString());
                        }
                    });
                }

                if (text1.toString().equals("Other")){
                    final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems WHERE reason != 'Damaged/Spoiled' AND reason != 'Delayed' " +
                            "AND reason != 'Changed mind' AND reason != 'Accidental charge'";

                    cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                    // The desired columns to be bound
                    final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                    // the XML defined views which the data will be bound to
                    final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                    //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                    adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                    listView.setAdapter(adapter);
                    adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                        @Override
                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                            if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                                final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                                TextView dateTextView = (TextView) view;
                                if (tadl_id.toString().equals("India")){
                                    dateTextView.setText(insert1_cc);
                                }else {
                                    dateTextView.setText(insert1_cc);
                                }
                                return true;
                            }
                            return false;
                        }
                    });
                    listView.setAdapter(adapter);
                    
                    adapter.setFilterQueryProvider(new FilterQueryProvider() {
                        public Cursor runQuery(CharSequence constraint) {
                            return fetchCountriesByName_other(constraint.toString());
                        }
                    });
                }


            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });


        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Cursor cursor2 = (Cursor) parent.getItemAtPosition(position);
                billnumb = cursor2.getString(cursor2.getColumnIndex("billno"));
                billnoget = cursor2.getString(cursor2.getColumnIndex("billno"));
                datee = cursor2.getString(cursor2.getColumnIndex("date"));
                timee = cursor2.getString(cursor2.getColumnIndex("time"));


                TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                final TableLayout tableLayoutt1 = new TableLayout(Refundswise_Saleslist.this);

                final TableRow tableRow = new TableRow(Refundswise_Saleslist.this);
                tableRow.setOrientation(LinearLayout.HORIZONTAL);
                tableRow.setPadding(55, 0, 0, 0);

//                                    Spinner spinner = (Spinner)view.findViewById(R.id.billdetails);
//                                    ArrayList<String> my_tax = new ArrayList<String>();
//                                    db = openOrCreateDatabase("mydb", Context.MODE_PRIVATE, null);
//                                    Cursor alltaxes = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"' AND type = 'Item' ", null);
//                                    if (alltaxes.moveToFirst()) {
//                                        do {
//
//                                            String ID = alltaxes.getString(0);
//                                            String NAME = alltaxes.getString(1);
//                                            String Qua = alltaxes.getString(2);
//                                            my_tax.add(Qua+"   "+NAME);
//
//                                        } while (alltaxes.moveToNext());
//                                    }
//                                    alltaxes = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnumb + "' AND type = 'Modifier' ", null);
//                                    if (alltaxes.moveToFirst()) {
//                                        do {
//
//                                            String ID = alltaxes.getString(0);
//                                            String NAME = alltaxes.getString(1);
//                                            String Qua = alltaxes.getString(2);
//                                            my_tax.add(Qua+"   "+NAME+"(Modifier)");
//
//                                        } while (alltaxes.moveToNext());
//                                    }
//                                    ArrayAdapter my_AdapterTax = new ArrayAdapter(Refundswise_Saleslist.this, R.layout.spinner_row,
//                                            my_tax);
//                                    spinner.setAdapter(my_AdapterTax);

                //Toast.makeText(Refundswise_Saleslist.this, "Bill number is "+billnumb, Toast.LENGTH_SHORT).show();
//                Cursor bi = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"' AND type = 'Item' AND mod_assigned = 'yes'", null);
//                if (bi.moveToFirst()){
//                    do {
//
//                        String na = bi.getString(1);
////                                            Toast.makeText(Refundswise_Saleslist.this, "Items are "+na, Toast.LENGTH_SHORT).show();
//
//                        TextView tvmod = new TextView(Refundswise_Saleslist.this);
//                        tvmod.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tvmod.setPadding(100, 0, 0, 0);
//                        tvmod.setText(na);
//                        tvmod.setPadding(0, 0, 0, 0);
//                        tvmod.setTextColor(Color.parseColor("#000000"));
//                        tableRow.addView(tvmod);
//
//
//                        Cursor mo = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"' AND type = 'Modifier' AND parent = '"+na+"'", null);
//                        if (mo.moveToFirst()){
//                            do {
//                                String mod = mo.getString(1);
////                                                    Toast.makeText(Refundswise_Saleslist.this, "modifiers of "+na+" is "+mod, Toast.LENGTH_SHORT).show();
//
//                                TextView tvmod1 = new TextView(Refundswise_Saleslist.this);
//                                tvmod1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                                //tvmod.setPadding(100, 0, 0, 0);
//                                tvmod1.setText(mod);
//                                tvmod1.setPadding(0, 0, 0, 0);
//                                tvmod1.setTextColor(Color.parseColor("#000000"));
//                                tableRow.addView(tvmod1);
//                            }while (mo.moveToNext());
//                        }
//                    }while (bi.moveToNext());
//                }
//                bi.close();
//                Cursor bii = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"' AND type = 'Item' AND mod_assigned = 'no'", null);
//                if (bii.moveToFirst()){
//                    do {
//                        String na = bii.getString(1);
////                                            Toast.makeText(Refundswise_Saleslist.this, "Items are "+na, Toast.LENGTH_SHORT).show();
//
//                        TextView tvmod = new TextView(Refundswise_Saleslist.this);
//                        tvmod.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tvmod.setPadding(100, 0, 0, 0);
//                        tvmod.setText(na);
//                        tvmod.setPadding(0, 0, 0, 0);
//                        tvmod.setTextColor(Color.parseColor("#000000"));
//                        tableRow.addView(tvmod);
//
//                    }while (bii.moveToNext());
//                }
//                bii.close();
//
//                tableLayoutt1.addView(tableRow);


                Cursor alert = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
                if (alert.moveToFirst()){
                    do {
                        String paym = alert.getString(5);
                        String billt = alert.getString(6);

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setText(paym);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setText(billt);

                        ContentValues cv = new ContentValues();
                        if (tv.getText().toString().equals("")){
                            cv.put("paymentmethod", "  Cash");
                            String where  = "billnumber = '" +billnumb+ "' ";
                            db.update("Billnumber", cv, where, new String[]{});
                        }

                    } while (alert.moveToNext());
                }

                Cursor alert1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
                if (alert1.moveToFirst()){
                    do {
                        String paym = alert1.getString(5);
                        String billt = alert1.getString(6);

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setText(paym);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setText(billt);

                        ContentValues cv = new ContentValues();
                        if (tv1.getText().toString().equals("")){
                            cv.put("billtype", "  Dine-in");
                            String where  = "billnumber = '" +billnumb+ "' ";
                            db.update("Billnumber", cv, where, new String[]{});
                        }

                    } while (alert1.moveToNext());
                }

                Cursor alert2 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"'", null);
                if (alert2.moveToFirst()){
                    do {
                        String paym = alert2.getString(17);

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setText(paym);

                        ContentValues cv = new ContentValues();
                        if (tv.getText().toString().equals("")){
                            cv.put("paymentmethod", "  Cash");
                            String where  = "bill_no = '" +billnumb+ "' ";
                            db.update("All_Sales", cv, where, new String[]{});
                        }

                    } while (alert2.moveToNext());
                }

                Cursor alert3 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"'", null);
                if (alert3.moveToFirst()){
                    do {
                        String billt = alert3.getString(16);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setText(billt);

                        ContentValues cv = new ContentValues();
                        if (tv1.getText().toString().equals("")){
                            cv.put("billtype", "  Dine-in");
                            String where  = "bill_no = '" +billnumb+ "' ";
                            db.update("All_Sales", cv, where, new String[]{});
                        }

                    } while (alert3.moveToNext());
                }


                final Dialog dialog = new Dialog(Refundswise_Saleslist.this, R.style.notitle);
                dialog.setContentView(R.layout.full_orderlist1_return_saleslist);
                dialog.setTitle(Html.fromHtml("<font color='#ffffff'>Tax</font>"));

                TableLayout tableLayoutt = (TableLayout) dialog.findViewById(R.id.lytpedidooo);
                tableLayoutt.removeAllViews();

                Button okcl = (Button)dialog.findViewById(R.id.btncancel);
                okcl.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialog.dismiss();
                    }
                });

                TextView rs = (TextView) dialog.findViewById(R.id.rs);
                rs.setText(insert1_cc);

                Button print = (Button)dialog.findViewById(R.id.btnprint);
                print.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
//                                dialog.dismiss();
                        Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
                        if (connnet.moveToFirst()) {
                            ipnameget = connnet.getString(1);
                            portget = connnet.getString(2);
                            statusnet = connnet.getString(3);
                        }

                        Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
                        if (connnet_counter.moveToFirst()) {
                            ipnameget_counter = connnet_counter.getString(1);
                            portget_counter = connnet_counter.getString(2);
                            statusnet_counter = connnet_counter.getString(3);
                        }
                        connnet_counter.close();

                        Cursor conn = db1.rawQuery("SELECT * FROM BTConn", null);
                        if (conn.moveToFirst()) {
                            nameget = conn.getString(1);
                            addget = conn.getString(2);
                            statussusb = conn.getString(3);
                        }

                        Cursor cc = db1.rawQuery("SELECT * FROM Printerreceiptsize", null);
                        if (cc.moveToFirst()) {
                            String Na = cc.getString(1);
                            if (Na.equals("A4")) {
//                                Toast.makeText(getApplicationContext(), "A4", Toast.LENGTH_LONG).show();
                                Intent intent = new Intent(Refundswise_Saleslist.this, A4_Printer_Refund_Wise_new.class);
                                intent.putExtra("billnumber", billnumb);
                                startActivity(intent);
                            }else {
                                if (statusnet.toString().equals("ok") || statusnet_counter.toString().equals("ok") || statussusb.toString().equals("ok")) {

                                    printbillcopy1(dialog);
                                    //dialog.dismiss();


                                }else {

                                    String printer_type="";
                                    Cursor aallrows = db1.rawQuery("SELECT * FROM Printer_type WHERE _id = '1'", null);
                                    if (aallrows.moveToFirst()) {
                                        do {
                                            printer_type = aallrows.getString(1);

                                        } while (aallrows.moveToNext());
                                    }
                                    aallrows.close();

                                    if(printer_type.equalsIgnoreCase("wiseposplus")) {
                                        if (MSWisepadDeviceController.getDeviceType() == MSWisepadDeviceController.DeviceType.WISEPOS_NEO) {
                                            mPrintData = new ArrayList<>();

                                            Log.e(Cash_Card_Credit_Sales.class.getSimpleName(), "mPrintData: " + mPrintData);
                                            byte[] receiptData = neoprintbillcopy1(dialog);
                                            mPrintData.add(receiptData);


                                            if (mPrintData != null && mPrintData.size() > 0) {
                                                mMSWisepadDeviceController.print(mPrintData);
                                            }

                                        } else {
                                            wiseposprintbillcopy1(dialog);

                                        }
                                    }else {

                                        final Dialog dialogconn = new Dialog(Refundswise_Saleslist.this, R.style.notitle);
                                        dialogconn.setContentView(R.layout.dialog_printer_conn_error_orderlist);

                                        Button conti = (Button) dialogconn.findViewById(R.id.ok);
                                        conti.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                //Toast.makeText(Refundswise_Saleslist.this, "checkprinterconncash11", Toast.LENGTH_SHORT).show();
                                                dialogconn.dismiss();
                                            }
                                        });

                                        dialogconn.show();
                                    }
                                }
                                //printbillcopy1(dialog);
                            }
                        }
                        cc.close();

//                        if (statusnet.toString().equals("ok") || statusnet_counter.toString().equals("ok") || statussusb.toString().equals("ok")) {
//
//                            printbillcopy1(dialog);
//                            //dialog.dismiss();
//
//
//                        }else {
//                            final Dialog dialogconn = new Dialog(Refundswise_Saleslist.this, R.style.notitle);
//                            dialogconn.setContentView(R.layout.dialog_printer_conn_error_orderlist);
//
//                            Button conti = (Button) dialogconn.findViewById(R.id.ok);
//                            conti.setOnClickListener(new View.OnClickListener() {
//                                @Override
//                                public void onClick(View v) {
//                                    //Toast.makeText(Refundswise_Saleslist.this, "checkprinterconncash11", Toast.LENGTH_SHORT).show();
//                                    dialogconn.dismiss();
//                                }
//                            });
//
//                            dialogconn.show();
//                        }
//                        //printbillcopy1(dialog);

                    }
                });

                Button mail = (Button)dialog.findViewById(R.id.btnmail);
                mail.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //dialog.dismiss();
                        email1(dialog);

                    }
                });

                TextView datetimee = (TextView) dialog.findViewById(R.id.datetimee);
                datetimee.setText("("+datee+","+timee+")");


                TextView refnd_am = (TextView) dialog.findViewById(R.id.refnd_am);

                Cursor billcan = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
                if (billcan.moveToFirst()){
                    String asd = billcan.getString(18);
                    refundamounta = String.valueOf(asd);
                }else {
                    Cursor billcan_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
                    if (billcan_cancel.moveToFirst()) {
                        String asd = billcan_cancel.getString(17);
                        refundamounta = String.valueOf(asd);
                    }
                }

                Cursor c1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoget+"'", null);
                if (c1.moveToFirst()){
                    String c11 = c1.getString(2);
                    alltotal1 = c11;
                }else {
                    alltotal1 = "0";
                }
                float min = Float.parseFloat(refundamounta)-Float.parseFloat(alltotal1);
                String mn1 = String.valueOf(min);

                refnd_am.setText("-"+mn1);

//                        ImageView cl = (ImageView)dialog.findViewById(R.id.closetext);
//                        cl.setOnClickListener(new View.OnClickListener() {
//                            @Override
//                            public void onClick(View v) {
//                                dialog.dismiss();
//                            }
//                        });

                TextView bilnumb = (TextView)dialog.findViewById(R.id.billnumb);
                bilnumb.setText(String.valueOf(billnumb));


                Cursor billtypee = db.rawQuery("Select * from Billnumber WHERE billnumber = '" + billnumb + "' ", null);
                if (billtypee.moveToFirst()) {
                    bill_coun = billtypee.getString(11);
                }
                billtypee.close();

                TextView billid_value = (TextView)dialog.findViewById(R.id.billid_value);
                billid_value.setText(String.valueOf(bill_coun));

                Cursor date = db.rawQuery("Select * from All_Sales WHERE bill_no = '"+billnoget+"'", null);
                if (date.moveToFirst()){
                    datee = date.getString(25);
                    timee = date.getString(12);
                }else {
                    Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
                    if (date_cancel.moveToFirst()) {
                        datee = date_cancel.getString(22);
                        timee = date_cancel.getString(12);
                    }
                }

                TextView datees = (TextView)dialog.findViewById(R.id.date);
                datees.setText(datee);
                TextView timees = (TextView)dialog.findViewById(R.id.time);
                timees.setText(timee);

                LinearLayout custadd = (LinearLayout)dialog.findViewById(R.id.address);
                TextView custname = (TextView)dialog.findViewById(R.id.cust_name);
                TextView custaddr = (TextView)dialog.findViewById(R.id.cust_address);
                TextView custph = (TextView)dialog.findViewById(R.id.cust_phno);
                TextView custema = (TextView)dialog.findViewById(R.id.cust_emailid);

                LinearLayout comments = (LinearLayout) dialog.findViewById(R.id.comments);
                TextView sale_comm = (TextView) dialog.findViewById(R.id.sale_comm);
                sale_comm.setText("");
                Cursor cursor_sale_comm = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
                if (cursor_sale_comm.moveToFirst()){
                    String string_sale_comm = cursor_sale_comm.getString(13);
                    sale_comm.setText(string_sale_comm);
                    if (sale_comm.getText().toString().equals("")){
                        comments.setVisibility(View.GONE);
                    }else {
                        comments.setVisibility(View.VISIBLE);
                    }
                }

                TextView subtotoalam = (TextView)dialog.findViewById(R.id.subtotal);
                TextView discpercent = (TextView)dialog.findViewById(R.id.dispercent);
                TextView discval = (TextView)dialog.findViewById(R.id.discount);
                TextView savingsval = (TextView)dialog.findViewById(R.id.disc_savings);
                TextView taxvalue = (TextView)dialog.findViewById(R.id.tax);
                TextView roundedoffvalue = (TextView)dialog.findViewById(R.id.roundedoff);
                TextView loyalty_points = (TextView)dialog.findViewById(R.id.loyalty_points);
                TextView loyalty_amount = (TextView)dialog.findViewById(R.id.loyalty_amount);
                TextView total = (TextView)dialog.findViewById(R.id.totalold);

                TextView compname = (TextView)dialog.findViewById(R.id.compname);
                TextView compadd1 = (TextView)dialog.findViewById(R.id.address1);
                TextView compadd2 = (TextView)dialog.findViewById(R.id.address2);
                TextView compadd3 = (TextView)dialog.findViewById(R.id.address3);
                TextView compphnoo = (TextView)dialog.findViewById(R.id.phoneno);
                TextView compemail = (TextView)dialog.findViewById(R.id.emailid);
                TextView compwebsite = (TextView)dialog.findViewById(R.id.website);
                TextView comptaxlicen = (TextView)dialog.findViewById(R.id.taxlineone);

                TextView tableidd = (TextView) dialog.findViewById(R.id.tableid);
                TextView paymenttypee = (TextView) dialog.findViewById(R.id.paymenttype);
                TextView paymentmethodd = (TextView) dialog.findViewById(R.id.paymentmethod);


                Cursor all = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"'", null);
                if(all.moveToFirst()){
                    String tab_id = all.getString(15);
                    String billtype = all.getString(16);
                    String cashcard = all.getString(17);

                    Cursor vbnm = db1.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tab_id + "'", null);
                    if (vbnm.moveToFirst()){
                        assa1 = vbnm.getString(1);
                        assa2 = vbnm.getString(2);
                    }
                    TextView cx = new TextView(Refundswise_Saleslist.this);
                    cx.setText(assa1);
                    if (cx.getText().toString().equals("")){
                        tableidd.setText(assa2);
                    }else {
                        tableidd.setText(assa1);
                    }

                    paymenttypee.setText(billtype);
                    paymentmethodd.setText(cashcard);
                }else {
                    Cursor all_cancel = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billnumb+"'", null);
                    if (all_cancel.moveToFirst()){
                        String billtype = all_cancel.getString(15);
                        String cashcard = all_cancel.getString(16);

                        paymenttypee.setText(billtype);
                        paymentmethodd.setText(cashcard);
                    }
                }

                TextView foo = (TextView)dialog.findViewById(R.id.footer);



                Cursor cursor3 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
                if (cursor3.moveToFirst()){
                    sub = cursor3.getString(7);
                    subtotoalam.setText(sub);
                }


                Cursor cursor31 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
                if (cursor31.moveToFirst()){
                    sub1 = cursor31.getFloat(0);
                }

                Cursor cursor411 = db.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '"+billnoget+"'", null);
                if (cursor411.moveToFirst()){
                    sub2 = cursor411.getFloat(0);
                }
                float sub12 = sub1+sub2;
                String total2 = String.valueOf(sub12);
                float to = Float.parseFloat(total2);
                String tot = String.valueOf(to);
                subtotoalam.setText(tot);

                Cursor cursor4 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billnumb+"'", null);
                if (cursor4.moveToFirst()){
                    String taxpe = cursor4.getString(5);
                    discpercent.setText(taxpe);
                }

                Cursor cursor5 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billnumb+"'", null);
                if (cursor5.moveToFirst()){
                    String dsirs = cursor5.getString(7);
                    float dsirsq = Float.parseFloat(dsirs);
                    String rop = String.format("%.2f", dsirsq);
                    discval.setText(rop);
                }

                Cursor cursor51 = db.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '"+billnumb+"' AND disc_thereornot = 'yes'", null);
                if (cursor51.moveToFirst()){
                    float dsirsq = cursor51.getFloat(0);
                    String rop = String.format("%.2f", dsirsq);
                    savingsval.setText(rop);
                }

                Cursor cursor6 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
                if (cursor6.moveToFirst()){
                    String sub = cursor6.getString(8);
                    if (sub.equals("")){
                        taxvalue.setText("0.0");
                    }else {
                        float vv = Float.parseFloat(sub);
                        taxvalue.setText(String.format("%.2f", vv));
                    }

                }

                Cursor cursor7 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
                if (cursor7.moveToFirst()){
                    String sub = cursor7.getString(9);
                    String point = cursor7.getString(16);
                    String amount = cursor7.getString(17);
                    roundedoffvalue.setText(sub);
                    loyalty_points.setText(point);
                    loyalty_amount.setText(amount);
                }

                Cursor cursor8 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
                if (cursor8.moveToFirst()){
                    String sub = cursor8.getString(2);
                    total.setText(sub);
                }

                Cursor ccursorr = db.rawQuery("Select * from All_Sales WHERE bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursorr.moveToFirst()) {

                    do {

                        String nbg = ccursorr.getString(0);
                        String name = ccursorr.getString(1);
                        String value = ccursorr.getString(2);
                        String pq = ccursorr.getString(5);
                        String itna = ccursorr.getString(2);
                        String pricee = ccursorr.getString(3);
                        String tototot = ccursorr.getString(4);

                        final String newid = ccursorr.getString(20);


                        if (pq.equals("Item")){
                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));



                            final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                            row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                            final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                            row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT));

                            //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                            final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
                            final TableLayout tableLayout_disc = new TableLayout(Refundswise_Saleslist.this);

                            TableRow.LayoutParams lp, lp1, lp2;

                            TextView tv = new TextView(Refundswise_Saleslist.this);
                            tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                            //tv.setTextSize(18);
                            //tv.setTypeface(Typeface.MONOSPACE);
                            tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tv.setPadding(0, 0, 0, 0);
                            //text = ccursorr.getString(1);
                            tv.setText(value);
                            row.addView(tv);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.6f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv1.setTypeface(Typeface.MONOSPACE);
                            tv1.setGravity(Gravity.CENTER_VERTICAL);
                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tv1.setTextSize(15);
                            //tv.setPadding(0, 0, 0, 0);
                            //text = ccursorr.getString(1);
                            tv1.setText(name);
                            String value1 = tv1.getText().toString();
                            row.addView(tv1);

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.0f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv2.setTypeface(Typeface.MONOSPACE);
                            //tv2.append(value + "% " + name);
                            tv2.setText(pricee);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tv2.setTextColor(R.color.black);
                            row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv2.setTypeface(Typeface.MONOSPACE);
                            //tv2.setPadding(0, 0, 1, 0);
                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            tv3.setText(tototot);
                            //tv3.setTextColor(R.color.black);
                            //row.addView(tv3);



                            String value2 = tv3.getText().toString();

                            //tableLayoutt.addView(row);

                            Cursor modcursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnumb + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                            if (modcursor.moveToFirst()){
                                do {

                                    final String modiname = modcursor.getString(1);
                                    final String modiquan = modcursor.getString(2);
                                    String modiprice = modcursor.getString(3);
                                    String moditotal = modcursor.getString(4);
                                    final String modiid = modcursor.getString(0);

                                    final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                                    tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                    final TextView tvv = new TextView(Refundswise_Saleslist.this);
                                    // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                    tvv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.70f));
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    //tv.setGravity(Gravity.CENTER);
                                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                    //tvv.setTypeface(Typeface.MONOSPACE);
                                    tvv.setText("");
                                    tableRow11.addView(tvv);

                                    TextView tv4 = new TextView(Refundswise_Saleslist.this);
                                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                    tv4.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.6f));
                                    //tv3.setPadding(5, 0, 0, 0);
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    tv4.setText(modiname);
                                    tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                    //tv4.setTypeface(Typeface.MONOSPACE);
                                    tv4.setGravity(Gravity.CENTER_VERTICAL);
                                    //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                    //tv3.setTextColor(R.color.black);
                                    tableRow11.addView(tv4);

                                    TextView tv5 = new TextView(Refundswise_Saleslist.this);
                                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                    tv5.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.0f));
                                    //tv3.setPadding(5, 0, 0, 0);
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    // tv5.setTypeface(Typeface.MONOSPACE);
                                    //tv2.setPadding(0, 0, 1, 0);
                                    tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                    tv5.setText(String.valueOf(Float.parseFloat(modiprice)));
                                    //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                    //tv3.setTextColor(R.color.black);
                                    tableRow11.addView(tv5);

                                    TextView tv6 = new TextView(Refundswise_Saleslist.this);
                                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                    tv6.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                    //tv3.setPadding(5, 0, 0, 0);
                                    tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    // tv6.setTypeface(Typeface.MONOSPACE);
                                    tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    tv6.setText("");
                                    //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                    //tv3.setTextColor(R.color.black);
                                    tableRow11.addView(tv6);


                                    final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                                    //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                    tv7.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                    tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    //tv7.setTypeface(Typeface.MONOSPACE);
                                    //tv3.setPadding(0,0,10,0);
                                    tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);

                                    //String modtotal = String.valueOf(Integer.parseInt(modiquan) * Integer.parseInt(modiprice));

                                    final String number = tv.getText().toString();
                                    float newmul = Float.parseFloat(number);
                                    //final float in = Float.parseFloat(cursor.getString(4));
                                    String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                    //newmul = Integer.parseInt(multiply);
                                    //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                    //row.addView(tv3);

                                    row.removeView(tv8);

                                    Cursor cursor41 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '"+billnumb+"'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                                    if (cursor41.moveToFirst()){
                                        float sub2a = cursor41.getFloat(0);
                                        String sub2a1 = String.valueOf(sub2a);
                                        ss = Float.parseFloat(sub2a1)+Float.parseFloat(tototot);
                                        ss1 = String.valueOf(ss);
                                        //Toast.makeText(Refundswise_Saleslist.this, "1 "+ss1, Toast.LENGTH_SHORT).show();
                                    }

                                    tv8 = new TextView(Refundswise_Saleslist.this);
                                    tv8.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                    //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                    //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    //tv3.setPadding(0, 0, 10, 0);
                                    //tv8.setTypeface(Typeface.MONOSPACE);
                                    tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);

                                    final String numberr = tv.getText().toString();
                                    float newmulr = Float.parseFloat(numberr);
                                    //final float in = Float.parseFloat(cursor.getString(4));
                                    String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                    //newmul = Integer.parseInt(multiply);
                                    tv8.setText(ss1);
                                    row.addView(tv8);


                                    tableLayout1.addView(tableRow11);
                                }while (modcursor.moveToNext());

                                Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnumb + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                                if (disc_cursor.moveToFirst()){
                                    do {
                                        String disc_vv = disc_cursor.getString(12);
                                        String disc_there = disc_cursor.getString(30);
                                        if(disc_there.toString().equals("no")){

                                        }else {
                                            ///Toast.makeText(Refundswise_Saleslist.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                            final TableRow row_disc = new TableRow(Refundswise_Saleslist.this);
                                            row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                            //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                            TextView textView2 = new TextView(Refundswise_Saleslist.this);
                                            textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                            textView2.setText("");
                                            row_disc.addView(textView2);

                                            disc_tv = new TextView(Refundswise_Saleslist.this);
                                            disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                            disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                            disc_tv.setText("-" + disc_cursor.getString(31));
                                            disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                            row_disc.addView(disc_tv);

                                            tableLayout_disc.addView(row_disc);
                                        }
                                    }while(disc_cursor.moveToNext());
                                }
                            }
                            else {
                                tv8 = new TextView(Refundswise_Saleslist.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                //tv8.setTypeface(Typeface.MONOSPACE);
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(multiply));
                                row.addView(tv8);

                                Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnumb + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                                if (disc_cursor.moveToFirst()){
                                    do {
                                        String disc_vv = disc_cursor.getString(12);
                                        String disc_there = disc_cursor.getString(30);
                                        if(disc_there.toString().equals("no")){

                                        }else {
                                            ///Toast.makeText(Refundswise_Saleslist.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                            final TableRow row_disc = new TableRow(Refundswise_Saleslist.this);
                                            row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                            //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                            TextView textView2 = new TextView(Refundswise_Saleslist.this);
                                            textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                            textView2.setText("");
                                            row_disc.addView(textView2);

                                            disc_tv = new TextView(Refundswise_Saleslist.this);
                                            disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                            disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                            disc_tv.setText("-" + disc_cursor.getString(31));
                                            disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                            row_disc.addView(disc_tv);

                                            tableLayout_disc.addView(row_disc);
                                        }
                                    }while(disc_cursor.moveToNext());
                                }
                            }

                            tableLayoutt.addView(row);

                            tableLayoutt.addView(tableLayout1);

                            tableLayoutt.addView(tableLayout_disc);

                        }



                    } while (ccursorr.moveToNext());
                }


                TableLayout tableLayout_r = (TableLayout) dialog.findViewById(R.id.lytpedidooo_re);
                tableLayout_r.removeAllViews();

                Cursor ccursorreturn = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursorreturn.moveToFirst()) {

                    do {

                        String name = ccursorreturn.getString(1);
                        String value = ccursorreturn.getString(2);
                        String pq = ccursorreturn.getString(5);
                        String itna = ccursorreturn.getString(2);
                        String pricee = ccursorreturn.getString(3);
                        String tototot = ccursorreturn.getString(4);

                        final String newtt = ccursorreturn.getString(4);

                        final String newid = ccursorreturn.getString(19);

                        final String newids = ccursorreturn.getString(0);
                        int padding_in_px;

                        int padding_in_dp = 30;  // 34 dps
                        final float scale1 = getResources().getDisplayMetrics().density;
                        padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                        if (pq.equals("Item")){
                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));



                            final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                            row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                            final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                            row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT));

                            //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                            final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
                            final TableLayout tableLayout_disc = new TableLayout(Refundswise_Saleslist.this);

                            TableRow.LayoutParams lp, lp1, lp2;

                            TextView tv = new TextView(Refundswise_Saleslist.this);
                            tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                            //tv.setTextSize(18);
//                            tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tv.setPadding(0, 0, 0, 0);
                            //text = ccursorr.getString(1);
                            tv.setText(value);
                            row.addView(tv);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.6f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv1.setGravity(Gravity.CENTER_VERTICAL);
                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tv1.setTextSize(15);
                            //tv.setPadding(0, 0, 0, 0);
                            //text = ccursorr.getString(1);
                            tv1.setText(name);
                            String value1 = tv1.getText().toString();
                            row.addView(tv1);

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.0f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.append(value + "% " + name);
                            tv2.setText(pricee);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tv2.setTextColor(R.color.black);
                            row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv3.setText(tototot);
                            //tv3.setTextColor(R.color.black);
                            //row.addView(tv3);



                            String value2 = tv3.getText().toString();

                            //tableLayoutt.addView(row);

                            Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                            if (modcursor.moveToFirst()){

                                do {

                                    final String modiname = modcursor.getString(1);
                                    final String modiquan = modcursor.getString(2);
                                    String modiprice = modcursor.getString(3);
                                    String moditotal = modcursor.getString(4);
                                    final String modiid = modcursor.getString(0);

                                    float modprice1 = Float.parseFloat(modiprice);
                                    String modpricestr = String.valueOf(modprice1);


                                    final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                                    tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                    final TextView tvv = new TextView(Refundswise_Saleslist.this);
                                    // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                    tvv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.70f));
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    //tv.setGravity(Gravity.CENTER);
                                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    tvv.setText("");
                                    tableRow11.addView(tvv);

                                    TextView tv4 = new TextView(Refundswise_Saleslist.this);
                                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                    tv4.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.6f));
                                    //tv3.setPadding(5, 0, 0, 0);
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    tv4.setText(modiname);
                                    tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                                    tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    tv4.setGravity(Gravity.CENTER_VERTICAL);
                                    //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                    //tv3.setTextColor(R.color.black);
                                    tableRow11.addView(tv4);

                                    TextView tv5 = new TextView(Refundswise_Saleslist.this);
                                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                    tv5.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.0f));
                                    //tv3.setPadding(5, 0, 0, 0);
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                                    tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    //tv2.setPadding(0, 0, 1, 0);
                                    tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                    tv5.setText(modiprice);
                                    //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                    //tv3.setTextColor(R.color.black);
                                    tableRow11.addView(tv5);

                                    TextView tv6 = new TextView(Refundswise_Saleslist.this);
                                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                    tv6.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                    //tv3.setPadding(5, 0, 0, 0);
                                    tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                                    tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    tv6.setText("");
                                    //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                    //tv3.setTextColor(R.color.black);
                                    tableRow11.addView(tv6);


                                    final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                                    //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                    tv7.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                    tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    //tv3.setPadding(0,0,10,0);
                                    tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                    String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                    final String number = tv.getText().toString();
                                    float newmul = Float.parseFloat(number);
                                    //final float in = Float.parseFloat(cursor.getString(4));
                                    String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                    //newmul = Integer.parseInt(multiply);
                                    //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                    //row.addView(tv3);


                                    row.removeView(tv8);
                                    tv8 = new TextView(Refundswise_Saleslist.this);
                                    tv8.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                    //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                    //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                    //tv.setBackgroundResource(R.drawable.cell_shape);
                                    tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    //tv3.setPadding(0, 0, 10, 0);
//                                    tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);

                                    final String numberr = tv.getText().toString();
                                    float newmulr = Float.parseFloat(numberr);
                                    //final float in = Float.parseFloat(cursor.getString(4));
                                    String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                    //newmul = Integer.parseInt(multiply);
                                    tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                                    row.addView(tv8);


                                    tableLayout1.addView(tableRow11);
                                }while (modcursor.moveToNext());
                            }
                            else {

                                float fgh = Float.parseFloat(tototot);
                                String tototott = String.format("%.1f", fgh);

                                tv8 = new TextView(Refundswise_Saleslist.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
//                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(multiply));
                                row.addView(tv8);

                            }

                            tableLayout_r.addView(row);

                            tableLayout_r.addView(tableLayout1);

                            tableLayout_r.addView(tableLayout_disc);

                        }
                    } while (ccursorreturn.moveToNext());


                    Cursor ccursorreturn1 = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '"+billnoget+"' AND type = 'Modifier'", null);
                    if (ccursorreturn1.moveToFirst()) {

                        //do {

                        String name = ccursorreturn1.getString(1);
                        String value = ccursorreturn1.getString(2);
                        String pq = ccursorreturn1.getString(5);
                        String itna = ccursorreturn1.getString(2);
                        String pricee = ccursorreturn1.getString(3);
                        String tototot = ccursorreturn1.getString(4);

                        final String newid = ccursorreturn1.getString(19);
                        int padding_in_px;

                        int padding_in_dp = 30;  // 34 dps
                        final float scale1 = getResources().getDisplayMetrics().density;
                        padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                        if (pq.equals("Modifier")) {
                            Cursor cursor = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billnoget+"' AND type = 'Modifier'", null);
                            if (cursor.moveToFirst()){
                                do {
                                    String parid = cursor.getString(7);
                                    String parnam = cursor.getString(6);
                                    final String modiname = cursor.getString(1);
                                    final String modiquan = cursor.getString(2);
                                    String modiprice = cursor.getString(3);
                                    String moditotal = cursor.getString(4);
                                    String modisix = cursor.getString(6);
                                    final String modiid = cursor.getString(0);
                                    String tvx = cursor.getString(2);

                                    float modprice1 = Float.parseFloat(modiprice);
                                    String modpricestr = String.valueOf(modprice1);

                                    float moditotal1 = Float.parseFloat(moditotal);
                                    String modtotalstr = String.valueOf(moditotal1);

                                    /////////////Toast.makeText(Refundswise_Saleslist.this, "11c "+cursor.getCount() + " "+modiname, Toast.LENGTH_SHORT).show();


                                    Cursor cursor1 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billnoget+"' AND _idd = '"+parid+"' AND itemname = '"+parnam+"'", null);

                                    Cursor modt = db.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND _idd = '"+parid+"' AND itemname = '"+parnam+"'", null);
                                    if (modt.moveToFirst()) {
                                        do {
                                            //row.removeView(tv3);
                                            float aq = modt.getFloat(0);
                                            String aqq = String.valueOf(aq);
                                            aqq1 = Float.parseFloat(aqq);
                                            aqq2 = String.valueOf(aqq1);
                                        } while (modt.moveToNext());
                                    }

                                    if (cursor1.moveToFirst()){

                                    }else {

                                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                                        row.setLayoutParams(new TableLayout.LayoutParams(
                                                TableRow.LayoutParams.MATCH_PARENT,
                                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));



                                        final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                                        final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                                TableRow.LayoutParams.WRAP_CONTENT));

                                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                                        final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
                                        final TableLayout tableLayout_disc = new TableLayout(Refundswise_Saleslist.this);


                                        TextView tv = new TextView(Refundswise_Saleslist.this);
                                        tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.70f));
                                        //tv.setBackgroundResource(R.drawable.cell_shape);
                                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                                        //tv.setTextSize(18);
//                                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                        //tv.setPadding(0, 0, 0, 0);
                                        //text = ccursorr.getString(1);
                                        tv.setText(tvx);
                                        row.addView(tv);

                                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                                        tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.6f));
                                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                        //tv1.setTextSize(15);
                                        //tv.setPadding(0, 0, 0, 0);
                                        //text = ccursorr.getString(1);
                                        tv1.setText(modisix);
                                        String value1 = tv1.getText().toString();
                                        row.addView(tv1);


                                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.0f));
                                        //tv.setBackgroundResource(R.drawable.cell_shape);
                                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                        //tv2.setTypeface(Typeface.MONOSPACE);
                                        //tv2.append(value + "% " + name);
                                        tv2.setText("");
                                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                        //tv2.setTextColor(R.color.black);
                                        row.addView(tv2);


                                        row.removeView(tv8);
                                        tv8 = new TextView(Refundswise_Saleslist.this);
                                        tv8.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                        //tv.setBackgroundResource(R.drawable.cell_shape);
                                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                        //tv3.setPadding(0, 0, 10, 0);
                                        //tv8.setTypeface(Typeface.MONOSPACE);
                                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                        tv8.setText("");
                                        row.addView(tv8);

                                        final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                                        tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                                TableRow.LayoutParams.MATCH_PARENT,
                                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));




                                        final TextView tvv = new TextView(Refundswise_Saleslist.this);
                                        // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                        tvv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.70f));
                                        //tv.setBackgroundResource(R.drawable.cell_shape);
                                        //tv.setGravity(Gravity.CENTER);
                                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                        tvv.setText("");
                                        tableRow11.addView(tvv);

                                        TextView tv4 = new TextView(Refundswise_Saleslist.this);
                                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                        tv4.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.6f));
                                        //tv3.setPadding(5, 0, 0, 0);
                                        //tv.setBackgroundResource(R.drawable.cell_shape);
                                        tv4.setText(modiname);
                                        tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                                        tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                        tv4.setGravity(Gravity.CENTER_VERTICAL);
                                        //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                        //tv3.setTextColor(R.color.black);
                                        tableRow11.addView(tv4);

                                        TextView tv5 = new TextView(Refundswise_Saleslist.this);
                                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                        tv5.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.0f));
                                        //tv3.setPadding(5, 0, 0, 0);
                                        //tv.setBackgroundResource(R.drawable.cell_shape);
                                        tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                                        tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                        //tv2.setPadding(0, 0, 1, 0);
                                        tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                        tv5.setText(modiprice);
                                        //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                        //tv3.setTextColor(R.color.black);
                                        tableRow11.addView(tv5);

//                                        TextView tv6 = new TextView(Refundswise_Saleslist.this);
//                                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                                        tv6.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                                        //tv3.setPadding(5, 0, 0, 0);
//                                        tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
////                                        tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                        tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                                        tv6.setText("");
//                                        //tv3.setBackgroundColor(getResources().getColor(R.color.six));
//                                        //tv3.setTextColor(R.color.black);
//                                        tableRow11.addView(tv6);


                                        final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                        tv7.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                        tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                                        tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                        //tv3.setPadding(0,0,10,0);
                                        tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);

                                        String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                        final String number = tvx.toString();
                                        float newmul = Float.parseFloat(number);
                                        //final float in = Float.parseFloat(cursor.getString(4));
                                        String multiply = String.valueOf(newmul * Float.parseFloat(modiprice));
                                        //newmul = Integer.parseInt(multiply);
                                        //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                        //row.addView(tv3);


                                        final TextView tv8 = new TextView(Refundswise_Saleslist.this);
                                        tv8.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                        //tv.setBackgroundResource(R.drawable.cell_shape);
                                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                        //tv3.setPadding(0, 0, 10, 0);
//                                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);

                                        final String numberr = tvx.toString();
                                        float newmulr = Float.parseFloat(numberr);
                                        //final float in = Float.parseFloat(cursor.getString(4));
                                        String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                        //newmul = Integer.parseInt(multiply);
                                        tv8.setText(moditotal);
                                        tableRow11.addView(tv8);

                                        tableLayout1.addView(tableRow11);


                                        tableLayout_r.addView(row);

                                        tableLayout_r.addView(tableLayout1);

//                                        tableLayout_r.addView(tableLayout_disc);

                                        //tableLayouttreturn.addView(tableLayout21);
                                        // }

                                    }
                                }while (cursor.moveToNext());

                            }
                        }
                        //}while (ccursorreturn1.moveToNext());
                    }

                }



                TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
                tableLayout1.removeAllViews();

                TableLayout tableLayout2 = (TableLayout) dialog.findViewById(R.id.lytpedidoo);
                tableLayout2.removeAllViews();


//                Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                if (ccursor.moveToFirst()) {
//
//                    do {
//                        String name = ccursor.getString(10);
//                        String value = ccursor.getString(9);
//                        String pq = ccursor.getString(4);
//                        String itna = ccursor.getString(1);
//
//                        TextView v = new TextView(Refundswise_Saleslist.this);
//                        v.setText(value);
//
//                        TextView v1 = new TextView(Refundswise_Saleslist.this);
//                        v1.setText(name);
//                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                                || v.getText().toString().equals("")) {
//
//                        }else {
//                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                            row.setLayoutParams(new TableLayout.LayoutParams(
//                                    TableRow.LayoutParams.MATCH_PARENT,
//                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                            TextView tvv = new TextView(Refundswise_Saleslist.this);
//                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tvv.setGravity(Gravity.START);
//                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            tvv.setText(name);
//
//                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tv1.setGravity(Gravity.START);
//                            float vbn = Float.parseFloat(value);
//                            String bvn = String.format("%.2f", vbn);
//                            tv1.setText(value);
//                            String value1 = tv1.getText().toString();
//
//                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                            tv2.append(name);
//                            tv2.setPadding(0, 0, 20, 0);
//                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(tv2);
//
//                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(textView1);
//
//                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
//                            String tota1 = String.format("%.2f", tota);
//                            tv3.setText(String.valueOf(tota1));
//                            row.addView(tv3);
//
//                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            String value2 = tv3.getText().toString();
//
//                            tableLayout1.addView(row);
//                        }
//                    } while (ccursor.moveToNext());
//                }
//
//                Cursor ccursor2 = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                if (ccursor2.moveToFirst()) {
//
//                    do {
//                        String name = ccursor2.getString(35);
//                        String value = ccursor2.getString(36);
//                        String pq = ccursor2.getString(4);
//                        String itna = ccursor2.getString(1);
//
//                        TextView v = new TextView(Refundswise_Saleslist.this);
//                        v.setText(value);
//
//                        TextView v1 = new TextView(Refundswise_Saleslist.this);
//                        v1.setText(name);
//                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                                || v.getText().toString().equals("")) {
//
//                        }else {
//                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                            row.setLayoutParams(new TableLayout.LayoutParams(
//                                    TableRow.LayoutParams.MATCH_PARENT,
//                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                            TextView tvv = new TextView(Refundswise_Saleslist.this);
//                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tvv.setGravity(Gravity.START);
//                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            tvv.setText(name);
//
//                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tv1.setGravity(Gravity.START);
//                            float vbn = Float.parseFloat(value);
//                            String bvn = String.format("%.2f", vbn);
//                            tv1.setText(value);
//                            String value1 = tv1.getText().toString();
//
//                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                            tv2.append(name);
//                            tv2.setPadding(0, 0, 20, 0);
//                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(tv2);
//
//                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(textView1);
//
//                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
//                            String tota1 = String.format("%.2f", tota);
//                            tv3.setText(String.valueOf(tota1));
//                            row.addView(tv3);
//
//                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            String value2 = tv3.getText().toString();
//
//                            tableLayout1.addView(row);
//                        }
//                    } while (ccursor2.moveToNext());
//                }
//
//                Cursor ccursor3 = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                if (ccursor3.moveToFirst()) {
//
//                    do {
//                        String name = ccursor3.getString(37);
//                        String value = ccursor3.getString(38);
//                        String pq = ccursor3.getString(4);
//                        String itna = ccursor3.getString(1);
//
//                        TextView v = new TextView(Refundswise_Saleslist.this);
//                        v.setText(value);
//
//                        TextView v1 = new TextView(Refundswise_Saleslist.this);
//                        v1.setText(name);
//                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                                || v.getText().toString().equals("")) {
//
//                        }else {
//                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                            row.setLayoutParams(new TableLayout.LayoutParams(
//                                    TableRow.LayoutParams.MATCH_PARENT,
//                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                            TextView tvv = new TextView(Refundswise_Saleslist.this);
//                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tvv.setGravity(Gravity.START);
//                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            tvv.setText(name);
//
//                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tv1.setGravity(Gravity.START);
//                            float vbn = Float.parseFloat(value);
//                            String bvn = String.format("%.2f", vbn);
//                            tv1.setText(value);
//                            String value1 = tv1.getText().toString();
//
//                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                            tv2.append(name);
//                            tv2.setPadding(0, 0, 20, 0);
//                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(tv2);
//
//                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(textView1);
//
//                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
//                            String tota1 = String.format("%.2f", tota);
//                            tv3.setText(String.valueOf(tota1));
//                            row.addView(tv3);
//
//                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            String value2 = tv3.getText().toString();
//
//                            tableLayout1.addView(row);
//                        }
//                    } while (ccursor3.moveToNext());
//                }
//
//                Cursor ccursor4 = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                if (ccursor4.moveToFirst()) {
//
//                    do {
//                        String name = ccursor4.getString(39);
//                        String value = ccursor4.getString(40);
//                        String pq = ccursor4.getString(4);
//                        String itna = ccursor4.getString(1);
//
//                        TextView v = new TextView(Refundswise_Saleslist.this);
//                        v.setText(value);
//
//                        TextView v1 = new TextView(Refundswise_Saleslist.this);
//                        v1.setText(name);
//                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                                || v.getText().toString().equals("")) {
//
//                        }else {
//                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                            row.setLayoutParams(new TableLayout.LayoutParams(
//                                    TableRow.LayoutParams.MATCH_PARENT,
//                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                            TextView tvv = new TextView(Refundswise_Saleslist.this);
//                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tvv.setGravity(Gravity.START);
//                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            tvv.setText(name);
//
//                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tv1.setGravity(Gravity.START);
//                            float vbn = Float.parseFloat(value);
//                            String bvn = String.format("%.2f", vbn);
//                            tv1.setText(value);
//                            String value1 = tv1.getText().toString();
//
//                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                            tv2.append(name);
//                            tv2.setPadding(0, 0, 20, 0);
//                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(tv2);
//
//                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(textView1);
//
//                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
//                            String tota1 = String.format("%.2f", tota);
//                            tv3.setText(String.valueOf(tota1));
//                            row.addView(tv3);
//
//                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            String value2 = tv3.getText().toString();
//
//                            tableLayout1.addView(row);
//                        }
//                    } while (ccursor4.moveToNext());
//                }
//
//                Cursor ccursor5 = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                if (ccursor5.moveToFirst()) {
//
//                    do {
//                        String name = ccursor5.getString(41);
//                        String value = ccursor5.getString(42);
//                        String pq = ccursor5.getString(4);
//                        String itna = ccursor5.getString(1);
//
//                        TextView v = new TextView(Refundswise_Saleslist.this);
//                        v.setText(value);
//
//                        TextView v1 = new TextView(Refundswise_Saleslist.this);
//                        v1.setText(name);
//                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                                || v.getText().toString().equals("")) {
//
//                        }else {
//                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                            row.setLayoutParams(new TableLayout.LayoutParams(
//                                    TableRow.LayoutParams.MATCH_PARENT,
//                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                            TextView tvv = new TextView(Refundswise_Saleslist.this);
//                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tvv.setGravity(Gravity.START);
//                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            tvv.setText(name);
//
//                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tv1.setGravity(Gravity.START);
//                            float vbn = Float.parseFloat(value);
//                            String bvn = String.format("%.2f", vbn);
//                            tv1.setText(value);
//                            String value1 = tv1.getText().toString();
//
//                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                            tv2.append(name);
//                            tv2.setPadding(0, 0, 20, 0);
//                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(tv2);
//
//                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(textView1);
//
//                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
//                            String tota1 = String.format("%.2f", tota);
//                            tv3.setText(String.valueOf(tota1));
//                            row.addView(tv3);
//
//                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            String value2 = tv3.getText().toString();
//
//                            tableLayout1.addView(row);
//                        }
//                    } while (ccursor5.moveToNext());
//                }
//
////                Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
////                if (ccursortaxreturn.moveToFirst()) {
////
////                    do {
////                        String name = ccursortaxreturn.getString(10);
////                        String value = ccursortaxreturn.getString(9);
////                        String pq = ccursortaxreturn.getString(4);
////                        String itna = ccursortaxreturn.getString(1);
////
////                        TextView v = new TextView(Refundswise_Saleslist.this);
////                        v.setText(value);
////
////                        TextView v1 = new TextView(Refundswise_Saleslist.this);
////                        v1.setText(name);
////                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
////                                || v.getText().toString().equals("")) {
////
////                        } else {
////                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
////                            row.setLayoutParams(new TableLayout.LayoutParams(
////                                    TableRow.LayoutParams.MATCH_PARENT,
////                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
////
////                            TextView tvv = new TextView(Refundswise_Saleslist.this);
////                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tvv.setGravity(Gravity.START);
////                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tvv.setText(name);
////
////                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
////                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tv1.setGravity(Gravity.START);
////                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tv1.setText(value);
////                            String value1 = tv1.getText().toString();
////
////                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
////                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
////                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
////                            tv2.append(name + "@" + value + "%");
////                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv2.setPadding(0, 0, 20, 0);
////                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(tv2);
////
////                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
////                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(textView1);
////
////                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
////                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
////                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
////                            float tota = mul;
////                            String tota1 = String.format("%.2f", tota);
////                            tv3.setText(String.valueOf(tota));
////                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////
////                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            String value2 = tv3.getText().toString();
////                            row.addView(tv3);
////
////                            tableLayout1.addView(row);
////                        }
////                    } while (ccursortaxreturn.moveToNext());
////                }
////
////                Cursor ccursortaxreturn2 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
////                if (ccursortaxreturn2.moveToFirst()) {
////
////                    do {
////                        String name = ccursortaxreturn2.getString(30);
////                        String value = ccursortaxreturn2.getString(31);
////                        String pq = ccursortaxreturn2.getString(4);
////                        String itna = ccursortaxreturn2.getString(1);
////
////                        TextView v = new TextView(Refundswise_Saleslist.this);
////                        v.setText(value);
////
////                        TextView v1 = new TextView(Refundswise_Saleslist.this);
////                        v1.setText(name);
////                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
////                                || v.getText().toString().equals("")) {
////
////                        } else {
////                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
////                            row.setLayoutParams(new TableLayout.LayoutParams(
////                                    TableRow.LayoutParams.MATCH_PARENT,
////                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
////
////                            TextView tvv = new TextView(Refundswise_Saleslist.this);
////                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tvv.setGravity(Gravity.START);
////                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tvv.setText(name);
////
////                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
////                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tv1.setGravity(Gravity.START);
////                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tv1.setText(value);
////                            String value1 = tv1.getText().toString();
////
////                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
////                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
////                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
////                            tv2.append(name + "@" + value + "%");
////                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv2.setPadding(0, 0, 20, 0);
////                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(tv2);
////
////                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
////                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(textView1);
////
////                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
////                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
////                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
////                            float tota = mul;
////                            String tota1 = String.format("%.2f", tota);
////                            tv3.setText(String.valueOf(tota));
////                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////
////                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            String value2 = tv3.getText().toString();
////                            row.addView(tv3);
////
////                            tableLayout1.addView(row);
////                        }
////                    } while (ccursortaxreturn2.moveToNext());
////                }
////
////                Cursor ccursortaxreturn3 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
////                if (ccursortaxreturn3.moveToFirst()) {
////
////                    do {
////                        String name = ccursortaxreturn3.getString(32);
////                        String value = ccursortaxreturn3.getString(33);
////                        String pq = ccursortaxreturn3.getString(4);
////                        String itna = ccursortaxreturn3.getString(1);
////
////                        TextView v = new TextView(Refundswise_Saleslist.this);
////                        v.setText(value);
////
////                        TextView v1 = new TextView(Refundswise_Saleslist.this);
////                        v1.setText(name);
////                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
////                                || v.getText().toString().equals("")) {
////
////                        } else {
////                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
////                            row.setLayoutParams(new TableLayout.LayoutParams(
////                                    TableRow.LayoutParams.MATCH_PARENT,
////                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
////
////                            TextView tvv = new TextView(Refundswise_Saleslist.this);
////                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tvv.setGravity(Gravity.START);
////                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tvv.setText(name);
////
////                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
////                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tv1.setGravity(Gravity.START);
////                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tv1.setText(value);
////                            String value1 = tv1.getText().toString();
////
////                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
////                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
////                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
////                            tv2.append(name + "@" + value + "%");
////                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv2.setPadding(0, 0, 20, 0);
////                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(tv2);
////
////                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
////                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(textView1);
////
////                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
////                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
////                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
////                            float tota = mul;
////                            String tota1 = String.format("%.2f", tota);
////                            tv3.setText(String.valueOf(tota));
////                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////
////                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            String value2 = tv3.getText().toString();
////                            row.addView(tv3);
////
////                            tableLayout1.addView(row);
////                        }
////                    } while (ccursortaxreturn3.moveToNext());
////                }
////
////                Cursor ccursortaxreturn4 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
////                if (ccursortaxreturn4.moveToFirst()) {
////
////                    do {
////                        String name = ccursortaxreturn4.getString(34);
////                        String value = ccursortaxreturn4.getString(35);
////                        String pq = ccursortaxreturn4.getString(4);
////                        String itna = ccursortaxreturn4.getString(1);
////
////                        TextView v = new TextView(Refundswise_Saleslist.this);
////                        v.setText(value);
////
////                        TextView v1 = new TextView(Refundswise_Saleslist.this);
////                        v1.setText(name);
////                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
////                                || v.getText().toString().equals("")) {
////
////                        } else {
////                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
////                            row.setLayoutParams(new TableLayout.LayoutParams(
////                                    TableRow.LayoutParams.MATCH_PARENT,
////                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
////
////                            TextView tvv = new TextView(Refundswise_Saleslist.this);
////                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tvv.setGravity(Gravity.START);
////                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tvv.setText(name);
////
////                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
////                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tv1.setGravity(Gravity.START);
////                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tv1.setText(value);
////                            String value1 = tv1.getText().toString();
////
////                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
////                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
////                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
////                            tv2.append(name + "@" + value + "%");
////                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv2.setPadding(0, 0, 20, 0);
////                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(tv2);
////
////                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
////                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(textView1);
////
////                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
////                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
////                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
////                            float tota = mul;
////                            String tota1 = String.format("%.2f", tota);
////                            tv3.setText(String.valueOf(tota));
////                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////
////                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            String value2 = tv3.getText().toString();
////                            row.addView(tv3);
////
////                            tableLayout1.addView(row);
////                        }
////                    } while (ccursortaxreturn4.moveToNext());
////                }
////
////                Cursor ccursortaxreturn5 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
////                if (ccursortaxreturn5.moveToFirst()) {
////
////                    do {
////                        String name = ccursortaxreturn5.getString(36);
////                        String value = ccursortaxreturn5.getString(37);
////                        String pq = ccursortaxreturn5.getString(4);
////                        String itna = ccursortaxreturn5.getString(1);
////
////                        TextView v = new TextView(Refundswise_Saleslist.this);
////                        v.setText(value);
////
////                        TextView v1 = new TextView(Refundswise_Saleslist.this);
////                        v1.setText(name);
////                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
////                                || v.getText().toString().equals("")) {
////
////                        } else {
////                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
////                            row.setLayoutParams(new TableLayout.LayoutParams(
////                                    TableRow.LayoutParams.MATCH_PARENT,
////                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
////
////                            TextView tvv = new TextView(Refundswise_Saleslist.this);
////                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tvv.setGravity(Gravity.START);
////                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tvv.setText(name);
////
////                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
////                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                            tv1.setGravity(Gravity.START);
////                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            tv1.setText(value);
////                            String value1 = tv1.getText().toString();
////
////                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
////                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
////                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
////                            tv2.append(name + "@" + value + "%");
////                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                            tv2.setPadding(0, 0, 20, 0);
////                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(tv2);
////
////                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
////                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            row.addView(textView1);
////
////                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
////                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
////                            float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
////                            float tota = mul;
////                            String tota1 = String.format("%.2f", tota);
////                            tv3.setText(String.valueOf(tota));
////                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////
////                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
////                            String value2 = tv3.getText().toString();
////                            row.addView(tv3);
////
////                            tableLayout1.addView(row);
////                        }
////                    } while (ccursortaxreturn5.moveToNext());
////                }
//
//
//                ArrayList<String> groupList = new ArrayList<String>();
//
//                float sum_p = 0;
//                for (int i = 0; i < tableLayout1.getChildCount(); i++) {
//                    TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
//                    TextView mTextView = (TextView) mRow.getChildAt(0);
////                                Toast.makeText(Refundswise_Saleslist.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();
//
//                    if (groupList.contains(mTextView.getText().toString())) {
//
//                    }else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        sum_p = 0;
//                        for (int j = 0; j < tableLayout1.getChildCount(); j++) {
//                            TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
//                            mTextView1 = (TextView) mRow1.getChildAt(0);
//                            mTextView2 = (TextView) mRow1.getChildAt(2);
//                            if (groupList.contains(mTextView.getText().toString())) {
//                                if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                    sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(Refundswise_Saleslist.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                                }
//                            } else {
//                                if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                    groupList.add(mTextView.getText().toString());
//                                    sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(Refundswise_Saleslist.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                                }
//                            }
//                        }
////                        Toast.makeText(Refundswise_Saleslist.this, "aa "+mTextView.getText().toString() +" "+sum_p, Toast.LENGTH_LONG).show();
//
//                        String mod1 = mTextView.getText().toString() + "" + String.format("%.2f", sum_p);
//                        String mod12 = mTextView.getText().toString();
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                        //tvv.setTypeface(Typeface.MONOSPACE);
//                        tvv.setText(mod12);
//                        row.addView(tvv);
//
//                        TextView tvv1 = new TextView(Refundswise_Saleslist.this);
//                        tvv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.5f));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv1.setGravity(Gravity.START);
//                        tvv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                        //tvv.setTypeface(Typeface.MONOSPACE);
//                        tvv1.setText("");
//                        row.addView(tvv1);
//
//                        TextView tvv2 = new TextView(Refundswise_Saleslist.this);
//                        tvv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.4f));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv2.setGravity(Gravity.END);
//                        tvv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                        //tvv.setTypeface(Typeface.MONOSPACE);
//                        tvv2.setText(String.format("%.2f", sum_p));
//                        row.addView(tvv2);
//
//                        tableLayout2.addView(row);
//
////                        String match = "@";
////                        int aposition = mTextView.getText().toString().indexOf(match);
//                        String mod2 = mTextView.getText().toString();
////                        Toast.makeText(Refundswise_Saleslist.this, " "+mod2, Toast.LENGTH_LONG).show();
//                        Cursor ccursor6 = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnumb + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                        if (ccursor6.moveToFirst()) {
//                            String hsn = ccursor6.getString(34);
//
//                            TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
//                            hsn_hsn.setText(hsn);
//
//                            if (hsn_hsn.getText().toString().equals("")) {
//                            } else {
//
//                            }
//                        }
//
//                    }
//                }
//
//
//                String phon = "0";
//                Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnumb+"'", null);
//                if (caddress1.moveToFirst()) {
//                    phon = caddress1.getString(2);
//                }
//
//                TextView tvvs = new TextView(Refundswise_Saleslist.this);
//                tvvs.setText(phon);
//
//
//                Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
//                if (us_name1.moveToLast()){
////                    Toast.makeText(Refundswise_Saleslist.this, "user id there", Toast.LENGTH_LONG).show();
//                    String na53 = us_name1.getString(53);
//                    String na38 = us_name1.getString(38);
//                    String na39 = us_name1.getString(39);
//                    String na40 = us_name1.getString(40);
//                    String na41 = us_name1.getString(41);
//                    String na42 = us_name1.getString(42);
//                    String na43 = us_name1.getString(43);
//                    String na44 = us_name1.getString(44);
//                    String na45 = us_name1.getString(45);
//                    String na46 = us_name1.getString(46);
//                    String na47 = us_name1.getString(47);
//                    String na48 = us_name1.getString(48);
//                    String na49 = us_name1.getString(49);
//                    String na50 = us_name1.getString(50);
//                    String na51 = us_name1.getString(51);
//                    String na52 = us_name1.getString(52);
//                    String na38_value = us_name1.getString(54);
//                    String na39_value = us_name1.getString(55);
//                    String na40_value = us_name1.getString(56);
//                    String na41_value = us_name1.getString(57);
//                    String na42_value = us_name1.getString(58);
//                    String na43_value = us_name1.getString(59);
//                    String na44_value = us_name1.getString(60);
//                    String na45_value = us_name1.getString(61);
//                    String na46_value = us_name1.getString(62);
//                    String na47_value = us_name1.getString(63);
//                    String na48_value = us_name1.getString(64);
//                    String na49_value = us_name1.getString(65);
//                    String na50_value = us_name1.getString(66);
//                    String na51_value = us_name1.getString(67);
//                    String na52_value = us_name1.getString(68);
//
//                    String proc = us_name1.getString(69);
//
//                    TextView hid = new TextView(Refundswise_Saleslist.this);
//                    hid.setText(proc);
//
//                    if (hid.getText().toString().equals("off")){
//                        Cursor cursorr = null;
//                        if (paymenttypee.getText().toString().equals("  Dine-in") || paymenttypee.getText().toString().equals("  General") || paymenttypee.getText().toString().equals("  Others")){
//                            cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                        }
//                        if (paymenttypee.getText().toString().equals("  Takeaway") || paymenttypee.getText().toString().equals("  Main")){
//                            cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                        }
//                        if (paymenttypee.getText().toString().equals("  Home delivery")){
//                            cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                        }
////            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
//                        if (cursorr.moveToFirst()) {
//
//                            do {
//
//                                String name = cursorr.getString(1);
//                                String value = cursorr.getString(2);
//
//                                final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                                row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
//                                        TableRow.LayoutParams.WRAP_CONTENT));
//                                row.setGravity(Gravity.CENTER);
//
//                                TableRow.LayoutParams lp, lp1, lp2;
//
////                                final TextView tv = new TextView(Refundswise_Saleslist.this);
////                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                tv.setTextSize(16);
////                                tv.setTypeface(Typeface.MONOSPACE);
////                                row.addView(tv);
//
//                                TextView tvv = new TextView(Refundswise_Saleslist.this);
//                                tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                                //tv.setBackgroundResource(R.drawable.cell_shape);
//                                tvv.setGravity(Gravity.START);
//                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                                //tvv.setTypeface(Typeface.MONOSPACE);
//                                tvv.setText(name);
//
//                                TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                                tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                                tv1.setGravity(Gravity.START);
//                                //tv1.setTypeface(Typeface.MONOSPACE);
//                                float vbn = Float.parseFloat(value);
//                                String bvn = String.format("%.2f", vbn);
//                                tv1.setText(value);
//                                String value1 = tv1.getText().toString();
//
//                                TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                                //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
//                                //tv2.setLayoutParams(lp);
//                                tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                                //tv2.setTypeface(Typeface.MONOSPACE);
//                                tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                                tv2.append(name + " @ " + bvn + "%");
//                                tv2.setPadding(0, 0, 20, 0);
//                                tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                                row.addView(tv2);
//
//                                TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                textView1.setTextSize(16);
//                                row.addView(textView1);
//
//                                TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
////                tv3.setLayoutParams(lp2);
//                                tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                                //tv3.setPadding(0,0,10,0);
//                                //tv3.setTypeface(Typeface.MONOSPACE);
//                                tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                                float tota = mul;
//                                String tota1 = String.format("%.2f", tota);
//                                tv3.setText(String.valueOf(tota1));
//                                row.addView(tv3);
//
//
//                                tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                                String value2 = tv3.getText().toString();
//
//                                tableLayout1.addView(row);
//
//
//                            } while (cursorr.moveToNext());
//                        }
//                    }else {
//                        for (int i2 = 38; i2 < 53; i2++) {
//
////                                tv33.setText("0.0");
////                                for (int i1 = 54; i1<69; i1++) {
//                            int i1 = 0;
//                            if (i2 == 38) {
//                                i1 = 54;
//                            }
//                            if (i2 == 39) {
//                                i1 = 55;
//                            }
//                            if (i2 == 40) {
//                                i1 = 56;
//                            }
//                            if (i2 == 41) {
//                                i1 = 57;
//                            }
//                            if (i2 == 42) {
//                                i1 = 58;
//                            }
//                            if (i2 == 43) {
//                                i1 = 59;
//                            }
//                            if (i2 == 44) {
//                                i1 = 60;
//                            }
//                            if (i2 == 45) {
//                                i1 = 61;
//                            }
//                            if (i2 == 46) {
//                                i1 = 62;
//                            }
//                            if (i2 == 47) {
//                                i1 = 63;
//                            }
//                            if (i2 == 48) {
//                                i1 = 64;
//                            }
//                            if (i2 == 49) {
//                                i1 = 65;
//                            }
//                            if (i2 == 50) {
//                                i1 = 66;
//                            }
//                            if (i2 == 51) {
//                                i1 = 67;
//                            }
//                            if (i2 == 52) {
//                                i1 = 68;
//                            }
//
//
//                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                            row.setLayoutParams(new TableLayout.LayoutParams(
//                                    TableRow.LayoutParams.MATCH_PARENT,
//                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                            TableRow.LayoutParams lp, lp1, lp2;
//
//                            TextView tv = new TextView(Refundswise_Saleslist.this);
//                            tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tv.setGravity(Gravity.START);
//                            tv.setTextSize(15);
//                            //text = cursor.getString(1);
////                String v = na;
//
//                            tv.setText(us_name1.getString(i2));
//
//
//                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tv1.setGravity(Gravity.START);
//                            //text = cursor.getString(1);
//                            tv1.setText(us_name1.getString(i1));
//                            String value1 = "0";
//                            if (tv1.getText().toString().equals("")) {
//
//                            } else {
//                                value1 = tv1.getText().toString();
//                            }
//
//
//                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
////                                tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                            tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
////                                tv2.setPadding(0, 0, 20, 0);
////                                tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                            row.addView(tv2);
////                    Toast.makeText(Refundswise_Saleslist.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();
//
//                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
////                                textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                            row.addView(textView1);
//
////                    Toast.makeText(Refundswise_Saleslist.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();
//
//                            TextView tv33 = new TextView(Refundswise_Saleslist.this);
//                            tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
////                                tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                            float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
////                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
////                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
////                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
//                            float tota = mul;
//                            tv33.setTextSize(16);
//                            String tota1 = String.format("%.2f", tota);
//                            tv33.setText(String.valueOf(tota1));
//                            //tv3.setTextColor(Color.parseColor("#000000"));
//                            //row.addView(tv3);
//
//
//                            row.addView(tv33);
//
//                            String value2 = tv33.getText().toString();
////                            Toast.makeText(Refundswise_Saleslist.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();
//                            if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
//                                    || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {
//
//                            } else {
//                                tableLayout1.addView(row);
//                            }
//
//                        }
//                    }
//
//                }else {
////                    Toast.makeText(Refundswise_Saleslist.this, "user id not there", Toast.LENGTH_LONG).show();
//                    Cursor cursorr = null;
//                    if (paymenttypee.getText().toString().equals("  Dine-in") || paymenttypee.getText().toString().equals("  General") || paymenttypee.getText().toString().equals("  Others")){
//                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                    }
//                    if (paymenttypee.getText().toString().equals("  Takeaway") || paymenttypee.getText().toString().equals("  Main")){
//                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                    }
//                    if (paymenttypee.getText().toString().equals("  Home delivery")){
//                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                    }
////            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
//                    if (cursorr.moveToFirst()) {
//
//                        do {
//
//                            String name = cursorr.getString(1);
//                            String value = cursorr.getString(2);
//
//                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                            row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
//                                    TableRow.LayoutParams.WRAP_CONTENT));
//                            row.setGravity(Gravity.CENTER);
//
//                            TableRow.LayoutParams lp, lp1, lp2;
//
////                                final TextView tv = new TextView(Refundswise_Saleslist.this);
////                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                tv.setTextSize(16);
////                                tv.setTypeface(Typeface.MONOSPACE);
////                                row.addView(tv);
//
//                            TextView tvv = new TextView(Refundswise_Saleslist.this);
//                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                            tvv.setGravity(Gravity.START);
//                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            //tvv.setTypeface(Typeface.MONOSPACE);
//                            tvv.setText(name);
//
//                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                            tv1.setGravity(Gravity.START);
//                            //tv1.setTypeface(Typeface.MONOSPACE);
//                            float vbn = Float.parseFloat(value);
//                            String bvn = String.format("%.2f", vbn);
//                            tv1.setText(value);
//                            String value1 = tv1.getText().toString();
//
//                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                            //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
//                            //tv2.setLayoutParams(lp);
//                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                            //tv2.setTypeface(Typeface.MONOSPACE);
//                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                            tv2.append(name + " @ " + bvn + "%");
//                            tv2.setPadding(0, 0, 20, 0);
//                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            row.addView(tv2);
//
//                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                            textView1.setTextSize(16);
//                            row.addView(textView1);
//
//                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
////                tv3.setLayoutParams(lp2);
//                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                            //tv3.setPadding(0,0,10,0);
//                            //tv3.setTypeface(Typeface.MONOSPACE);
//                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                            float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                            float tota = mul;
//                            String tota1 = String.format("%.2f", tota);
//                            tv3.setText(String.valueOf(tota1));
//                            row.addView(tv3);
//
//
//                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                            String value2 = tv3.getText().toString();
//
//                            tableLayout1.addView(row);
//
//
//                        } while (cursorr.moveToNext());
//                    }
//                }

                Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor.moveToFirst()) {

                    do {
                        String name = ccursor.getString(10);
                        String value = ccursor.getString(9);
                        String pq = ccursor.getString(4);
                        String itna = ccursor.getString(1);

                        TextView v = new TextView(Refundswise_Saleslist.this);
                        v.setText(value);

                        TextView v1 = new TextView(Refundswise_Saleslist.this);
                        v1.setText(name);
                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                || v.getText().toString().equals("") || v1.getText().toString().equals("") || v.getText().toString().equals("0.00")) {

                        }else {
                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            TextView tvv = new TextView(Refundswise_Saleslist.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tvv.setTypeface(Typeface.MONOSPACE);
                            tvv.setText(name);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            //tv1.setTypeface(Typeface.MONOSPACE);
                            float vbn = Float.parseFloat(value);
                            String bvn = String.format(Locale.US,"%.2f", vbn);
                            tv1.setText(value);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                            tv2.append(name);
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(tv2);

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                            String tota1 = String.format(Locale.US,"%.2f", tota);
                            tv3.setText(String.valueOf(tota1));
                            row.addView(tv3);

                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            String value2 = tv3.getText().toString();

                            tableLayout1.addView(row);
                        }
                    } while (ccursor.moveToNext());
                }
                ccursor.close();

                Cursor ccursor2 = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor2.moveToFirst()) {

                    do {
                        String name = ccursor2.getString(35);
                        String value = ccursor2.getString(36);
                        String pq = ccursor2.getString(4);
                        String itna = ccursor2.getString(1);

                        TextView v = new TextView(Refundswise_Saleslist.this);
                        v.setText(value);

                        TextView v1 = new TextView(Refundswise_Saleslist.this);
                        v1.setText(name);
                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                || v.getText().toString().equals("") || v1.getText().toString().equals("") || v.getText().toString().equals("0.00")) {

                        }else {
                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            TextView tvv = new TextView(Refundswise_Saleslist.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tvv.setTypeface(Typeface.MONOSPACE);
                            tvv.setText(name);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            //tv1.setTypeface(Typeface.MONOSPACE);
                            float vbn = Float.parseFloat(value);
                            String bvn = String.format(Locale.US,"%.2f", vbn);
                            tv1.setText(value);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                            tv2.append(name);
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(tv2);

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
                            String tota1 = String.format(Locale.US,"%.2f", tota);
                            //tv3.setPadding(0,0,10,0);
                            tv3.setText(String.valueOf(tota1));
                            row.addView(tv3);

                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            String value2 = tv3.getText().toString();

                            tableLayout1.addView(row);
                        }
                    } while (ccursor2.moveToNext());
                }
                ccursor2.close();

                Cursor ccursor3 = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor3.moveToFirst()) {

                    do {
                        String name = ccursor3.getString(37);
                        String value = ccursor3.getString(38);
                        String pq = ccursor3.getString(4);
                        String itna = ccursor3.getString(1);

                        TextView v = new TextView(Refundswise_Saleslist.this);
                        v.setText(value);

                        TextView v1 = new TextView(Refundswise_Saleslist.this);
                        v1.setText(name);
                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                || v.getText().toString().equals("") || v1.getText().toString().equals("") || v.getText().toString().equals("0.00")) {

                        }else {
                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            TextView tvv = new TextView(Refundswise_Saleslist.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tvv.setTypeface(Typeface.MONOSPACE);
                            tvv.setText(name);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            //tv1.setTypeface(Typeface.MONOSPACE);
                            float vbn = Float.parseFloat(value);
                            String bvn = String.format(Locale.US,"%.2f", vbn);
                            tv1.setText(value);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                            tv2.append(name);
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(tv2);

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
                            String tota1 = String.format(Locale.US,"%.2f", tota);
                            //tv3.setPadding(0,0,10,0);
                            tv3.setText(String.valueOf(tota1));
                            row.addView(tv3);

                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            String value2 = tv3.getText().toString();

                            tableLayout1.addView(row);
                        }
                    } while (ccursor3.moveToNext());
                }
                ccursor3.close();

                Cursor ccursor4 = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor4.moveToFirst()) {

                    do {
                        String name = ccursor4.getString(39);
                        String value = ccursor4.getString(40);
                        String pq = ccursor4.getString(4);
                        String itna = ccursor4.getString(1);

                        TextView v = new TextView(Refundswise_Saleslist.this);
                        v.setText(value);

                        TextView v1 = new TextView(Refundswise_Saleslist.this);
                        v1.setText(name);
                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                || v.getText().toString().equals("") || v1.getText().toString().equals("") || v.getText().toString().equals("0.00")) {

                        }else {
                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            TextView tvv = new TextView(Refundswise_Saleslist.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tvv.setTypeface(Typeface.MONOSPACE);
                            tvv.setText(name);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            //tv1.setTypeface(Typeface.MONOSPACE);
                            float vbn = Float.parseFloat(value);
                            String bvn = String.format(Locale.US,"%.2f", vbn);
                            tv1.setText(value);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                            tv2.append(name);
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(tv2);

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
                            String tota1 = String.format(Locale.US,"%.2f", tota);
                            //tv3.setPadding(0,0,10,0);
                            tv3.setText(String.valueOf(tota1));
                            row.addView(tv3);

                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            String value2 = tv3.getText().toString();

                            tableLayout1.addView(row);
                        }
                    } while (ccursor4.moveToNext());
                }
                ccursor4.close();

                Cursor ccursor5 = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor5.moveToFirst()) {

                    do {
                        String name = ccursor5.getString(41);
                        String value = ccursor5.getString(42);
                        String pq = ccursor5.getString(4);
                        String itna = ccursor5.getString(1);

                        TextView v = new TextView(Refundswise_Saleslist.this);
                        v.setText(value);

                        TextView v1 = new TextView(Refundswise_Saleslist.this);
                        v1.setText(name);
                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                || v.getText().toString().equals("") || v1.getText().toString().equals("") || v.getText().toString().equals("0.00")) {

                        }else {
                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            TextView tvv = new TextView(Refundswise_Saleslist.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tvv.setTypeface(Typeface.MONOSPACE);
                            tvv.setText(name);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            //tv1.setTypeface(Typeface.MONOSPACE);
                            float vbn = Float.parseFloat(value);
                            String bvn = String.format(Locale.US,"%.2f", vbn);
                            tv1.setText(value);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                            tv2.append(name);
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(tv2);

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                            float tota = mul;
                            String tota1 = String.format(Locale.US,"%.2f", tota);
                            //tv3.setPadding(0,0,10,0);
                            tv3.setText(String.valueOf(tota1));
                            row.addView(tv3);

                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            String value2 = tv3.getText().toString();

                            tableLayout1.addView(row);
                        }
                    } while (ccursor5.moveToNext());
                }
                ccursor5.close();

                ArrayList<String> groupList = new ArrayList<String>();

                float sum_p = 0;
                for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                    TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                    TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(Refundswise_Saleslist.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

                    if (groupList.contains(mTextView.getText().toString())) {

                    }else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        sum_p = 0;
                        for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                            TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                            mTextView1 = (TextView) mRow1.getChildAt(0);
                            mTextView2 = (TextView) mRow1.getChildAt(2);
                            if (groupList.contains(mTextView.getText().toString())) {
                                if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                    sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                                }
                            } else {
                                if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                    groupList.add(mTextView.getText().toString());
                                    sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                                }
                            }
                        }
//                        Toast.makeText(Refundswise_Saleslist.this, "aa "+mTextView.getText().toString() +" "+sum_p, Toast.LENGTH_LONG).show();

                        String mod1 = mTextView.getText().toString() + "" + String.format("%.2f", sum_p);
                        String mod12 = mTextView.getText().toString();

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                        //tvv.setTypeface(Typeface.MONOSPACE);
                        tvv.setText(mod12);
                        row.addView(tvv);

                        TextView tvv1 = new TextView(Refundswise_Saleslist.this);
                        tvv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.5f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv1.setGravity(Gravity.START);
                        tvv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                        //tvv.setTypeface(Typeface.MONOSPACE);
                        tvv1.setText("");
                        row.addView(tvv1);

                        TextView tvv2 = new TextView(Refundswise_Saleslist.this);
                        tvv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.4f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv2.setGravity(Gravity.END);
                        tvv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                        //tvv.setTypeface(Typeface.MONOSPACE);
                        tvv2.setText(String.format("%.2f", sum_p));
                        row.addView(tvv2);

                        tableLayout2.addView(row);

//                        String match = "@";
//                        int aposition = mTextView.getText().toString().indexOf(match);
                        String mod2 = mTextView.getText().toString();
//                        Toast.makeText(Refundswise_Saleslist.this, " "+mod2, Toast.LENGTH_LONG).show();
                        Cursor ccursor6 = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnumb + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor6.moveToFirst()) {
                            String hsn = ccursor6.getString(34);

                            TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {

                            }
                        }

                    }
                }

                db1 = Refundswise_Saleslist.this.openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);



                String phon = "0";
                Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnumb+"'", null);
                if (caddress1.moveToFirst()) {
                    phon = caddress1.getString(2);
                }
                caddress1.close();

                TextView tvvs = new TextView(Refundswise_Saleslist.this);
                tvvs.setText(phon);


                Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
                if (us_name1.moveToLast()){
//                    Toast.makeText(Refundswise_Saleslist.this, "user id there", Toast.LENGTH_LONG).show();
                    String na53 = us_name1.getString(53);
                    String na38 = us_name1.getString(38);
                    String na39 = us_name1.getString(39);
                    String na40 = us_name1.getString(40);
                    String na41 = us_name1.getString(41);
                    String na42 = us_name1.getString(42);
                    String na43 = us_name1.getString(43);
                    String na44 = us_name1.getString(44);
                    String na45 = us_name1.getString(45);
                    String na46 = us_name1.getString(46);
                    String na47 = us_name1.getString(47);
                    String na48 = us_name1.getString(48);
                    String na49 = us_name1.getString(49);
                    String na50 = us_name1.getString(50);
                    String na51 = us_name1.getString(51);
                    String na52 = us_name1.getString(52);
                    String na38_value = us_name1.getString(54);
                    String na39_value = us_name1.getString(55);
                    String na40_value = us_name1.getString(56);
                    String na41_value = us_name1.getString(57);
                    String na42_value = us_name1.getString(58);
                    String na43_value = us_name1.getString(59);
                    String na44_value = us_name1.getString(60);
                    String na45_value = us_name1.getString(61);
                    String na46_value = us_name1.getString(62);
                    String na47_value = us_name1.getString(63);
                    String na48_value = us_name1.getString(64);
                    String na49_value = us_name1.getString(65);
                    String na50_value = us_name1.getString(66);
                    String na51_value = us_name1.getString(67);
                    String na52_value = us_name1.getString(68);

                    String proc = us_name1.getString(69);

                    TextView hid = new TextView(Refundswise_Saleslist.this);
                    hid.setText(proc);

                    if (hid.getText().toString().equals("off")){
                        Cursor cursorr = null;
                        if (paymenttypee.getText().toString().equals("  Dine-in") || paymenttypee.getText().toString().equals("  General") || paymenttypee.getText().toString().equals("  Others")){
                            cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        }
                        if (paymenttypee.getText().toString().equals("  Takeaway") || paymenttypee.getText().toString().equals("  Main")){
                            cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        }
                        if (paymenttypee.getText().toString().equals("  Home delivery")){
                            cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                        if (cursorr.moveToFirst()) {

                            do {

                                String name = cursorr.getString(1);
                                String value = cursorr.getString(2);

                                final TableRow row = new TableRow(Refundswise_Saleslist.this);
                                row.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.MONOSPACE);
//                                row.addView(tv);

                                TextView tvv = new TextView(Refundswise_Saleslist.this);
                                tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tvv.setGravity(Gravity.START);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                //tvv.setTypeface(Typeface.MONOSPACE);
                                tvv.setText(name);

                                TextView tv1 = new TextView(Refundswise_Saleslist.this);
                                tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                tv1.setGravity(Gravity.START);
                                //tv1.setTypeface(Typeface.MONOSPACE);
                                float vbn = Float.parseFloat(value);
                                String bvn = String.format(Locale.US,"%.2f", vbn);
                                tv1.setText(value);
                                String value1 = tv1.getText().toString();

                                TextView tv2 = new TextView(Refundswise_Saleslist.this);
                                //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                                //tv2.setLayoutParams(lp);
                                tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                                //tv2.setTypeface(Typeface.MONOSPACE);
                                tv2.setGravity(Gravity.START);
                                tv2.append(name + " @ " + bvn + "%");
                                tv2.setPadding(0, 0, 20, 0);
                                tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                row.addView(tv2);

                                TextView textView1 = new TextView(Refundswise_Saleslist.this);
                                textView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.5f));
                                textView1.setTextSize(16);
                                row.addView(textView1);

                                TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                                tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.4f));
                                //tv3.setPadding(0,0,10,0);
                                //tv3.setTypeface(Typeface.MONOSPACE);
                                tv3.setGravity(Gravity.END);
                                tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                float tota = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                                float tota = mul;
                                String tota1 = String.format(Locale.US,"%.2f", tota);
                                tv3.setText(String.valueOf(tota1));
                                row.addView(tv3);


                                tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                String value2 = tv3.getText().toString();

                                tableLayout2.addView(row);


                            } while (cursorr.moveToNext());

                            cursorr.close();
                        }
                    }else {
                        for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                            int i1 = 0;
                            if (i2 == 38) {
                                i1 = 54;
                            }
                            if (i2 == 39) {
                                i1 = 55;
                            }
                            if (i2 == 40) {
                                i1 = 56;
                            }
                            if (i2 == 41) {
                                i1 = 57;
                            }
                            if (i2 == 42) {
                                i1 = 58;
                            }
                            if (i2 == 43) {
                                i1 = 59;
                            }
                            if (i2 == 44) {
                                i1 = 60;
                            }
                            if (i2 == 45) {
                                i1 = 61;
                            }
                            if (i2 == 46) {
                                i1 = 62;
                            }
                            if (i2 == 47) {
                                i1 = 63;
                            }
                            if (i2 == 48) {
                                i1 = 64;
                            }
                            if (i2 == 49) {
                                i1 = 65;
                            }
                            if (i2 == 50) {
                                i1 = 66;
                            }
                            if (i2 == 51) {
                                i1 = 67;
                            }
                            if (i2 == 52) {
                                i1 = 68;
                            }


                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            TableRow.LayoutParams lp, lp1, lp2;

                            TextView tv = new TextView(Refundswise_Saleslist.this);
                            tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv.setGravity(Gravity.START);
                            tv.setTextSize(15);
                            //text = cursor.getString(1);
//                String v = na;

                            tv.setText(us_name1.getString(i2));


                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            //text = cursor.getString(1);
                            tv1.setText(us_name1.getString(i1));
                            String value1 = "0";
                            if (tv1.getText().toString().equals("")) {

                            } else {
                                value1 = tv1.getText().toString();
                            }


                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                                tv2.setGravity(Gravity.START);
                            tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
//                                tv2.setPadding(0, 0, 20, 0);
                                tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(tv2);
//                    Toast.makeText(Refundswise_Saleslist.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.5f));
//                                textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(textView1);

//                    Toast.makeText(Refundswise_Saleslist.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                            TextView tv33 = new TextView(Refundswise_Saleslist.this);
                            tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.4f));
                                tv33.setGravity(Gravity.END);
                            float tota = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
//                            float tota = mul;
                            tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            String tota1 = String.format(Locale.US,"%.2f", tota);
                            tv33.setText(String.valueOf(tota1));
                            //tv3.setTextColor(Color.parseColor("#000000"));
                            //row.addView(tv3);


                            row.addView(tv33);

                            String value2 = tv33.getText().toString();
//                            Toast.makeText(Refundswise_Saleslist.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();
                            if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                                    || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                            } else {
                                tableLayout2.addView(row);
                            }

                        }
                    }

                }else {
//                    Toast.makeText(Refundswise_Saleslist.this, "user id not there", Toast.LENGTH_LONG).show();
                    Cursor cursorr = null;
                    if (paymenttypee.getText().toString().equals("  Dine-in") || paymenttypee.getText().toString().equals("  General") || paymenttypee.getText().toString().equals("  Others")){
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymenttypee.getText().toString().equals("  Takeaway") || paymenttypee.getText().toString().equals("  Main")){
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymenttypee.getText().toString().equals("  Home delivery")){
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                    if (cursorr.moveToFirst()) {

                        do {

                            String name = cursorr.getString(1);
                            String value = cursorr.getString(2);

                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.MONOSPACE);
//                                row.addView(tv);

                            TextView tvv = new TextView(Refundswise_Saleslist.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            //tvv.setTypeface(Typeface.MONOSPACE);
                            tvv.setText(name);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            //tv1.setTypeface(Typeface.MONOSPACE);
                            float vbn = Float.parseFloat(value);
                            String bvn = String.format(Locale.US,"%.2f", vbn);
                            tv1.setText(value);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                            //tv2.setLayoutParams(lp);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            //tv2.setTypeface(Typeface.MONOSPACE);
                            tv2.setGravity(Gravity.START);
                            tv2.append(name + " @ " + bvn + "%");
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            row.addView(tv2);

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.5f));
                            textView1.setTextSize(16);
                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.4f));
                            //tv3.setPadding(0,0,10,0);
                            //tv3.setTypeface(Typeface.MONOSPACE);
                            tv3.setGravity(Gravity.END);
                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            float tota = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                            float tota = mul;
                            String tota1 = String.format(Locale.US,"%.2f", tota);
                            tv3.setText(String.valueOf(tota1));
                            row.addView(tv3);


                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                            String value2 = tv3.getText().toString();

                            tableLayout2.addView(row);


                        } while (cursorr.moveToNext());
                    }
                    cursorr.close();
                }
                us_name1.close();

//                ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
//                if (ccursor.moveToFirst()) {
//
//                    do {
//
//                        String name = ccursor.getString(1);
//                        String value = ccursor.getString(2);
//
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT));
//                        row.setGravity(Gravity.CENTER);
//
//                        TableRow.LayoutParams lp, lp1, lp2;
//
////                                final TextView tv = new TextView(Refundswise_Saleslist.this);
////                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                tv.setTextSize(16);
////                                tv.setTypeface(Typeface.MONOSPACE);
////                                row.addView(tv);
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                        //tvv.setTypeface(Typeface.MONOSPACE);
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        //tv1.setTypeface(Typeface.MONOSPACE);
//                        float vbn = Float.parseFloat(value);
//                        String bvn = String.format("%.2f", vbn);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
//                        //tv2.setLayoutParams(lp);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        //tv2.setTypeface(Typeface.MONOSPACE);
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + bvn + "%");
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(16);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
////                tv3.setLayoutParams(lp2);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        //tv3.setPadding(0,0,10,0);
//                        //tv3.setTypeface(Typeface.MONOSPACE);
//                        tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota1));
//                        row.addView(tv3);
//
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
//                        String value2 = tv3.getText().toString();
//
//                        tableLayout1.addView(row);
//
//
//                    } while (ccursor.moveToNext());
//                }

                dialog.show();


            }
        });


        Button btnok = (Button) findViewById(R.id.okok);
        btnok.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String r1, r2, r3, r4;
                r1 = editText1.getText().toString();
                r2 = editText2.getText().toString();
                if (r1.toString().contains(" ")) {
                    r1 = r1.replace(" ", "");
                }
                if (r2.toString().contains(" ")) {
                    r2 = r2.replace(" ", "");
                }

                r3 = editText_from_day_hide.getText().toString();
                r4 = editText_to_day_hide.getText().toString();
                if (r3.toString().contains(":")) {
                    r3 = r3.replace(":", "");
                }
                if (r4.toString().contains(":")) {
                    r4 = r4.replace(":", "");
                }

                editText1_filter.setText(r1 + "" + r3);
                editText2_filter.setText(r2 + "" + r4);

                DownloadMusicfromInternet downloadMusicfromInternet = new DownloadMusicfromInternet();
                downloadMusicfromInternet.execute(editText1.getText().toString() + editText2.getText().toString());


                final String Text = getreason.getSelectedItem().toString();

                //dialog.dismiss();
                if (Text.equals("All")) {
                    final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems ORDER BY refund ASC";

                    cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                    // The desired columns to be bound
                    final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                    // the XML defined views which the data will be bound to
                    final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                    //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                    adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                    listView.setAdapter(adapter);
                    adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                        @Override
                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                            if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                                final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                                TextView dateTextView = (TextView) view;
                                if (tadl_id.toString().equals("India")){
                                    dateTextView.setText(insert1_cc);
                                }else {
                                    dateTextView.setText(insert1_cc);
                                }
                                return true;
                            }
                            return false;
                        }
                    });
                    listView.setAdapter(adapter);
                    
                    adapter.setFilterQueryProvider(new FilterQueryProvider() {
                        public Cursor runQuery(CharSequence constraint) {
                            return fetchCountriesByName_all(constraint.toString());
                        }
                    });
                }else {
                    final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems WHERE reason = '" + Text + "'";

                    cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                    // The desired columns to be bound
                    final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                    // the XML defined views which the data will be bound to
                    final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                    //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                    adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                    listView.setAdapter(adapter);
                    adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                        @Override
                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                            if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                                final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                                TextView dateTextView = (TextView) view;
                                if (tadl_id.toString().equals("India")){
                                    dateTextView.setText(insert1_cc);
                                }else {
                                    dateTextView.setText(insert1_cc);
                                }
                                return true;
                            }
                            return false;
                        }
                    });
                    listView.setAdapter(adapter);
                    
                    adapter.setFilterQueryProvider(new FilterQueryProvider() {
                        public Cursor runQuery(CharSequence constraint) {
                            return fetchCountriesByName_Text(constraint.toString());
                        }
                    });
                }

                if (Text.toString().equals("Other")){
                    final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems WHERE reason != 'Damaged/Spoiled' AND reason != 'Delayed' " +
                            "AND reason != 'Changed mind' AND reason != 'Accidental charge'";

                    cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                    // The desired columns to be bound
                    final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                    // the XML defined views which the data will be bound to
                    final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                    //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                    adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                    listView.setAdapter(adapter);
                    adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                        @Override
                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                            if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                                final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                                TextView dateTextView = (TextView) view;
                                if (tadl_id.toString().equals("India")){
                                    dateTextView.setText(insert1_cc);
                                }else {
                                    dateTextView.setText(insert1_cc);
                                }
                                return true;
                            }
                            return false;
                        }
                    });
                    listView.setAdapter(adapter);
                    
                    adapter.setFilterQueryProvider(new FilterQueryProvider() {
                        public Cursor runQuery(CharSequence constraint) {
                            return fetchCountriesByName_other(constraint.toString());
                        }
                    });
                }

            }
        });


        ImageButton action_print = (ImageButton) findViewById(R.id.action_print);
        action_print.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (adapter.isEmpty()){
                    //MenuItem bedMenuItem = menu.findItem(R.id.action_export);
                    //bedMenuItem.setVisible(false);
                    Toast.makeText(Refundswise_Saleslist.this, getString(R.string.no_report_to_export), Toast.LENGTH_SHORT).show();
                }else {
                    Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
                    if (connnet.moveToFirst()) {
                        ipnameget = connnet.getString(1);
                        portget = connnet.getString(2);
                        statusnet = connnet.getString(3);
                    }

                    Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
                    if (connnet_counter.moveToFirst()) {
                        ipnameget_counter = connnet_counter.getString(1);
                        portget_counter = connnet_counter.getString(2);
                        statusnet_counter = connnet_counter.getString(3);
                    }
                    connnet_counter.close();

                    Cursor conn = db1.rawQuery("SELECT * FROM BTConn", null);
                    if (conn.moveToFirst()) {
                        nameget = conn.getString(1);
                        addget = conn.getString(2);
                        statussusb = conn.getString(3);
                    }
                    if (statusnet.toString().equals("ok") || statusnet_counter.toString().equals("ok") || statussusb.toString().equals("ok")) {

                        printbillcopy_minireceipt();
                        //dialog.dismiss();


                    }else {
                        final Dialog dialogconn = new Dialog(Refundswise_Saleslist.this, R.style.notitle);
                        dialogconn.setContentView(R.layout.dialog_printer_conn_error_orderlist);

                        Button conti = (Button) dialogconn.findViewById(R.id.ok);
                        conti.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                //Toast.makeText(getActivity(), "checkprinterconncash11", Toast.LENGTH_SHORT).show();
                                dialogconn.dismiss();
                            }
                        });

                        dialogconn.show();
                    }
                }
            }
        });


        ImageButton action_export = (ImageButton) findViewById(R.id.action_export);
        action_export.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (adapter.isEmpty()) {
                    Toast.makeText(Refundswise_Saleslist.this, getString(R.string.no_report_to_export), Toast.LENGTH_SHORT).show();
                }else {
                    sdff2 = new SimpleDateFormat("ddMMMyy");
                    currentDateandTimee1 = sdff2.format(new Date());

                    Date dt = new Date();
                    sdff1 = new SimpleDateFormat("hhmmssaa");
                    timee1 = sdff1.format(dt);

                    ExportDatabaseCSVTask task = new ExportDatabaseCSVTask();
                    task.execute();
                }
            }
        });

        ImageButton action_export_mail = (ImageButton) findViewById(R.id.action_exportmail);
        action_export_mail.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (adapter.isEmpty()) {
                    Toast.makeText(Refundswise_Saleslist.this, getString(R.string.no_report_to_export), Toast.LENGTH_SHORT).show();
                }else {
                    sdff2 = new SimpleDateFormat("ddMMMyy");
                    currentDateandTimee1 = sdff2.format(new Date());

                    Date dt1 = new Date();
                    sdff1 = new SimpleDateFormat("hhmmssaa");
                    timee1 = sdff1.format(dt1);

                    Cursor cursor = db1.rawQuery("SELECT * FROM Companydetailss", null);
                    if (cursor.moveToFirst()) {
                        companynameis = cursor.getString(1);
                    }else {
                        companynameis = "";
                    }

                    Cursor ccursore = db1.rawQuery("SELECT * FROM Email_setup", null);
                    if (ccursore.moveToFirst()) {
                        Cursor ccursoree = db1.rawQuery("SELECT * FROM Email_recipient", null);
                        if (ccursoree.moveToFirst()) {
                            File dbFile = getDatabasePath("mydb)Salesdata");
                            //Log.v(TAG, "Db path is: "+dbFile);  //get the path of db

//                            File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_refunds_report");
                            File exportDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), "/IVEPOS_reports/IVEPOS_refunds_report");
                            if (!exportDir.exists()) {
                                exportDir.mkdirs();
                            }

                            file = new File(exportDir, "IvePOS_refunds_report" + currentDateandTimee1 + "_" + timee1 + ".csv");
                            try {

                                file.createNewFile();
                                CSVWriter csvWrite = new CSVWriter(new FileWriter(file));

                                //ormlite core method
//                List<Person> listdata=dbhelper.GetDataPerson();
//                Person person=null;

                                // this is the Column of the table and same for Header of CSV file
                                String arrStr1[] = {"Date", "Time", "User", "Bill count", "Bill no.", "Sales("+insert1_rs+")", "Refund("+insert1_rs+")", "Reason"};
                                csvWrite.writeNext(arrStr1);

                                Cursor curCSV = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems", null);
                                //csvWrite.writeNext(curCSV.getColumnNames());

                                while (curCSV.moveToNext()) {
                                    String arrStr[] = {curCSV.getString(1), curCSV.getString(2), curCSV.getString(3), curCSV.getString(8), curCSV.getString(4), curCSV.getString(5), curCSV.getString(6), curCSV.getString(7)};
//	                curCSV.getString(2),curCSV.getString(3),curCSV.getString(4),
                                    csvWrite.writeNext(arrStr);

                                }


                                csvWrite.close();


                            } catch (IOException e) {
                                Log.e("MainActivity", e.getMessage(), e);


                            }

                            Uri u1 = null;
                            u1 = Uri.fromFile(file);
                        }
                    }


                    Cursor top1item = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems WHERE user = '" + crashername.getText().toString() + "' ", null);
                    if (top1item.moveToFirst()) {
                        int levelgg = top1item.getInt(0);
                        salesee1 = String.valueOf(levelgg);
                    }

                    String url = "www.intuitionsoftwares.com";


                    TextView totalsalesuserwise = new TextView(Refundswise_Saleslist.this);
                    Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
                    if (cursor11.moveToFirst()) {
                        int level = cursor11.getInt(0);
                        String total = String.valueOf(level);

                        totalsalesuserwise.setText(insert1_cc);
                        totalsalesuserwise.append(total);
                    }
//                Toast.makeText(getActivity(), Text+" total is "+total, Toast.LENGTH_SHORT).show();



                    String msg = "Refund report (" + editText11.getText().toString() + " - " + editText22.getText().toString() + ")\n\n" + "Overview" + " (Detailed report attached)\n\n" +
                            "Total sales: " + totalsalesuserwise.getText().toString() + "\n\n" +
                            "Refunds: " + refundamount.getText().toString() + "(" + refundpercentage.getText().toString() + ")\n\n" +
                            "Sales crasher:\n" +
                            "" + crashername.getText().toString() + " - "+insert1_rs+" " + salesee1 + "(" + crasherpercentage.getText().toString() + ")\n\n" +
                            "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                            "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
                            "Powered by: " + Uri.parse(url);


                    Cursor cursore = db1.rawQuery("SELECT * FROM Email_setup", null);
                    if (cursore.moveToFirst()){
                        Cursor cursoree = db1.rawQuery("SELECT * FROM Email_recipient", null);
                        if (cursoree.moveToFirst()){
                            //both are there
                            Cursor cursoor = db1.rawQuery("SELECT * FROM Email_setup", null);
                            if (cursoor.moveToFirst()) {
                                String un = cursoor.getString(1);
                                String pwd = cursoor.getString(2);
                                String em_ca = cursoor.getString(3);
                                if (em_ca.toString().equals("Gmail")) {
                                    getResultsFromApi();
                                    new MakeRequestTask(mCredential).execute();
                                }else {
                                    if (em_ca.toString().equals("Yahoo")){
//                                        Toast.makeText(Refundswise_Saleslist.this, "yahoo "+un, Toast.LENGTH_LONG).show();
                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
                                        if (cursor1.moveToFirst()) {
                                            do {
                                                String unn = cursor1.getString(3);
                                                String toEmails = unn;
                                                toEmailList = Arrays.asList(toEmails
                                                        .split("\\s*,\\s*"));
                                                new SendMailTask_Yahoo_attachment_Cancellist(Refundswise_Saleslist.this).execute(un,
                                                        pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                            } while (cursor1.moveToNext());
                                        }


                                    }else {
                                        if (em_ca.toString().equals("Hotmail")){
//                                            Toast.makeText(Refundswise_Saleslist.this, "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();
                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
                                            if (cursor1.moveToFirst()) {
                                                do {
                                                    String unn = cursor1.getString(3);
                                                    String toEmails = unn;
                                                    toEmailList = Arrays.asList(toEmails
                                                            .split("\\s*,\\s*"));
                                                    new SendMailTask_Hotmail_Outlook_attachment_Cancellist(Refundswise_Saleslist.this).execute(un,
                                                            pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                                } while (cursor1.moveToNext());
                                            }
                                        }else {
                                            if (em_ca.toString().equals("Office365")) {
//                                                Toast.makeText(Refundswise_Saleslist.this, "office 365 " + un, Toast.LENGTH_LONG).show();
                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        String unn = cursor1.getString(3);
                                                        String toEmails = unn;
                                                        toEmailList = Arrays.asList(toEmails
                                                                .split("\\s*,\\s*"));
                                                        new SendMailTask_Office365_attachment_Cancellist(Refundswise_Saleslist.this).execute(un,
                                                                pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                                    } while (cursor1.moveToNext());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }else {
                            //only recipient not there
                            final Dialog dialoge = new Dialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog);
                            dialoge.setContentView(R.layout.email_prerequisites);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                            dialoge.show();

                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                            btncancel.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialoge.dismiss();
                                }
                            });

                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                            recipient_notset.setVisibility(View.VISIBLE);

                            sender_set.setVisibility(View.VISIBLE);

                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                            gotosettings.setVisibility(View.GONE);
                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(Refundswise_Saleslist.this, EmailSetup_Recipients.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                finish();
                                    dialoge.dismiss();
                                }
                            });

                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(Refundswise_Saleslist.this, EmailSetup_Recipients.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                finish();
                                    dialoge.dismiss();
                                }
                            });


                        }
                    }else {
                        Cursor cursoree = db1.rawQuery("SELECT * FROM Email_recipient", null);
                        if (cursoree.moveToFirst()){
                            //only sender not there
                            final Dialog dialoge = new Dialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog);
                            dialoge.setContentView(R.layout.email_prerequisites);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                            dialoge.show();

                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                            btncancel.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialoge.dismiss();
                                }
                            });

                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                            sender_notset.setVisibility(View.VISIBLE);

                            recipient_set.setVisibility(View.VISIBLE);

                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(Refundswise_Saleslist.this, EmailSetup.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                finish();
                                    dialoge.dismiss();
                                }
                            });

                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                            gotosettings1.setVisibility(View.GONE);
                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(Refundswise_Saleslist.this, EmailSetup.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                finish();
                                    dialoge.dismiss();
                                }
                            });

                        }else {
                            //both recipient and sender not there
                            final Dialog dialoge = new Dialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog);
                            dialoge.setContentView(R.layout.email_prerequisites);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                            dialoge.show();

                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                            btncancel.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialoge.dismiss();
                                }
                            });

                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                            recipient_notset.setVisibility(View.VISIBLE);
                            sender_notset.setVisibility(View.VISIBLE);

                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(Refundswise_Saleslist.this, EmailSetup.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                finish();
                                    dialoge.dismiss();
                                }
                            });

                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(Refundswise_Saleslist.this, EmailSetup_Recipients.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                finish();
                                    dialoge.dismiss();
                                }
                            });

                        }
                    }
                }
            }
        });


    }


    private class ExportDatabaseCSVTask extends AsyncTask<String, Void, Boolean> {
        private final ProgressDialog dialog = new ProgressDialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog);

        @Override
        protected void onPreExecute() {

            this.dialog.setMessage(getString(R.string.setmessage13));
            this.dialog.show();

        }
        protected Boolean doInBackground(final String... args){

            File dbFile = getDatabasePath("mydb_Salesdata");
            //Log.v(TAG, "Db path is: "+dbFile);  //get the path of db

//            File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_refunds_report");
            File exportDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), "/IVEPOS_reports/IVEPOS_refunds_report");
            if (!exportDir.exists()) {
                exportDir.mkdirs();
            }

            file = new File(exportDir, "IvePOS_refunds_report"+currentDateandTimee1+"_"+timee1+".csv");
            try {

                file.createNewFile();
                CSVWriter csvWrite = new CSVWriter(new FileWriter(file));

                //ormlite core method
//                List<Person> listdata=dbhelper.GetDataPerson();
//                Person person=null;

                // this is the Column of the table and same for Header of CSV file
                String arrStr1[] ={"Date", "Time", "User", "Bill count", "Bill no.", "Sales("+insert1_rs+")", "Refund("+insert1_rs+")", "Reason"};
                csvWrite.writeNext(arrStr1);

//                db = openOrCreateDatabase("mydb_Salesdata",Context.MODE_PRIVATE, null);
                Cursor curCSV = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems",null);
                //csvWrite.writeNext(curCSV.getColumnNames());

                while(curCSV.moveToNext())  {
                    String arrStr[] ={curCSV.getString(1), curCSV.getString(2), curCSV.getString(3), curCSV.getString(8), curCSV.getString(4), curCSV.getString(5), curCSV.getString(6), curCSV.getString(7)};
//	                curCSV.getString(2),curCSV.getString(3),curCSV.getString(4),
                    csvWrite.writeNext(arrStr);

                }

                csvWrite.close();
                return true;

            }
            catch (IOException e){
                Log.e("MainActivity", e.getMessage(), e);
                return false;

            }
        }

        @Override
        protected void onPostExecute(final Boolean success)	{

            if (this.dialog.isShowing()){
                this.dialog.dismiss();
            }
            if (success){
                Toast.makeText(Refundswise_Saleslist.this, getString(R.string.export_successful), Toast.LENGTH_SHORT).show();
            }
            else {
                Toast.makeText(Refundswise_Saleslist.this, getString(R.string.export_failed), Toast.LENGTH_SHORT).show();
            }
        }
    }

    class DownloadMusicfromInternet extends AsyncTask<String, Void, Integer> {

        private ProgressDialog dialog = new ProgressDialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog);


        @Override
        protected Integer doInBackground(String... params) {

            Cursor cursor = db.rawQuery("Select DISTINCT * from All_Sales_Cancelled WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' GROUP BY time, date ", null);//replace to cursor = dbHelper.fetchAllHotels();
            db.execSQL("delete from Cancelwiseorderlistitems");
            if (cursor.moveToFirst()) {
                do {
                    username = cursor.getString(14);

                    billno = cursor.getString(11);


//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,
//                                TableRow.LayoutParams.MATCH_PARENT, 1.0f));
//                        row.setGravity(Gravity.CENTER_VERTICAL);


//                    final TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                    tv1.setLayoutParams(new TableRow.LayoutParams(260, ViewGroup.LayoutParams.MATCH_PARENT));
//                    //tv.setBackgroundResource(R.drawable.cell_shape);
//                    tv1.setGravity(Gravity.CENTER);
//                    tv1.setTextSize(15);
//                    tv1.setTypeface(null, Typeface.NORMAL);
//                    tv1.setPadding(5, 0, 0, 0);
//                    tv1.setBackgroundResource(R.drawable.cell_shape);
//                    //text = cursor.getString(1);
//                    tv1.setText(billno);
                    //row.addView(tv1);


                    Cursor modcursor = db.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno + "'", null);
                    if (modcursor.moveToFirst()) {
                        //level = modcursor.getString(2);
                        total1 = modcursor.getString(2);
                        bilcc = modcursor.getString(11);
//                        final TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(150, ViewGroup.LayoutParams.MATCH_PARENT));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tv2.setGravity(Gravity.CENTER);
//                        tv2.setTextSize(15);
//                        tv2.setTypeface(null, Typeface.NORMAL);
//                        tv2.setPadding(5, 0, 0, 0);
//                        tv2.setBackgroundResource(R.drawable.cell_shape);
//                        //text = cursor.getString(1);
//                        tv2.setText(total1);
                        //row.addView(tv2);

                    }

                    //Cursor modcursor1 = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billno + "' GROUP BY time ", null);
                    //if (modcursor1.moveToFirst()) {

                    //do {

                    String sales = cursor.getString(17);
                    String refund = cursor.getString(23);
                    String reason = cursor.getString(20);
                    date = cursor.getString(22);
//                    final TextView tv0 = new TextView(Refundswise_Saleslist.this);
//                    tv0.setLayoutParams(new TableRow.LayoutParams(90, ViewGroup.LayoutParams.MATCH_PARENT));
//                    //tv.setBackgroundResource(R.drawable.cell_shape);
//                    tv0.setGravity(Gravity.CENTER);
//                    tv0.setTextSize(15);
//                    tv0.setTypeface(null, Typeface.NORMAL);
//                    tv0.setPadding(5, 0, 0, 0);
//                    tv0.setBackgroundResource(R.drawable.cell_shape);
//                    //text = cursor.getString(1);
//                    tv0.setText(date);
                    //row.addView(tv0);

                    time = cursor.getString(12);
//                    final TextView tv = new TextView(Refundswise_Saleslist.this);
//                    tv.setLayoutParams(new TableRow.LayoutParams(180, ViewGroup.LayoutParams.MATCH_PARENT));
//                    //tv.setBackgroundResource(R.drawable.cell_shape);
//                    tv.setGravity(Gravity.CENTER);
//                    tv.setTextSize(15);
//                    tv.setTypeface(null, Typeface.NORMAL);
//                    tv.setPadding(5, 0, 0, 0);
//                    tv.setBackgroundResource(R.drawable.cell_shape);
//                    //text = cursor.getString(1);
//                    tv.setText(time);
                    //row.addView(tv);

                    user = cursor.getString(14);
//                    final TextView tvq1 = new TextView(Refundswise_Saleslist.this);
//                    tvq1.setLayoutParams(new TableRow.LayoutParams(180, ViewGroup.LayoutParams.MATCH_PARENT));
//                    //tv.setBackgroundResource(R.drawable.cell_shape);
//                    tvq1.setGravity(Gravity.CENTER);
//                    tvq1.setTextSize(15);
//                    tvq1.setTypeface(null, Typeface.NORMAL);
//                    tvq1.setPadding(5, 0, 0, 0);
//                    tvq1.setBackgroundResource(R.drawable.cell_shape);
//                    //text = cursor.getString(1);
//                    tvq1.setText(user);
                    //row.addView(tv1);

                    //Toast.makeText(Refundswise_Saleslist.this, "date "+date+" Time "+time+" user "+user+" Bill no "+billno+" sales "+total1, Toast.LENGTH_LONG).show();

                    ContentValues contentValues = new ContentValues();
                    contentValues.put("date", date);
                    contentValues.put("time", time);
                    contentValues.put("user", user);
                    contentValues.put("billno", billno);
                    contentValues.put("sale", sales);
                    contentValues.put("refund", refund);
                    contentValues.put("reason", reason);
                    contentValues.put("billcount", bilcc);
//                        Toast.makeText(Refundswise_Saleslist.this, "users are "+name+" sales "+total1+" % is "+percen, Toast.LENGTH_SHORT).show();
                    db.insert("Cancelwiseorderlistitems", null, contentValues);




                } while (cursor.moveToNext());
            }


            db.execSQL("delete from Top_Reason");
            Cursor vbh = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems GROUP BY reason", null);
            if (vbh.moveToFirst()){
                do {
                    String n = vbh.getString(7);
                    Cursor vbh1 = db.rawQuery("SELECT COUNT(reason) FROM Cancelwiseorderlistitems WHERE reason = '"+n+"'", null);
                    if (vbh1.moveToFirst()) {
                        int level = vbh1.getInt(0);
                        total1 = String.valueOf(level);
                        ContentValues contentValues = new ContentValues();
                        contentValues.put("reason", n);
                        contentValues.put("value", level);
                        db.insert("Top_Reason", null, contentValues);
                    }
                }while (vbh.moveToNext());
            }


            return null;
        }

        // Show Progress bar before downloading Music
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            // Shows Progress Bar Dialog and then call doInBackground method
            //showDialog(progress_bar_type);

            dialog.setMessage("Loading");
            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);
//            dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
//                @Override
//                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
//                    if (keyCode == KeyEvent.KEYCODE_BACK) {
//                        //dialog.dismiss();
//                        //row.setBackgroundResource(0);
//                        return true;
//                    }
//                    return false;
//                }
//            });
            dialog.show();
        }



        // Once Music File is downloaded
        @Override
        protected void onPostExecute(Integer file_url) {
            // Dismiss the dialog after the Music file was downloaded
            //dismissDialog(progress_bar_type);
            //Toast.makeText(Refundswise_Saleslist.this, "Download complete, playing Music", Toast.LENGTH_LONG).show();
            // Play the music
            //playMusic();
            dialog.dismiss();

            final Cursor cursor_country1 = db1.rawQuery("SELECT * FROM Country_Selection", null);
            if (cursor_country1.moveToFirst()){
                str_country = cursor_country1.getString(1);
            }

            Text = getreason.getSelectedItem().toString();

            if (Text.toString().equals("All")){
                final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems ORDER BY refund ASC";

                cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                // The desired columns to be bound
                final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                // the XML defined views which the data will be bound to
                final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                listView.setAdapter(adapter);
                adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                    @Override
                    public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                        if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                            final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                            TextView dateTextView = (TextView) view;
                            if (tadl_id.toString().equals("India")){
                                dateTextView.setText(insert1_cc);
                            }else {
                                dateTextView.setText(insert1_cc);
                            }
                            return true;
                        }
                        return false;
                    }
                });
                listView.setAdapter(adapter);
                
                adapter.setFilterQueryProvider(new FilterQueryProvider() {
                    public Cursor runQuery(CharSequence constraint) {
                        return fetchCountriesByName_all(constraint.toString());
                    }
                });

            }else {
                final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems WHERE reason = '" + Text + "'";

                cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                // The desired columns to be bound
                final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                // the XML defined views which the data will be bound to
                final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                listView.setAdapter(adapter);
                adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                    @Override
                    public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                        if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                            final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                            TextView dateTextView = (TextView) view;
                            if (tadl_id.toString().equals("India")){
                                dateTextView.setText(insert1_cc);
                            }else {
                                dateTextView.setText(insert1_cc);
                            }
                            return true;
                        }
                        return false;
                    }
                });
                listView.setAdapter(adapter);
                
                adapter.setFilterQueryProvider(new FilterQueryProvider() {
                    public Cursor runQuery(CharSequence constraint) {
                        return fetchCountriesByName_Text(constraint.toString());
                    }
                });
            }

            if (Text.toString().equals("Other")){
                final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems WHERE reason != 'Damaged/Spoiled' AND reason != 'Delayed' " +
                        "AND reason != 'Changed mind' AND reason != 'Accidental charge'";

                cursor1 = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
                // The desired columns to be bound
                final String[] fromFieldNames = {"date", "time", "user", "billcount", "billno", "sale", "refund", "reason", "reason", "reason"};
                // the XML defined views which the data will be bound to
                final int[] toViewsID = {R.id.dateget, R.id.timeget, R.id.userget, R.id.billcount, R.id.billnoget, R.id.salesget, R.id.refundget, R.id.reasonget, R.id.inn, R.id.inn1};
                //Log.e("Checamos que hay id", String.valueOf(R.id.name));
                adapter = new SimpleCursorAdapter(Refundswise_Saleslist.this, R.layout.cancellation_listview, cursor1, fromFieldNames, toViewsID, 0);
//                listView.setAdapter(adapter);
                adapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
                    @Override
                    public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
                        if (view.getId() == R.id.inn || view.getId() == R.id.inn1) {
                            final String tadl_id = cursor_country1.getString(cursor_country1.getColumnIndex("country"));
                            TextView dateTextView = (TextView) view;
                            if (tadl_id.toString().equals("India")){
                                dateTextView.setText(insert1_cc);
                            }else {
                                dateTextView.setText(insert1_cc);
                            }
                            return true;
                        }
                        return false;
                    }
                });
                listView.setAdapter(adapter);
                
                adapter.setFilterQueryProvider(new FilterQueryProvider() {
                    public Cursor runQuery(CharSequence constraint) {
                        return fetchCountriesByName_other(constraint.toString());
                    }
                });

            }


            Cursor ccursor11 = db.rawQuery("SELECT MAX(billamount_disapply) FROM All_Sales_Cancelled WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' GROUP BY bill_no ", null);
            float sum = 0;
            if (ccursor11.moveToFirst()) {
                do {
                    int level = ccursor11.getInt(0);
                    total = String.valueOf(level);
                    sum = sum
                            + Float.parseFloat(total);

                    //Toast.makeText(Refundswise_Saleslist.this, " level "+level+" total "+total, Toast.LENGTH_LONG).show();
                }while (ccursor11.moveToNext());

            }

//            getreason.setSelection(0);

            Cursor summ = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems", null);
            float sum1 = 0;
            if (summ.moveToFirst()){
                do {
//                        max = summ.getString(23);
//                        sum1 = sum1
//                                + Float.parseFloat(max);
                    Float sumlevel = summ.getFloat(0);
                    sumtotal = String.valueOf(sumlevel);
                    //Toast.makeText(Refundswise_Saleslist.this, " total is "+max, Toast.LENGTH_SHORT).show();
                }while (summ.moveToNext());

            }
            refundamount.setText(insert1_cc);
            refundamount.append(sumtotal);

            if (sumtotal.toString().equals("0.0") || sumtotal.toString().equals("0")){
                refundpercentage.setText("0%");
            }else {
                float div = Float.parseFloat(sumtotal) * 100 / Float.parseFloat(String.valueOf(sum));
                refundpercentage.setText(String.format("%.1f", div));
                refundpercentage.append("%");
            }

            Cursor user1 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' GROUP BY user", null);
            db.execSQL("delete from usercancelleddata");
            //Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();
            if (user1.moveToFirst()) {
                //Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                do {
                    //Toast.makeText(Refundswise_Saleslist.this, "3", Toast.LENGTH_SHORT).show();
                    username = user1.getString(14);
                    Cursor maxi = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems WHERE user = '"+username+"'", null);
                    //Toast.makeText(Refundswise_Saleslist.this, "4", Toast.LENGTH_SHORT).show();
                    if (maxi.moveToFirst()) {
                        //Toast.makeText(Refundswise_Saleslist.this, "5", Toast.LENGTH_SHORT).show();
                        do {
                            //Toast.makeText(Refundswise_Saleslist.this, "6", Toast.LENGTH_SHORT).show();
                            int mum = maxi.getInt(0);
                            mumstr = String.valueOf(mum);
                            //Toast.makeText(Refundswise_Saleslist.this, "user is"+username+"total is "+mumstr, Toast.LENGTH_SHORT).show();
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("username", username);
                            contentValues.put("total", mumstr);
                            db.insert("usercancelleddata", null, contentValues);
                        } while (maxi.moveToNext());
                    }
                } while (user1.moveToNext());
            }

            Cursor one = db.rawQuery("SELECT MAX(total) FROM usercancelleddata ", null);
            if (one.moveToFirst()) {
                int one11 = one.getInt(0);
                one = db.rawQuery("SELECT * FROM usercancelleddata WHERE total = '" + one11 + "' ", null);
                if (one.moveToFirst()) {
                    one1 = one.getString(1);
                    pone = one.getString(1);
                    max = one.getString(2);
                    crashername.setText(one1);

                    float perc = Float.parseFloat(max) * 100 / Float.parseFloat(sumtotal);
                    String percen = String.format("%.1f", perc);

                    crasherpercentage.setText(percen);
                    crasherpercentage.append("%");

                } else {
                    crashername.setText("NA");
                    crasherpercentage.setText("0%");
                }
            }

        }
    }


    public Cursor fetchCountriesByName_all(String inputtext) throws SQLException {
//        Toast.makeText(Refundswise_Saleslist.this, "11 "+inputtext, Toast.LENGTH_SHORT).show();

        Cursor mCursor = null;
        if (inputtext == null  ||  inputtext.length () == 0)  {
            mCursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems ORDER BY refund ASC", null);
//            mCursor = db.query("Generalorderlistascdesc1", new String[] {"_id", "date", "time", "user", "billcount", "billno", "sales"},
//                    null, null, null, null, null);

        }
        else {
            mCursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems WHERE billno LIKE '%" + inputtext + "%' ORDER BY refund ASC", null);
//            mCursor = db.query(true, "Generalorderlistascdesc1", new String[] {"date", "time", "user", "billcount", "billno", "sales"},
//                    "billno" + " like" + " '%" + inputtext + "%'", null,
//                    null, null, null, null);
        }
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;
    }


    public Cursor fetchCountriesByName_text1(String inputtext) throws SQLException {
//        Toast.makeText(Refundswise_Saleslist.this, "11 "+inputtext, Toast.LENGTH_SHORT).show();

        Cursor mCursor = null;
        if (inputtext == null  ||  inputtext.length () == 0)  {
            mCursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems WHERE reason = '"+text1+"' ORDER BY refund ASC", null);
//            mCursor = db.query("Generalorderlistascdesc1", new String[] {"_id", "date", "time", "user", "billcount", "billno", "sales"},
//                    null, null, null, null, null);

        }
        else {
            mCursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems WHERE billno LIKE '%" + inputtext + "%' AND reason = '" + text1 + "' ORDER BY refund ASC", null);
//            mCursor = db.query(true, "Generalorderlistascdesc1", new String[] {"date", "time", "user", "billcount", "billno", "sales"},
//                    "billno" + " like" + " '%" + inputtext + "%'", null,
//                    null, null, null, null);
        }
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;
    }

    public Cursor fetchCountriesByName_other(String inputtext) throws SQLException {
//        Toast.makeText(Refundswise_Saleslist.this, "11 "+inputtext, Toast.LENGTH_SHORT).show();

        Cursor mCursor = null;
        if (inputtext == null  ||  inputtext.length () == 0)  {
//            final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems WHERE reason != 'Damaged/Spoiled' AND reason != 'Delayed' " +
//                    "AND reason != 'Changed mind' AND reason != 'Accidental charge'";
            mCursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems WHERE reason != 'Damaged/Spoiled' AND reason != 'Delayed' " +
                    "AND reason != 'Changed mind' AND reason != 'Accidental charge' ORDER BY refund ASC", null);
//            mCursor = db.query("Generalorderlistascdesc1", new String[] {"_id", "date", "time", "user", "billcount", "billno", "sales"},
//                    null, null, null, null, null);

        }
        else {
//            final String selectQuery = "SELECT * FROM Cancelwiseorderlistitems WHERE reason != 'Damaged/Spoiled' AND reason != 'Delayed' " +
//                    "AND reason != 'Changed mind' AND reason != 'Accidental charge'";
            mCursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems WHERE billno LIKE '%" + inputtext + "%' AND reason != 'Damaged/Spoiled' AND reason != 'Delayed' " +
                    "AND reason != 'Changed mind' AND reason != 'Accidental charge' ORDER BY refund ASC", null);
//            mCursor = db.query(true, "Generalorderlistascdesc1", new String[] {"date", "time", "user", "billcount", "billno", "sales"},
//                    "billno" + " like" + " '%" + inputtext + "%'", null,
//                    null, null, null, null);
        }
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;
    }

    public Cursor fetchCountriesByName_Text(String inputtext) throws SQLException {
//        Toast.makeText(Refundswise_Saleslist.this, "11 "+inputtext, Toast.LENGTH_SHORT).show();

        Cursor mCursor = null;
        if (inputtext == null  ||  inputtext.length () == 0)  {
            mCursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems WHERE reason = '"+Text+"' ORDER BY refund ASC", null);
//            mCursor = db.query("Generalorderlistascdesc1", new String[] {"_id", "date", "time", "user", "billcount", "billno", "sales"},
//                    null, null, null, null, null);

        }
        else {
            mCursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems WHERE billno LIKE '%" + inputtext + "%' AND reason = '" + Text + "' ORDER BY refund ASC", null);
//            mCursor = db.query(true, "Generalorderlistascdesc1", new String[] {"date", "time", "user", "billcount", "billno", "sales"},
//                    "billno" + " like" + " '%" + inputtext + "%'", null,
//                    null, null, null, null);
        }
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;
    }


    private android.app.TimePickerDialog.OnTimeSetListener timePickerListener_open = new android.app.TimePickerDialog.OnTimeSetListener() {


        @Override
        public void onTimeSet(TimePicker view, int hourOfDay, int minutes) {
            // TODO Auto-generated method stub
            hour = hourOfDay;
            minute = minutes;

            updateTime_open(hour, minute);

            Calendar calNow = Calendar.getInstance();
            Calendar calSet = (Calendar) calNow.clone();

            calSet.set(Calendar.HOUR_OF_DAY, hourOfDay);
            calSet.set(Calendar.MINUTE, minutes);
            calSet.set(Calendar.SECOND, 0);
            calSet.set(Calendar.MILLISECOND, 0);


            String hour1 = "";
            if (hour < 10)
                hour1 = "0" + hour;
            else
                hour1 = String.valueOf(hour);

            String minutes1 = "";
            if (minute < 10)
                minutes1 = "0" + minute;
            else
                minutes1 = String.valueOf(minute);

            editText_from_day_hide.setText(hour1 + "" + minutes1);


        }
    };

    private android.app.TimePickerDialog.OnTimeSetListener timePickerListener_close = new android.app.TimePickerDialog.OnTimeSetListener() {


        @Override
        public void onTimeSet(TimePicker view, int hourOfDay, int minutes) {
            // TODO Auto-generated method stub
            hour = hourOfDay;
            minute = minutes;

            updateTime_close(hour, minute);

            Calendar calNow = Calendar.getInstance();
            Calendar calSet = (Calendar) calNow.clone();

            calSet.set(Calendar.HOUR_OF_DAY, hourOfDay);
            calSet.set(Calendar.MINUTE, minutes);
            calSet.set(Calendar.SECOND, 0);
            calSet.set(Calendar.MILLISECOND, 0);

            String hour1 = "";
            if (hour < 10)
                hour1 = "0" + hour;
            else
                hour1 = String.valueOf(hour);

            String minutes1 = "";
            if (minute < 10)
                minutes1 = "0" + minute;
            else
                minutes1 = String.valueOf(minute);

            editText_to_day_hide.setText(hour1 + "" + minutes1);
        }
    };

    private void updateTime_open(int hours, int mins) {

        String timeSet = "";
        if (hours > 12) {
            hours -= 12;
            timeSet = "PM";
        } else if (hours == 0) {
            hours += 12;
            timeSet = "AM";
        } else if (hours == 12)
            timeSet = "PM";
        else
            timeSet = "AM";


        String minutes = "";
        if (mins < 10)
            minutes = "0" + mins;
        else
            minutes = String.valueOf(mins);

        // Append in a StringBuilder
        String aTime = new StringBuilder().append(hours).append(':')
                .append(minutes).append(" ").append(timeSet).toString();

        editText_from_day_visible.setText(aTime);
    }

    private void updateTime_close(int hours, int mins) {

        String timeSet = "";
        if (hours > 12) {
            hours -= 12;
            timeSet = "PM";
        } else if (hours == 0) {
            hours += 12;
            timeSet = "AM";
        } else if (hours == 12)
            timeSet = "PM";
        else
            timeSet = "AM";


        String minutes = "";
        if (mins < 10)
            minutes = "0" + mins;
        else
            minutes = String.valueOf(mins);

        // Append in a StringBuilder
        String aTime = new StringBuilder().append(hours).append(':')
                .append(minutes).append(" ").append(timeSet).toString();

        editText_to_day_visible.setText(aTime);
    }


    private class MakeRequestTask extends AsyncTask<Void, Void, String> {
        private Gmail mService = null;
        private Exception mLastError = null;
//        private View view = sendFabButton;

        public MakeRequestTask(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
            mService = new Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName(getResources().getString(R.string.app_name))
                    .build();
        }

        @Override
        protected String doInBackground(Void... params) {
            try {
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                return null;
            }
        }

        private String getDataFromApi() throws IOException {
            // getting Values for to Address, from Address, Subject and Body

            String strcompanyname = "", straddress1 = "";
            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }

            String url = "www.intuitionsoftwares.com";

            TextView totalsalesuserwise = new TextView(Refundswise_Saleslist.this);
            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor11.moveToFirst()) {
                int level = cursor11.getInt(0);
                String total = String.valueOf(level);

                totalsalesuserwise.setText(insert1_cc);
                totalsalesuserwise.append(total);
            }

//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

            String msg = "Refund report (" + editText11.getText().toString() + " - " + editText22.getText().toString() + ")\n\n" + "Overview" + " (Detailed report attached)\n\n" +
                    "Total sales: " + totalsalesuserwise.getText().toString() + "\n\n" +
                    "Refunds: " + refundamount.getText().toString() + "(" + refundpercentage.getText().toString() + ")\n\n" +
                    "Sales crasher:\n" +
                    "" + crashername.getText().toString() + " - "+insert1_rs+" " + salesee1 + "(" + crasherpercentage.getText().toString() + ")\n\n" +
                    "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
                    "Powered by: " + Uri.parse(url);

            Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
            if (cursor1.moveToFirst()) {
                do {
                    String unn = cursor1.getString(3);
                    TextView edtToAddress = new TextView(Refundswise_Saleslist.this);
                    edtToAddress.setText(unn);

                    TextView edtSubject = new TextView(Refundswise_Saleslist.this);
                    edtSubject.setText(strcompanyname);

                    TextView edtMessage = new TextView(Refundswise_Saleslist.this);
                    edtMessage.setText(msg);

                    String user = "me";
                    String to = Utils.getString(edtToAddress);
                    String from = mCredential.getSelectedAccountName();
                    Log.v("sender email", from);
                    String subject = Utils.getString(edtSubject);
                    String body = Utils.getString(edtMessage);
                    MimeMessage mimeMessage;
                    response = "";
                    try {

//                        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_customer_list");
//                        if (!exportDir.exists()) {
//                            exportDir.mkdirs();
//                        }
//
//                        file = new File(exportDir, "IvePOS_customer_list" + currentDateandTimee1 + "_" + timee1 + ".csv");

//                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_refunds_report/IvePOS_refunds_report"+currentDateandTimee1+"_"+timee1+".csv";
                        String filename = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)+"/IVEPOS_reports/IVEPOS_refunds_report/IvePOS_refunds_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_product_report/IvePOS_product_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_customer_list/IvePOS_customer_list"+currentDateandTimee1+"_"+timee1+".csv";

//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+"12May17"+"_"+"013048PM"+".csv";
//                String path = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_backup/";


                        File f = new File(filename);
//
                        mimeMessage = createEmailWithAttachment(to, from, subject, body, f);



//                        mimeMessage = createEmail(to, from, subject, body);
                        response = sendMessage(mService, user, mimeMessage);
                    } catch (MessagingException e) {
                        e.printStackTrace();
                    }

                } while (cursor1.moveToNext());
            }
            return response;
        }

        // Method to send email
        private String sendMessage(Gmail service,
                                   String userId,
                                   MimeMessage email)
                throws MessagingException, IOException {
            com.google.api.services.gmail.model.Message message = createMessageWithEmail(email);
            // GMail's official method to send email with oauth2.0
            message = service.users().messages().send(userId, message).execute();

            System.out.println("user ID " + userId);

            System.out.println("Message id: " + message.getId());
            System.out.println(message.toPrettyString());
            return message.getId();
        }

        public MimeMessage createEmailWithAttachment(String to,
                                                     String from,
                                                     String subject,
                                                     String bodyText,
                                                     File file)
                throws MessagingException, IOException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);

            email.setFrom(new InternetAddress(from));
            email.addRecipient(javax.mail.Message.RecipientType.TO,
                    new InternetAddress(to));
            email.setSubject(subject);

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(bodyText, "text/plain");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            mimeBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);

            mimeBodyPart.setDataHandler(new DataHandler(source));
            mimeBodyPart.setFileName(file.getName());

            multipart.addBodyPart(mimeBodyPart);
            email.setContent(multipart);

            return email;
        }

        // Method to create email Params
        private MimeMessage createEmail(String to,
                                        String from,
                                        String subject,
                                        String bodyText) throws MessagingException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);
            InternetAddress tAddress = new InternetAddress(to);
            InternetAddress fAddress = new InternetAddress(from);


            System.out.println("From  " + from);
            System.out.println("To  " + to);


            email.setFrom(fAddress);
            email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);
            email.setSubject(subject);
            email.setText(bodyText);
            return email;
        }

        private com.google.api.services.gmail.model.Message createMessageWithEmail(MimeMessage email)
                throws MessagingException, IOException {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            email.writeTo(bytes);
            String encodedEmail = Base64.encodeBase64URLSafeString(bytes.toByteArray());
            com.google.api.services.gmail.model.Message message = new com.google.api.services.gmail.model.Message();
            message.setRaw(encodedEmail);
            return message;
        }

        @Override
        protected void onPreExecute() {
            mProgress.show();
        }

        @Override
        protected void onPostExecute(String output) {
            Log.d("post execute", "error");
            mProgress.hide();
            if (output == null || output.length() == 0) {
                Toast.makeText(Refundswise_Saleslist.this, "not success", Toast.LENGTH_SHORT).show();
//                showMessage(view, "No results returned.");
            } else {
                Toast.makeText(Refundswise_Saleslist.this, "success", Toast.LENGTH_SHORT).show();
//                showMessage(view, output);
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
//                Log.v("Errors3", mLastError.getMessage());
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
//                    Log.v("Errors1", mLastError.getMessage());
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
//                    Log.v("Errors2", mLastError.getMessage());
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            Utils.REQUEST_AUTHORIZATION);
                } else {
//                    showMessage(view, "The following error occurred:\n" + mLastError.getMessage());
//                    Log.v("Errors", mLastError.getMessage());
                }
            } else {
//                showMessage(view, "Request Cancelled.");
            }
        }
    }

    void showGooglePlayServicesAvailabilityErrorDialog(
            final int connectionStatusCode) {
        GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
        Dialog dialog = apiAvailability.getErrorDialog(
                Refundswise_Saleslist.this,
                connectionStatusCode,
                REQUEST_GOOGLE_PLAY_SERVICES);
        dialog.show();
    }

    private void getResultsFromApi() {

        Cursor cursorr = db1.rawQuery("SELECT * FROM Email_setup", null);
        if (cursorr.moveToFirst()) {
            String unn = cursorr.getString(1);
//            Toast.makeText(getActivity(), "a4 " + unn, Toast.LENGTH_SHORT).show();

            TextView tvv = new TextView(Refundswise_Saleslist.this);
            tvv.setText(unn);

            if (tvv.getText().toString().equals("")) {

            }else {
                mCredential.setSelectedAccountName(tvv.getText().toString());
            }
        }

        if (! isGooglePlayServicesAvailable()) {
//            Toast.makeText(getActivity(), "1", Toast.LENGTH_SHORT).show();
            acquireGooglePlayServices();
        } else if (mCredential.getSelectedAccountName() == null) {
//            Toast.makeText(getActivity(), "2", Toast.LENGTH_SHORT).show();
//            chooseAccount();
        } else if (! isDeviceOnline()) {
//            Toast.makeText(getActivity(), "3", Toast.LENGTH_SHORT).show();
//            mOutputText.setText("No network connection available.");
        } else {
//            Toast.makeText(getActivity(), "4", Toast.LENGTH_SHORT).show();
            new MakeRequestTask1(mCredential).execute();
        }
    }

    /**
     * Checks whether the device currently has a network connection.
     * @return true if the device has a network connection, false otherwise.
     */
    private boolean isDeviceOnline() {
        ConnectivityManager connMgr =
                (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
        return (networkInfo != null && networkInfo.isConnected());
    }

    /**
     * Check that Google Play services APK is installed and up to date.
     * @return true if Google Play Services is available and up to
     *     date on this device; false otherwise.
     */
    private boolean isGooglePlayServicesAvailable() {
        GoogleApiAvailability apiAvailability =
                GoogleApiAvailability.getInstance();
        final int connectionStatusCode =
                apiAvailability.isGooglePlayServicesAvailable(Refundswise_Saleslist.this);
        return connectionStatusCode == ConnectionResult.SUCCESS;
    }

    /**
     * Attempt to resolve a missing, out-of-date, invalid or disabled Google
     * Play Services installation via a user dialog, if possible.
     */
    private void acquireGooglePlayServices() {
        GoogleApiAvailability apiAvailability =
                GoogleApiAvailability.getInstance();
        final int connectionStatusCode =
                apiAvailability.isGooglePlayServicesAvailable(Refundswise_Saleslist.this);
        if (apiAvailability.isUserResolvableError(connectionStatusCode)) {
            showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);
        }
    }


    /**
     * Attempts to set the account used with the API credentials. If an account
     * name was previously saved it will use that one; otherwise an account
     * picker dialog will be shown to the user. Note that the setting the
     * account to use with the credentials object requires the app to have the
     * GET_ACCOUNTS permission, which is requested here if it is not already
     * present. The AfterPermissionGranted annotation indicates that this
     * function will be rerun automatically whenever the GET_ACCOUNTS permission
     * is granted.
     */
    @AfterPermissionGranted(REQUEST_PERMISSION_GET_ACCOUNTS)
    private void chooseAccount() {
//        Toast.makeText(getActivity(), "s1", Toast.LENGTH_SHORT).show();
        if (EasyPermissions.hasPermissions(
                Refundswise_Saleslist.this, android.Manifest.permission.GET_ACCOUNTS)) {
            String accountName = getPreferences(Context.MODE_PRIVATE)
                    .getString(PREF_ACCOUNT_NAME, null);
//            Toast.makeText(getActivity(), "s2", Toast.LENGTH_SHORT).show();
//            if (accountName != null) {
//                mCredential.setSelectedAccountName(accountName);
//                Toast.makeText(getActivity(), "s3", Toast.LENGTH_SHORT).show();
//                getResultsFromApi();
//            } else {
            // Start a dialog from which the user can choose an account
            startActivityForResult(
                    mCredential.newChooseAccountIntent(),
                    REQUEST_ACCOUNT_PICKER);
//            Toast.makeText(getActivity(), "s4", Toast.LENGTH_SHORT).show();
//            }
        } else {
            // Request the GET_ACCOUNTS permission via a user dialog
//            Toast.makeText(getActivity(), "s5", Toast.LENGTH_SHORT).show();
            EasyPermissions.requestPermissions(
                    this,
                    "This app needs to access your Google account (via Contacts).",
                    REQUEST_PERMISSION_GET_ACCOUNTS,
                    android.Manifest.permission.GET_ACCOUNTS);
        }
    }

    private class MakeRequestTask1 extends AsyncTask<Void, Void, List<String>> {
        private Gmail mService = null;
        private Exception mLastError = null;

        MakeRequestTask1(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

            System.out.println("labels mservice11 " + mService);

            mService = new Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName("Gmail API Android Quickstart")
                    .build();
            Log.d("labels credential", String.valueOf(credential));

            System.out.println("labels mservice " + mService);
        }

        /**
         * Background task to call Gmail API.
         * @param params no parameters needed for this task.
         */
        @Override
        protected List<String> doInBackground(Void... params) {
            Log.d("hiiiiii11", "error");

            try {
                Log.d("hiiiiii111", "error");
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                Log.d("hiiiiii1111", "error");
                return null;
            }
        }

        /**
         * Fetch a list of Gmail labels attached to the specified account.
         * @return List of Strings labels.
         * @throws IOException
         */
        private List<String> getDataFromApi() throws IOException {
            // Get the labels in the user's account.
            String user = "me";
            List<String> labels = new ArrayList<String>();
            ListLabelsResponse listResponse =
                    mService.users().labels().list(user).execute();
            System.out.println("ListLabelsResponse " + listResponse);
            for (Label label : listResponse.getLabels()) {
                labels.add(label.getName());

//                Log.d("labels", String.valueOf(labels));//will be displaying all the folders one by one by looping

//                System.out.println("user ID " + labels.add(label.getName()));
            }
            return labels;
        }


        @Override
        protected void onPreExecute() {
//            mOutputText.setText("");
            mProgress.show();
        }

        @Override
        protected void onPostExecute(List<String> output) {
//            System.out.println("labelsss " + output);//will be displaying details and folders in mail like inbox, sent, outbox, junk, etc
            mProgress.hide();
            if (output == null || output.size() == 0) {
//                mOutputText.setText("No results returned.");
            } else {
                output.add(0, "Data retrieved using the Gmail API:");
//                mOutputText.setText(TextUtils.join("\n", output));
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            EmailSetup_Google.REQUEST_AUTHORIZATION);
                } else {
//                    mOutputText.setText("The following error occurred:\n"
//                            + mLastError.getMessage());
                }
            } else {
//                mOutputText.setText("Request cancelled.");
            }
        }
    }


    public static void printByteData(byte[] buf) {
        BT_Write(buf);
        BT_Write(new byte[]{10});
    }

    public void printByteData_wifi(byte[] buf) {
        wifiSocket.WIFI_Write(buf);
        wifiSocket.WIFI_Write(new byte[]{10});
    }

    public void printByteData_wifi_counter(byte[] buf) {
        wifiSocket2.WIFI_Write(buf);
        wifiSocket2.WIFI_Write(new byte[]{10});
    }

    public  byte[] neoprintbillcopy1(Dialog dialog) {


        Typeface tf = Typeface.SERIF;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ReceiptBitmap receiptBitmap = new ReceiptBitmap().getInstance();
        int cont=5;
        Cursor cursor34 = db.rawQuery("Select count(*) from All_Sales WHERE bill_no = '" + billnumb + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (cursor34.moveToFirst()) {
            cont=cursor34.getInt(0);

        }
        Log.e("count:",cont+"");
        cursor34.close();
        receiptBitmap.init(700+(cont*50));
        receiptBitmap.setTextSize(25);
        receiptBitmap.setTypeface(Typeface.create(tf, Typeface.NORMAL));


        charlength = 10;
        charlength1 = 20;
        charlength2 = 30;
        quanlentha = 5;

        Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            do {
                strcompanyname = getcom.getString(1);
                straddress1 = getcom.getString(14);
                straddress2 = getcom.getString(17);
                straddress3 = getcom.getString(18);
                strphone = getcom.getString(2);
                stremailid = getcom.getString(15);
                strwebsite = getcom.getString(16);
                strtaxone = getcom.getString(10);
                strbillone = getcom.getString(12);
            } while (getcom.moveToNext());
        }

        tvkot.setText(strcompanyname);
        if (tvkot.getText().toString().equals("")) {

        } else {
            // Print.StartPrinting(strcompanyname ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
            receiptBitmap.drawCenterText(strcompanyname);
        }


        tvkot.setText(straddress1);
        if (tvkot.getText().toString().equals("")) {

        } else {
            receiptBitmap.drawCenterText(straddress1);
        }

        tvkot.setText(straddress2);
        if (tvkot.getText().toString().equals("")) {

        } else {
            receiptBitmap.drawCenterText(straddress2);
        }


        tvkot.setText(straddress3);
        if (tvkot.getText().toString().equals("")) {

        } else {
            receiptBitmap.drawCenterText(straddress3);
        }

        tvkot.setText(strphone);
        String pp = "Ph. " + strphone;
        if (tvkot.getText().toString().equals("")) {

        } else {
            receiptBitmap.drawCenterText(pp);
        }

        tvkot.setText(stremailid);
        if (tvkot.getText().toString().equals("")) {

        } else {
            receiptBitmap.drawCenterText(stremailid);
        }

        tvkot.setText(strwebsite);
        if (tvkot.getText().toString().equals("")) {

        } else {
            receiptBitmap.drawCenterText(strwebsite);
        }

        tvkot.setText(strtaxone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            receiptBitmap.drawCenterText(strtaxone);
        }


        String str_line="----------------------";
        receiptBitmap.drawLeftText(str_line);



        Cursor cursor10 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()) {
            billtypea = cursor10.getString(5);
            paymmethoda = cursor10.getString(6);
        }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

        if (billtypea.toString().equals("  Cash")) {
            billtypeaa = "Cash"; //0
        }
        if (billtypea.toString().equals("  Card")) {
            billtypeaa = "Card"; //0
        }
        if (billtypea.toString().equals("  Paytm")) {
            billtypeaa = "Paytm"; //0
        }
        if (billtypea.toString().equals("  Mobikwik")) {
            billtypeaa = "Mobikwik"; //0
        }
        if (billtypea.toString().equals("  Freecharge")) {
            billtypeaa = "Freecharge"; //0
        }
        if (billtypea.toString().equals("  Pay Later")) {
            billtypeaa = "Pay Later"; //0
        }
        if (billtypea.toString().equals("  Cheque")) {
            billtypeaa = "Cheque"; //0
        }
        if (billtypea.toString().equals("  Sodexo")) {
            billtypeaa = "Sodexo"; //0
        }
        if (billtypea.toString().equals("  Zeta")) {
            billtypeaa = "Zeta"; //0
        }
        if (billtypea.toString().equals("  Ticket")) {
            billtypeaa = "Ticket"; //0
        }
        if (billtypea.toString().equals("  Upiqr")) {
            billtypeaa = "Upiqr"; //0
        }
        billtypeaa = billtypea.toString().replace(" ", "");

        //String bill_no = billnum.getText().toString();


        if (str_print_ty.toString().equals("POS")) {
            receiptBitmap.drawLeftText("Bill no." + billnumb+"   "+billtypeaa);
        }else {
            receiptBitmap.drawLeftText("Bill no." + billnoget+"   "+billtypeaa);
        }

        if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
//                paymmethodaa = "Dine-in";
            //billtypee.setText("Dine-in");
            if (account_selection.toString().equals("Dine") || account_selection.toString().equals("Qsr")) {
                paymmethodaa = "Dine-in";
            }else {
                paymmethodaa = "General";
            }
        } else {
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                paymmethodaa = "Takeaway";
                //billtypee.setText("Takeaway");
            } else {
                paymmethodaa = "Home delivery";
                //billtypee.setText("Home delivery");
            }
        }

        Cursor date = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (date.moveToFirst()) {
            datee = date.getString(25);
            timee = date.getString(12);
        } else {
            Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
        receiptBitmap.drawLeftText(paymmethodaa+"   "+datee);

        Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9.moveToFirst()) {
            tableida = cursor9.getString(15);
        }
//        else {
//            Cursor cursor9_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

        Cursor vbnm = db1.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
        if (vbnm.moveToFirst()) {
            assa1 = vbnm.getString(1);
            assa2 = vbnm.getString(2);
        }
        TextView cx = new TextView(Refundswise_Saleslist.this);
        cx.setText(assa1);
        if (cx.getText().toString().equals("")) {
            tableidaa = "Tab" + assa2;
        } else {
            tableidaa = "Tab" + assa1;
        }

//        tableidaa = "Table"+tableida;
//        allbuftime = new byte[][]{
//                setHT321,left, tableidaa.getBytes(),HT,"  ".getBytes(),timee.getBytes(),LF
//        };

        receiptBitmap.drawLeftText(tableidaa+"   "+timee);

        String u_name = "";
        Cursor cursor9_1 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9_1.moveToFirst()) {
            u_name = cursor9_1.getString(45);
        }
        cursor9_1.close();

        TextView tv_u_name = new TextView(Refundswise_Saleslist.this);
        tv_u_name.setText(u_name);

        if (tv_u_name.getText().toString().equals("")){

        }else {
            receiptBitmap.drawLeftText("Counter person  : "+tv_u_name.getText().toString());
        }

        receiptBitmap.drawLeftText(str_line);

        Cursor caddress = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress.moveToFirst()) {
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            if (nam.length() > 0 || addr.length() > 0 ||
                    phon.length() > 0 || emai.length() > 0) {

                receiptBitmap.drawLeftText("Customer:");

            } else {

            }

            if (nam.length() > 0) {
                receiptBitmap.drawLeftText(nam);
            } else {

            }

            if (addr.length() > 0) {
                receiptBitmap.drawLeftText(addr);
            } else {

            }

            if (phon.length() > 0) {
                String cust_ph = "Ph. " + phon;
                receiptBitmap.drawLeftText(cust_ph);
            } else {

            }

            if (emai.length() > 0) {
                receiptBitmap.drawLeftText(emai);
            } else {

            }

            receiptBitmap.drawLeftText(str_line);
        }

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

        receiptBitmap.drawLeftText("Qty"+"  "+"Item"+"  "+"Price"+"  "+"Amount");
        receiptBitmap.drawLeftText(str_line);


        Cursor ccursorr = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);

                final String newids = ccursorr.getString(0);

                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    Cursor modcursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                        if (cursor4.moveToFirst()) {
                            sub2a = cursor4.getFloat(0);
                            String sub2a1 = String.valueOf(sub2a);
                            ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                            ss1 = String.format("%.1f", ss);
                        }

                        if (name.toString().length() > charlength) {
                            int print1 = 0;

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+ss1);
                                    receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+ss1);
                                    receiptBitmap.drawLeftText("      "+string2);
                                    print1 = 1;
                                }

                            }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, ss1.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
/////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+ss1);
                                    receiptBitmap.drawLeftText(string2quan+"  "+string2+"      "+string3);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+ss1);
                                    receiptBitmap.drawLeftText("      "+string2+"      "+string3);
                                    print1 = 1;
                                }

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        } else {
                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                receiptBitmap.drawLeftText(string1quan+"  "+name+"  "+pricee+"  "+ss1);
                                receiptBitmap.drawLeftText(string2quan);

                            } else {

                                receiptBitmap.drawLeftText(value+"  "+name+"  "+pricee+"  "+ss1);

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            if (modiname.toString().length() > charlength) {
                                if (modiname.toString().length() > charlength) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength);

                                    receiptBitmap.drawLeftText(""+"  "+">"+string1+"  "+modpricestr);
                                    receiptBitmap.drawLeftText("    "+string2);

                                }
                                if (modiname.toString().length() > charlength1) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength, charlength1);
                                    String string3 = modiname.substring(charlength1);

                                    receiptBitmap.drawLeftText(""+"  "+">"+string1+"  "+modpricestr);
                                    receiptBitmap.drawLeftText("    "+string2);
                                    receiptBitmap.drawLeftText("    "+string3);

                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            } else {

                                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                                receiptBitmap.drawLeftText(""+"  "+">"+modiname+"  "+modpricestr);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            }

                            final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            final TextView tvv = new TextView(Refundswise_Saleslist.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);


                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(ss));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    receiptBitmap.drawLeftText(""+"  "+""+"  "+""+"  "+"("+"-"+total_disc_print_q+")");

                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);
                        if (name.toString().length() > charlength) {
                            int print1 = 0;

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+tototot);
                                    receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);


                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+tototot);
                                    receiptBitmap.drawLeftText("      "+string2);
                                    print1 = 1;
                                }

                            }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,total.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+tototot);
                                    receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                    receiptBitmap.drawLeftText("      "+string3);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+tototot);
                                    receiptBitmap.drawLeftText("      "+string2);
                                    receiptBitmap.drawLeftText("      "+string3);
                                    print1 = 1;
                                }

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        } else {
                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                receiptBitmap.drawLeftText(string1quan+"  "+name+"  "+pricee+"  "+tototot);
                                receiptBitmap.drawLeftText(string2quan);

                            } else {
                                receiptBitmap.drawLeftText(value+"  "+name+"  "+pricee+"  "+tototot);
                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        }

                        tv8 = new TextView(Refundswise_Saleslist.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    receiptBitmap.drawLeftText(""+"  "+""+"  "+""+"  "+"("+"-"+total_disc_print_q+")");

                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }
                }


            } while (ccursorr.moveToNext());
        }

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
        receiptBitmap.drawLeftText("Returns/Cancel:");

        Cursor ccursorreturn = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorreturn.moveToFirst()) {

            do {

                String name = ccursorreturn.getString(1);
                String value = ccursorreturn.getString(2);
                String pq = ccursorreturn.getString(5);
                String itna = ccursorreturn.getString(2);
                String pricee = ccursorreturn.getString(3);
                String tototot = ccursorreturn.getString(4);

                final String newtt = ccursorreturn.getString(4);

                final String newid = ccursorreturn.getString(19);

                final String newids = ccursorreturn.getString(0);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor modt = db.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        if (modt.moveToFirst()) {
                            do {
                                //row.removeView(tv3);
                                float aq = modt.getFloat(0);
                                String aqq = String.valueOf(aq);
                                aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                aqq2 = String.format("%.1f", aqq1);
                            } while (modt.moveToNext());
                        }


                        if (name.toString().length() > charlength) {

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText(string2quan+"  "+string2);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText("      "+string2);

                            }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, aqq2.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = total.substring(0, quanlentha);
                                String string2quan = total.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                receiptBitmap.drawLeftText("      "+string3);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText("      "+string2);
                                receiptBitmap.drawLeftText("      "+string3);

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        } else {
                            if (total.toString().length() > quanlentha) {
                                String string1quan = total.substring(0, quanlentha);
                                String string2quan = total.substring(quanlentha);

                                receiptBitmap.drawLeftText(string1quan+"  "+name+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText(string2quan);

                            } else {

                                receiptBitmap.drawLeftText(value+"  "+name+"  "+pricee+"  "+aqq2);

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            if (modiname.toString().length() > charlength) {
                                if (modiname.toString().length() > charlength) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength);

                                    receiptBitmap.drawLeftText(""+"  "+">"+string1+"  "+modpricestr);
                                    receiptBitmap.drawLeftText("    "+string2);

                                }
                                if (modiname.toString().length() > charlength1) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength, charlength1);
                                    String string3 = modiname.substring(charlength1);

                                    receiptBitmap.drawLeftText(""+"  "+">"+string1+"  "+modpricestr);
                                    receiptBitmap.drawLeftText("    "+string2);
                                    receiptBitmap.drawLeftText("    "+string3);

                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            } else {

                                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                                receiptBitmap.drawLeftText(""+"  "+">"+modiname+"  "+modpricestr);

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            }


                            final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(Refundswise_Saleslist.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);


                            row.removeView(tv8);
                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        //Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    receiptBitmap.drawLeftText(""+"  "+""+"  "+""+"  "+"("+"-"+total_disc_print_q+")");

                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);

                        if (name.toString().length() > charlength) {
                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+tototott);
                                receiptBitmap.drawLeftText(string2quan+"  "+string2);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+tototott);
                                receiptBitmap.drawLeftText("      "+string2);

                            }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,un1,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
//////////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+tototott);
                                receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                receiptBitmap.drawLeftText("      "+string3);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+tototott);
                                receiptBitmap.drawLeftText("      "+string2);
                                receiptBitmap.drawLeftText("      "+string3);

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        } else {

                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                receiptBitmap.drawLeftText(string1quan+"  "+name+"  "+pricee+"  "+tototott);
                                receiptBitmap.drawLeftText(string2quan);

                            } else {

                                receiptBitmap.drawLeftText(value+"  "+name+"  "+pricee+"  "+tototott);

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        }

                        tv8 = new TextView(Refundswise_Saleslist.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    receiptBitmap.drawLeftText(""+"  "+""+"  "+""+"  "+"("+"-"+total_disc_print_q+")");

                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }

                }
            } while (ccursorreturn.moveToNext());

        }

        receiptBitmap.drawLeftText(str_line);
////////////////////////////////////sub total

        Cursor cursor3 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor3.moveToFirst()) {
            sub1 = cursor3.getFloat(0);
        }

        Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
        if (cursor4.moveToFirst()) {
            sub2 = cursor4.getFloat(0);
        }
        float sub12 = sub1 + sub2;
        String total2 = String.valueOf(sub12);
        float to = Float.parseFloat(total2);
        String tot = String.valueOf(to);


        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
        receiptBitmap.drawLeftText("Sub total"+"                       "+tot);

/////////////////////////////////// tax
        TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
        tableLayout1.removeAllViews();

        Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {
                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(4);
                String itna = ccursor.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor.moveToNext());
        }

        Cursor ccursor2 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor2.moveToFirst()) {

            do {
                String name = ccursor2.getString(35);
                String value = ccursor2.getString(36);
                String pq = ccursor2.getString(4);
                String itna = ccursor2.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor2.moveToNext());
        }

        Cursor ccursor3 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor3.moveToFirst()) {

            do {
                String name = ccursor3.getString(37);
                String value = ccursor3.getString(38);
                String pq = ccursor3.getString(4);
                String itna = ccursor3.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor3.moveToNext());
        }

        Cursor ccursor4 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor4.moveToFirst()) {

            do {
                String name = ccursor4.getString(39);
                String value = ccursor4.getString(40);
                String pq = ccursor4.getString(4);
                String itna = ccursor4.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor4.moveToNext());
        }

        Cursor ccursor5 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor5.moveToFirst()) {

            do {
                String name = ccursor5.getString(41);
                String value = ccursor5.getString(42);
                String pq = ccursor5.getString(4);
                String itna = ccursor5.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor5.moveToNext());
        }

//            Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//                } while (ccursor.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }
//
//            Cursor ccursortaxreturn2 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn2.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn2.getString(30);
//                    String value = ccursortaxreturn2.getString(31);
//                    String pq = ccursortaxreturn2.getString(4);
//                    String itna = ccursortaxreturn2.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn2.moveToNext());
//            }
//
//            Cursor ccursortaxreturn3 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn3.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn3.getString(32);
//                    String value = ccursortaxreturn3.getString(33);
//                    String pq = ccursortaxreturn3.getString(4);
//                    String itna = ccursortaxreturn3.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn3.moveToNext());
//            }
//
//            Cursor ccursortaxreturn4 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn4.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn4.getString(34);
//                    String value = ccursortaxreturn4.getString(35);
//                    String pq = ccursortaxreturn4.getString(4);
//                    String itna = ccursortaxreturn4.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn4.moveToNext());
//            }
//
//            Cursor ccursortaxreturn5 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn5.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn5.getString(36);
//                    String value = ccursortaxreturn5.getString(37);
//                    String pq = ccursortaxreturn5.getString(4);
//                    String itna = ccursortaxreturn5.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn5.moveToNext());
//            }


        ArrayList<String> groupList1 = new ArrayList<String>();

        float sum_p1 = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(Refundswise_Saleslist.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

            if (groupList1.contains(mTextView.getText().toString())) {

            }else {
                sum_p1 = 0;
                for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                    TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                    mTextView1 = (TextView) mRow1.getChildAt(0);
                    mTextView2 = (TextView) mRow1.getChildAt(2);
                    if (groupList1.contains(mTextView.getText().toString())) {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    } else {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            groupList1.add(mTextView.getText().toString());
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    }
                }
//                    Toast.makeText(Refundswise_Saleslist.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                String mod1 = mTextView.getText().toString() + "" + String.format("%.2f", sum_p1);
                String mod12 = mTextView.getText().toString();

                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                receiptBitmap.drawLeftText(mod1+"   "+String.format("%.2f", sum_p1));

//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
                String mod2 = mTextView.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, " "+mod2, Toast.LENGTH_LONG).show();
                Cursor ccursor6 = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor6.moveToFirst()) {
                    String hsn = ccursor6.getString(38);

                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                    hsn_hsn.setText(hsn);

                    if (hsn_hsn.getText().toString().equals("")) {
                    } else {
                        receiptBitmap.drawLeftText("HSN " + hsn);
                    }
                }

            }
        }



        String phon = "0";

        Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(Refundswise_Saleslist.this);
        tvvs.setText(phon);


        Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()) {
//            Toast.makeText(Refundswise_Saleslist.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(Refundswise_Saleslist.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")) {
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);

                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                        receiptBitmap.drawLeftText(mod1);


                    } while (cursorr.moveToNext());
                }
            } else {
                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(Refundswise_Saleslist.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(Refundswise_Saleslist.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(Refundswise_Saleslist.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);

                        String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);
                        receiptBitmap.drawLeftText(mod1);

                    }

                }
            }

        } else {
//            Toast.makeText(Refundswise_Saleslist.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Home delivery")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);

                    String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                    receiptBitmap.drawLeftText(mod1);


                } while (cursorr.moveToNext());
            }
        }

        float sum = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(2);
            sum = sum
                    + Float.parseFloat(mTextView.getText().toString());
        }


        String newsum = String.format("%.2f", sum);

        if (sum == 0 || sum == 0.0 || sum == 0.00) {

        } else {
            receiptBitmap.drawLeftText("Tax"+"                       "+newsum);
        }


///////////////////////////////// discount


        Cursor cursor5 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor5.moveToFirst()) {
            dsirs = cursor5.getString(7);
            float ds = Float.parseFloat(dsirs);
            dsirs1 = String.format("%.2f", ds);
        } else {
            dsirs = "0";
        }
        TextView dis = new TextView(Refundswise_Saleslist.this);
        Cursor cursor7 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor7.moveToFirst()) {
            taxpe = cursor7.getString(5);
            float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            if (on % 1 != 0) {
                // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                int newww = (int) on;
                float decpart = on - newww;
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                if (decpart > 0.5) {
                    ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                    float addall = on;
                    //alltotal.setText(String.valueOf(newww + 1));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    dis.setText("+ " + String.format("%.2f", dee));

                } else {
                    // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    float addall = on;
                    //alltotal1.setText(String.valueOf(newww));
                    //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("- " + String.format("%.2f", decpart));

                }
            } else {
                ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                int addall = (int) on;
                //alltotal1.setText(String.valueOf(addall));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                dis.setText("+ " + "0.00");
                ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
            }
        } else {
            taxpe = "0";
            dis.setText("+ " + "0.00");
            on1 = "0";
        }

        //tot-is-subtotal

        String alldiscinperc1 = "Discount(" + taxpe + "%)";
        receiptBitmap.drawLeftText(alldiscinperc1+"                       "+on1);

        float newe;

//////////////////////////////////////////

        Cursor cursor113 = db.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
        if (cursor113.moveToFirst()) {
            float level = cursor113.getFloat(0);
            total = String.valueOf(level);
            Float total1 = Float.parseFloat(total);
            total_disc_print_q = String.format("%.2f", total1);

            receiptBitmap.drawLeftText("Savings"+"                       "+total_disc_print_q);

        }
////////////////////////////////

        Cursor cursor = db.rawQuery("SELECT * FROM billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor.moveToFirst()){
            String t_total_points = cursor.getString(16);
            String v_tq = cursor.getString(17);

            TextView tv = new TextView(Refundswise_Saleslist.this);
            tv.setText(t_total_points);

            if (tv.getText().toString().equals("")){

            }else {

                receiptBitmap.drawLeftText("Loyalty(" + t_total_points + ")"+"                       "+v_tq);

            }
        }

////////////////////////////////rounded

        if (taxpe.toString().equals("")) {
            newe = sum + Float.parseFloat(String.valueOf(tot));
        } else {
            newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
        }

        TextView round = new TextView(Refundswise_Saleslist.this);
        if (newe % 1 != 0) {
            // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
            int newww = (int) newe;
            float decpart = newe - newww;
            ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
            ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
            if (decpart > 0.5) {
                ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                float addall = newe;
                //alltotal.setText(String.valueOf(newww + 1));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                float dee = 1 - decpart;
                round.setText("+ " + String.format("%.2f", dee));
            } else {
                // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                float addall = newe;
                //alltotal1.setText(String.valueOf(newww));
                //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                round.setText("- " + String.format("%.2f", decpart));
            }
        } else {
            ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

            //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
            int addall = (int) newe;
            //alltotal1.setText(String.valueOf(addall));
            //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
            round.setText("+ " + "0.00");
            ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
        }

        receiptBitmap.drawLeftText("Rounded"+"                       "+round.getText().toString());

        receiptBitmap.drawLeftText(str_line);

/////////////////////refund

        //19
        Cursor billcan = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (billcan.moveToFirst()) {
            String asd = billcan.getString(18);
            refundamounta = String.valueOf(asd);
        } else {
            Cursor billcan_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (billcan_cancel.moveToFirst()) {
                String asd = billcan_cancel.getString(17);
                refundamounta = String.valueOf(asd);
            }
        }

        Cursor c1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (c1.moveToFirst()) {
            String c11 = c1.getString(2);
            alltotal1 = c11;
        } else {
            alltotal1 = "0";
        }
        float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
        String mn1 = String.valueOf(min);

        receiptBitmap.drawLeftText("Refund"+"                       "+"-"+mn1);

        SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
        final String normal1 = normal5.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
        final String time1 = sdf1.format(dt);

        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);

        Cursor dateq = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (dateq.moveToFirst()) {
            datee = dateq.getString(25);
            timee = dateq.getString(12);
        } else {
            Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        String refundtime = "(" + datee + "," + timee + ")";
        receiptBitmap.drawLeftText(refundtime);

        receiptBitmap.drawLeftText(str_line);
/////////////////////////

        float all = Float.parseFloat(alltotal1);
        String newf = String.valueOf(all);

        receiptBitmap.drawLeftText("Total"+"                       "+insert1_rs+" "+newf);

        receiptBitmap.drawLeftText(str_line);

        receiptBitmap.drawLeftText("       ");

        tvkot.setText(bill_coun);
        if (tvkot.getText().toString().equals("")) {

        } else {

            receiptBitmap.drawLeftText("Bill id."+bill_coun);

        }

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            // Print.StartPrinting(strcompanyname ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
            receiptBitmap.drawCenterText(strbillone);
        }

        receiptBitmap.drawLeftText("       ");
        receiptBitmap.drawLeftText("       ");

        Bitmap canvasbitmap = receiptBitmap.getReceiptBitmap();

        if(ApplicationData.IS_DEBUGGING_ON)
            Logs.v(ApplicationData.packName,"getHeight: " + canvasbitmap.getHeight(),true,true);

        if(ApplicationData.IS_DEBUGGING_ON)
            Logs.v(ApplicationData.packName,"getReceiptHeight: " + receiptBitmap.getReceiptHeight(),true,true);

        Bitmap croppedBmp = Bitmap.createBitmap(canvasbitmap, 0, 0, canvasbitmap.getWidth(), canvasbitmap.getHeight());

        byte[] imageCommand = mMSWisepadDeviceController.getPrintData(croppedBmp, 150);

        baos.write(imageCommand, 0, imageCommand.length);

        if(ApplicationData.IS_DEBUGGING_ON)
            Logs.v(ApplicationData.packName,"end of reciept",true,true);

        return baos.toByteArray();

    }

    public void wiseposprintbillcopy1(Dialog dialog) {

        charlength = 10;
        charlength1 = 20;
        charlength2 = 30;
        quanlentha = 5;

        imageViewPicture = (ImageView) dialog.findViewById(R.id.imageViewPicture);
        mView = dialog.findViewById(R.id.f_viewreturns);


        ImageView imageButton = (ImageView) mView.findViewById(R.id.viewImagee);
        imageViewPicture.getLayoutParams().height = 94;
        imageViewPicture.getLayoutParams().width = 384;
        imageButton.getLayoutParams().height = 94;
        imageButton.getLayoutParams().width = 384;

        String[] col = {"companylogo"};
        Cursor c = db1.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            do {
                byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
                final Bitmap b1 = BitmapFactory.decodeByteArray(img, 0, img.length);

                imageButton.setImageBitmap(b1);

                mView.setDrawingCacheEnabled(true);
                mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                        View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
                mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
                mView.buildDrawingCache(true);

                Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
                //mView.setDrawingCacheEnabled(false);
                ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

                imageViewPicture.setImageBitmap(b);

                Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                        .getBitmap();

                Print.StartPrintingImage(mBitmap, Align.CENTER);
            } while (c.moveToNext());
        } else {
            imageButton.setVisibility(View.GONE);
        }
        c.close();

        Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            do {
                strcompanyname = getcom.getString(1);
                straddress1 = getcom.getString(14);
                straddress2 = getcom.getString(17);
                straddress3 = getcom.getString(18);
                strphone = getcom.getString(9);
                stremailid = getcom.getString(15);
                strwebsite = getcom.getString(16);
                strtaxone = getcom.getString(10);
                strbillone = getcom.getString(12);
            } while (getcom.moveToNext());
        }
        getcom.close();
//        Toast.makeText(getApplicationContext(), "saving4", Toast.LENGTH_LONG).show();
        tvkot.setText(strcompanyname);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(strcompanyname , FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
/////////
        tvkot.setText(straddress1);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(straddress1 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
///////////////////////////////
        tvkot.setText(straddress2);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(straddress2 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
////////////////////////////////
        tvkot.setText(straddress3);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(straddress3 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
//////////////////////////
        tvkot.setText(strphone);
        String pp = "Ph. " + strphone;
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(pp ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
////////////////////////////////////
        tvkot.setText(stremailid);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(stremailid ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
////////////////////////////////////////
        tvkot.setText(strwebsite);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(strwebsite ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
///////////////////////////////////////
        tvkot.setText(strtaxone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(strtaxone ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
        Print.StartPrinting("----------------------" ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);

        Cursor cursor10 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()) {
            billtypea = cursor10.getString(5);
            paymmethoda = cursor10.getString(6);
        }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

        if (billtypea.toString().equals("  Cash")) {
            billtypeaa = "Cash"; //0
        }
        if (billtypea.toString().equals("  Card")) {
            billtypeaa = "Card"; //0
        }
        if (billtypea.toString().equals("  Paytm")) {
            billtypeaa = "Paytm"; //0
        }
        if (billtypea.toString().equals("  Mobikwik")) {
            billtypeaa = "Mobikwik"; //0
        }
        if (billtypea.toString().equals("  Freecharge")) {
            billtypeaa = "Freecharge"; //0
        }
        if (billtypea.toString().equals("  Pay Later")) {
            billtypeaa = "Pay Later"; //0
        }
        if (billtypea.toString().equals("  Cheque")) {
            billtypeaa = "Cheque"; //0
        }
        if (billtypea.toString().equals("  Sodexo")) {
            billtypeaa = "Sodexo"; //0
        }
        if (billtypea.toString().equals("  Zeta")) {
            billtypeaa = "Zeta"; //0
        }
        if (billtypea.toString().equals("  Ticket")) {
            billtypeaa = "Ticket"; //0
        }
        if (billtypea.toString().equals("  Upiqr")) {
            billtypeaa = "Upiqr"; //0
        }
        billtypeaa = billtypea.toString().replace(" ", "");

        //String bill_no = billnum.getText().toString();

        //  Print.StartPrinting(strtaxone ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        String b="Bill no." + billnoget+""+billtypeaa;
        int length1=b.length();
        int splength=32-length1;
        String input="Bill no." + billnoget;
        for(int i=0;i<splength;i++){
            input=input+" ";
        }
        input=input+billtypeaa;
        Print.StartPrinting(input ,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        // Print.StartPrinting(rr2 ,FontLattice.SIXTEEN, false, Align.RIGHT, true);

        if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
//                paymmethodaa = "Dine-in";
            //billtypee.setText("Dine-in");
            if (account_selection.toString().equals("Dine") || account_selection.toString().equals("Qsr")) {
                paymmethodaa = "Dine-in";
            }else {
                paymmethodaa = "General";
            }
        } else {
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                paymmethodaa = "Takeaway";
                //billtypee.setText("Takeaway");
            } else {
                paymmethodaa = "Home delivery";
                //billtypee.setText("Home delivery");
            }
        }

        Cursor date = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (date.moveToFirst()) {
            datee = date.getString(25);
            timee = date.getString(12);
        } else {
            Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        String b1=paymmethodaa+ datee;
        int length11=b1.length();
        int splength1=32-length11;
        String input1=paymmethodaa;
        for(int i=0;i<splength1;i++){
            input1=input1+" ";
        }
        input1=input1+datee;

        Print.StartPrinting(input1 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        //  Print.StartPrinting(normal1 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.RIGHT, true);

        Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9.moveToFirst()) {
            tableida = cursor9.getString(15);
        }
//        else {
//            Cursor cursor9_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

        Cursor vbnm = db1.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
        if (vbnm.moveToFirst()) {
            assa1 = vbnm.getString(1);
            assa2 = vbnm.getString(2);
        }
        TextView cx = new TextView(Refundswise_Saleslist.this);
        cx.setText(assa1);
        if (cx.getText().toString().equals("")) {
            tableidaa = "Tab" + assa2;
        } else {
            tableidaa = "Tab" + assa1;
        }

//        tableidaa = "Table"+tableida;
//        allbuftime = new byte[][]{
//                setHT321,left, tableidaa.getBytes(),HT,"  ".getBytes(),timee.getBytes(),LF
//        };

        String b2=tableidaa+""+timee;
        int length12=b2.length();
        int splength2=32-length12;
        String input2=tableidaa;
        for(int i=0;i<splength2;i++){
            input2=input2+" ";
        }
        input2=input2+timee;
        Print.StartPrinting(input2 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        String u_name = "";
        Cursor cursor9_1 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9_1.moveToFirst()) {
            u_name = cursor9_1.getString(45);
        }
        cursor9_1.close();

        TextView tv_u_name = new TextView(Refundswise_Saleslist.this);
        tv_u_name.setText(u_name);

        if (tv_u_name.getText().toString().equals("")){

        }else {
            Print.StartPrinting("Counter person: "+tv_u_name.getText().toString(),FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        }

        String str_line = "-----------------------------";
        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);

        Cursor caddress = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress.moveToFirst()) {
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            if (nam.length() > 0 || addr.length() > 0 ||
                    phon.length() > 0 || emai.length() > 0) {
                Print.StartPrinting("Customer:",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            if (nam.length() > 0) {
                Print.StartPrinting(nam,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            if (addr.length() > 0) {
                Print.StartPrinting(addr,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            if (phon.length() > 0) {
                String cust_ph = "Ph. " + phon;
                Print.StartPrinting(cust_ph,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            if (emai.length() > 0) {
                Print.StartPrinting(emai,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }

        Print.StartPrinting("Qty"+"  "+"Item"+"        "+"Price"+"  "+"Amount",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
//           Print.StartPrinting("  "+"Item",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, false);
//           Print.StartPrinting("  "+"Price",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, false);
//           Print.StartPrinting("  "+"Amount",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);


        Cursor ccursorr = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);

                final String newids = ccursorr.getString(0);

                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    Cursor modcursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                        if (cursor4.moveToFirst()) {
                            sub2a = cursor4.getFloat(0);
                            String sub2a1 = String.valueOf(sub2a);
                            ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                            ss1 = String.format("%.1f", ss);
                        }

                        if (name.toString().length() > charlength) {
                            int print1 = 0;

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    Print.StartPrinting(string1quan+string1+"    "+pricee+"  "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(string2quan+"  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT,true);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    Print.StartPrinting(value+"  "+string1+"    "+pricee+"  "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, ss1.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
/////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    Print.StartPrinting(string1quan+" "+string1+"   "+pricee+" "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(" "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    Print.StartPrinting(value+" "+string1+"   "+pricee+" "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(" "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                }
                            }

                        } else {
                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                Print.StartPrinting(string1quan+" "+name+"    "+pricee+"  "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string2quan,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            } else {

                                Print.StartPrinting(value+" "+name+"     "+pricee+"  "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                }
                            }

                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            if (modiname.toString().length() > charlength) {
                                if (modiname.toString().length() > charlength) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength);
                                    Print.StartPrinting(""+">"+string1+" "+modpricestr+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                                if (modiname.toString().length() > charlength1) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength, charlength1);
                                    String string3 = modiname.substring(charlength1);
                                    Print.StartPrinting(""+">"+string1+" "+modpricestr+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    }
                                }

                            } else {

                                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                                Print.StartPrinting(""+">"+modiname+" "+modpricestr+""+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    }
                                }

                            }

                            final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            final TextView tvv = new TextView(Refundswise_Saleslist.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);


                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(ss));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    Print.StartPrinting(""+""+""+"("+"-"+total_disc_print_q+")",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);
                        if (name.toString().length() > charlength) {
                            int print1 = 0;

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    Print.StartPrinting(string1quan+" "+string1+" "+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(" "+string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    Print.StartPrinting(value+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("      "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,total.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    Print.StartPrinting(string1quan+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("  "+string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("      "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    Print.StartPrinting(value+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("      "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("      "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                            }

                        } else {
                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                Print.StartPrinting(string1quan+" "+name+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2quan,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                            } else {
                                Print.StartPrinting(value+" "+name+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                            }

                        }

                        tv8 = new TextView(Refundswise_Saleslist.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    Print.StartPrinting(""+""+""+"("+"-"+total_disc_print_q+")",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }
                }


            } while (ccursorr.moveToNext());
        }

        Print.StartPrinting("Returns/Cancel:",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);


        Cursor ccursorreturn = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorreturn.moveToFirst()) {

            do {

                String name = ccursorreturn.getString(1);
                String value = ccursorreturn.getString(2);
                String pq = ccursorreturn.getString(5);
                String itna = ccursorreturn.getString(2);
                String pricee = ccursorreturn.getString(3);
                String tototot = ccursorreturn.getString(4);

                final String newtt = ccursorreturn.getString(4);

                final String newid = ccursorreturn.getString(19);

                final String newids = ccursorreturn.getString(0);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor modt = db.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        if (modt.moveToFirst()) {
                            do {
                                //row.removeView(tv3);
                                float aq = modt.getFloat(0);
                                String aqq = String.valueOf(aq);
                                aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                aqq2 = String.format("%.1f", aqq1);
                            } while (modt.moveToNext());
                        }


                        if (name.toString().length() > charlength) {

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                Print.StartPrinting(string1quan+string1+"    "+pricee+"  "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(string2quan+"  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT,true);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                Print.StartPrinting(value+"  "+string1+"    "+pricee+"  "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, aqq2.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = total.substring(0, quanlentha);
                                String string2quan = total.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                Print.StartPrinting(string1quan+" "+string1+"   "+pricee+" "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                Print.StartPrinting(value+" "+string1+"   "+pricee+" "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                }
                            }

                        } else {
                            if (total.toString().length() > quanlentha) {
                                String string1quan = total.substring(0, quanlentha);
                                String string2quan = total.substring(quanlentha);

                                Print.StartPrinting(string1quan+" "+name+"    "+pricee+"  "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string2quan,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            } else {

                                Print.StartPrinting(value+" "+name+"     "+pricee+"  "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                }
                            }

                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            if (modiname.toString().length() > charlength) {
                                if (modiname.toString().length() > charlength) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength);
                                    Print.StartPrinting(""+">"+string1+" "+modpricestr+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                                if (modiname.toString().length() > charlength1) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength, charlength1);
                                    String string3 = modiname.substring(charlength1);
                                    Print.StartPrinting(""+">"+string1+" "+modpricestr+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    }
                                }

                            } else {

                                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                                Print.StartPrinting(""+">"+modiname+" "+modpricestr+""+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    }
                                }

                            }


                            final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(Refundswise_Saleslist.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);


                            row.removeView(tv8);
                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        //Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    Print.StartPrinting(""+""+""+"("+"-"+total_disc_print_q+")",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);

                        if (name.toString().length() > charlength) {
                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                Print.StartPrinting(string1quan+" "+string1+" "+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                Print.StartPrinting(value+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("      "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,un1,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
//////////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                Print.StartPrinting(string1quan+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("      "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                Print.StartPrinting(value+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("      "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                            }

                        } else {

                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                Print.StartPrinting(string1quan+" "+name+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2quan,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            } else {

                                Print.StartPrinting(value+" "+name+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                            }

                        }

                        tv8 = new TextView(Refundswise_Saleslist.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    Print.StartPrinting(""+""+""+"("+"-"+total_disc_print_q+")",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }

                }
            } while (ccursorreturn.moveToNext());

        }

        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
////////////////////////////////////sub total

        Cursor cursor3 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor3.moveToFirst()) {
            sub1 = cursor3.getFloat(0);
        }

        Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
        if (cursor4.moveToFirst()) {
            sub2 = cursor4.getFloat(0);
        }
        float sub12 = sub1 + sub2;
        String total2 = String.valueOf(sub12);
        float to = Float.parseFloat(total2);
        String tot = String.valueOf(to);


        Print.StartPrinting("Sub total"+"              "+tot,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
/////////////////////////////////// tax
        TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
        tableLayout1.removeAllViews();

        Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {
                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(4);
                String itna = ccursor.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor.moveToNext());
        }

        Cursor ccursor2 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor2.moveToFirst()) {

            do {
                String name = ccursor2.getString(35);
                String value = ccursor2.getString(36);
                String pq = ccursor2.getString(4);
                String itna = ccursor2.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor2.moveToNext());
        }

        Cursor ccursor3 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor3.moveToFirst()) {

            do {
                String name = ccursor3.getString(37);
                String value = ccursor3.getString(38);
                String pq = ccursor3.getString(4);
                String itna = ccursor3.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor3.moveToNext());
        }

        Cursor ccursor4 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor4.moveToFirst()) {

            do {
                String name = ccursor4.getString(39);
                String value = ccursor4.getString(40);
                String pq = ccursor4.getString(4);
                String itna = ccursor4.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor4.moveToNext());
        }

        Cursor ccursor5 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor5.moveToFirst()) {

            do {
                String name = ccursor5.getString(41);
                String value = ccursor5.getString(42);
                String pq = ccursor5.getString(4);
                String itna = ccursor5.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor5.moveToNext());
        }

//            Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//                } while (ccursor.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }
//
//            Cursor ccursortaxreturn2 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn2.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn2.getString(30);
//                    String value = ccursortaxreturn2.getString(31);
//                    String pq = ccursortaxreturn2.getString(4);
//                    String itna = ccursortaxreturn2.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn2.moveToNext());
//            }
//
//            Cursor ccursortaxreturn3 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn3.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn3.getString(32);
//                    String value = ccursortaxreturn3.getString(33);
//                    String pq = ccursortaxreturn3.getString(4);
//                    String itna = ccursortaxreturn3.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn3.moveToNext());
//            }
//
//            Cursor ccursortaxreturn4 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn4.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn4.getString(34);
//                    String value = ccursortaxreturn4.getString(35);
//                    String pq = ccursortaxreturn4.getString(4);
//                    String itna = ccursortaxreturn4.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn4.moveToNext());
//            }
//
//            Cursor ccursortaxreturn5 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn5.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn5.getString(36);
//                    String value = ccursortaxreturn5.getString(37);
//                    String pq = ccursortaxreturn5.getString(4);
//                    String itna = ccursortaxreturn5.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn5.moveToNext());
//            }


        ArrayList<String> groupList1 = new ArrayList<String>();

        float sum_p1 = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(Refundswise_Saleslist.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

            if (groupList1.contains(mTextView.getText().toString())) {

            }else {
                sum_p1 = 0;
                for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                    TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                    mTextView1 = (TextView) mRow1.getChildAt(0);
                    mTextView2 = (TextView) mRow1.getChildAt(2);
                    if (groupList1.contains(mTextView.getText().toString())) {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    } else {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            groupList1.add(mTextView.getText().toString());
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    }
                }
//                    Toast.makeText(Refundswise_Saleslist.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                String mod1 = mTextView.getText().toString() + "" + String.format("%.2f", sum_p1);
                String mod12 = mTextView.getText().toString();

                Print.StartPrinting(mod12+"   "+String.format("%.2f", sum_p1),FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
                String mod2 = mTextView.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, " "+mod2, Toast.LENGTH_LONG).show();
                Cursor ccursor6 = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor6.moveToFirst()) {
                    String hsn = ccursor6.getString(38);

                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                    hsn_hsn.setText(hsn);

                    if (hsn_hsn.getText().toString().equals("")) {
                    } else {
                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                    }
                }

            }
        }



        String phon = "0";

        Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(Refundswise_Saleslist.this);
        tvvs.setText(phon);


        Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()) {
//            Toast.makeText(Refundswise_Saleslist.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(Refundswise_Saleslist.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")) {
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);

                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                        Print.StartPrinting(mod1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                    } while (cursorr.moveToNext());
                }
            } else {
                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(Refundswise_Saleslist.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(Refundswise_Saleslist.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(Refundswise_Saleslist.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);

                        String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);
                        Print.StartPrinting(mod1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                    }

                }
            }

        } else {
//            Toast.makeText(Refundswise_Saleslist.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Home delivery")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);

                    String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                    Print.StartPrinting(mod1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                } while (cursorr.moveToNext());
            }
        }

        float sum = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(2);
            sum = sum
                    + Float.parseFloat(mTextView.getText().toString());
        }


        String newsum = String.format("%.2f", sum);

        if (sum == 0 || sum == 0.0 || sum == 0.00) {

        } else {
            Print.StartPrinting("Tax"+"              "+newsum,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        }


///////////////////////////////// discount


        Cursor cursor5 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor5.moveToFirst()) {
            dsirs = cursor5.getString(7);
            float ds = Float.parseFloat(dsirs);
            dsirs1 = String.format("%.2f", ds);
        } else {
            dsirs = "0";
        }
        TextView dis = new TextView(Refundswise_Saleslist.this);
        Cursor cursor7 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor7.moveToFirst()) {
            taxpe = cursor7.getString(5);
            float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            if (on % 1 != 0) {
                // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                int newww = (int) on;
                float decpart = on - newww;
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                if (decpart > 0.5) {
                    ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                    float addall = on;
                    //alltotal.setText(String.valueOf(newww + 1));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    dis.setText("+ " + String.format("%.2f", dee));

                } else {
                    // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    float addall = on;
                    //alltotal1.setText(String.valueOf(newww));
                    //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("- " + String.format("%.2f", decpart));

                }
            } else {
                ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                int addall = (int) on;
                //alltotal1.setText(String.valueOf(addall));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                dis.setText("+ " + "0.00");
                ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
            }
        } else {
            taxpe = "0";
            dis.setText("+ " + "0.00");
            on1 = "0";
        }

        //tot-is-subtotal

        String alldiscinperc1 = "Discount(" + taxpe + "%)";

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
        Print.StartPrinting(alldiscinperc1+"              "+on1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        float newe;

//////////////////////////////////////////

        Cursor cursor113 = db.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
        if (cursor113.moveToFirst()) {
            float level = cursor113.getFloat(0);
            total = String.valueOf(level);
            Float total1 = Float.parseFloat(total);
            total_disc_print_q = String.format("%.2f", total1);

            Print.StartPrinting("Savings"+"              "+total_disc_print_q,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        }
////////////////////////////////

        Cursor cursor = db.rawQuery("SELECT * FROM billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor.moveToFirst()){
            String t_total_points = cursor.getString(16);
            String v_tq = cursor.getString(17);

            TextView tv = new TextView(Refundswise_Saleslist.this);
            tv.setText(t_total_points);

            if (tv.getText().toString().equals("")){

            }else {
                Print.StartPrinting("Loyalty"+"              "+v_tq,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            }
        }

////////////////////////////////rounded

        if (taxpe.toString().equals("")) {
            newe = sum + Float.parseFloat(String.valueOf(tot));
        } else {
            newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
        }

        TextView round = new TextView(Refundswise_Saleslist.this);
        if (newe % 1 != 0) {
            // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
            int newww = (int) newe;
            float decpart = newe - newww;
            ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
            ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
            if (decpart > 0.5) {
                ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                float addall = newe;
                //alltotal.setText(String.valueOf(newww + 1));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                float dee = 1 - decpart;
                round.setText("+ " + String.format("%.2f", dee));
            } else {
                // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                float addall = newe;
                //alltotal1.setText(String.valueOf(newww));
                //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                round.setText("- " + String.format("%.2f", decpart));
            }
        } else {
            ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

            //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
            int addall = (int) newe;
            //alltotal1.setText(String.valueOf(addall));
            //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
            round.setText("+ " + "0.00");
            ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
        }

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
        Print.StartPrinting("Rounded"+"              "+round.getText().toString(),FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

/////////////////////refund

        //19
        Cursor billcan = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (billcan.moveToFirst()) {
            String asd = billcan.getString(18);
            refundamounta = String.valueOf(asd);
        } else {
            Cursor billcan_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (billcan_cancel.moveToFirst()) {
                String asd = billcan_cancel.getString(17);
                refundamounta = String.valueOf(asd);
            }
        }

        Cursor c1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (c1.moveToFirst()) {
            String c11 = c1.getString(2);
            alltotal1 = c11;
        } else {
            alltotal1 = "0";
        }
        float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
        String mn1 = String.valueOf(min);


        Print.StartPrinting("Refund"+"              "+"-"+mn1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

        SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
        final String normal1 = normal5.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
        final String time1 = sdf1.format(dt);

        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);

        Cursor dateq = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (dateq.moveToFirst()) {
            datee = dateq.getString(25);
            timee = dateq.getString(12);
        } else {
            Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        String refundtime = "(" + datee + "," + timee + ")";

        Print.StartPrinting(refundtime,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

/////////////////////////

        float all = Float.parseFloat(alltotal1);
        String newf = String.valueOf(all);

        Print.StartPrinting("Total"+"              "+insert1_rs+""+newf,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        tvkot.setText(bill_coun);
        if (tvkot.getText().toString().equals("")) {

        } else {
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
            Print.StartPrinting("Bill id."+bill_coun,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        }

        Print.StartPrinting("",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            // Print.StartPrinting(strcompanyname ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
            Print.StartPrinting(strbillone,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        }
        Print.StartPrinting("",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        Print.StartPrinting("",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

    }

    public void printbillcopy1(Dialog dialog) {


        Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }

        Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }

        /////////////Toast.makeText(Refundswise_Saleslist.this, "printbillonly one ", Toast.LENGTH_SHORT).show();
        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] HT1 = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor print_ty = db1.rawQuery("SELECT * FROM Printer_type", null);
        if (print_ty.moveToFirst()){
            str_print_ty = print_ty.getString(1);
        }

        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    if (str_print_ty.toString().equals("Generic") || str_print_ty.toString().equals("Epson/others")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x20, 0x29, 0x00};//4 tabs 3"
                        nPaperWidth = 576;
                        charlength = 23;
                        charlength1 = 46;
                        charlength2 = 69;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("POS")) {
                            setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                            setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                            nPaperWidth = 576;
                            charlength = 23;
                            charlength1 = 46;
                            charlength2 = 69;
                            quanlentha = 4;
                            HT1 = new byte[]{0x2F};
                            str_line = "------------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------------".getBytes(), LF

                            };
                        }
                    }
                }
                else {
                    if (str_print_ty.toString().equals("Generic")) {
//                        Toast.makeText(Refundswise_Saleslist.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("Epson/others")) {
//                        Toast.makeText(Refundswise_Saleslist.this, "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            nPaperWidth = 384;
                            charlength = 16;
                            charlength1 = 32;
                            charlength2 = 48;
                            quanlentha = 5;
                            HT1 = new byte[]{0x09};
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }else {
                            if (str_print_ty.toString().equals("POS")) {
                                setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                nPaperWidth = 384;
                                charlength = 11;
                                charlength1 = 22;
                                charlength2 = 33;
                                quanlentha = 3;
                                HT1 = new byte[]{0x2F};
                                str_line = "--------------------------------";
                                allbufline = new byte[][]{
                                        left, un1, "--------------------------------".getBytes(), LF
                                };
                            }
                        }
                    }
                }
            }while(cc.moveToNext());
        }

        String dd = "";
        TextView qazcvb = new TextView(Refundswise_Saleslist.this);
        Cursor cvonnusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (cvonnusb.moveToFirst()) {
            addgets = cvonnusb.getString(1);
            namegets = cvonnusb.getString(2);
            statussusbs = cvonnusb.getString(3);
            dd = cvonnusb.getString(4);
        }
        qazcvb.setText(dd);
        if (qazcvb.getText().toString().equals("usb") && statussusbs.toString().equals("ok")) {
//            runPrintCouponSequence(dialog);
            print_printbillcopy1(dialog);
        }else {
            imageViewPicture = (ImageView) dialog.findViewById(R.id.imageViewPicture);
            mView = dialog.findViewById(R.id.f_viewreturns);


            ImageView imageButton = (ImageView) mView.findViewById(R.id.viewImagee);
            if (NAME.equals("3 inch")) {
//            Toast.makeText(Refundswise_Saleslist.this, "3 inch", Toast.LENGTH_SHORT).show();
                imageViewPicture.getLayoutParams().height = 94;
                imageViewPicture.getLayoutParams().width = 576;
                imageButton.getLayoutParams().height = 94;
                imageButton.getLayoutParams().width = 576;
            } else {
//            Toast.makeText(Refundswise_Saleslist.this, "2 inch", Toast.LENGTH_SHORT).show();
                imageViewPicture.getLayoutParams().height = 94;
                imageViewPicture.getLayoutParams().width = 384;
                imageButton.getLayoutParams().height = 94;
                imageButton.getLayoutParams().width = 384;
            }
            //LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(116, 95);
            //imageButton.setLayoutParams(layoutParams);
            //imageButton.setLayoutParams(116, 95);
            String[] col = {"companylogo"};
            Cursor c = db1.query("Logo", col, null, null, null, null, null);
            if (c.moveToFirst()) {
                do {
                    byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
                    final Bitmap b1 = BitmapFactory.decodeByteArray(img, 0, img.length);

                    imageButton.setImageBitmap(b1);


                    mView.setDrawingCacheEnabled(true);
                    mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
                    mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
                    mView.buildDrawingCache(true);

                    Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
                    //mView.setDrawingCacheEnabled(false);
                    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                    b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

                    imageViewPicture.setImageBitmap(b);

                    Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                            .getBitmap();


                    //if (mBitmap != null) {
                    if (statussusbs.toString().equals("ok")) {
                        if (mBitmap != null) {
                            byte[] command = Utils.decodeBitmap(mBitmap);
                            printByteData(command);
                        } else {
                            Log.e("Print Photo error", "the file isn't exists");
                        }
                        Bundle data = new Bundle();
                        //data.putParcelable(Global.OBJECT1, mBitmap);
                        data.putParcelable(Global.PARCE1, mBitmap);
                        data.putInt(Global.INTPARA1, nPaperWidth);
                        data.putInt(Global.INTPARA2, 0);
//                        DrawerService.workThread.handleCmd(
//                                Global.CMD_POS_PRINTBWPICTURE, data);
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            if (mBitmap != null) {
                                byte[] command = Utils.decodeBitmap(mBitmap);
                                printByteData_wifi_counter(command);
                            } else {
                                Log.e("Print Photo error", "the file isn't exists");
                            }
                            Bundle data = new Bundle();
                            data.putParcelable(Global1.PARCE1, mBitmap);
                            data.putInt(Global1.INTPARA1, nPaperWidth);
                            data.putInt(Global1.INTPARA2, 0);
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                if (mBitmap != null) {
                                    byte[] command = Utils.decodeBitmap(mBitmap);
                                    printByteData_wifi(command);
                                } else {
                                    Log.e("Print Photo error", "the file isn't exists");
                                }
                                Bundle data = new Bundle();
                                data.putParcelable(Global1.PARCE1, mBitmap);
                                data.putInt(Global1.INTPARA1, nPaperWidth);
                                data.putInt(Global1.INTPARA2, 0);
                            }
                        }
                    }
                    //}
                } while (c.moveToNext());
            } else {
                imageButton.setVisibility(View.GONE);
            }

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    straddress2 = getcom.getString(17);
                    straddress3 = getcom.getString(18);
                    strphone = getcom.getString(2);
                    stremailid = getcom.getString(15);
                    strwebsite = getcom.getString(16);
                    strtaxone = getcom.getString(10);
                    strbillone = getcom.getString(12);
                } while (getcom.moveToNext());
            }

            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(bold);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(strcompanyname);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(strcompanyname);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(strcompanyname);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


/////////
            tvkot.setText(straddress1);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf2 = new byte[][]{
                        normal, straddress1.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(straddress1);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(straddress1);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(straddress1);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot.setText(straddress2);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf3 = new byte[][]{
                        normal, straddress2.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(straddress2);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(straddress2);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(straddress2);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot.setText(straddress3);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf4 = new byte[][]{
                        normal, straddress3.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(straddress3);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(straddress3);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(straddress3);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strphone);
            String pp = "Ph. " + strphone;
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf5 = new byte[][]{
                        normal, pp.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(pp);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(pp);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(pp);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(stremailid);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf6 = new byte[][]{
                        normal, stremailid.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(stremailid);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(stremailid);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(stremailid);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strwebsite);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, strwebsite.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(strwebsite);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(strwebsite);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(strwebsite);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strtaxone);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf8 = new byte[][]{
                        normal, strtaxone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(strtaxone);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(strtaxone);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(strtaxone);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }



            Cursor cursor10 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (cursor10.moveToFirst()) {
                billtypea = cursor10.getString(5);
                paymmethoda = cursor10.getString(6);
            }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

            if (billtypea.toString().equals("  Cash")) {
                billtypeaa = "Cash"; //0
            }
            if (billtypea.toString().equals("  Card")) {
                billtypeaa = "Card"; //0
            }
            if (billtypea.toString().equals("  Paytm")) {
                billtypeaa = "Paytm"; //0
            }
            if (billtypea.toString().equals("  Mobikwik")) {
                billtypeaa = "Mobikwik"; //0
            }
            if (billtypea.toString().equals("  Freecharge")) {
                billtypeaa = "Freecharge"; //0
            }
            if (billtypea.toString().equals("  Pay Later")) {
                billtypeaa = "Pay Later"; //0
            }
            if (billtypea.toString().equals("  Cheque")) {
                billtypeaa = "Cheque"; //0
            }
            if (billtypea.toString().equals("  Sodexo")) {
                billtypeaa = "Sodexo"; //0
            }
            if (billtypea.toString().equals("  Zeta")) {
                billtypeaa = "Zeta"; //0
            }
            if (billtypea.toString().equals("  Ticket")) {
                billtypeaa = "Ticket"; //0
            }
            if (billtypea.toString().equals("  Upiqr")) {
                billtypeaa = "Upiqr"; //0
            }
            billtypeaa = billtypea.toString().replace(" ", "");

            //String bill_no = billnum.getText().toString();
            allbufbillno = new byte[][]{
                    setHT32, "Bill no.".getBytes(), billnoget.getBytes(), HT, "   ".getBytes(), billtypeaa.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };


            if (str_print_ty.toString().equals("POS")) {
                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT321);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BT_Write("Bill no." + billnumb);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write("   ");
                    BT_Write(billtypeaa);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT321);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write("Bill no." + billnumb);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write("   ");
                        wifiSocket2.WIFI_Write(billtypeaa);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT321);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write("Bill no." + billnumb);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write("   ");
                            wifiSocket.WIFI_Write(billtypeaa);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }else {
                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT32);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BT_Write("Bill no." + billnoget);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write("   " + billtypeaa);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT32);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write("Bill no." + billnoget);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write("   " + billtypeaa);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT32);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write("Bill no." + billnoget);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write("   " + billtypeaa);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
//                paymmethodaa = "Dine-in";
                //billtypee.setText("Dine-in");
                if (account_selection.toString().equals("Dine") || account_selection.toString().equals("Qsr")) {
                    paymmethodaa = "Dine-in";
                }else {
                    paymmethodaa = "General";
                }
            } else {
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    paymmethodaa = "Takeaway";
                    //billtypee.setText("Takeaway");
                } else {
                    paymmethodaa = "Home delivery";
                    //billtypee.setText("Home delivery");
                }
            }

            Cursor date = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (date.moveToFirst()) {
                datee = date.getString(25);
                timee = date.getString(12);
            } else {
                Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (date_cancel.moveToFirst()) {
                    datee = date_cancel.getString(22);
                    timee = date_cancel.getString(12);
                }
            }

            allbuf10 = new byte[][]{
                    setHT321, left, paymmethodaa.getBytes(), HT, "  ".getBytes(), datee.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(paymmethodaa);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  " + datee);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(paymmethodaa);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  " + datee);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(paymmethodaa);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  " + datee);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor9.moveToFirst()) {
                tableida = cursor9.getString(15);
            }
//        else {
//            Cursor cursor9_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

            Cursor vbnm = db1.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
            if (vbnm.moveToFirst()) {
                assa1 = vbnm.getString(1);
                assa2 = vbnm.getString(2);
            }
            TextView cx = new TextView(Refundswise_Saleslist.this);
            cx.setText(assa1);
            if (cx.getText().toString().equals("")) {
                tableidaa = "Tab" + assa2;
                allbuftime = new byte[][]{
                        setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
                };
            } else {
                tableidaa = "Tab" + assa1;
                allbuftime = new byte[][]{
                        setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
                };
            }

//        tableidaa = "Table"+tableida;
//        allbuftime = new byte[][]{
//                setHT321,left, tableidaa.getBytes(),HT,"  ".getBytes(),timee.getBytes(),LF
//        };


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(tableidaa);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  " + timee);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(tableidaa);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  " + timee);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(tableidaa);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  " + timee);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            String u_name = "";
            Cursor cursor9_1 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor9_1.moveToFirst()) {
                u_name = cursor9_1.getString(45);
            }
            cursor9_1.close();

            TextView tv_u_name = new TextView(Refundswise_Saleslist.this);
            tv_u_name.setText(u_name);

            if (tv_u_name.getText().toString().equals("")){

            }else {
                allbuf11 = new byte[][]{
                        left, setHT321, "Counter person ".getBytes(), LF
                };
                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(setHT321);    //
                    BT_Write("Counter person: " + tv_u_name.getText().toString());
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write(setHT321);    //
                        wifiSocket2.WIFI_Write("Counter person: " + tv_u_name.getText().toString());
                        wifiSocket2.WIFI_Write(LF);    //
                    } else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write(setHT321);    //
                            wifiSocket.WIFI_Write("Counter person: " + tv_u_name.getText().toString());
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }

            Cursor caddress = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
            if (caddress.moveToFirst()) {
                String nam = caddress.getString(1);
                String addr = caddress.getString(4);
                String phon = caddress.getString(2);
                String emai = caddress.getString(3);

                if (nam.toString().length() > 0 || addr.toString().length() > 0 ||
                        phon.toString().length() > 0 || emai.toString().length() > 0) {
                    allbufcust = new byte[][]{
                            left, un, "Customer:".getBytes(), LF, un1,
                    };

                    if (statussusbs.toString().equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(un);    //
                        BT_Write("Customer:");
                        BluetoothPrintDriver.BT_Write(LF);    //
                        BluetoothPrintDriver.BT_Write(un1);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(un);    //
                            wifiSocket2.WIFI_Write("Customer:");
                            wifiSocket2.WIFI_Write(LF);    //
                            wifiSocket2.WIFI_Write(un1);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(un);    //
                                wifiSocket.WIFI_Write("Customer:");
                                wifiSocket.WIFI_Write(LF);    //
                                wifiSocket.WIFI_Write(un1);    //
                            }
                        }
                    }
                } else {

                }

                if (nam.toString().length() > 0) {
                    allbufcustname = new byte[][]{
                            nam.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        BT_Write(nam);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(nam);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(nam);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                }

                if (addr.toString().length() > 0) {
                    allbufcustadd = new byte[][]{
                            addr.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        BT_Write(addr);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(addr);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(addr);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                }

                if (phon.toString().length() > 0) {
                    String cust_ph = "Ph. " + phon.toString();
                    allbufcustph = new byte[][]{
                            cust_ph.getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        BT_Write(cust_ph);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(cust_ph);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(cust_ph);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                }

                if (emai.toString().length() > 0) {
                    allbufcustemail = new byte[][]{
                            emai.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        BT_Write(emai);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(emai);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(emai);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                }

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BT_Write(str_line);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(left);	//
                        wifiSocket2.WIFI_Write(un1);	//
                        wifiSocket2.WIFI_Write(str_line);
                        wifiSocket2.WIFI_Write(LF);	//
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(left);	//
                            wifiSocket.WIFI_Write(un1);	//
                            wifiSocket.WIFI_Write(str_line);
                            wifiSocket.WIFI_Write(LF);	//
                        }
                    }
                }
            }

            allbufqty = new byte[][]{
                    setHT34, normal, "Qty".getBytes(), HT, "Item".getBytes(), HT, "Price".getBytes(), HT1, "Amount".getBytes(), left, LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT34);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("Qty");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("Item");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("Price");
                BluetoothPrintDriver.BT_Write(HT1);    //
                BT_Write("Amount");
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT34);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("Qty");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("Item");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("Price");
                    wifiSocket2.WIFI_Write(HT1);    //
                    wifiSocket2.WIFI_Write("Amount");
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT34);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("Qty");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("Item");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("Price");
                        wifiSocket.WIFI_Write(HT1);    //
                        wifiSocket.WIFI_Write("Amount");
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }


            Cursor ccursorr = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursorr.moveToFirst()) {

                do {

                    String name = ccursorr.getString(1);
                    String value = ccursorr.getString(2);
                    String pq = ccursorr.getString(5);
                    String itna = ccursorr.getString(2);
                    String pricee = ccursorr.getString(3);
                    String tototot = ccursorr.getString(4);

                    final String newid = ccursorr.getString(20);

                    final String newids = ccursorr.getString(0);

                    int padding_in_px;

                    int padding_in_dp = 30;  // 34 dps
                    final float scale1 = getResources().getDisplayMetrics().density;
                    padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                    if (pq.equals("Item")) {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                        final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                        final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));

                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                        final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                        //tv.setTextSize(18);
                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv.setText(value);
                        row.addView(tv);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv1.setTextSize(15);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv1.setText(name);
                        String value1 = tv1.getText().toString();
                        row.addView(tv1);

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.append(value + "% " + name);
                        tv2.setText(pricee);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv2.setTextColor(R.color.black);
                        row.addView(tv2);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.setPadding(0, 0, 1, 0);
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv3.setText(tototot);
                        //tv3.setTextColor(R.color.black);
                        //row.addView(tv3);


                        String value2 = tv3.getText().toString();

                        Cursor modcursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                        if (modcursor.moveToFirst()) {

                            Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor4.moveToFirst()) {
                                sub2a = cursor4.getFloat(0);
                                String sub2a1 = String.valueOf(sub2a);
                                ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                                ss1 = String.format("%.1f", ss);
                            }

                            if (name.toString().length() > charlength) {
                                int print1 = 0;

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(string1quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(ss1);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write(string2quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(string1quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(ss1);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write(string2quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(string1quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(ss1);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write(string2quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(value);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(ss1);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(value);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(ss1);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(value);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(ss1);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, ss1.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
/////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(string1quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(ss1);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write(string2quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(string1quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(ss1);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write(string2quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(string1quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(ss1);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write(string2quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(value);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(ss1);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(value);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(ss1);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(value);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(ss1);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {
                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(ss1);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(ss1);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(ss1);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(ss1);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(ss1);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(ss1);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                            do {

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                float modprice1 = Float.parseFloat(modiprice);
                                String modpricestr = String.valueOf(modprice1);

                                if (modiname.toString().length() > charlength) {
                                    if (modiname.toString().length() > charlength) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT1, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(">");
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(modpricestr);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("    ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(">");
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(modpricestr);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("    ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(">");
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(modpricestr);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("    ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                    if (modiname.toString().length() > charlength1) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength, charlength1);
                                        String string3 = modiname.substring(charlength1);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT1, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(">");
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(modpricestr);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("    ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("    ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(">");
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(modpricestr);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("    ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("    ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(">");
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(modpricestr);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("    ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("    ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                } else {
                                    allbufmodifiers = new byte[][]{
                                            setHT34, normal, "".getBytes(), HT, ">".getBytes(), modiname.getBytes(), HT, modpricestr.getBytes(), HT1, "".getBytes(), left, LF
                                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                    };
                                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write("");
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(">");
                                        BT_Write(modiname);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(modpricestr);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write("");
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write("");
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(">");
                                            wifiSocket2.WIFI_Write(modiname);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(modpricestr);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write("");
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write("");
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(">");
                                                wifiSocket.WIFI_Write(modiname);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(modpricestr);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write("");
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                                final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                final TextView tvv = new TextView(Refundswise_Saleslist.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);

                                row.removeView(tv8);


                                tv8 = new TextView(Refundswise_Saleslist.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tv.getText().toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(ss));
                                row.addView(tv8);


                                tableLayout1.addView(tableRow11);
                            } while (modcursor.moveToNext());

                            Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(31);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("(");
                                            BT_Write("-");
                                            BT_Write(total_disc_print_q);
                                            BT_Write(")");
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("(");
                                                wifiSocket2.WIFI_Write("-");
                                                wifiSocket2.WIFI_Write(total_disc_print_q);
                                                wifiSocket2.WIFI_Write(")");
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("(");
                                                    wifiSocket.WIFI_Write("-");
                                                    wifiSocket.WIFI_Write(total_disc_print_q);
                                                    wifiSocket.WIFI_Write(")");
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }
                        } else {

                            float fgh = Float.parseFloat(tototot);
                            String tototott = String.format("%.1f", fgh);
                            if (name.toString().length() > charlength) {
                                int print1 = 0;

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(string1quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(tototott);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write(string2quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(string1quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(tototott);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write(string2quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(string1quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(tototott);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write(string2quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(value);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(tototott);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(value);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(tototott);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(value);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(tototott);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,total.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(string1quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(tototott);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write(string2quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(string1quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(tototott);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write(string2quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(string1quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(tototott);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write(string2quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(value);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(tototott);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(value);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(tototott);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(value);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(tototott);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {
                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(multiply));
                            row.addView(tv8);

                            Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(31);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("(");
                                            BT_Write("-");
                                            BT_Write(total_disc_print_q);
                                            BT_Write(")");
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("(");
                                                wifiSocket2.WIFI_Write("-");
                                                wifiSocket2.WIFI_Write(total_disc_print_q);
                                                wifiSocket2.WIFI_Write(")");
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("(");
                                                    wifiSocket.WIFI_Write("-");
                                                    wifiSocket.WIFI_Write(total_disc_print_q);
                                                    wifiSocket.WIFI_Write(")");
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }

                        }
                    }


                } while (ccursorr.moveToNext());
            }

            allbuf6 = new byte[][]{
                    normal, un, "Returns/Cancel:".getBytes(), LF, un1,

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(normal);    //
                BluetoothPrintDriver.BT_Write(un);    //
                BT_Write("Returns/Cancel:");
                BluetoothPrintDriver.BT_Write(LF);    //
                BluetoothPrintDriver.BT_Write(un1);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write(un);    //
                    wifiSocket2.WIFI_Write("Returns/Cancel:");
                    wifiSocket2.WIFI_Write(LF);    //
                    wifiSocket2.WIFI_Write(un1);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write(un);    //
                        wifiSocket.WIFI_Write("Returns/Cancel:");
                        wifiSocket.WIFI_Write(LF);    //
                        wifiSocket.WIFI_Write(un1);    //
                    }
                }
            }


            Cursor ccursorreturn = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursorreturn.moveToFirst()) {

                do {

                    String name = ccursorreturn.getString(1);
                    String value = ccursorreturn.getString(2);
                    String pq = ccursorreturn.getString(5);
                    String itna = ccursorreturn.getString(2);
                    String pricee = ccursorreturn.getString(3);
                    String tototot = ccursorreturn.getString(4);

                    final String newtt = ccursorreturn.getString(4);

                    final String newid = ccursorreturn.getString(19);

                    final String newids = ccursorreturn.getString(0);
                    int padding_in_px;

                    int padding_in_dp = 30;  // 34 dps
                    final float scale1 = getResources().getDisplayMetrics().density;
                    padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                    if (pq.equals("Item")) {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                        final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                        final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));

                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                        final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                        //tv.setTextSize(18);
                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv.setText(value);
                        row.addView(tv);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv1.setTextSize(15);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv1.setText(name);
                        String value1 = tv1.getText().toString();
                        row.addView(tv1);

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.append(value + "% " + name);
                        tv2.setText(pricee);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv2.setTextColor(R.color.black);
                        row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.setPadding(0, 0, 1, 0);
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv3.setText(tototot);
                        //tv3.setTextColor(R.color.black);
                        //row.addView(tv3);


                        String value2 = tv3.getText().toString();

                        //tableLayoutt.addView(row);

                        Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                        if (modcursor.moveToFirst()) {

                            Cursor modt = db.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                            if (modt.moveToFirst()) {
                                do {
                                    //row.removeView(tv3);
                                    float aq = modt.getFloat(0);
                                    String aqq = String.valueOf(aq);
                                    aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                    aqq2 = String.format("%.1f", aqq1);
                                } while (modt.moveToNext());
                            }


                            if (name.toString().length() > charlength) {

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, aqq2.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = total.substring(0, quanlentha);
                                    String string2quan = total.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), HT, LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string3);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string3);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string3);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string3);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string3);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string3);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {
                                if (total.toString().length() > quanlentha) {
                                    String string1quan = total.substring(0, quanlentha);
                                    String string2quan = total.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                            do {

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                float modprice1 = Float.parseFloat(modiprice);
                                String modpricestr = String.valueOf(modprice1);

                                if (modiname.toString().length() > charlength) {
                                    if (modiname.toString().length() > charlength) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, un1, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(">");
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(modpricestr);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(">");
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(modpricestr);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(">");
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(modpricestr);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                    if (modiname.toString().length() > charlength1) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength, charlength1);
                                        String string3 = modiname.substring(charlength1);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, un1, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(">");
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(modpricestr);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(">");
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(modpricestr);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(">");
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(modpricestr);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }

                                    Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                } else {
                                    allbufmodifiers = new byte[][]{
                                            setHT34, normal, un1, "".getBytes(), HT, ">".getBytes(), modiname.getBytes(), HT, modpricestr.getBytes(), HT1, "".getBytes(), left, LF
                                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                    };
                                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write("");
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(">");
                                        BT_Write(modiname);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(modpricestr);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write("");
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write("");
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(">");
                                            wifiSocket2.WIFI_Write(modiname);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(modpricestr);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write("");
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write("");
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(">");
                                                wifiSocket.WIFI_Write(modiname);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(modpricestr);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write("");
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }


                                final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                final TextView tvv = new TextView(Refundswise_Saleslist.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);


                                row.removeView(tv8);
                                tv8 = new TextView(Refundswise_Saleslist.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tv.getText().toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                                row.addView(tv8);


                                tableLayout1.addView(tableRow11);
                            } while (modcursor.moveToNext());

                            //Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                            Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(27);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(28);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("(");
                                            BT_Write("-");
                                            BT_Write(total_disc_print_q);
                                            BT_Write(")");
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("(");
                                                wifiSocket2.WIFI_Write("-");
                                                wifiSocket2.WIFI_Write(total_disc_print_q);
                                                wifiSocket2.WIFI_Write(")");
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("(");
                                                    wifiSocket.WIFI_Write("-");
                                                    wifiSocket.WIFI_Write(total_disc_print_q);
                                                    wifiSocket.WIFI_Write(")");
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }
                        } else {

                            float fgh = Float.parseFloat(tototot);
                            String tototott = String.format("%.1f", fgh);

                            if (name.toString().length() > charlength) {
                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,un1,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
//////////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string3);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string3);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string3);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string3);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string3);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string3);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {

                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(multiply));
                            row.addView(tv8);

                            Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(27);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(28);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("(");
                                            BT_Write("-");
                                            BT_Write(total_disc_print_q);
                                            BT_Write(")");
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("(");
                                                wifiSocket2.WIFI_Write("-");
                                                wifiSocket2.WIFI_Write(total_disc_print_q);
                                                wifiSocket2.WIFI_Write(")");
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("(");
                                                    wifiSocket.WIFI_Write("-");
                                                    wifiSocket.WIFI_Write(total_disc_print_q);
                                                    wifiSocket.WIFI_Write(")");
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }

                        }

                    }
                } while (ccursorreturn.moveToNext());

            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }
////////////////////////////////////sub total

            Cursor cursor3 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor3.moveToFirst()) {
                sub1 = cursor3.getFloat(0);
            }

            Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (cursor4.moveToFirst()) {
                sub2 = cursor4.getFloat(0);
            }
            float sub12 = sub1 + sub2;
            String total2 = String.valueOf(sub12);
            float to = Float.parseFloat(total2);
            String tot = String.valueOf(to);


            allbufsubtot = new byte[][]{
                    setHT32, left, "Sub total".getBytes(), HT, tot.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT32);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Sub total");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write(tot);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT32);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Sub total");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(tot);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT32);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Sub total");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(tot);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }
/////////////////////////////////// tax
            TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
            tableLayout1.removeAllViews();

            Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor.moveToFirst()) {

                do {
                    String name = ccursor.getString(10);
                    String value = ccursor.getString(9);
                    String pq = ccursor.getString(4);
                    String itna = ccursor.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor.moveToNext());
            }

            Cursor ccursor2 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor2.moveToFirst()) {

                do {
                    String name = ccursor2.getString(35);
                    String value = ccursor2.getString(36);
                    String pq = ccursor2.getString(4);
                    String itna = ccursor2.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor2.moveToNext());
            }

            Cursor ccursor3 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor3.moveToFirst()) {

                do {
                    String name = ccursor3.getString(37);
                    String value = ccursor3.getString(38);
                    String pq = ccursor3.getString(4);
                    String itna = ccursor3.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor3.moveToNext());
            }

            Cursor ccursor4 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor4.moveToFirst()) {

                do {
                    String name = ccursor4.getString(39);
                    String value = ccursor4.getString(40);
                    String pq = ccursor4.getString(4);
                    String itna = ccursor4.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor4.moveToNext());
            }

            Cursor ccursor5 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor5.moveToFirst()) {

                do {
                    String name = ccursor5.getString(41);
                    String value = ccursor5.getString(42);
                    String pq = ccursor5.getString(4);
                    String itna = ccursor5.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor5.moveToNext());
            }

//            Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//                } while (ccursor.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }
//
//            Cursor ccursortaxreturn2 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn2.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn2.getString(30);
//                    String value = ccursortaxreturn2.getString(31);
//                    String pq = ccursortaxreturn2.getString(4);
//                    String itna = ccursortaxreturn2.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn2.moveToNext());
//            }
//
//            Cursor ccursortaxreturn3 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn3.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn3.getString(32);
//                    String value = ccursortaxreturn3.getString(33);
//                    String pq = ccursortaxreturn3.getString(4);
//                    String itna = ccursortaxreturn3.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn3.moveToNext());
//            }
//
//            Cursor ccursortaxreturn4 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn4.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn4.getString(34);
//                    String value = ccursortaxreturn4.getString(35);
//                    String pq = ccursortaxreturn4.getString(4);
//                    String itna = ccursortaxreturn4.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn4.moveToNext());
//            }
//
//            Cursor ccursortaxreturn5 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn5.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn5.getString(36);
//                    String value = ccursortaxreturn5.getString(37);
//                    String pq = ccursortaxreturn5.getString(4);
//                    String itna = ccursortaxreturn5.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn5.moveToNext());
//            }


            ArrayList<String> groupList1 = new ArrayList<String>();

            float sum_p1 = 0;
            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(Refundswise_Saleslist.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

                if (groupList1.contains(mTextView.getText().toString())) {

                }else {
                    sum_p1 = 0;
                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                        mTextView1 = (TextView) mRow1.getChildAt(0);
                        mTextView2 = (TextView) mRow1.getChildAt(2);
                        if (groupList1.contains(mTextView.getText().toString())) {
                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                            }
                        } else {
                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                groupList1.add(mTextView.getText().toString());
                                sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                            }
                        }
                    }
//                    Toast.makeText(Refundswise_Saleslist.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                    String mod1 = mTextView.getText().toString() + "" + String.format("%.2f", sum_p1);
                    String mod12 = mTextView.getText().toString();
                    allbuftaxestype1 = new byte[][]{
                            left, normal, mod12.getBytes(), HT, LF
                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(setHT32);    //
                        BT_Write(normal);
                        BT_Write(mod12);
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BT_Write(String.format("%.2f", sum_p1));
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(setHT32);    //
                            wifiSocket2.WIFI_Write(normal);
                            wifiSocket2.WIFI_Write(mod12);
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(String.format("%.2f", sum_p1));
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(setHT32);    //
                                wifiSocket.WIFI_Write(normal);
                                wifiSocket.WIFI_Write(mod12);
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(String.format("%.2f", sum_p1));
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }

//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
                    String mod2 = mTextView.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, " "+mod2, Toast.LENGTH_LONG).show();
                    Cursor ccursor6 = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    if (ccursor6.moveToFirst()) {
                        String hsn = ccursor6.getString(38);

                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                        hsn_hsn.setText(hsn);

                        if (hsn_hsn.getText().toString().equals("")) {
                        } else {
                            allbuftaxestype1 = new byte[][]{
                                    left, normal, hsn.getBytes(), HT, LF
                            };
                            if (statussusbs.equals("ok")) {
                                BluetoothPrintDriver.BT_Write(left);    //
                                BT_Write(normal);
                                BT_Write("HSN "+hsn);
                                BluetoothPrintDriver.BT_Write(HT);    //
                                BluetoothPrintDriver.BT_Write(LF);    //
                            } else {
                                if (statusnets_counter.equals("ok")) {
                                    wifiSocket2.WIFI_Write(left);    //
                                    wifiSocket2.WIFI_Write(normal);
                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                    wifiSocket2.WIFI_Write(HT);    //
                                    wifiSocket2.WIFI_Write(LF);    //
                                }else {
                                    if (statusnets.equals("ok")) {
                                        wifiSocket.WIFI_Write(left);    //
                                        wifiSocket.WIFI_Write(normal);
                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                        wifiSocket.WIFI_Write(HT);    //
                                        wifiSocket.WIFI_Write(LF);    //
                                    }
                                }
                            }
                        }
                    }

                }
            }



            String phon = "0";

            Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
            if (caddress1.moveToFirst()) {
                phon = caddress1.getString(2);
            }

            TextView tvvs = new TextView(Refundswise_Saleslist.this);
            tvvs.setText(phon);


            Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
            if (us_name1.moveToLast()) {
//            Toast.makeText(Refundswise_Saleslist.this, "user id there", Toast.LENGTH_LONG).show();
                String na53 = us_name1.getString(53);
                String na38 = us_name1.getString(38);
                String na39 = us_name1.getString(39);
                String na40 = us_name1.getString(40);
                String na41 = us_name1.getString(41);
                String na42 = us_name1.getString(42);
                String na43 = us_name1.getString(43);
                String na44 = us_name1.getString(44);
                String na45 = us_name1.getString(45);
                String na46 = us_name1.getString(46);
                String na47 = us_name1.getString(47);
                String na48 = us_name1.getString(48);
                String na49 = us_name1.getString(49);
                String na50 = us_name1.getString(50);
                String na51 = us_name1.getString(51);
                String na52 = us_name1.getString(52);
                String na38_value = us_name1.getString(54);
                String na39_value = us_name1.getString(55);
                String na40_value = us_name1.getString(56);
                String na41_value = us_name1.getString(57);
                String na42_value = us_name1.getString(58);
                String na43_value = us_name1.getString(59);
                String na44_value = us_name1.getString(60);
                String na45_value = us_name1.getString(61);
                String na46_value = us_name1.getString(62);
                String na47_value = us_name1.getString(63);
                String na48_value = us_name1.getString(64);
                String na49_value = us_name1.getString(65);
                String na50_value = us_name1.getString(66);
                String na51_value = us_name1.getString(67);
                String na52_value = us_name1.getString(68);

                String proc = us_name1.getString(69);

                TextView hid = new TextView(Refundswise_Saleslist.this);
                hid.setText(proc);

                if (hid.getText().toString().equals("off")) {
                    Cursor cursorr = null;
                    if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymmethoda.toString().equals("  Home delivery")) {
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                    if (cursorr.moveToFirst()) {

                        do {

                            String name = cursorr.getString(1);
                            String value = cursorr.getString(2);

                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT));
                            row.setGravity(Gravity.CENTER);

                            TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                            TextView tvv = new TextView(Refundswise_Saleslist.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText(name);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv1.setText(value);
                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                            //tv2.setLayoutParams(lp);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                            tv2.append(name + " @ " + value + "%");
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(tv2);

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            //tv3.setPadding(0,0,10,0);
                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                            float tota = mul;
                            String tota1 = String.format("%.2f", tota);
                            tv3.setText(String.valueOf(tota));
                            //row.addView(tv3);


                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            String value2 = tv3.getText().toString();
                            row.addView(tv3);

                            tableLayout1.addView(row);

                            String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                            allbuftaxestype2 = new byte[][]{
                                    left, normal, mod1.getBytes(), HT, LF
                                    //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                            };
                            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                            if (statussusbs.toString().equals("ok")) {
                                BluetoothPrintDriver.BT_Write(left);    //
                                BT_Write(normal);
                                BT_Write(mod1);
                                BluetoothPrintDriver.BT_Write(HT);    //
                                BluetoothPrintDriver.BT_Write(LF);    //
                            } else {
                                if (statusnets_counter.toString().equals("ok")) {
                                    wifiSocket2.WIFI_Write(left);    //
                                    wifiSocket2.WIFI_Write(normal);
                                    wifiSocket2.WIFI_Write(mod1);
                                    wifiSocket2.WIFI_Write(HT);    //
                                    wifiSocket2.WIFI_Write(LF);    //
                                }else {
                                    if (statusnets.toString().equals("ok")) {
                                        wifiSocket.WIFI_Write(left);    //
                                        wifiSocket.WIFI_Write(normal);
                                        wifiSocket.WIFI_Write(mod1);
                                        wifiSocket.WIFI_Write(HT);    //
                                        wifiSocket.WIFI_Write(LF);    //
                                    }
                                }
                            }

                        } while (cursorr.moveToNext());
                    }
                } else {
                    for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                        int i1 = 0;
                        if (i2 == 38) {
                            i1 = 54;
                        }
                        if (i2 == 39) {
                            i1 = 55;
                        }
                        if (i2 == 40) {
                            i1 = 56;
                        }
                        if (i2 == 41) {
                            i1 = 57;
                        }
                        if (i2 == 42) {
                            i1 = 58;
                        }
                        if (i2 == 43) {
                            i1 = 59;
                        }
                        if (i2 == 44) {
                            i1 = 60;
                        }
                        if (i2 == 45) {
                            i1 = 61;
                        }
                        if (i2 == 46) {
                            i1 = 62;
                        }
                        if (i2 == 47) {
                            i1 = 63;
                        }
                        if (i2 == 48) {
                            i1 = 64;
                        }
                        if (i2 == 49) {
                            i1 = 65;
                        }
                        if (i2 == 50) {
                            i1 = 66;
                        }
                        if (i2 == 51) {
                            i1 = 67;
                        }
                        if (i2 == 52) {
                            i1 = 68;
                        }


                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv.setGravity(Gravity.START);
                        tv.setTextSize(15);
                        //text = cursor.getString(1);
//                String v = na;

                        tv.setText(us_name1.getString(i2));


                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        //text = cursor.getString(1);
                        tv1.setText(us_name1.getString(i1));
                        String value1 = "0";
                        if (tv1.getText().toString().equals("")) {

                        } else {
                            value1 = tv1.getText().toString();
                        }


                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);
//                    Toast.makeText(Refundswise_Saleslist.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

//                    Toast.makeText(Refundswise_Saleslist.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                        TextView tv33 = new TextView(Refundswise_Saleslist.this);
                        tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv33.setText(String.valueOf(tota));
                        tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv3.setTextColor(Color.parseColor("#000000"));
                        //row.addView(tv3);


                        tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv33);

                        String value2 = tv33.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                        if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                                || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                        } else {
                            tableLayout1.addView(row);

                            String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);
                            allbuftaxestype2 = new byte[][]{
                                    left, normal, mod1.getBytes(), HT, LF
                                    //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                            };
                            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                            if (statussusbs.toString().equals("ok")) {
                                BluetoothPrintDriver.BT_Write(left);    //
                                BT_Write(normal);
                                BT_Write(mod1);
                                BluetoothPrintDriver.BT_Write(HT);    //
                                BluetoothPrintDriver.BT_Write(LF);    //
                            } else {
                                if (statusnets_counter.toString().equals("ok")) {
                                    wifiSocket2.WIFI_Write(left);    //
                                    wifiSocket2.WIFI_Write(normal);
                                    wifiSocket2.WIFI_Write(mod1);
                                    wifiSocket2.WIFI_Write(HT);    //
                                    wifiSocket2.WIFI_Write(LF);    //
                                }else {
                                    if (statusnets.toString().equals("ok")) {
                                        wifiSocket.WIFI_Write(left);    //
                                        wifiSocket.WIFI_Write(normal);
                                        wifiSocket.WIFI_Write(mod1);
                                        wifiSocket.WIFI_Write(HT);    //
                                        wifiSocket.WIFI_Write(LF);    //
                                    }
                                }
                            }
                        }

                    }
                }

            } else {
//            Toast.makeText(Refundswise_Saleslist.this, "user id not there", Toast.LENGTH_LONG).show();
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                        allbuftaxestype2 = new byte[][]{
                                left, normal, mod1.getBytes(), HT, LF
                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                        };
                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                        if (statussusbs.toString().equals("ok")) {
                            BluetoothPrintDriver.BT_Write(left);    //
                            BT_Write(normal);
                            BT_Write(mod1);
                            BluetoothPrintDriver.BT_Write(HT);    //
                            BluetoothPrintDriver.BT_Write(LF);    //
                        } else {
                            if (statusnets_counter.toString().equals("ok")) {
                                wifiSocket2.WIFI_Write(left);    //
                                wifiSocket2.WIFI_Write(normal);
                                wifiSocket2.WIFI_Write(mod1);
                                wifiSocket2.WIFI_Write(HT);    //
                                wifiSocket2.WIFI_Write(LF);    //
                            }else {
                                if (statusnets.toString().equals("ok")) {
                                    wifiSocket.WIFI_Write(left);    //
                                    wifiSocket.WIFI_Write(normal);
                                    wifiSocket.WIFI_Write(mod1);
                                    wifiSocket.WIFI_Write(HT);    //
                                    wifiSocket.WIFI_Write(LF);    //
                                }
                            }
                        }

                    } while (cursorr.moveToNext());
                }
            }

            float sum = 0;
            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                TextView mTextView = (TextView) mRow.getChildAt(2);
                sum = sum
                        + Float.parseFloat(mTextView.getText().toString());
            }


            String newsum = String.format("%.2f", sum);

            if (sum == 0 || sum == 0.0 || sum == 0.00) {

            } else {
                allbuftax = new byte[][]{
                        setHT32, left, "Tax".getBytes(), HT, newsum.getBytes(), LF
                };

                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT32);    //
                    BluetoothPrintDriver.BT_Write(left);    //
                    BT_Write("Tax");
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write(newsum);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT32);    //
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write("Tax");
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(newsum);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT32);    //
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write("Tax");
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(newsum);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


///////////////////////////////// discount


            Cursor cursor5 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
            if (cursor5.moveToFirst()) {
                dsirs = cursor5.getString(7);
                float ds = Float.parseFloat(dsirs);
                dsirs1 = String.format("%.2f", ds);
            } else {
                dsirs = "0";
            }
            TextView dis = new TextView(Refundswise_Saleslist.this);
            Cursor cursor7 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
            if (cursor7.moveToFirst()) {
                taxpe = cursor7.getString(5);
                float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
                on1 = String.format("%.1f", on);
                if (on % 1 != 0) {
                    // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                    int newww = (int) on;
                    float decpart = on - newww;
                    ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                    ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                    if (decpart > 0.5) {
                        ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                        float addall = on;
                        //alltotal.setText(String.valueOf(newww + 1));
                        //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                        float dee = 1 - decpart;
                        dis.setText("+ " + String.format("%.2f", dee));

                    } else {
                        // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                        //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                        float addall = on;
                        //alltotal1.setText(String.valueOf(newww));
                        //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                        dis.setText("- " + String.format("%.2f", decpart));

                    }
                } else {
                    ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    int addall = (int) on;
                    //alltotal1.setText(String.valueOf(addall));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("+ " + "0.00");
                    ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
                }
            } else {
                taxpe = "0";
                dis.setText("+ " + "0.00");
                on1 = "0";
            }

            //tot-is-subtotal

            String alldiscinperc1 = "Discount(" + taxpe + "%)";
            allbufdisc = new byte[][]{
                    setHT32, left, alldiscinperc1.getBytes(), HT, on1.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT32);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(alldiscinperc1);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write(on1);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT32);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(alldiscinperc1);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(on1);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT32);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(alldiscinperc1);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(on1);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }
            float newe;

//////////////////////////////////////////

            Cursor cursor113 = db.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
            if (cursor113.moveToFirst()) {
                float level = cursor113.getFloat(0);
                total = String.valueOf(level);
                Float total1 = Float.parseFloat(total);
                total_disc_print_q = String.format("%.2f", total1);

                allbufrounded = new byte[][]{
                        setHT32, left, "Savings".getBytes(), HT, total_disc_print_q.getBytes(), LF
                };

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT32);    //
                    BluetoothPrintDriver.BT_Write(left);    //
                    BT_Write("Savings");
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write(total_disc_print_q);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT32);    //
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write("Savings");
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(total_disc_print_q);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT32);    //
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write("Savings");
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(total_disc_print_q);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }

            }
////////////////////////////////

            Cursor cursor = db.rawQuery("SELECT * FROM billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (cursor.moveToFirst()){
                String t_total_points = cursor.getString(16);
                String v_tq = cursor.getString(17);

                TextView tv = new TextView(Refundswise_Saleslist.this);
                tv.setText(t_total_points);

                if (tv.getText().toString().equals("")){

                }else {
                    allbufrounded = new byte[][]{
                            setHT32, left, "Loyalty".getBytes(), HT, v_tq.getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(setHT32);    //
                        BluetoothPrintDriver.BT_Write(left);    //
                        BT_Write("Loyalty(" + t_total_points + ")");
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BT_Write(v_tq);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(setHT32);    //
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write("Loyalty(" + t_total_points + ")");
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(v_tq);
                            wifiSocket2.WIFI_Write(LF);    //
                        } else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(setHT32);    //
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write("Loyalty(" + t_total_points + ")");
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(v_tq);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                }
            }

////////////////////////////////rounded

            if (taxpe.toString().equals("")) {
                newe = sum + Float.parseFloat(String.valueOf(tot));
            } else {
                newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
            }

            TextView round = new TextView(Refundswise_Saleslist.this);
            if (newe % 1 != 0) {
                // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                int newww = (int) newe;
                float decpart = newe - newww;
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                if (decpart > 0.5) {
                    ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                    float addall = newe;
                    //alltotal.setText(String.valueOf(newww + 1));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    round.setText("+ " + String.format("%.2f", dee));
                } else {
                    // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    float addall = newe;
                    //alltotal1.setText(String.valueOf(newww));
                    //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    round.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                int addall = (int) newe;
                //alltotal1.setText(String.valueOf(addall));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                round.setText("+ " + "0.00");
                ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
            }

            allbufrounded = new byte[][]{
                    setHT32, left, "Rounded".getBytes(), HT, round.getText().toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT32);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Rounded");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write(round.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT32);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Rounded");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(round.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT32);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Rounded");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(round.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }

/////////////////////refund

            //19
            Cursor billcan = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (billcan.moveToFirst()) {
                String asd = billcan.getString(18);
                refundamounta = String.valueOf(asd);
            } else {
                Cursor billcan_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (billcan_cancel.moveToFirst()) {
                    String asd = billcan_cancel.getString(17);
                    refundamounta = String.valueOf(asd);
                }
            }

            Cursor c1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (c1.moveToFirst()) {
                String c11 = c1.getString(2);
                alltotal1 = c11;
            } else {
                alltotal1 = "0";
            }
            float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
            String mn1 = String.valueOf(min);

            allbufrounded = new byte[][]{
                    setHT32, left, "Refund".getBytes(), HT, "-".getBytes(), mn1.toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT32);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Refund");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("-");
                BT_Write(mn1);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT32);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Refund");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("-");
                    wifiSocket2.WIFI_Write(mn1);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT32);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Refund");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("-");
                        wifiSocket.WIFI_Write(mn1);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
            final String normal1 = normal5.format(new Date());

            Date dt = new Date();
            SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
            final String time1 = sdf1.format(dt);

            Date dtt = new Date();
            SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
            String time24 = sdf1t.format(dtt);

            Cursor dateq = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (dateq.moveToFirst()) {
                datee = dateq.getString(25);
                timee = dateq.getString(12);
            } else {
                Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (date_cancel.moveToFirst()) {
                    datee = date_cancel.getString(22);
                    timee = date_cancel.getString(12);
                }
            }

            String refundtime = "(" + datee + "," + timee + ")";
            allbuf6 = new byte[][]{
                    left, normal, refundtime.getBytes(), LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write(refundtime);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write(refundtime);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write(refundtime);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }
/////////////////////////

            float all = Float.parseFloat(alltotal1);
            String newf = String.valueOf(all);

            allbufrounded = new byte[][]{
                    setHT3212, left, "Total".getBytes(), HT, "Rs ".getBytes(), newf.toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT3212);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Total");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write(insert1_rs);
                BT_Write(newf);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT3212);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Total");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(newf);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT3212);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Total");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(newf);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }

            tvkot.setText(bill_coun);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, bill_coun.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(left);    //
                    BT_Write("Bill id.");
                    BT_Write(bill_coun);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write("Bill id.");
                        wifiSocket2.WIFI_Write(bill_coun);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write("Bill id.");
                            wifiSocket.WIFI_Write(bill_coun);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            footer();
            cashopen();
        }
    }

    public void footer(){

        Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }

        Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x27, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x08,0x17,0x27,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    allbufline = new byte[][]{
                            left, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    setHT32 = new byte[]{0x1b,0x44,0x19,0x00};//2 tabs 2"
                    setHT321 = new byte[]{0x1b,0x44,0x13,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x15,0x00};//2 tabs 3"
                    setHT33 = new byte[] {0x1b,0x44,0x09,0x19,0x00};//3 tabs 2"
                    setHT34 = new byte[]{0x1b,0x44,0x04,0x12,0x19,0x00};//4 tabs 2"
                    nPaperWidth = 384;
                    allbufline = new byte[][]{
                            left, "--------------------------------".getBytes(), LF

                    };
                }
            }while(cc.moveToNext());
        }

//        allbuf2 = new byte[][]{
//                normal, "Thank you! visit again.".getBytes(), LF, LF
//
//        };
//        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//        if (statussusbs.toString().equals("ok")) {
//            BluetoothPrintDriver.BT_Write(normal);	//
//            BT_Write("Thank you! visit again.");
//            BluetoothPrintDriver.BT_Write(LF);	//
//            BluetoothPrintDriver.BT_Write(LF);	//
//        } else {
//            if (statusnets_counter.toString().equals("ok")) {
//                wifiSocket2.WIFI_Write(normal);	//
//                wifiSocket2.WIFI_Write("Thank you! visit again.");
//                wifiSocket2.WIFI_Write(LF);	//
//                wifiSocket2.WIFI_Write(LF);	//
//            }else {
//                if (statusnets.toString().equals("ok")) {
//                    wifiSocket.WIFI_Write(normal);	//
//                    wifiSocket.WIFI_Write("Thank you! visit again.");
//                    wifiSocket.WIFI_Write(LF);	//
//                    wifiSocket.WIFI_Write(LF);	//
//                }
//            }
//        }

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")){

        }else {
            allbuf2 = new byte[][]{
                    normal, strbillone.getBytes(), LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(normal);	//
                BT_Write(strbillone);
                BluetoothPrintDriver.BT_Write(LF);	//
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(normal);	//
                    wifiSocket2.WIFI_Write(strbillone);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(normal);	//
                        wifiSocket.WIFI_Write(strbillone);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }
        }

        feedcut();

    }

    public void feedcut(){
        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                }
                else {
                    feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                }
            }while(cc.moveToNext());
        }

        byte[][] allbuf = new byte[][]{
                feedcut2
        };
        if (statussusbs.toString().equals("ok")) {
            BluetoothPrintDriver.BT_Write(feedcut2);	//
        }else {
            if (statusnets_counter.toString().equals("ok")) {
                wifiSocket2.WIFI_Write(feedcut2);	//
            }else {
                if (statusnets.toString().equals("ok")) {
                    wifiSocket.WIFI_Write(feedcut2);	//
                }
            }
        }

        if (str_print_ty.equals("POS")) {
            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(feedcut2);	//
            }else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(feedcut2);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(feedcut2);	//
                    }
                }
            }
        }

    }

    public void print_printbillcopy1(Dialog dialog) {

        fmt = new Formatter();

        Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }

        Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }

        /////////////Toast.makeText(Refundswise_Saleslist.this, "printbillonly one ", Toast.LENGTH_SHORT).show();
        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] HT1 = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor print_ty = db1.rawQuery("SELECT * FROM Printer_type", null);
        if (print_ty.moveToFirst()){
            str_print_ty = print_ty.getString(1);
        }

        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    if (str_print_ty.toString().equals("Generic") || str_print_ty.toString().equals("Epson/others")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x20, 0x29, 0x00};//4 tabs 3"
                        nPaperWidth = 576;
                        charlength = 23;
                        charlength1 = 46;
                        charlength2 = 69;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("POS")) {
                            setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                            setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                            nPaperWidth = 576;
                            charlength = 23;
                            charlength1 = 46;
                            charlength2 = 69;
                            quanlentha = 4;
                            HT1 = new byte[]{0x2F};
                            str_line = "------------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------------".getBytes(), LF

                            };
                        }
                    }
                }
                else {
                    if (str_print_ty.toString().equals("Generic")) {
//                        Toast.makeText(Refundswise_Saleslist.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("Epson/others")) {
//                        Toast.makeText(Refundswise_Saleslist.this, "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            nPaperWidth = 384;
                            charlength = 16;
                            charlength1 = 32;
                            charlength2 = 48;
                            quanlentha = 5;
                            HT1 = new byte[]{0x09};
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }else {
                            if (str_print_ty.toString().equals("POS")) {
                                setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                nPaperWidth = 384;
                                charlength = 11;
                                charlength1 = 22;
                                charlength2 = 33;
                                quanlentha = 3;
                                HT1 = new byte[]{0x2F};
                                str_line = "--------------------------------";
                                allbufline = new byte[][]{
                                        left, un1, "--------------------------------".getBytes(), LF
                                };
                            }
                        }
                    }
                }
            }while(cc.moveToNext());
        }

        imageViewPicture = (ImageView) dialog.findViewById(R.id.imageViewPicture);
        mView = dialog.findViewById(R.id.f_viewreturns);

        Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            do {
                strcompanyname = getcom.getString(1);
                straddress1 = getcom.getString(14);
                straddress2 = getcom.getString(17);
                straddress3 = getcom.getString(18);
                strphone = getcom.getString(2);
                stremailid = getcom.getString(15);
                strwebsite = getcom.getString(16);
                strtaxone = getcom.getString(10);
                strbillone = getcom.getString(12);
            } while (getcom.moveToNext());
        }

        tvkot.setText(strcompanyname);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(strcompanyname+"\n");
        }

/////////
        tvkot.setText(straddress1);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(straddress1+"\n");
        }


        tvkot.setText(straddress2);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(straddress2+"\n");
        }


        tvkot.setText(strphone);
        String pp = "Ph. " + strphone;
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(strphone+"\n");
        }


        tvkot.setText(stremailid);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(stremailid+"\n");
        }


        tvkot.setText(strwebsite);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(strwebsite+"\n");
        }


        tvkot.setText(strtaxone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(strtaxone+"\n");
        }

        fmt.format("------------------------------------------------", " ");



        Cursor cursor10 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()) {
            billtypea = cursor10.getString(5);
            paymmethoda = cursor10.getString(6);
        }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

        if (billtypea.toString().equals("  Cash")) {
            billtypeaa = "Cash"; //0
        }
        if (billtypea.toString().equals("  Card")) {
            billtypeaa = "Card"; //0
        }
        if (billtypea.toString().equals("  Paytm")) {
            billtypeaa = "Paytm"; //0
        }
        if (billtypea.toString().equals("  Mobikwik")) {
            billtypeaa = "Mobikwik"; //0
        }
        if (billtypea.toString().equals("  Freecharge")) {
            billtypeaa = "Freecharge"; //0
        }
        if (billtypea.toString().equals("  Pay Later")) {
            billtypeaa = "Pay Later"; //0
        }
        if (billtypea.toString().equals("  Cheque")) {
            billtypeaa = "Cheque"; //0
        }
        if (billtypea.toString().equals("  Sodexo")) {
            billtypeaa = "Sodexo"; //0
        }
        if (billtypea.toString().equals("  Zeta")) {
            billtypeaa = "Zeta"; //0
        }
        if (billtypea.toString().equals("  Ticket")) {
            billtypeaa = "Ticket"; //0
        }
        if (billtypea.toString().equals("  Upiqr")) {
            billtypeaa = "Upiqr"; //0
        }
        billtypeaa = billtypea.toString().replace(" ", "");

        fmt.format("%-34s %13s\n", "Bill no." + billnumb, billtypeaa);

        if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
//                paymmethodaa = "Dine-in";
            //billtypee.setText("Dine-in");
            if (account_selection.toString().equals("Dine") || account_selection.toString().equals("Qsr")) {
                paymmethodaa = "Dine-in";
            }else {
                paymmethodaa = "General";
            }
        } else {
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                paymmethodaa = "Takeaway";
                //billtypee.setText("Takeaway");
            } else {
                paymmethodaa = "Home delivery";
                //billtypee.setText("Home delivery");
            }
        }

        Cursor date = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (date.moveToFirst()) {
            datee = date.getString(25);
            timee = date.getString(12);
        } else {
            Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        fmt.format("%-34s %13s\n", paymmethodaa, datee);

        Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9.moveToFirst()) {
            tableida = cursor9.getString(15);
        }
//        else {
//            Cursor cursor9_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

        Cursor vbnm = db1.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
        if (vbnm.moveToFirst()) {
            assa1 = vbnm.getString(1);
            assa2 = vbnm.getString(2);
        }
        TextView cx = new TextView(Refundswise_Saleslist.this);
        cx.setText(assa1);
        if (cx.getText().toString().equals("")) {
            tableidaa = "Tab" + assa2;
            allbuftime = new byte[][]{
                    setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
            };
        } else {
            tableidaa = "Tab" + assa1;
            allbuftime = new byte[][]{
                    setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
            };
        }

        fmt.format("%-34s %13s\n", tableidaa, timee);

        String u_name = "";
        Cursor cursor9_1 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9_1.moveToFirst()) {
            u_name = cursor9_1.getString(45);
        }
        cursor9_1.close();

        TextView tv_u_name = new TextView(Refundswise_Saleslist.this);
        tv_u_name.setText(u_name);

        if (tv_u_name.getText().toString().equals("")){

        }else {
            fmt.format("Counter person: " + tv_u_name.getText().toString()+"\n", " ");
        }

        fmt.format("------------------------------------------------", " ");

        Cursor caddress = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress.moveToFirst()) {
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            if (nam.toString().length() > 0 || addr.toString().length() > 0 ||
                    phon.toString().length() > 0 || emai.toString().length() > 0) {
                fmt.format("Customer:"+"\n");
            } else {

            }

            if (nam.toString().length() > 0) {
                fmt.format(nam+"\n");
            } else {

            }

            if (addr.toString().length() > 0) {
                fmt.format(addr+"\n");
            } else {

            }

            if (phon.toString().length() > 0) {
                String cust_ph = "Ph. " + phon.toString();
                fmt.format(cust_ph+"\n");
            } else {

            }

            if (emai.toString().length() > 0) {
                fmt.format(emai+"\n");
            } else {

            }

            fmt.format("------------------------------------------------", " ");
        }

        fmt.format("%-5s %-25s %7s %7s\n", "Qty", "Item", "Price", "Amount");

        fmt.format("------------------------------------------------", " ");

        Cursor ccursorr = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);

                final String newids = ccursorr.getString(0);

                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    Cursor modcursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                        if (cursor4.moveToFirst()) {
                            sub2a = cursor4.getFloat(0);
                            String sub2a1 = String.valueOf(sub2a);
                            ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                            ss1 = String.format("%.1f", ss);
                        }

                        String[][] items_array = {{value, name, pricee, ss1}};

                        for (int i = 0; i < items_array.length; i++) {
                            List<String> item_split_qty = new ArrayList<>();
                            List<String> item_split_item = new ArrayList<>();
                            List<String> item_split_price = new ArrayList<>();
                            List<String> item_split_amount = new ArrayList<>();

                            for (int j = 0; j < items_array[i][0].length(); j += 5) {
                                item_split_qty.add(items_array[i][0].substring(j, Math.min(items_array[i][0].length(), j + 5)));
                            }
                            for (int j = 0; j < items_array[i][1].length(); j += 25) {
                                item_split_item.add(items_array[i][1].substring(j, Math.min(items_array[i][1].length(), j + 25)));
                            }
                            for (int j = 0; j < items_array[i][2].length(); j += 7) {
                                item_split_price.add(items_array[i][2].substring(j, Math.min(items_array[i][2].length(), j + 7)));
                            }
                            for (int j = 0; j < items_array[i][3].length(); j += 7) {
                                item_split_amount.add(items_array[i][3].substring(j, Math.min(items_array[i][3].length(), j + 7)));
                            }

                            Log.d("DATA_QTY", String.valueOf(item_split_qty));
                            Log.d("DATA_ITEM", String.valueOf(item_split_item));
                            Log.d("DATA_PRICE", String.valueOf(item_split_price));
                            Log.d("DATA_Amount", String.valueOf(item_split_amount));

                            List<Integer> maxListValue = new ArrayList<>();
                            maxListValue.add(item_split_qty.size());
                            maxListValue.add(item_split_item.size());
                            maxListValue.add(item_split_price.size());
                            maxListValue.add(item_split_amount.size());

                            int maxValue = maxListValue.get(0);

                            for (int x = 1; x < maxListValue.size(); x++) {
                                if (maxValue < maxListValue.get(x)) {
                                    maxValue = maxListValue.get(x);
                                }
                            }

                            Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                            for (int k = 0; k < maxValue; k++) {

                                String qty,item,price_new,amount = "";

                                boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                boolean item_check = (k >= 0) && (k < item_split_item.size());
                                boolean price_check = (k >= 0) && (k < item_split_price.size());
                                boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                if(qty_check == true){
                                    qty = item_split_qty.get(k);
                                }
                                else {
                                    qty = " ";
                                }
                                if(item_check == true){
                                    item = item_split_item.get(k);
                                }
                                else {
                                    item = " ";
                                }
                                if(price_check == true){
                                    price_new = item_split_price.get(k);
                                }
                                else {
                                    price_new = " ";
                                }
                                if(amount_check == true){
                                    amount = item_split_amount.get(k);
                                }
                                else {
                                    amount = " ";
                                }

                                fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                            }
                            item_split_qty.removeAll(item_split_qty);
                            item_split_item.removeAll(item_split_item);
                            item_split_price.removeAll(item_split_price);
                            item_split_amount.removeAll(item_split_amount);

                        }

                        Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor.moveToFirst()) {
                            String hsn = ccursor.getString(34);

                            TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {
                                fmt.format("HSN "+hsn, " ");
                            }
                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            String[][] items_array1 = {{"", ">", modiname, modpricestr}};

                            for (int i = 0; i < items_array1.length; i++) {
                                List<String> item_split_qty = new ArrayList<>();
                                List<String> item_split_item = new ArrayList<>();
                                List<String> item_split_price = new ArrayList<>();
                                List<String> item_split_amount = new ArrayList<>();

                                for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                    item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                }
                                for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                    item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                }
                                for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                    item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                }
                                for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                    item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                }

                                Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                List<Integer> maxListValue = new ArrayList<>();
                                maxListValue.add(item_split_qty.size());
                                maxListValue.add(item_split_item.size());
                                maxListValue.add(item_split_price.size());
                                maxListValue.add(item_split_amount.size());

                                int maxValue = maxListValue.get(0);

                                for (int x = 1; x < maxListValue.size(); x++) {
                                    if (maxValue < maxListValue.get(x)) {
                                        maxValue = maxListValue.get(x);
                                    }
                                }

                                Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                for (int k = 0; k < maxValue; k++) {

                                    String qty,item,price_new,amount = "";

                                    boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                    boolean item_check = (k >= 0) && (k < item_split_item.size());
                                    boolean price_check = (k >= 0) && (k < item_split_price.size());
                                    boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                    if(qty_check == true){
                                        qty = item_split_qty.get(k);
                                    }
                                    else {
                                        qty = " ";
                                    }
                                    if(item_check == true){
                                        item = item_split_item.get(k);
                                    }
                                    else {
                                        item = " ";
                                    }
                                    if(price_check == true){
                                        price_new = item_split_price.get(k);
                                    }
                                    else {
                                        price_new = " ";
                                    }
                                    if(amount_check == true){
                                        amount = item_split_amount.get(k);
                                    }
                                    else {
                                        amount = " ";
                                    }

                                    fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                }
                                item_split_qty.removeAll(item_split_qty);
                                item_split_item.removeAll(item_split_item);
                                item_split_price.removeAll(item_split_price);
                                item_split_amount.removeAll(item_split_amount);

                            }

                            Cursor cccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (cccursor.moveToFirst()) {
                                String hsn = cccursor.getString(34);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    fmt.format("HSN "+hsn, " ");
                                }
                            }

                            final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            final TextView tvv = new TextView(Refundswise_Saleslist.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);


                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(ss));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    String[][] items_array1 = {{"", "", "", "("+"-"+total_disc_print_q+")"}};

                                    for (int i = 0; i < items_array1.length; i++) {
                                        List<String> item_split_qty = new ArrayList<>();
                                        List<String> item_split_item = new ArrayList<>();
                                        List<String> item_split_price = new ArrayList<>();
                                        List<String> item_split_amount = new ArrayList<>();

                                        for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                            item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                        }
                                        for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                            item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                        }
                                        for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                            item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                        }
                                        for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                            item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                        }

                                        Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                        Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                        Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                        Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                        List<Integer> maxListValue = new ArrayList<>();
                                        maxListValue.add(item_split_qty.size());
                                        maxListValue.add(item_split_item.size());
                                        maxListValue.add(item_split_price.size());
                                        maxListValue.add(item_split_amount.size());

                                        int maxValue = maxListValue.get(0);

                                        for (int x = 1; x < maxListValue.size(); x++) {
                                            if (maxValue < maxListValue.get(x)) {
                                                maxValue = maxListValue.get(x);
                                            }
                                        }

                                        Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                        for (int k = 0; k < maxValue; k++) {

                                            String qty,item,price_new,amount = "";

                                            boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                            boolean item_check = (k >= 0) && (k < item_split_item.size());
                                            boolean price_check = (k >= 0) && (k < item_split_price.size());
                                            boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                            if(qty_check == true){
                                                qty = item_split_qty.get(k);
                                            }
                                            else {
                                                qty = " ";
                                            }
                                            if(item_check == true){
                                                item = item_split_item.get(k);
                                            }
                                            else {
                                                item = " ";
                                            }
                                            if(price_check == true){
                                                price_new = item_split_price.get(k);
                                            }
                                            else {
                                                price_new = " ";
                                            }
                                            if(amount_check == true){
                                                amount = item_split_amount.get(k);
                                            }
                                            else {
                                                amount = " ";
                                            }

                                            fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                        }
                                        item_split_qty.removeAll(item_split_qty);
                                        item_split_item.removeAll(item_split_item);
                                        item_split_price.removeAll(item_split_price);
                                        item_split_amount.removeAll(item_split_amount);

                                    }
                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);

                        String[][] items_array = {{value, name, pricee, tototott}};

                        for (int i = 0; i < items_array.length; i++) {
                            List<String> item_split_qty = new ArrayList<>();
                            List<String> item_split_item = new ArrayList<>();
                            List<String> item_split_price = new ArrayList<>();
                            List<String> item_split_amount = new ArrayList<>();

                            for (int j = 0; j < items_array[i][0].length(); j += 5) {
                                item_split_qty.add(items_array[i][0].substring(j, Math.min(items_array[i][0].length(), j + 5)));
                            }
                            for (int j = 0; j < items_array[i][1].length(); j += 25) {
                                item_split_item.add(items_array[i][1].substring(j, Math.min(items_array[i][1].length(), j + 25)));
                            }
                            for (int j = 0; j < items_array[i][2].length(); j += 7) {
                                item_split_price.add(items_array[i][2].substring(j, Math.min(items_array[i][2].length(), j + 7)));
                            }
                            for (int j = 0; j < items_array[i][3].length(); j += 7) {
                                item_split_amount.add(items_array[i][3].substring(j, Math.min(items_array[i][3].length(), j + 7)));
                            }

                            Log.d("DATA_QTY", String.valueOf(item_split_qty));
                            Log.d("DATA_ITEM", String.valueOf(item_split_item));
                            Log.d("DATA_PRICE", String.valueOf(item_split_price));
                            Log.d("DATA_Amount", String.valueOf(item_split_amount));

                            List<Integer> maxListValue = new ArrayList<>();
                            maxListValue.add(item_split_qty.size());
                            maxListValue.add(item_split_item.size());
                            maxListValue.add(item_split_price.size());
                            maxListValue.add(item_split_amount.size());

                            int maxValue = maxListValue.get(0);

                            for (int x = 1; x < maxListValue.size(); x++) {
                                if (maxValue < maxListValue.get(x)) {
                                    maxValue = maxListValue.get(x);
                                }
                            }

                            Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                            for (int k = 0; k < maxValue; k++) {

                                String qty,item,price_new,amount = "";

                                boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                boolean item_check = (k >= 0) && (k < item_split_item.size());
                                boolean price_check = (k >= 0) && (k < item_split_price.size());
                                boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                if(qty_check == true){
                                    qty = item_split_qty.get(k);
                                }
                                else {
                                    qty = " ";
                                }
                                if(item_check == true){
                                    item = item_split_item.get(k);
                                }
                                else {
                                    item = " ";
                                }
                                if(price_check == true){
                                    price_new = item_split_price.get(k);
                                }
                                else {
                                    price_new = " ";
                                }
                                if(amount_check == true){
                                    amount = item_split_amount.get(k);
                                }
                                else {
                                    amount = " ";
                                }

                                fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                            }
                            item_split_qty.removeAll(item_split_qty);
                            item_split_item.removeAll(item_split_item);
                            item_split_price.removeAll(item_split_price);
                            item_split_amount.removeAll(item_split_amount);

                        }

                        Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor.moveToFirst()) {
                            String hsn = ccursor.getString(34);

                            TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {
                                fmt.format("%-48s\n", "HSN " + hsn);
                            }
                        }

                        tv8 = new TextView(Refundswise_Saleslist.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    String[][] items_array1 = {{"", "", "", "("+"-"+total_disc_print_q+")"}};

                                    for (int i = 0; i < items_array1.length; i++) {
                                        List<String> item_split_qty = new ArrayList<>();
                                        List<String> item_split_item = new ArrayList<>();
                                        List<String> item_split_price = new ArrayList<>();
                                        List<String> item_split_amount = new ArrayList<>();

                                        for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                            item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                        }
                                        for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                            item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                        }
                                        for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                            item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                        }
                                        for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                            item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                        }

                                        Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                        Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                        Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                        Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                        List<Integer> maxListValue = new ArrayList<>();
                                        maxListValue.add(item_split_qty.size());
                                        maxListValue.add(item_split_item.size());
                                        maxListValue.add(item_split_price.size());
                                        maxListValue.add(item_split_amount.size());

                                        int maxValue = maxListValue.get(0);

                                        for (int x = 1; x < maxListValue.size(); x++) {
                                            if (maxValue < maxListValue.get(x)) {
                                                maxValue = maxListValue.get(x);
                                            }
                                        }

                                        Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                        for (int k = 0; k < maxValue; k++) {

                                            String qty,item,price_new,amount = "";

                                            boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                            boolean item_check = (k >= 0) && (k < item_split_item.size());
                                            boolean price_check = (k >= 0) && (k < item_split_price.size());
                                            boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                            if(qty_check == true){
                                                qty = item_split_qty.get(k);
                                            }
                                            else {
                                                qty = " ";
                                            }
                                            if(item_check == true){
                                                item = item_split_item.get(k);
                                            }
                                            else {
                                                item = " ";
                                            }
                                            if(price_check == true){
                                                price_new = item_split_price.get(k);
                                            }
                                            else {
                                                price_new = " ";
                                            }
                                            if(amount_check == true){
                                                amount = item_split_amount.get(k);
                                            }
                                            else {
                                                amount = " ";
                                            }

                                            fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                        }
                                        item_split_qty.removeAll(item_split_qty);
                                        item_split_item.removeAll(item_split_item);
                                        item_split_price.removeAll(item_split_price);
                                        item_split_amount.removeAll(item_split_amount);

                                    }
                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }
                }


            } while (ccursorr.moveToNext());
        }

        fmt.format("Returns/Cancel:"+"\n", " ");

        Cursor ccursorreturn = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorreturn.moveToFirst()) {

            do {

                String name = ccursorreturn.getString(1);
                String value = ccursorreturn.getString(2);
                String pq = ccursorreturn.getString(5);
                String itna = ccursorreturn.getString(2);
                String pricee = ccursorreturn.getString(3);
                String tototot = ccursorreturn.getString(4);

                final String newtt = ccursorreturn.getString(4);

                final String newid = ccursorreturn.getString(19);

                final String newids = ccursorreturn.getString(0);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor modt = db.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        if (modt.moveToFirst()) {
                            do {
                                //row.removeView(tv3);
                                float aq = modt.getFloat(0);
                                String aqq = String.valueOf(aq);
                                aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                aqq2 = String.format("%.1f", aqq1);
                            } while (modt.moveToNext());
                        }

                        String[][] items_array = {{value, name, pricee, aqq2}};

                        for (int i = 0; i < items_array.length; i++) {
                            List<String> item_split_qty = new ArrayList<>();
                            List<String> item_split_item = new ArrayList<>();
                            List<String> item_split_price = new ArrayList<>();
                            List<String> item_split_amount = new ArrayList<>();

                            for (int j = 0; j < items_array[i][0].length(); j += 5) {
                                item_split_qty.add(items_array[i][0].substring(j, Math.min(items_array[i][0].length(), j + 5)));
                            }
                            for (int j = 0; j < items_array[i][1].length(); j += 25) {
                                item_split_item.add(items_array[i][1].substring(j, Math.min(items_array[i][1].length(), j + 25)));
                            }
                            for (int j = 0; j < items_array[i][2].length(); j += 7) {
                                item_split_price.add(items_array[i][2].substring(j, Math.min(items_array[i][2].length(), j + 7)));
                            }
                            for (int j = 0; j < items_array[i][3].length(); j += 7) {
                                item_split_amount.add(items_array[i][3].substring(j, Math.min(items_array[i][3].length(), j + 7)));
                            }

                            Log.d("DATA_QTY", String.valueOf(item_split_qty));
                            Log.d("DATA_ITEM", String.valueOf(item_split_item));
                            Log.d("DATA_PRICE", String.valueOf(item_split_price));
                            Log.d("DATA_Amount", String.valueOf(item_split_amount));

                            List<Integer> maxListValue = new ArrayList<>();
                            maxListValue.add(item_split_qty.size());
                            maxListValue.add(item_split_item.size());
                            maxListValue.add(item_split_price.size());
                            maxListValue.add(item_split_amount.size());

                            int maxValue = maxListValue.get(0);

                            for (int x = 1; x < maxListValue.size(); x++) {
                                if (maxValue < maxListValue.get(x)) {
                                    maxValue = maxListValue.get(x);
                                }
                            }

                            Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                            for (int k = 0; k < maxValue; k++) {

                                String qty,item,price_new,amount = "";

                                boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                boolean item_check = (k >= 0) && (k < item_split_item.size());
                                boolean price_check = (k >= 0) && (k < item_split_price.size());
                                boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                if(qty_check == true){
                                    qty = item_split_qty.get(k);
                                }
                                else {
                                    qty = " ";
                                }
                                if(item_check == true){
                                    item = item_split_item.get(k);
                                }
                                else {
                                    item = " ";
                                }
                                if(price_check == true){
                                    price_new = item_split_price.get(k);
                                }
                                else {
                                    price_new = " ";
                                }
                                if(amount_check == true){
                                    amount = item_split_amount.get(k);
                                }
                                else {
                                    amount = " ";
                                }

                                fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                            }
                            item_split_qty.removeAll(item_split_qty);
                            item_split_item.removeAll(item_split_item);
                            item_split_price.removeAll(item_split_price);
                            item_split_amount.removeAll(item_split_amount);

                        }

                        Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor.moveToFirst()) {
                            String hsn = ccursor.getString(38);

                            TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {
                                fmt.format("HSN "+hsn, " ");
                            }
                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            String[][] items_array1 = {{"", ">", modiname, modpricestr}};

                            for (int i = 0; i < items_array1.length; i++) {
                                List<String> item_split_qty = new ArrayList<>();
                                List<String> item_split_item = new ArrayList<>();
                                List<String> item_split_price = new ArrayList<>();
                                List<String> item_split_amount = new ArrayList<>();

                                for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                    item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                }
                                for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                    item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                }
                                for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                    item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                }
                                for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                    item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                }

                                Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                List<Integer> maxListValue = new ArrayList<>();
                                maxListValue.add(item_split_qty.size());
                                maxListValue.add(item_split_item.size());
                                maxListValue.add(item_split_price.size());
                                maxListValue.add(item_split_amount.size());

                                int maxValue = maxListValue.get(0);

                                for (int x = 1; x < maxListValue.size(); x++) {
                                    if (maxValue < maxListValue.get(x)) {
                                        maxValue = maxListValue.get(x);
                                    }
                                }

                                Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                for (int k = 0; k < maxValue; k++) {

                                    String qty,item,price_new,amount = "";

                                    boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                    boolean item_check = (k >= 0) && (k < item_split_item.size());
                                    boolean price_check = (k >= 0) && (k < item_split_price.size());
                                    boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                    if(qty_check == true){
                                        qty = item_split_qty.get(k);
                                    }
                                    else {
                                        qty = " ";
                                    }
                                    if(item_check == true){
                                        item = item_split_item.get(k);
                                    }
                                    else {
                                        item = " ";
                                    }
                                    if(price_check == true){
                                        price_new = item_split_price.get(k);
                                    }
                                    else {
                                        price_new = " ";
                                    }
                                    if(amount_check == true){
                                        amount = item_split_amount.get(k);
                                    }
                                    else {
                                        amount = " ";
                                    }

                                    fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                }
                                item_split_qty.removeAll(item_split_qty);
                                item_split_item.removeAll(item_split_item);
                                item_split_price.removeAll(item_split_price);
                                item_split_amount.removeAll(item_split_amount);

                            }

                            Cursor cccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (cccursor.moveToFirst()) {
                                String hsn = cccursor.getString(38);

                                TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    fmt.format("HSN "+hsn, " ");
                                }
                            }


                            final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(Refundswise_Saleslist.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);


                            row.removeView(tv8);
                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        //Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    String[][] items_array1 = {{"", "", "", "("+"-"+total_disc_print_q+")"}};

                                    for (int i = 0; i < items_array1.length; i++) {
                                        List<String> item_split_qty = new ArrayList<>();
                                        List<String> item_split_item = new ArrayList<>();
                                        List<String> item_split_price = new ArrayList<>();
                                        List<String> item_split_amount = new ArrayList<>();

                                        for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                            item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                        }
                                        for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                            item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                        }
                                        for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                            item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                        }
                                        for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                            item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                        }

                                        Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                        Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                        Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                        Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                        List<Integer> maxListValue = new ArrayList<>();
                                        maxListValue.add(item_split_qty.size());
                                        maxListValue.add(item_split_item.size());
                                        maxListValue.add(item_split_price.size());
                                        maxListValue.add(item_split_amount.size());

                                        int maxValue = maxListValue.get(0);

                                        for (int x = 1; x < maxListValue.size(); x++) {
                                            if (maxValue < maxListValue.get(x)) {
                                                maxValue = maxListValue.get(x);
                                            }
                                        }

                                        Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                        for (int k = 0; k < maxValue; k++) {

                                            String qty,item,price_new,amount = "";

                                            boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                            boolean item_check = (k >= 0) && (k < item_split_item.size());
                                            boolean price_check = (k >= 0) && (k < item_split_price.size());
                                            boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                            if(qty_check == true){
                                                qty = item_split_qty.get(k);
                                            }
                                            else {
                                                qty = " ";
                                            }
                                            if(item_check == true){
                                                item = item_split_item.get(k);
                                            }
                                            else {
                                                item = " ";
                                            }
                                            if(price_check == true){
                                                price_new = item_split_price.get(k);
                                            }
                                            else {
                                                price_new = " ";
                                            }
                                            if(amount_check == true){
                                                amount = item_split_amount.get(k);
                                            }
                                            else {
                                                amount = " ";
                                            }

                                            fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                        }
                                        item_split_qty.removeAll(item_split_qty);
                                        item_split_item.removeAll(item_split_item);
                                        item_split_price.removeAll(item_split_price);
                                        item_split_amount.removeAll(item_split_amount);

                                    }
                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);

                        String[][] items_array = {{value, name, pricee, tototott}};

                        for (int i = 0; i < items_array.length; i++) {
                            List<String> item_split_qty = new ArrayList<>();
                            List<String> item_split_item = new ArrayList<>();
                            List<String> item_split_price = new ArrayList<>();
                            List<String> item_split_amount = new ArrayList<>();

                            for (int j = 0; j < items_array[i][0].length(); j += 5) {
                                item_split_qty.add(items_array[i][0].substring(j, Math.min(items_array[i][0].length(), j + 5)));
                            }
                            for (int j = 0; j < items_array[i][1].length(); j += 25) {
                                item_split_item.add(items_array[i][1].substring(j, Math.min(items_array[i][1].length(), j + 25)));
                            }
                            for (int j = 0; j < items_array[i][2].length(); j += 7) {
                                item_split_price.add(items_array[i][2].substring(j, Math.min(items_array[i][2].length(), j + 7)));
                            }
                            for (int j = 0; j < items_array[i][3].length(); j += 7) {
                                item_split_amount.add(items_array[i][3].substring(j, Math.min(items_array[i][3].length(), j + 7)));
                            }

                            Log.d("DATA_QTY", String.valueOf(item_split_qty));
                            Log.d("DATA_ITEM", String.valueOf(item_split_item));
                            Log.d("DATA_PRICE", String.valueOf(item_split_price));
                            Log.d("DATA_Amount", String.valueOf(item_split_amount));

                            List<Integer> maxListValue = new ArrayList<>();
                            maxListValue.add(item_split_qty.size());
                            maxListValue.add(item_split_item.size());
                            maxListValue.add(item_split_price.size());
                            maxListValue.add(item_split_amount.size());

                            int maxValue = maxListValue.get(0);

                            for (int x = 1; x < maxListValue.size(); x++) {
                                if (maxValue < maxListValue.get(x)) {
                                    maxValue = maxListValue.get(x);
                                }
                            }

                            Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                            for (int k = 0; k < maxValue; k++) {

                                String qty,item,price_new,amount = "";

                                boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                boolean item_check = (k >= 0) && (k < item_split_item.size());
                                boolean price_check = (k >= 0) && (k < item_split_price.size());
                                boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                if(qty_check == true){
                                    qty = item_split_qty.get(k);
                                }
                                else {
                                    qty = " ";
                                }
                                if(item_check == true){
                                    item = item_split_item.get(k);
                                }
                                else {
                                    item = " ";
                                }
                                if(price_check == true){
                                    price_new = item_split_price.get(k);
                                }
                                else {
                                    price_new = " ";
                                }
                                if(amount_check == true){
                                    amount = item_split_amount.get(k);
                                }
                                else {
                                    amount = " ";
                                }

                                fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                            }
                            item_split_qty.removeAll(item_split_qty);
                            item_split_item.removeAll(item_split_item);
                            item_split_price.removeAll(item_split_price);
                            item_split_amount.removeAll(item_split_amount);

                        }

                        Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor.moveToFirst()) {
                            String hsn = ccursor.getString(38);

                            TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {
                                fmt.format("HSN "+hsn, " ");
                            }
                        }

                        tv8 = new TextView(Refundswise_Saleslist.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    String[][] items_array1 = {{"", "", "", "("+"-"+total_disc_print_q+")"}};

                                    for (int i = 0; i < items_array1.length; i++) {
                                        List<String> item_split_qty = new ArrayList<>();
                                        List<String> item_split_item = new ArrayList<>();
                                        List<String> item_split_price = new ArrayList<>();
                                        List<String> item_split_amount = new ArrayList<>();

                                        for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                            item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                        }
                                        for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                            item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                        }
                                        for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                            item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                        }
                                        for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                            item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                        }

                                        Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                        Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                        Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                        Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                        List<Integer> maxListValue = new ArrayList<>();
                                        maxListValue.add(item_split_qty.size());
                                        maxListValue.add(item_split_item.size());
                                        maxListValue.add(item_split_price.size());
                                        maxListValue.add(item_split_amount.size());

                                        int maxValue = maxListValue.get(0);

                                        for (int x = 1; x < maxListValue.size(); x++) {
                                            if (maxValue < maxListValue.get(x)) {
                                                maxValue = maxListValue.get(x);
                                            }
                                        }

                                        Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                        for (int k = 0; k < maxValue; k++) {

                                            String qty,item,price_new,amount = "";

                                            boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                            boolean item_check = (k >= 0) && (k < item_split_item.size());
                                            boolean price_check = (k >= 0) && (k < item_split_price.size());
                                            boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                            if(qty_check == true){
                                                qty = item_split_qty.get(k);
                                            }
                                            else {
                                                qty = " ";
                                            }
                                            if(item_check == true){
                                                item = item_split_item.get(k);
                                            }
                                            else {
                                                item = " ";
                                            }
                                            if(price_check == true){
                                                price_new = item_split_price.get(k);
                                            }
                                            else {
                                                price_new = " ";
                                            }
                                            if(amount_check == true){
                                                amount = item_split_amount.get(k);
                                            }
                                            else {
                                                amount = " ";
                                            }

                                            fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                        }
                                        item_split_qty.removeAll(item_split_qty);
                                        item_split_item.removeAll(item_split_item);
                                        item_split_price.removeAll(item_split_price);
                                        item_split_amount.removeAll(item_split_amount);

                                    }
                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }

                }
            } while (ccursorreturn.moveToNext());

        }

        fmt.format("------------------------------------------------", " ");
////////////////////////////////////sub total

        Cursor cursor3 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor3.moveToFirst()) {
            sub1 = cursor3.getFloat(0);
        }

        Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
        if (cursor4.moveToFirst()) {
            sub2 = cursor4.getFloat(0);
        }
        float sub12 = sub1 + sub2;
        String total2 = String.valueOf(sub12);
        float to = Float.parseFloat(total2);
        String tot = String.valueOf(to);

        fmt.format("%-38s %9s\n", "Sub total", tot);

/////////////////////////////////// tax
        TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
        tableLayout1.removeAllViews();

        Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {
                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(4);
                String itna = ccursor.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor.moveToNext());
        }

        Cursor ccursor2 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor2.moveToFirst()) {

            do {
                String name = ccursor2.getString(35);
                String value = ccursor2.getString(36);
                String pq = ccursor2.getString(4);
                String itna = ccursor2.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor2.moveToNext());
        }

        Cursor ccursor3 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor3.moveToFirst()) {

            do {
                String name = ccursor3.getString(37);
                String value = ccursor3.getString(38);
                String pq = ccursor3.getString(4);
                String itna = ccursor3.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor3.moveToNext());
        }

        Cursor ccursor4 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor4.moveToFirst()) {

            do {
                String name = ccursor4.getString(39);
                String value = ccursor4.getString(40);
                String pq = ccursor4.getString(4);
                String itna = ccursor4.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor4.moveToNext());
        }

        Cursor ccursor5 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor5.moveToFirst()) {

            do {
                String name = ccursor5.getString(41);
                String value = ccursor5.getString(42);
                String pq = ccursor5.getString(4);
                String itna = ccursor5.getString(1);

                TextView v = new TextView(Refundswise_Saleslist.this);
                v.setText(value);

                TextView v1 = new TextView(Refundswise_Saleslist.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }
            } while (ccursor5.moveToNext());
        }

//            Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//                } while (ccursor.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }
//
//            Cursor ccursortaxreturn2 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn2.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn2.getString(30);
//                    String value = ccursortaxreturn2.getString(31);
//                    String pq = ccursortaxreturn2.getString(4);
//                    String itna = ccursortaxreturn2.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn2.moveToNext());
//            }
//
//            Cursor ccursortaxreturn3 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn3.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn3.getString(32);
//                    String value = ccursortaxreturn3.getString(33);
//                    String pq = ccursortaxreturn3.getString(4);
//                    String itna = ccursortaxreturn3.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn3.moveToNext());
//            }
//
//            Cursor ccursortaxreturn4 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn4.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn4.getString(34);
//                    String value = ccursortaxreturn4.getString(35);
//                    String pq = ccursortaxreturn4.getString(4);
//                    String itna = ccursortaxreturn4.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn4.moveToNext());
//            }
//
//            Cursor ccursortaxreturn5 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn5.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn5.getString(36);
//                    String value = ccursortaxreturn5.getString(37);
//                    String pq = ccursortaxreturn5.getString(4);
//                    String itna = ccursortaxreturn5.getString(1);
//
//                    TextView v = new TextView(Refundswise_Saleslist.this);
//                    v.setText(value);
//
//                    TextView v1 = new TextView(Refundswise_Saleslist.this);
//                    v1.setText(name);
//                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
//                            || v.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + "@" + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                    }
//                } while (ccursortaxreturn5.moveToNext());
//            }


        ArrayList<String> groupList1 = new ArrayList<String>();

        float sum_p1 = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(Refundswise_Saleslist.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

            if (groupList1.contains(mTextView.getText().toString())) {

            }else {
                sum_p1 = 0;
                for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                    TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                    mTextView1 = (TextView) mRow1.getChildAt(0);
                    mTextView2 = (TextView) mRow1.getChildAt(2);
                    if (groupList1.contains(mTextView.getText().toString())) {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    } else {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            groupList1.add(mTextView.getText().toString());
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    }
                }
//                    Toast.makeText(Refundswise_Saleslist.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                String mod1 = mTextView.getText().toString() + "" + String.format("%.2f", sum_p1);
                String mod12 = mTextView.getText().toString();

                fmt.format("%-34s %13s\n", mod12, String.format("%.2f", sum_p1));

//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
                String mod2 = mTextView.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, " "+mod2, Toast.LENGTH_LONG).show();
                Cursor ccursor6 = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor6.moveToFirst()) {
                    String hsn = ccursor6.getString(38);

                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                    hsn_hsn.setText(hsn);

                    if (hsn_hsn.getText().toString().equals("")) {
                    } else {
                        fmt.format("HSN "+hsn, " ");
                    }
                }

            }
        }



        String phon = "0";

        Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(Refundswise_Saleslist.this);
        tvvs.setText(phon);


        Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()) {
//            Toast.makeText(Refundswise_Saleslist.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(Refundswise_Saleslist.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")) {
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);

                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                        fmt.format(mod1, " ");

                    } while (cursorr.moveToNext());
                }
            } else {
                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(Refundswise_Saleslist.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(Refundswise_Saleslist.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(Refundswise_Saleslist.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);

                        String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);

                        fmt.format(mod1, " ");

                    }

                }
            }

        } else {
//            Toast.makeText(Refundswise_Saleslist.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Home delivery")) {
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);

                    String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);

                    fmt.format(mod1, " ");

                } while (cursorr.moveToNext());
            }
        }

        float sum = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(2);
            sum = sum
                    + Float.parseFloat(mTextView.getText().toString());
        }


        String newsum = String.format("%.2f", sum);

        if (sum == 0 || sum == 0.0 || sum == 0.00) {

        } else {
            fmt.format("%-38s %9s\n", "Tax", newsum);
        }


///////////////////////////////// discount


        Cursor cursor5 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor5.moveToFirst()) {
            dsirs = cursor5.getString(7);
            float ds = Float.parseFloat(dsirs);
            dsirs1 = String.format("%.2f", ds);
        } else {
            dsirs = "0";
        }
        TextView dis = new TextView(Refundswise_Saleslist.this);
        Cursor cursor7 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor7.moveToFirst()) {
            taxpe = cursor7.getString(5);
            float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            if (on % 1 != 0) {
                // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                int newww = (int) on;
                float decpart = on - newww;
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                if (decpart > 0.5) {
                    ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                    float addall = on;
                    //alltotal.setText(String.valueOf(newww + 1));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    dis.setText("+ " + String.format("%.2f", dee));

                } else {
                    // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    float addall = on;
                    //alltotal1.setText(String.valueOf(newww));
                    //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("- " + String.format("%.2f", decpart));

                }
            } else {
                ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                int addall = (int) on;
                //alltotal1.setText(String.valueOf(addall));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                dis.setText("+ " + "0.00");
                ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
            }
        } else {
            taxpe = "0";
            dis.setText("+ " + "0.00");
            on1 = "0";
        }

        //tot-is-subtotal

        String alldiscinperc1 = "Discount(" + taxpe + "%)";

        fmt.format("%-38s %9s\n", alldiscinperc1, on1);

        float newe;

//////////////////////////////////////////

        Cursor cursor113 = db.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
        if (cursor113.moveToFirst()) {
            float level = cursor113.getFloat(0);
            total = String.valueOf(level);
            Float total1 = Float.parseFloat(total);
            total_disc_print_q = String.format("%.2f", total1);

            fmt.format("%-38s %9s\n", "Savings", total_disc_print_q);

        }
////////////////////////////////

        Cursor cursor = db.rawQuery("SELECT * FROM billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor.moveToFirst()){
            String t_total_points = cursor.getString(16);
            String v_tq = cursor.getString(17);

            TextView tv = new TextView(Refundswise_Saleslist.this);
            tv.setText(t_total_points);

            if (tv.getText().toString().equals("")){

            }else {
                fmt.format("%-38s %9s\n", "Loyalty(" + t_total_points + ")", v_tq);
            }
        }

////////////////////////////////rounded

        if (taxpe.toString().equals("")) {
            newe = sum + Float.parseFloat(String.valueOf(tot));
        } else {
            newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
        }

        TextView round = new TextView(Refundswise_Saleslist.this);
        if (newe % 1 != 0) {
            // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
            int newww = (int) newe;
            float decpart = newe - newww;
            ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
            ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
            if (decpart > 0.5) {
                ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                float addall = newe;
                //alltotal.setText(String.valueOf(newww + 1));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                float dee = 1 - decpart;
                round.setText("+ " + String.format("%.2f", dee));
            } else {
                // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                float addall = newe;
                //alltotal1.setText(String.valueOf(newww));
                //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                round.setText("- " + String.format("%.2f", decpart));
            }
        } else {
            ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

            //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
            int addall = (int) newe;
            //alltotal1.setText(String.valueOf(addall));
            //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
            round.setText("+ " + "0.00");
            ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
        }

        fmt.format("%-38s %9s\n", "Rounded", round.getText().toString());

        fmt.format("------------------------------------------------", " ");

/////////////////////refund

        //19
        Cursor billcan = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (billcan.moveToFirst()) {
            String asd = billcan.getString(18);
            refundamounta = String.valueOf(asd);
        } else {
            Cursor billcan_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (billcan_cancel.moveToFirst()) {
                String asd = billcan_cancel.getString(17);
                refundamounta = String.valueOf(asd);
            }
        }

        Cursor c1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (c1.moveToFirst()) {
            String c11 = c1.getString(2);
            alltotal1 = c11;
        } else {
            alltotal1 = "0";
        }
        float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
        String mn1 = String.valueOf(min);

        fmt.format("%-34s %13s\n", "Refund", "-"+mn1);

        SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
        final String normal1 = normal5.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
        final String time1 = sdf1.format(dt);

        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);

        Cursor dateq = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (dateq.moveToFirst()) {
            datee = dateq.getString(25);
            timee = dateq.getString(12);
        } else {
            Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        String refundtime = "(" + datee + "," + timee + ")";

        fmt.format(refundtime+"\n", " ");

        fmt.format("------------------------------------------------"+"\n", " ");
/////////////////////////

        float all = Float.parseFloat(alltotal1);
        String newf = String.valueOf(all);

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                fmt.format("%-34s %13s\n", "Total", insert1_rs+""+newf);

        fmt.format("------------------------------------------------", " ");
        fmt.format("\n", " ");

        tvkot.setText(bill_coun);
        if (tvkot.getText().toString().equals("")) {

        } else {

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            fmt.format("Bill id."+bill_coun+"\n", " ");
        }

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")){

        }else {
            fmt.format(strbillone+"\n");
        }

        fmt.format("\n", " ");

        testBytes = fmt.toString().getBytes();

        //Getting current device count to check if the printer is attached or not
        mUsbManager = (UsbManager) getSystemService(this.USB_SERVICE);
        mDeviceList = mUsbManager.getDeviceList();

        if (mDeviceList.size() > 0) {

            mDeviceIterator = mDeviceList.values().iterator();
            String usbDevice = "";
            while (mDeviceIterator.hasNext()) {
                UsbDevice usbDevice1 = mDeviceIterator.next();
                mDevice = usbDevice1;
            }

            mInterface = mDevice.getInterface(0);
            mEndPoint = mInterface.getEndpoint(1);// 0 IN and  1 OUT to printer.
            mConnection = mUsbManager.openDevice(mDevice);


            if (mInterface == null) {
                Toast.makeText(this, "INTERFACE IS NULL", Toast.LENGTH_SHORT).show();
            } else if (mConnection == null) {
                Toast.makeText(this, "CONNECTION IS NULL", Toast.LENGTH_SHORT).show();
            } else if (forceCLaim == null) {
                Toast.makeText(this, "FORCE CLAIM IS NULL", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Prepare print... ", Toast.LENGTH_SHORT).show();
//                int finalImage_there = image_there;
                Thread thread = new Thread(new Runnable() {
                    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
                    @Override
                    public void run() {
                        Log.e("u", "Printing.. ");
                        UsbInterface intf = mDevice.getInterface(0);
                        UsbEndpoint endpoint = intf.getEndpoint(0);
                        UsbDeviceConnection conn = mUsbManager.openDevice(mDevice);
                        conn.claimInterface(intf, true);

                        byte[] center = new byte[]{0x1b, 0x61, 0x00};
                        byte[] cut_paper = {0x1D, 0x56, 0x41, 0x10};

//                        try {
//                            Bitmap bmp = BitmapFactory.decodeResource(getResources(),
//                                    R.drawable.titto);
//                            if(bmp!=null){
//                                command = Utils.decodeBitmap(bmp);
//
//                            }else{
//                                Log.e("Print Photo error", "the file isn't exists");
//                            }
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                            Log.e("PrintTools", "the file isn't exists");
//                        }

                        conn.bulkTransfer(endpoint,center,center.length,0);
//                        if (finalImage_there == 1) {
//                            conn.bulkTransfer(endpoint, command, command.length, 0);
//                        }
                        conn.bulkTransfer(endpoint, testBytes, testBytes.length, 0);
                        conn.bulkTransfer(endpoint, cut_paper, cut_paper.length, 0);
                    }
                });
                thread.run();
            }
        } else {
            Toast.makeText(this, "No Printer Attached ", Toast.LENGTH_SHORT).show();
        }

    }


    public void cashopen(){
        byte[] cashopen = {0x1b,0x70,0x00,0x60,0x60};

        byte[][] allbuf = new byte[][]{
                cashopen
        };
        if (statussusbs.toString().equals("ok")) {
            BluetoothPrintDriver.BT_Write(cashopen);	//
        }else {
            if (statusnets_counter.toString().equals("ok")) {
                wifiSocket2.WIFI_Write(cashopen);	//
            }else {
                if (statusnets.toString().equals("ok")) {
                    wifiSocket.WIFI_Write(cashopen);	//
                }
            }
        }
    }

    public void email1(Dialog dialog) {
        sdff2 = new SimpleDateFormat("ddMMMyy");
        currentDateandTimee1 = sdff2.format(new Date());

        Date dt1 = new Date();
        sdff1 = new SimpleDateFormat("hhmmssaa");
        timee1 = sdff1.format(dt1);
        ///////////////Toast.makeText(Refundswise_Saleslist.this, "111111111111111111111111111111", Toast.LENGTH_SHORT).show();
        //btPrintPicture = (Button) dialog.findViewById(R.id.buttonPrintPicture);
        //btPrintPicture.setOnClickListener(this);
        imageViewPicture = (ImageView)dialog.findViewById(R.id.imageViewPicture);
        //imageViewPicture.setOnClickListener(this);
        //getimagee = (Button)findViewById(R.id.imageViewPicture1);
//        rbPaperWidth2 = (RadioButton) dialog.findViewById(R.id.radioButton2Inch);
//        rbPaperWidth3 = (RadioButton) dialog.findViewById(R.id.radioButton3Inch);
//        rbPaperWidth4 = (RadioButton) dialog.findViewById(R.id.radioButton4Inch);
        final RelativeLayout billaa = (RelativeLayout) dialog.findViewById(R.id.billa);

        billaa.setVisibility(View.VISIBLE);

        LinearLayout include = (LinearLayout)dialog.findViewById(R.id.include);
        final LinearLayout imageview = (LinearLayout)dialog.findViewById(R.id.imageview);


        mView = dialog.findViewById(R.id.f_viewreturnsemail);


        SimpleDateFormat normal = new SimpleDateFormat("dd MMM yy");
        final String normal1 = normal.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa");
        final String time1 = sdf1.format(dt);


        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);

        Cursor date = db.rawQuery("Select * from All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (date.moveToFirst()){
            datee = date.getString(25);
            timee = date.getString(12);
        }

        TextView bilnumb = (TextView)mView.findViewById(R.id.billnumber);
        bilnumb.setText(String.valueOf(billnoget));

        TextView billid_value = (TextView)mView.findViewById(R.id.billid_value);
        billid_value.setText(String.valueOf(bill_coun));

        TextView datees = (TextView)mView.findViewById(R.id.date);
        datees.setText(datee);
        TextView timees = (TextView)mView.findViewById(R.id.time);
        timees.setText(timee);

        LinearLayout custadd = (LinearLayout)mView.findViewById(R.id.address);
        TextView custname = (TextView)mView.findViewById(R.id.cust_name);
        TextView custaddr = (TextView)mView.findViewById(R.id.cust_address);
        TextView custph = (TextView)mView.findViewById(R.id.cust_phno);
        TextView custema = (TextView)mView.findViewById(R.id.cust_emailid);

        TextView tableidd = (TextView)mView.findViewById(R.id.tableid);
        TextView billtypee = (TextView)mView.findViewById(R.id.billtype);
        TextView paymentmethodd = (TextView)mView.findViewById(R.id.paymentmethod);

        TextView compname = (TextView)mView.findViewById(R.id.compname);
        TextView compadd1 = (TextView)mView.findViewById(R.id.address1);
        TextView compadd2 = (TextView)mView.findViewById(R.id.address2);
        TextView compadd3 = (TextView)mView.findViewById(R.id.address3);
        TextView compphnoo = (TextView)mView.findViewById(R.id.phoneno);
        TextView compemail = (TextView)mView.findViewById(R.id.emailid);
        TextView compwebsite = (TextView)mView.findViewById(R.id.website);
        TextView comptaxlicen = (TextView)mView.findViewById(R.id.taxlineone);

        TextView foo = (TextView)mView.findViewById(R.id.billfooterone);

        LinearLayout comaddlogo = (LinearLayout)mView.findViewById(R.id.complogo);
        LinearLayout foott = (LinearLayout)mView.findViewById(R.id.foottt);


        TextView subtotoalam = (TextView)mView.findViewById(R.id.totalamount);


        TextView discval = (TextView)mView.findViewById(R.id.discount);
        TextView discpercent = (TextView)mView.findViewById(R.id.dispercent);

        Cursor caddress = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
        if (caddress.moveToFirst()){
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            custadd.setVisibility(View.VISIBLE);
            if (nam.toString().length()>0){
                custname.setText(nam);
            }else {
                custname.setVisibility(View.GONE);
            }
            if (addr.toString().length()>0){
                custaddr.setText(addr);
            }else {
                custaddr.setVisibility(View.GONE);
            }
            if (phon.toString().length()>0){
                custph.setText(phon);
            }else {
                custph.setVisibility(View.GONE);
            }
            if (emai.toString().length()>0){
                custema.setText(emai);
            }else {
                custema.setVisibility(View.GONE);
            }


        }else {
            custadd.setVisibility(View.GONE);
        }



        Cursor curso1r3 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (curso1r3.moveToFirst()){
            sub1 = curso1r3.getFloat(0);
        }

        Cursor curso1r4 = db.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '"+billnoget+"'", null);
        if (curso1r4.moveToFirst()){
            sub2 = curso1r4.getFloat(0);
        }
        float sub12 = sub1+sub2;

        Cursor cursor3 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoget+"'", null);
        if (cursor3.moveToFirst()){
            sub = cursor3.getString(7);
            subtotoalam.setText(String.valueOf(sub12));
        }

        Cursor compdetails = db1.rawQuery("SELECT * FROM Companydetailss", null);
        if (compdetails.moveToFirst()){
            compna = compdetails.getString(1);
            String add1 = compdetails.getString(14);
            String add2 = compdetails.getString(17);
            String add3 = compdetails.getString(18);
            String phonenum = compdetails.getString(2);
            String email = compdetails.getString(15);
            String web = compdetails.getString(16);
            String taxone = compdetails.getString(10);
            String footer = compdetails.getString(12);

            comaddlogo.setVisibility(View.VISIBLE);


            TextView tv = new TextView(Refundswise_Saleslist.this);
            tv.setText(compna);
            TextView tv1 = new TextView(Refundswise_Saleslist.this);
            tv.setText(add1);
            TextView tv2 = new TextView(Refundswise_Saleslist.this);
            tv.setText(add2);
            TextView tv3 = new TextView(Refundswise_Saleslist.this);
            tv.setText(add3);
            TextView tv4 = new TextView(Refundswise_Saleslist.this);
            tv.setText(phonenum);
            TextView tv5 = new TextView(Refundswise_Saleslist.this);
            tv.setText(email);
            TextView tv6 = new TextView(Refundswise_Saleslist.this);
            tv.setText(web);
            TextView tv7 = new TextView(Refundswise_Saleslist.this);
            tv.setText(taxone);
            TextView tv8 = new TextView(Refundswise_Saleslist.this);
            tv.setText(footer);

            if (!tv.getText().toString().equals("")) {
                compname.setText(compna);
            } else {
                compname.setVisibility(View.GONE);
            }
            if (!tv1.getText().toString().equals("")) {
                compadd1.setText(add1);
            } else {
                compadd1.setVisibility(View.GONE);

            }
            if (!tv2.getText().toString().equals("")) {
                compadd2.setText(add2);
            } else {
                compadd2.setVisibility(View.GONE);

            }
            if (!tv3.getText().toString().equals("")) {
                compadd3.setText(add3);
            } else {
                compadd3.setVisibility(View.GONE);

            }
            if (!tv4.getText().toString().equals("")) {
                compphnoo.setText(phonenum);
            } else {
                compphnoo.setVisibility(View.GONE);

            }
            if (!tv5.getText().toString().equals("")) {
                compemail.setText(email);
            } else {
                compemail.setVisibility(View.GONE);

            }
            if (!tv6.getText().toString().equals("")) {
                compwebsite.setText(web);
            } else {
                compwebsite.setVisibility(View.GONE);

            }
            if (!tv7.getText().toString().equals("")) {
                comptaxlicen.setText(taxone);
            } else {
                comptaxlicen.setVisibility(View.GONE);

            }
            if (!tv8.getText().toString().equals("")) {
                foott.setVisibility(View.VISIBLE);
                foo.setText(footer);
            } else {
                foott.setVisibility(View.GONE);
                foo.setVisibility(View.GONE);
            }


        }else {
            comaddlogo.setVisibility(View.GONE);
        }

        ImageView imageButton = (ImageView)mView.findViewById(R.id.viewImagee);
        String[] col={"companylogo"};
        Cursor c=db1.query("Logo", col, null, null, null, null, null);

        if(c.moveToFirst()){
            do{
                img=c.getBlob(c.getColumnIndex("companylogo"));
                final Bitmap b1= BitmapFactory.decodeByteArray(img, 0, img.length);
                imageButton.setImageBitmap(b1);
            }while(c.moveToNext());
        }else {
            imageButton.setVisibility(View.GONE);
        }

        Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (cursor9.moveToFirst()){
            String tableid = cursor9.getString(15);
            tableidd.setText(tableid);
        }

        Cursor cursor10 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()){
            String billtype = cursor10.getString(5);
            String paymmethod = cursor10.getString(6);
            billtypee.setText(billtype);
            paymentmethodd.setText(paymmethod);
        }





        TableLayout tableLayoutt = (TableLayout) mView.findViewById(R.id.lytpedido);
        tableLayoutt.removeAllViews();

        Cursor ccursorr = db.rawQuery("Select * from All_Sales WHERE bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String nbg = ccursorr.getString(0);
                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")){
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));



                    final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
                    final TableLayout tableLayout_disc = new TableLayout(Refundswise_Saleslist.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);



                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()){
                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(Refundswise_Saleslist.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);


                            row.removeView(tv8);

                            Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '"+billnoget+"'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor4.moveToFirst()){
                                sub2a = cursor4.getFloat(0);
                                String sub2a1 = String.valueOf(sub2a);
                                ss = Float.parseFloat(sub2a1)+Float.parseFloat(tototot);
                                ss1 = String.valueOf(ss);
                            }

                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(ss1);
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        }while (modcursor.moveToNext());

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                float vtq = disc_cursor.getFloat(31);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(Refundswise_Saleslist.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(Refundswise_Saleslist.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(Refundswise_Saleslist.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(Refundswise_Saleslist.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(31));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }

                    }
                    else {
                        tv8 = new TextView(Refundswise_Saleslist.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                float vtq = disc_cursor.getFloat(31);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(Refundswise_Saleslist.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(Refundswise_Saleslist.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(Refundswise_Saleslist.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(Refundswise_Saleslist.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(31));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }

                    }

                    tableLayoutt.addView(row);

                    tableLayoutt.addView(tableLayout1);
                    tableLayoutt.addView(tableLayout_disc);

                }



            } while (ccursorr.moveToNext());
        }



        TableLayout tableLayouttreturn = (TableLayout) mView.findViewById(R.id.lytpedidoreturn);
        tableLayouttreturn.removeAllViews();

        Cursor ccursorreturn = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorreturn.moveToFirst()) {

            do {

                String name = ccursorreturn.getString(1);
                String value = ccursorreturn.getString(2);
                String pq = ccursorreturn.getString(5);
                String itna = ccursorreturn.getString(2);
                String pricee = ccursorreturn.getString(3);
                String tototot = ccursorreturn.getString(4);

                //String newpar =
                final String newid = ccursorreturn.getString(19);
                final String nbg = ccursorreturn.getString(0);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")){
                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                    final TableLayout tableLayout_disc = new TableLayout(Refundswise_Saleslist.this);


                    final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);



                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()){
                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(Refundswise_Saleslist.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(Refundswise_Saleslist.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);

                            Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor4.moveToFirst()){
                                sub2a = cursor4.getFloat(0);
                                String sub2a1 = String.valueOf(sub2a);
                                ss = Float.parseFloat(sub2a1)+Float.parseFloat(tototot);
                                ss1 = String.valueOf(ss);
                            }

                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(ss1);
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        }while (modcursor.moveToNext());

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(Refundswise_Saleslist.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(Refundswise_Saleslist.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(Refundswise_Saleslist.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(Refundswise_Saleslist.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(28));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }
                    }
                    else {
                        tv8 = new TextView(Refundswise_Saleslist.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(Refundswise_Saleslist.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(Refundswise_Saleslist.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(Refundswise_Saleslist.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(Refundswise_Saleslist.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(28));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }

                    }

                    tableLayouttreturn.addView(row);

                    tableLayouttreturn.addView(tableLayout1);

                    tableLayouttreturn.addView(tableLayout_disc);

                }

            } while (ccursorreturn.moveToNext());

            Cursor ccursorreturn1 = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '"+billnoget+"' AND type = 'Modifier'", null);
            if (ccursorreturn1.moveToFirst()) {

                //do {

                String name = ccursorreturn1.getString(1);
                String value = ccursorreturn1.getString(2);
                String pq = ccursorreturn1.getString(5);
                String itna = ccursorreturn1.getString(2);
                String pricee = ccursorreturn1.getString(3);
                String tototot = ccursorreturn1.getString(4);

                final String newid = ccursorreturn1.getString(19);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Modifier")) {
                    Cursor cursor = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billnoget+"' AND type = 'Modifier'", null);
                    if (cursor.moveToFirst()){
                        do {
                            String parid = cursor.getString(7);
                            String parnam = cursor.getString(6);
                            final String modiname = cursor.getString(1);
                            final String modiquan = cursor.getString(2);
                            String modiprice = cursor.getString(3);
                            String moditotal = cursor.getString(4);
                            String modisix = cursor.getString(6);
                            final String modiid = cursor.getString(0);
                            String tvx = cursor.getString(2);

                            /////////////Toast.makeText(Refundswise_Saleslist.this, "11c "+cursor.getCount() + " "+modiname, Toast.LENGTH_SHORT).show();

                            Cursor cursor1 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billnoget+"' AND _idd = '"+parid+"' AND itemname = '"+parnam+"'", null);

                            Cursor modt = db.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND _idd = '"+parid+"' AND itemname = '"+parnam+"'", null);
                            if (modt.moveToFirst()) {
                                do {
                                    //row.removeView(tv3);
                                    float aq = modt.getFloat(0);
                                    String aqq = String.valueOf(aq);
                                    aqq1 = Float.parseFloat(aqq);
                                    aqq2 = String.valueOf(aqq1);
                                } while (modt.moveToNext());
                            }

                            if (cursor1.moveToFirst()){

                            }else {

//                                    Cursor cursor2 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '"+modisix+"' AND parentid = '"+parid+"'", null);
//                                    while (cursor2.moveToFirst()){
//                                        String one = cursor2.getString(1);
                                ///////////////Toast.makeText(Refundswise_Saleslist.this, "11d "+cursor2.getCount()+ " "+one, Toast.LENGTH_SHORT).show();

                                final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
                                //final TableLayout tableLayout21 = new TableLayout(Refundswise_Saleslist.this);

                                final TableRow row = new TableRow(Refundswise_Saleslist.this);
                                row.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                TextView tv = new TextView(Refundswise_Saleslist.this);
                                tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                                //tv.setTextSize(18);
                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setPadding(0, 0, 0, 0);
                                //text = ccursorr.getString(1);
                                tv.setText(tvx);
                                row.addView(tv);

                                TextView tv1 = new TextView(Refundswise_Saleslist.this);
                                tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv1.setGravity(Gravity.CENTER_VERTICAL);
                                tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv1.setTextSize(15);
                                //tv.setPadding(0, 0, 0, 0);
                                //text = ccursorr.getString(1);
                                tv1.setText(modisix);
                                String value1 = tv1.getText().toString();
                                row.addView(tv1);

                                TextView tv51 = new TextView(Refundswise_Saleslist.this);
                                tv51.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                tv51.setText("");
                                row.addView(tv51);

                                TextView tv61 = new TextView(Refundswise_Saleslist.this);
                                tv61.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv61.setText("");
                                row.addView(tv61);

                                tableLayouttreturn.addView(row);


                                final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                final TextView tvv = new TextView(Refundswise_Saleslist.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tvx.toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(modiprice));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);


                                final TextView tv8 = new TextView(Refundswise_Saleslist.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tvx.toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(moditotal);
                                tableRow11.addView(tv8);

                                tableLayout1.addView(tableRow11);

                                //tableLayouttreturn.addView(tableLayout21);
                                tableLayouttreturn.addView(tableLayout1);
                                // }

                            }
                        }while (cursor.moveToNext());

                    }
                }
                //}while (ccursorreturn1.moveToNext());
            }
        }





        TableLayout tableLayout1 = (TableLayout) mView.findViewById(R.id.lytpedidooo);
        tableLayout1.removeAllViews();

        Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {

                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(4);
                String itna = ccursor.getString(1);

                if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")){

                }else {

//                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
//                            TableRow.LayoutParams.WRAP_CONTENT));
//                    row.setGravity(Gravity.CENTER);

                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TableRow.LayoutParams lp, lp1, lp2;

//                                    final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                    tv.setTextSize(16);
//                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                    row.addView(tv);

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(Color.parseColor("#000000"));
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    //tv3.setPadding(0,0,10,0);
                    tv3.setText(String.format("%.2f", tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }


            } while (ccursor.moveToNext());
        }

        Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn.moveToFirst()) {

            do {

                String name = ccursortaxreturn.getString(10);
                String value = ccursortaxreturn.getString(9);
                String pq = ccursortaxreturn.getString(4);
                String itna = ccursortaxreturn.getString(1);

                if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")){

                }else {

//                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
//                            TableRow.LayoutParams.WRAP_CONTENT));
//                    row.setGravity(Gravity.CENTER);

                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TableRow.LayoutParams lp, lp1, lp2;

//                                    final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                    tv.setTextSize(16);
//                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                    row.addView(tv);

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(Color.parseColor("#000000"));
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    //tv3.setPadding(0,0,10,0);
                    tv3.setText(String.format("%.2f", tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }


            } while (ccursortaxreturn.moveToNext());
        }


        String phon = "0";

        Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(Refundswise_Saleslist.this);
        tvvs.setText(phon);

        Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()){
//            Toast.makeText(Refundswise_Saleslist.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(Refundswise_Saleslist.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")){
//                paymentmethodd
                Cursor cursorr = null;
                if (paymentmethodd.getText().toString().equals("  Dine-in") || paymentmethodd.getText().toString().equals("  General") || paymentmethodd.getText().toString().equals("  Others")){
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymentmethodd.getText().toString().equals("  Takeaway") || paymentmethodd.getText().toString().equals("  Main")){
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymentmethodd.getText().toString().equals("  Home delivery")){
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//                ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String .valueOf(sub12)) / 100;
                        float tota = mul;
                        tv3.setText(String.format("%.2f", tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);


                    } while (cursorr.moveToNext());
                }
            }else {

                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(Refundswise_Saleslist.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(Refundswise_Saleslist.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(Refundswise_Saleslist.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(Refundswise_Saleslist.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);
                    }

                }
            }

        }else {
//            Toast.makeText(Refundswise_Saleslist.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymentmethodd.getText().toString().equals("  Dine-in") || paymentmethodd.getText().toString().equals("  General") || paymentmethodd.getText().toString().equals("  Others")){
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymentmethodd.getText().toString().equals("  Takeaway") || paymentmethodd.getText().toString().equals("  Main")){
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymentmethodd.getText().toString().equals("  Home delivery")){
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//                ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(Refundswise_Saleslist.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                    TextView tvv = new TextView(Refundswise_Saleslist.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(Refundswise_Saleslist.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(Refundswise_Saleslist.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(Refundswise_Saleslist.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String .valueOf(sub12)) / 100;
                    float tota = mul;
                    tv3.setText(String.format("%.2f", tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);


                } while (cursorr.moveToNext());
            }
        }


//        ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
//        if (ccursor.moveToFirst()) {
//
//            do {
//
//                String name = ccursor.getString(1);
//                String value = ccursor.getString(2);
//
//                final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
//                        TableRow.LayoutParams.WRAP_CONTENT));
//                row.setGravity(Gravity.CENTER);
//
//                TableRow.LayoutParams lp, lp1, lp2;
//
////                                final TextView tv = new TextView(Refundswise_Saleslist.this);
////                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                tv.setTextSize(16);
////                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                                row.addView(tv);
//
//                TextView tvv = new TextView(Refundswise_Saleslist.this);
//                tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                //tv.setBackgroundResource(R.drawable.cell_shape);
//                tvv.setGravity(Gravity.START);
//                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tvv.setText(name);
//
//                TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                tv1.setGravity(Gravity.START);
//                tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tv1.setText(value);
//                tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                String value1 = tv1.getText().toString();
//
//                TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
//                //tv2.setLayoutParams(lp);
//                tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                tv2.append(name + " @ " + value + "%");
//                tv2.setPadding(0, 0, 20, 0);
//                tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                row.addView(tv2);
//
//                TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                row.addView(textView1);
//
//                TextView tv3 = new TextView(Refundswise_Saleslist.this);
////                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
////                tv3.setLayoutParams(lp2);
//                tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                //tv3.setPadding(0,0,10,0);
//                tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String .valueOf(sub12)) / 100;
//                float tota = mul;
//                tv3.setText(String.format("%.2f", tota));
//                //row.addView(tv3);
//
//
//                tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                String value2 = tv3.getText().toString();
//                row.addView(tv3);
//
//                tableLayout1.addView(row);
//
//
//            } while (ccursor.moveToNext());
//        }

        float sum = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(2);
            sum = sum
                    + Float.parseFloat(mTextView.getText().toString());
        }



        Cursor cursor4 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billnoget+"'", null);
        if (cursor4.moveToFirst()){
            String taxpe = cursor4.getString(5);
            discpercent.setText(taxpe);
            float on = (Float.parseFloat(subtotoalam.getText().toString())/100)*Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            discval.setText(on1);
        }else {
            discval.setText("0.0");
        }

//        Cursor cursor5 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billno.getText().toString()+"'", null);
//        if (cursor5.moveToFirst()){
//            String dsirs = cursor5.getString(7);
//            discval.setText(dsirs);
//        }




        Cursor cursor7 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billnoget+"'", null);
        if (cursor7.moveToFirst()){
            String taxpe = cursor7.getString(5);
            discpercent.setText(taxpe);
        }

        float newe;


        TextView savingsval = (TextView)mView.findViewById(R.id.disc_savings);

        Cursor cursor51 = db.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '"+billnoget+"' AND disc_thereornot = 'yes'", null);
        if (cursor51.moveToFirst()){
            float dsirsq = cursor51.getFloat(0);
            String rop = String.format("%.2f", dsirsq);
            savingsval.setText(rop);
        }


        alltotal = (TextView) mView.findViewById(R.id.fulltotal1);
        refundamount = (TextView) mView.findViewById(R.id.fulltotal1return);

        Cursor billcan = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (billcan.moveToFirst()){
            String asd = billcan.getString(18);
            refundamounta = String.valueOf(asd);
        }

        Cursor c111 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoget+"'", null);
        if (c111.moveToFirst()){
            String c11 = c111.getString(2);
            alltotal1 = c11;
        }
        float min = Float.parseFloat(refundamounta)-Float.parseFloat(alltotal1);
        String mn1 = String.valueOf(min);

        refundamount.setText(mn1);

        refundamount_aa = new TextView(Refundswise_Saleslist.this);
        refundamount_aa.setText(refundamount.getText().toString());


        TextView taxtot = (TextView) mView.findViewById(R.id.totalbilltaxess);
        //float summus = Float.parseFloat()
        taxtot.setText(insert1_cc);
        taxtot.append(String.format("%.2f", sum));


        if (discval.getText().toString().equals("")){
            newe = sum + Float.parseFloat(String.valueOf(sub12));
        }else {
            newe = sum + Float.parseFloat(String.valueOf(sub12)) + Float.parseFloat(discval.getText().toString());
        }



        if (newe % 1 != 0) {
            // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
            int newww = (int) newe;
            float decpart = newe - newww;
            ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
            ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
            if (decpart > 0.5) {
                ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                float addall = newe;
                //alltotal.setText(String.valueOf(newww + 1));
                TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                float dee = 1 - decpart;
                round.setText("+ " + String.format("%.2f", dee));
            } else {
                // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                float addall = newe;
                //alltotal1.setText(String.valueOf(newww));
                TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                round1.setText("- " + String.format("%.2f", decpart));
            }
        } else {
            ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

            //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
            int addall = (int) newe;
            //alltotal1.setText(String.valueOf(addall));
            TextView round = (TextView) mView.findViewById(R.id.roundvalue);
            round.setText("+ " + "0.00");
            ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
        }

        Cursor c1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoget+"'", null);
        if (c1.moveToFirst()){
            String c11 = c1.getString(2);
            alltotal.setText(c11);
        }


        mView.setDrawingCacheEnabled(true);
        mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
        mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
        mView.buildDrawingCache(true);
        include.setVisibility(View.INVISIBLE);
        imageview.setVisibility(View.INVISIBLE);

        imageview.setVisibility(View.INVISIBLE);
        Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
        mView.setDrawingCacheEnabled(false);
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

        imageViewPicture.setImageBitmap(b);

        Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                .getBitmap();
        Drawable d = new BitmapDrawable(getResources(), mBitmap);


//        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_bills");
        File exportDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), "/IVEPOS_bills");
        if (!exportDir.exists()) {
            exportDir.mkdirs();
        }


        file = new File(exportDir, "IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg");

        try {
            FileOutputStream ostream = new FileOutputStream(file);
            mBitmap.compress(Bitmap.CompressFormat.PNG, 10, ostream);
            ostream.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }

//        String query = null;
//        try {
//            query = URLEncoder.encode("apples oranges", "utf-8");
//        } catch (UnsupportedEncodingException e) {
//            e.printStackTrace();
//        }

        TextView textView = new TextView(Refundswise_Saleslist.this);
        textView.setText(R.string.my_url);
        String url = "www.intuitionsoftwares.com";

        String reqUrl = "http://google.com";
        Uri.Builder builder = Uri.parse(reqUrl).buildUpon();
        builder.appendQueryParameter("mesg", "Value for mesg");
        String finalUri = builder.build().toString();

        Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            strcompanyname = getcom.getString(1);
            stremailid = getcom.getString(15);
        }else {
            strcompanyname = "";
        }

        TextView vbn = new TextView(Refundswise_Saleslist.this);
        vbn.setText(stremailid);

        String date_mail = "", time_mail = "";
        Cursor cursor91 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (cursor91.moveToFirst()){
            date_mail = cursor91.getString(25);
            time_mail = cursor91.getString(12);
        }

        TextView refundamout = new TextView(Refundswise_Saleslist.this);
        refundamout.setText(refundamount_aa.getText().toString());

//        refundamout.setText(onlybilltotalcancel.getText().toString());

//        final String msg = "Refund confirmation from "+compna+"\n\nDear Customer, \n\nThis is to inform that you have been refunded an amount of "+"Rs. "+refundamout.getText().toString()+" on your bill "+billnoget+" dated "+datee+".\n\nWe appreciate your business and hope to see you again soon. \n"+compna+"\n\n\n" +
//                "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                "Powered by: "+ Uri.parse(url);

        final String msg =
                "<Html>" +
                        "<Body>" +
                        "<div>" +
                        " <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"100%\" valign=\"top\" bgcolor=\"#f8f8f8\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1;margin-top:50px\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"460\" >" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td height=\"30\">" +
                        "</td>" +
                        "</tr>" +
                        "</tbody>" +
                        "</table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#00929f;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                        "<img src=\"http://www.intuitionsoftwares.com/resources/intuition_logo_header_with_text_240.png\" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
//                        "<img src="+logo+" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
                        "<p><h1>"+strcompanyname+"</h1></p>" +

                        "</td>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "</tr>" +
                        "<tr>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "<span style=\"text-decoration:none;color:#2f2f36;font-weight:bold;font-size:32px;line-height:32px\">Bill "+billnoget+"</span><br>" +
                        "</td>" +
                        "<td width=\"40\"></td>" +
                        "</tr>" +
                        "<tr>" +
                        "<td width=\"40\"></td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">for Customer <br> from <b>"+strcompanyname+"</b><br>" +
                        " </td>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "</tr>" +
                        "<tr></tr>" +
                        "<tr><td width=\"40\"></td>" +
                        "<td width=\"512\" height=\"30\">" +
                        "</td> <td width=\"40\"></td></tr></tbody></table></td>" +
                        "</tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" bgcolor=\"#ffffff\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td width=\"460\" height=\"5\" bgcolor=\"#ffffff\"></td></tr>" +
                        "<tr><td width=\"460\" height=\"1\" bgcolor=\"#e1e1e1\"></td></tr>" +
                        "<tr><td width=\"460\" height=\"10\" bgcolor=\"#ffffff\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\"><tbody>" +
                        "<tr> <td width=\"460\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"20\"></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"40\"></td><td width=\"510\" style=\"font-size:14px;color:#444;font-weight:normal;text-align:left;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">Hi "+custname.getText().toString()+",<br>Your refunded amount is "+insert1_rs+refundamout.getText().toString()+" <br><br>We appreciate your Business and hope to see you again soon,<br>"+strcompanyname+" <br>" +
                        //Correct(tic) symbol
                        "<p align=\"center\"> <img src=\"https://static.wixstatic.com/media/ff8d82_453b1bed7c174e398e9fc333af3692bf~mv2.png\" width=\"60\" height=\"60\"></p>" +

                        "<p style=\"font-size:18px;border-top:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;padding:10px 0;background:#fefefe;text-align:center;margin:5px 0\">Paid: <span style=\"white-space:nowrap;font-weight:bold;font-size:18px\">"+insert1_rs+" "+refundamout.getText().toString()+" </span>" +
                        "</p><br></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody>" +
                        "<tr><td width=\"\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"40\"></td>" +
                        "<td width=\"510\" style=\"font-size:14px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "<div></div>" +
                        "<p style=\"margin-top:3px;color:#444\">Dated: <span style=\"white-space:nowrap;font-weight:bold;font-size:14px\">"+date_mail+",</span> "+time_mail+" </p>" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td>" +
                        "<td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td width=\"460\" height=\"10\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f9f9f9\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\"><tbody>" +
                        "<tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td height=\"10\" ></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody><tr><td width=\"40\"></td><td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td>" +
                        "<td width=\"460\" style=\"font-size:14px;color:#959599;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:20px;text-align:center\">" +
                        "<p>Disclaimer: This information may be confidential and is intended only for the recipient.</p>" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"462\" bgcolor=\"#f0f0f0\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\">" +
                        "<tbody> <tr> <td width=\"462\" height=\"10\"></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody> <tr> <td width=\"460\" bgcolor=\"#f0f0f0\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody> <tr> <td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td width=\"30\"></td><td width=\"530\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" ><tbody><tr>" +
                        "<td height=\"0\" align=\"center\" style=\"font-size:14px;color:#b8b9c1;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:24px\">" +
                        "<p><a style=\"text-decoration:none;color:#959599\" target=\"_blank\">If you think this mail is not for you, please delete and contact<a href=\"mailto:"+stremailid+"\" style=\"text-decoration:none;color:#008f9b;font-weight:bold\" target=\"_blank\">\n" +
                        ""+vbn.getText().toString()+"</a> </a></td>" +
                        "</tr></tbody></table><table width=\"140\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"left\">" +
                        "<tbody><tr><td width=\"140\"></td></tr></tbody></table></td><td width=\"30\"></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"460\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;border-radius:0 0 10px 10px;background:#f0f0f0\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"14\"></td></tr></tbody></table></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody><tr><td height=\"20\"></td></tr><tr>" +
                        "<td style=\"text-align:center\"><a href=\"http://www.intuitionsoftwares.com/\" target=\"_blank\" ><img src=\"www.intuitionsoftwares.com/resources/Powered%20by%20Intuition.png\" alt=\"Powered by Intuition\" border=\"0\" style=\"text-align:center;min-width:65px\"></a></td></tr>" +
                        "<tr>" +
                        "<td height=\"40\" style=\"line-height:1px\"></td></tr></tbody></table></td></tr></tbody></table><div><div>" +
                        "</div></div><span></span><div></div><div></div></div>" +
                        "</Body>" +
                        "</Html>";

        Uri u1  =   null;
        u1  =   Uri.fromFile(file);

//                Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);
//                emailIntent.setType("image/jpeg");
//                emailIntent.putExtra(Intent.EXTRA_EMAIL, u1);
//                startActivity(Intent.createChooser(emailIntent, "Send mail..."));

        billaa.setVisibility(View.GONE);

//        Intent emailIntent = new Intent(Intent.ACTION_SENDTO);
//        emailIntent.setData(Uri.parse("mailto:"));
//        emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, compna);
//        emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, msg);
//
////                emailIntent.setType("image/jpeg");
////                emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, new String[]{to});
////                emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, subj);
////                emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, msg);
//        emailIntent.putExtra(Intent.EXTRA_STREAM, u1);
//        startActivity(Intent.createChooser(emailIntent, "Send mail..."));


        Cursor cursore = db1.rawQuery("SELECT * FROM Email_setup", null);
        if (cursore.moveToFirst()){
            final String un = cursore.getString(1);
            final String pwd = cursore.getString(2);
            final String client = cursore.getString(3);
            Cursor em = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
            if (em.moveToFirst()){
                email_id_send = new EditText(Refundswise_Saleslist.this);
                String em1 = em.getString(3);
                if (client.toString().equals("Gmail")) {
                    email_id_send.setText(em1);
                    getResultsFromApi();
                    new MakeRequestTask_bill(mCredential).execute();
                }else {
                    if (client.toString().equals("Yahoo")){
//                        Toast.makeText(getActivity(), "yahoo "+un, Toast.LENGTH_LONG).show();

                        String toEmails = em1;
                        List toEmailList = Arrays.asList(toEmails
                                .split("\\s*,\\s*"));
                        new SendMailTask_Yahoo_homebill(Refundswise_Saleslist.this).execute(un,
                                pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);



                    }else {
                        if (client.toString().equals("Hotmail")){
//                            Toast.makeText(getActivity(), "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();

                            String toEmails = em1;
                            List toEmailList = Arrays.asList(toEmails
                                    .split("\\s*,\\s*"));
                            new SendMailTask_Hotmail_Outlook_homebill(Refundswise_Saleslist.this).execute(un,
                                    pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                        }else {
                            if (client.toString().equals("Office365")) {
//                                Toast.makeText(getActivity(), "office 365 " + un, Toast.LENGTH_LONG).show();

                                String toEmails = em1;
                                List toEmailList = Arrays.asList(toEmails
                                        .split("\\s*,\\s*"));
                                new SendMailTask_Office365_homebill(Refundswise_Saleslist.this).execute(un,
                                        pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                            }
                        }
                    }
                }
//            Toast.makeText(Refundswise_Saleslist.this, "email is "+em1, Toast.LENGTH_LONG).show();
            }else {
//            Toast.makeText(Refundswise_Saleslist.this, "show dialog", Toast.LENGTH_LONG).show();

                final Dialog dialogenteremail = new Dialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog);
                dialogenteremail.setContentView(R.layout.dialog_payment_enter_email);
                dialogenteremail.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                dialogenteremail.setCanceledOnTouchOutside(false);
                dialogenteremail.show();

                ImageView btncancel = (ImageView) dialogenteremail.findViewById(R.id.btncancel);
                btncancel.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialogenteremail.dismiss();
                    }
                });

                final TextInputLayout email_id_send_layout = (TextInputLayout) dialogenteremail.findViewById(R.id.email_id_send_layout);

                email_id_send = (EditText) dialogenteremail.findViewById(R.id.email_id_send);

                email_id_send.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

                    }

                    @Override
                    public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                        email_id_send_layout.setError(null);
                    }

                    @Override
                    public void afterTextChanged(Editable editable) {

                    }
                });

                ImageView closetext = (ImageView) dialogenteremail.findViewById(R.id.closetext);
                closetext.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (email_id_send.getText().toString().trim().matches(emailPattern)) {
                            if (client.toString().equals("Gmail")) {
//                                email_id_send.setText(em1);
//                                getResultsFromApi();
//                                new MakeRequestTask(mCredential).execute();
                                getResultsFromApi();
                                new MakeRequestTask_bill(mCredential).execute();
                            }else {
                                if (client.toString().equals("Yahoo")){
//                        Toast.makeText(getActivity(), "yahoo "+un, Toast.LENGTH_LONG).show();

                                    String toEmails = email_id_send.getText().toString();
                                    List toEmailList = Arrays.asList(toEmails
                                            .split("\\s*,\\s*"));
                                    new SendMailTask_Yahoo_homebill(Refundswise_Saleslist.this).execute(un,
                                            pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);



                                }else {
                                    if (client.toString().equals("Hotmail")){
//                            Toast.makeText(getActivity(), "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();

                                        String toEmails = email_id_send.getText().toString();
                                        List toEmailList = Arrays.asList(toEmails
                                                .split("\\s*,\\s*"));
                                        new SendMailTask_Hotmail_Outlook_homebill(Refundswise_Saleslist.this).execute(un,
                                                pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                                    }else {
                                        if (client.toString().equals("Office365")) {
//                                Toast.makeText(getActivity(), "office 365 " + un, Toast.LENGTH_LONG).show();

                                            String toEmails = email_id_send.getText().toString();
                                            List toEmailList = Arrays.asList(toEmails
                                                    .split("\\s*,\\s*"));
                                            new SendMailTask_Office365_homebill(Refundswise_Saleslist.this).execute(un,
                                                    pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                                        }
                                    }
                                }
                            }
                            dialogenteremail.dismiss();
                        }
                        else {
                            email_id_send_layout.setError("Invalid email address");
                        }

                    }
                });
            }

        }else {
            //only sender not there recipient not required
            final Dialog dialoge = new Dialog(Refundswise_Saleslist.this, R.style.timepicker_date_dialog);
            dialoge.setContentView(R.layout.email_prerequisites);
            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
            dialoge.show();

            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
            btncancel.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialoge.dismiss();
                }
            });

            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

            LinearLayout recipient_layout = (LinearLayout) dialoge.findViewById(R.id.recipient_layout);
            recipient_layout.setVisibility(View.GONE);

            sender_notset.setVisibility(View.VISIBLE);

            recipient_set.setVisibility(View.VISIBLE);

            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
            gotosettings.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(Refundswise_Saleslist.this, EmailSetup.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(intent);
//                                                                getActivity().finish();
                    dialoge.dismiss();
                }
            });

            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
            gotosettings1.setVisibility(View.GONE);
            gotosettings1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(Refundswise_Saleslist.this, EmailSetup.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(intent);
//                                                                getActivity().finish();
                    dialoge.dismiss();
                }
            });
        }

    }


    private class MakeRequestTask_bill extends AsyncTask<Void, Void, String> {
        private Gmail mService = null;
        private Exception mLastError = null;
//        private View view = sendFabButton;

        public MakeRequestTask_bill(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
            mService = new Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName(getResources().getString(R.string.app_name))
                    .build();
        }

        @Override
        protected String doInBackground(Void... params) {
            try {
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                return null;
            }
        }

        private String getDataFromApi() throws IOException {
            // getting Values for to Address, from Address, Subject and Body

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }

            String url = "www.intuitionsoftwares.com";

//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

            TextView refundamout = new TextView(Refundswise_Saleslist.this);
            refundamout.setText(refundamount_aa.getText().toString());

            final String msg = "Refund confirmation from "+compna+"\n\nDear Customer, \n\nThis is to inform that you have been refunded an amount of "+""+insert1_rs+" "+refundamout.getText().toString()+" on your bill "+billnoget+" dated "+datee+".\n\nWe appreciate your business and hope to see you again soon. \n"+compna+"\n\n\n" +
                    "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                    "Powered by: "+ Uri.parse(url);

            Cursor getcomm = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcomm.moveToFirst()) {
                do {
                    strcompanyname = getcomm.getString(1);
                    straddress1 = getcomm.getString(14);
                    stremailid = getcomm.getString(15);
                } while (getcomm.moveToNext());
            }else {
                strcompanyname = "";
                stremailid = "";
            }

            String name_mail = "";
            Cursor em = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
            if (em.moveToFirst()){
                name_mail = em.getString(1);
            }

            String date_mail = "", time_mail = "";
            Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
            if (cursor9.moveToFirst()){
                date_mail = cursor9.getString(25);
                time_mail = cursor9.getString(12);
            }


//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

            String sub = "";
            Cursor cursor81 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoget+"'", null);
            if (cursor81.moveToFirst()){
                sub = cursor81.getString(2);
            }

//            final String msg =
//                    "<Html>" +
//                            "<Body>" +
//                            "<div>" +
//                            " <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody>" +
//                            "<tr>" +
//                            "<td width=\"100%\" valign=\"top\" bgcolor=\"#f8f8f8\">" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1;margin-top:50px\">" +
//                            "<tbody>" +
//                            "<tr>" +
//                            "<td width=\"460\" >" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody>" +
//                            "<tr>" +
//                            "<td height=\"30\">" +
//                            "</td>" +
//                            "</tr>" +
//                            "</tbody>" +
//                            "</table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody>" +
//                            "<tr>" +
//                            "<td width=\"40\">" +
//                            "</td>" +
//                            "<td width=\"460\" style=\"font-size:16px;color:#00929f;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
////                        "<img src=\"http://www.intuitionsoftwares.com/resources/intuition_logo_header_with_text_240.png\" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
////                        "<img src="+logo+" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
//                            "<p><h1>"+strcompanyname+"</h1></p>" +
//
//                            "</td>" +
//                            "<td width=\"40\">" +
//                            "</td>" +
//                            "</tr>" +
//                            "<tr>" +
//                            "<td width=\"40\">" +
//                            "</td>" +
//                            "<td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                            "<span style=\"text-decoration:none;color:#2f2f36;font-weight:bold;font-size:32px;line-height:32px\">Bill "+billnoget+"</span><br>" +
//                            "</td>" +
//                            "<td width=\"40\"></td>" +
//                            "</tr>" +
//                            "<tr>" +
//                            "<td width=\"40\"></td>" +
//                            "<td width=\"460\" style=\"font-size:16px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">for Customer <br> from <b>"+strcompanyname+"</b><br>" +
//                            " </td>" +
//                            "<td width=\"40\">" +
//                            "</td>" +
//                            "</tr>" +
//                            "<tr></tr>" +
//                            "<tr><td width=\"40\"></td>" +
//                            "<td width=\"512\" height=\"30\">" +
//                            "</td> <td width=\"40\"></td></tr></tbody></table></td>" +
//                            "</tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" bgcolor=\"#ffffff\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                            "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                            "<tr><td width=\"460\" height=\"5\" bgcolor=\"#ffffff\"></td></tr>" +
//                            "<tr><td width=\"460\" height=\"1\" bgcolor=\"#e1e1e1\"></td></tr>" +
//                            "<tr><td width=\"460\" height=\"10\" bgcolor=\"#ffffff\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\"><tbody>" +
//                            "<tr> <td width=\"460\">" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"20\"></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                            "<td width=\"40\"></td><td width=\"510\" style=\"font-size:14px;color:#444;font-weight:normal;text-align:left;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">Hi "+name_mail+",<br>Your Refunded amount is Rs."+refundamout.getText().toString()+" <br><br>We appreciate your Business and hope to see you again soon,<br>Intuition Systems <br>" +
//                            //Correct(tic) symbol
//                            "<p align=\"center\"> <img src=\"https://http://www.intuitionsoftwares.com/resources/ic_tick_gradientgreen_48dp.png\" width=\"60\" height=\"60\"></p>" +
//
//                            "<p style=\"font-size:18px;border-top:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;padding:10px 0;background:#fefefe;text-align:center;margin:5px 0\">Refund: <span style=\"white-space:nowrap;font-weight:bold;font-size:18px\">Rs. "+refundamout.getText().toString()+" </span>" +
//                            "</p><br></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                            "<tbody>" +
//                            "<tr><td width=\"\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                            "<td width=\"40\"></td>" +
//                            "<td width=\"510\" style=\"font-size:14px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                            "<div></div>" +
//                            "<p style=\"margin-top:3px;color:#444\">Dated: <span style=\"white-space:nowrap;font-weight:bold;font-size:14px\">"+date_mail+",</span> "+time_mail+" </p>" +
//                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td>" +
//                            "<td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                            "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td width=\"460\" height=\"10\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f9f9f9\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\"><tbody>" +
//                            "<tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                            "<tr><td height=\"10\" ></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody><tr><td width=\"40\"></td><td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td>" +
//                            "<td width=\"460\" style=\"font-size:14px;color:#959599;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:20px;text-align:center\">" +
//                            "<p>Disclaimer: This information may be confidential and is intended only for the recipient.</p>" +
//                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"462\" bgcolor=\"#f0f0f0\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\">" +
//                            "<tbody> <tr> <td width=\"462\" height=\"10\"></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                            "<tbody> <tr> <td width=\"460\" bgcolor=\"#f0f0f0\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody> <tr> <td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                            "<tr><td width=\"30\"></td><td width=\"530\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" ><tbody><tr>" +
//                            "<td height=\"0\" align=\"center\" style=\"font-size:14px;color:#b8b9c1;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:24px\">" +
//                            "<p><a style=\"text-decoration:none;color:#959599\" target=\"_blank\">If you think this mail is not for you, please delete and contact<a href=\"mailto:"+stremailid+"\" style=\"text-decoration:none;color:#008f9b;font-weight:bold\" target=\"_blank\">\n" +
//                            ""+stremailid+"</a> </a></td>" +
//                            "</tr></tbody></table><table width=\"140\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"left\">" +
//                            "<tbody><tr><td width=\"140\"></td></tr></tbody></table></td><td width=\"30\"></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                            "<td width=\"460\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;border-radius:0 0 10px 10px;background:#f0f0f0\">" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"14\"></td></tr></tbody></table></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody><tr><td height=\"20\"></td></tr><tr>" +
//                            "<td style=\"text-align:center\"><a href=\"http://www.intuitionsoftwares.com/\" target=\"_blank\" ><img src=\"https://http://www.intuitionsoftwares.com/resources/Powered%20by%20Intuition.png\" alt=\"Powered by Intuition\" border=\"0\" style=\"text-align:center;min-width:65px\"></a></td></tr>" +
//                            "<tr>" +
//                            "<td height=\"40\" style=\"line-height:1px\"></td></tr></tbody></table></td></tr></tbody></table><div><div>" +
//                            "</div></div><span></span><img width=\"1px\" height=\"1px\" alt=\"\" src=\"https://ci6.googleusercontent.com/proxy/v_Shs6iOLq12vwu0Xt6qngxx4kneWRfK5sqTLGcXNVHFoKVZ7lS25nHt7H1Jm2usy7rNYKDLkgiPnf-6WwR9Yr0RCUdQGIUR6UAzInSh4IrJBqQk62YtXVDscuCYMCes1p7ddQyWrPxBcb46UqOG8GZUToV8KTB0InbN_nhjjaBySA-Eqsgb7FQUv71BB8c9vjZIesQTibEyktzooZmRj0q-8JfvlIrF5j5PjutWDHROpXD5l5f1J8DthU5s3aqJVnp_My3uDAuVgualRg=s0-d-e1-ft#http://email.mg.waveapps.com/o/eJwNzDEOwyAMAMDXlA1kU8Aw8BjXBAUpgYoQ9fvNdtOVTFUSW9WyBSQIQOgfWYNgIZlIFPHl4DtH0SyytOz90IBqz4SONw8hfAQ9hhgLvD2nJLE4TraqmblzL4afoPV1t9VGv0ZdP57bZWScf2cRJRo\" ><div></div><div></div></div>" +
//                            "</Body>" +
//                            "</Html>";


//            Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
//            if (cursor1.moveToFirst()) {
//                do {
//                    String unn = cursor1.getString(3);
            TextView edtToAddress = new TextView(Refundswise_Saleslist.this);
            edtToAddress.setText(email_id_send.getText().toString());

            TextView edtSubject = new TextView(Refundswise_Saleslist.this);
            edtSubject.setText(strcompanyname);

            TextView edtMessage = new TextView(Refundswise_Saleslist.this);
            edtMessage.setText(msg);

            String user = "me";
            String to = Utils.getString(edtToAddress);
            String from = mCredential.getSelectedAccountName();
            Log.v("sender email", from);
            String subject = Utils.getString(edtSubject);
            String body = Utils.getString(edtMessage);
            MimeMessage mimeMessage;
            response = "";
            try {

//                        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_customer_list");
//                        if (!exportDir.exists()) {
//                            exportDir.mkdirs();
//                        }
//
//                        file = new File(exportDir, "IvePOS_customer_list" + currentDateandTimee1 + "_" + timee1 + ".csv");

//                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_Bills/IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg";
                String filename = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)+"/IVEPOS_Bills/IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_product_report/IvePOS_product_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_customer_list/IvePOS_customer_list"+currentDateandTimee1+"_"+timee1+".csv";

//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+"12May17"+"_"+"013048PM"+".csv";
//                String path = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_backup/";


                File f = new File(filename);
//
                mimeMessage = createEmailWithAttachment(to, from, subject, body, f);



//                        mimeMessage = createEmail(to, from, subject, body);
                response = sendMessage(mService, user, mimeMessage);
            } catch (MessagingException e) {
                e.printStackTrace();
            }

//                } while (cursor1.moveToNext());
//            }
            return response;
        }

        // Method to send email
        private String sendMessage(Gmail service,
                                   String userId,
                                   MimeMessage email)
                throws MessagingException, IOException {
            com.google.api.services.gmail.model.Message message = createMessageWithEmail(email);
            // GMail's official method to send email with oauth2.0
            message = service.users().messages().send(userId, message).execute();

            System.out.println("user ID " + userId);

            System.out.println("Message id: " + message.getId());
            System.out.println(message.toPrettyString());
            return message.getId();
        }

        public MimeMessage createEmailWithAttachment(String to,
                                                     String from,
                                                     String subject,
                                                     String bodyText,
                                                     File file)
                throws MessagingException, IOException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);

            email.setFrom(new InternetAddress(from));
            email.addRecipient(javax.mail.Message.RecipientType.TO,
                    new InternetAddress(to));
            email.setSubject(subject);

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(bodyText, "text/html");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            mimeBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);

            mimeBodyPart.setDataHandler(new DataHandler(source));
            mimeBodyPart.setFileName(file.getName());

            multipart.addBodyPart(mimeBodyPart);
            email.setContent(multipart);

            return email;
        }

        // Method to create email Params
        private MimeMessage createEmail(String to,
                                        String from,
                                        String subject,
                                        String bodyText) throws MessagingException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);
            InternetAddress tAddress = new InternetAddress(to);
            InternetAddress fAddress = new InternetAddress(from);


            System.out.println("From  " + from);
            System.out.println("To  " + to);


            email.setFrom(fAddress);
            email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);
            email.setSubject(subject);
            email.setText(bodyText);
            return email;
        }

        private com.google.api.services.gmail.model.Message createMessageWithEmail(MimeMessage email)
                throws MessagingException, IOException {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            email.writeTo(bytes);
            String encodedEmail = Base64.encodeBase64URLSafeString(bytes.toByteArray());
            com.google.api.services.gmail.model.Message message = new com.google.api.services.gmail.model.Message();
            message.setRaw(encodedEmail);
            return message;
        }

        @Override
        protected void onPreExecute() {
            mProgress.show();
        }

        @Override
        protected void onPostExecute(String output) {
            Log.d("post execute", "error");
            mProgress.hide();
            if (output == null || output.length() == 0) {
                Toast.makeText(Refundswise_Saleslist.this, "not success", Toast.LENGTH_SHORT).show();
//                showMessage(view, "No results returned.");
            } else {
                Toast.makeText(Refundswise_Saleslist.this, "success", Toast.LENGTH_SHORT).show();
//                showMessage(view, output);
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
//                Log.v("Errors3", mLastError.getMessage());
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
//                    Log.v("Errors1", mLastError.getMessage());
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
//                    Log.v("Errors2", mLastError.getMessage());
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            Utils.REQUEST_AUTHORIZATION);
                } else {
//                    showMessage(view, "The following error occurred:\n" + mLastError.getMessage());
//                    Log.v("Errors", mLastError.getMessage());
                }
            } else {
//                showMessage(view, "Request Cancelled.");
            }
        }
    }

    public void printbillcopy_minireceipt(){
        Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }

        Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }

        //Toast.makeText(Refundswise_Saleslist.this, "printbillonly one ", Toast.LENGTH_SHORT).show();
        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] HT1 = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor print_ty = db1.rawQuery("SELECT * FROM Printer_type", null);
        if (print_ty.moveToFirst()){
            str_print_ty = print_ty.getString(1);
        }

        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    if (str_print_ty.toString().equals("Generic") || str_print_ty.toString().equals("Epson/others")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x18, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x20, 0x29, 0x00};//4 tabs 3"
                        nPaperWidth = 576;
                        charlength = 23;
                        charlength1 = 46;
                        charlength2 = 69;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("POS")) {
                            setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                            setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                            nPaperWidth = 576;
                            charlength = 23;
                            charlength1 = 46;
                            charlength2 = 69;
                            quanlentha = 4;
                            HT1 = new byte[]{0x2F};
                            str_line = "------------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------------".getBytes(), LF

                            };
                        }
                    }
                }
                else {
                    if (str_print_ty.toString().equals("Generic")) {
//                        Toast.makeText(Refundswise_Saleslist.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("Epson/others")) {
//                        Toast.makeText(Refundswise_Saleslist.this, "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            nPaperWidth = 384;
                            charlength = 16;
                            charlength1 = 32;
                            charlength2 = 48;
                            quanlentha = 5;
                            HT1 = new byte[]{0x09};
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }else {
                            if (str_print_ty.toString().equals("POS")) {
                                setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                nPaperWidth = 384;
                                charlength = 11;
                                charlength1 = 22;
                                charlength2 = 33;
                                quanlentha = 4;
                                HT1 = new byte[]{0x2F};
                                str_line = "--------------------------------";
                                allbufline = new byte[][]{
                                        left, un1, "--------------------------------".getBytes(), LF
                                };
                            }
                        }
                    }
                }
            }while(cc.moveToNext());
        }


        String dd = "";
        TextView qazcvb = new TextView(Refundswise_Saleslist.this);
        Cursor cvonnusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (cvonnusb.moveToFirst()) {
            addgets = cvonnusb.getString(1);
            namegets = cvonnusb.getString(2);
            statussusbs = cvonnusb.getString(3);
            dd = cvonnusb.getString(4);
        }
        qazcvb.setText(dd);
        if (qazcvb.getText().toString().equals("usb") && statussusbs.toString().equals("ok")) {
            runPrintCouponSequence_minireceipt_all();
        }else {
            allbuf1 = new byte[][]{
                    bold, un, "Sales Overview".getBytes(), LF

            };
            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(bold);    //
                BluetoothPrintDriver.BT_Write(un);    //
                BT_Write("Sales Overview");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(bold);    //
                    wifiSocket2.WIFI_Write(un);    //
                    wifiSocket2.WIFI_Write("Sales Overview");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(bold);    //
                        wifiSocket.WIFI_Write(un);    //
                        wifiSocket.WIFI_Write("Sales Overview");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    straddress2 = getcom.getString(17);
                    straddress3 = getcom.getString(18);
                    strphone = getcom.getString(2);
                    stremailid = getcom.getString(15);
                    strwebsite = getcom.getString(16);
                    strtaxone = getcom.getString(10);
                    strbillone = getcom.getString(12);
                } while (getcom.moveToNext());
            }


            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, un1, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(bold);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(strcompanyname);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(strcompanyname);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(strcompanyname);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

/////////
            tvkot.setText(straddress1);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf2 = new byte[][]{
                        normal, un1, cen, straddress1.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(straddress1);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(straddress1);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(straddress1);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot.setText(straddress2);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf3 = new byte[][]{
                        normal, un1, cen, straddress2.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(straddress2);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(straddress2);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(straddress2);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot.setText(straddress3);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf4 = new byte[][]{
                        normal, un1, cen, straddress3.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(straddress3);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(straddress3);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(straddress3);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strphone);
            String pp = "Ph. " + strphone;
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf5 = new byte[][]{
                        normal, un1, cen, pp.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(pp);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(pp);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(pp);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(stremailid);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf6 = new byte[][]{
                        normal, un1, cen, stremailid.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(stremailid);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(stremailid);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(stremailid);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strwebsite);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, un1, cen, strwebsite.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(strwebsite);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(strwebsite);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(strwebsite);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strtaxone);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf8 = new byte[][]{
                        normal, un1, cen, strtaxone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(strtaxone);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(strtaxone);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(strtaxone);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }


            allbuf10 = new byte[][]{
                    setHT321, left, editText11.getText().toString().getBytes(), HT, "  ".getBytes(), editText22.getText().toString().getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(editText11.getText().toString());
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(editText22.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(editText11.getText().toString());
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(editText22.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(editText11.getText().toString());
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(editText22.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuftax = new byte[][]{
                    setHT321, left, editText_from_day_visible.getText().toString().getBytes(), HT, "  ".getBytes(), editText_to_day_visible.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(editText_from_day_visible.getText().toString());
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(editText_to_day_visible.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(editText_from_day_visible.getText().toString());
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(editText_to_day_visible.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(editText_from_day_visible.getText().toString());
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(editText_to_day_visible.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }


            allbuftax = new byte[][]{
                    setHT321, left, "Sales".getBytes(), HT, "| ".getBytes(), "No. of bills".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Sales");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write("No. of bills");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Sales");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write("No. of bills");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Sales");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write("No. of bills");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor11.moveToFirst()) {
                int level = cursor11.getInt(0);
                total = String.valueOf(level);
            }

            Cursor count = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (count.moveToFirst()) {
                int level = count.getInt(0);
                total1 = String.valueOf(level);
            }

            String avgbill = String.valueOf(Integer.parseInt(total) / Integer.parseInt(total1));


            noofbills = new TextView(Refundswise_Saleslist.this);


            Cursor countc = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (countc.moveToFirst()) {
                int level = countc.getInt(0);
                String total1 = String.valueOf(level);
                noofbills.setText(total1);
            }


            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), total.toString().getBytes(), HT, "| ".getBytes(), noofbills.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(insert1_rs);
                BT_Write(total);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write(noofbills.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(total);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write(noofbills.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(total);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write(noofbills.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Refunds".getBytes(), HT, "| ".getBytes(), "Refunded bills".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Refunds");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write("Refunded bills");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Refunds");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write("Refunded bills");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Refunds");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write("Refunded bills");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            String sumtotal = "";
            Cursor summ = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems", null);
            float sum1 = 0;
            if (summ.moveToFirst()) {
                do {
                    float sumlevel = summ.getFloat(0);
                    sumtotal = String.valueOf(sumlevel);
                    //Toast.makeText(getActivity(), " total is "+max, Toast.LENGTH_SHORT).show();
                } while (summ.moveToNext());

            }

            refundamount_bill = new TextView(Refundswise_Saleslist.this);
            Cursor refundam_bill = db.rawQuery("Select count(billno) from Cancelwiseorderlistitems", null);
            if (refundam_bill.moveToFirst()) {
                int refundedstr_bill = refundam_bill.getInt(0);
                refundamount_bill.setText(String.valueOf(refundedstr_bill));
            }


            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), sumtotal.toString().getBytes(), HT, "| ".getBytes(), refundamount_bill.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(insert1_rs);
                BT_Write(sumtotal);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write(refundamount_bill.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(sumtotal);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write(refundamount_bill.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(sumtotal);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write(refundamount_bill.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }


            TextView top_reason = new TextView(Refundswise_Saleslist.this);
            Cursor to = db.rawQuery("SELECT MAX(value) FROM Top_Reason", null);
            if (to.moveToFirst()) {
                int one11 = to.getInt(0);
                to = db.rawQuery("SELECT * FROM Top_Reason WHERE value = '" + one11 + "' ", null);
                if (to.moveToFirst()) {
                    String two111 = to.getString(1);
                    top_reason.setText(two111);
                } else {
                    top_reason.setText("");
                }
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Top Reason: ".getBytes(), "".getBytes(), HT, LF
            };

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("Top Reason: ");
                BT_Write("");
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("Top Reason: ");
                    wifiSocket2.WIFI_Write("");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("Top Reason: ");
                        wifiSocket.WIFI_Write("");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, top_reason.getText().toString().getBytes(), "".getBytes(), HT, LF
            };

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write(top_reason.getText().toString());
                BT_Write("");
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write(top_reason.getText().toString());
                    wifiSocket2.WIFI_Write("");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write(top_reason.getText().toString());
                        wifiSocket.WIFI_Write("");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }

            Cursor cursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems ORDER BY refund ASC", null);
            if (cursor.moveToFirst()) {
                do {
                    String bill_no = cursor.getString(4);
                    String date = cursor.getString(1);
                    String time = cursor.getString(2);
                    String am = cursor.getString(5);
                    String reas = cursor.getString(7);
                    String ref_am = cursor.getString(6);

                    Cursor cursor2 = db.rawQuery("SELECt * FROM Billnumber WHERE billnumber = '" + bill_no + "'", null);
                    if (cursor2.moveToFirst()) {
                        String billtypea = cursor2.getString(5);
                        String paymmethoda = cursor2.getString(6);

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setText(billtypea);

//                        if (tv.getText().toString().equals("  Cash")) {
//                            billtypeaa = "Cash";
//                        } else {
//                            billtypeaa = "Card";
//                        }

                        if (tv.getText().toString().equals("  Cash")) {
                            billtypeaa = "Cash"; //0
                        }
                        if (tv.getText().toString().equals("  Card")) {
                            billtypeaa = "Card"; //0
                        }
                        if (tv.getText().toString().equals("  Paytm")) {
                            billtypeaa = "Paytm"; //0
                        }
                        if (tv.getText().toString().equals("  Mobikwik")) {
                            billtypeaa = "Mobikwik"; //0
                        }
                        if (tv.getText().toString().equals("  Freecharge")) {
                            billtypeaa = "Freecharge"; //0
                        }
                        if (tv.getText().toString().equals("  Pay Later")) {
                            billtypeaa = "Pay Later"; //0
                        }
                        if (tv.getText().toString().equals("  Cheque")) {
                            billtypeaa = "Cheque"; //0
                        }
                        if (tv.getText().toString().equals("  Sodexo")) {
                            billtypeaa = "Sodexo"; //0
                        }
                        if (tv.getText().toString().equals("  Zeta")) {
                            billtypeaa = "Zeta"; //0
                        }
                        if (tv.getText().toString().equals("  Ticket")) {
                            billtypeaa = "Ticket"; //0
                        }
                        if (billtypea.toString().equals("  Upiqr")) {
                            billtypeaa = "Upiqr"; //0
                        }
                        billtypeaa = tv.getText().toString().replace(" ", "");

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setText(paymmethoda);
                        if (tv1.getText().toString().equals("  Dine-in") || tv1.getText().toString().equals("  General") || tv1.getText().toString().equals("  Others")) {
//                            paymmethodaa = "Dine-in";
                            //billtypee.setText("Dine-in");
                            if (account_selection.toString().equals("Dine") || account_selection.toString().equals("Qsr")) {
                                paymmethodaa = "Dine-in";
                            }else {
                                paymmethodaa = "General";
                            }
                        } else {
                            if (tv1.getText().toString().equals("  Takeaway") || tv1.getText().toString().equals("  Main")) {
                                paymmethodaa = "Takeaway";
                                //billtypee.setText("Takeaway");
                            } else {
                                paymmethodaa = "Home delivery";
                                //billtypee.setText("Home delivery");
                            }
                        }


                        Cursor billtype = db.rawQuery("Select * from Billnumber WHERE billnumber = '" + bill_no + "' ", null);
                        if (billtype.moveToFirst()) {
                            String bill_coun = billtype.getString(11);

                            if (statussusbs.equals("ok")) {
                                BluetoothPrintDriver.BT_Write(normal);    //
                                BluetoothPrintDriver.BT_Write(un1);    //
                                BT_Write("Bill id."+bill_coun);
                                BluetoothPrintDriver.BT_Write(LF);    //
                            } else {
                                if (statusnets_counter.equals("ok")) {
                                    wifiSocket2.WIFI_Write(normal);    //
                                    wifiSocket2.WIFI_Write(un1);    //
                                    wifiSocket2.WIFI_Write("Bill id."+bill_coun);
                                    wifiSocket2.WIFI_Write(LF);    //
                                }else {
                                    if (statusnets.equals("ok")) {
                                        wifiSocket.WIFI_Write(normal);    //
                                        wifiSocket.WIFI_Write(un1);    //
                                        wifiSocket.WIFI_Write("Bill id."+bill_coun);
                                        wifiSocket.WIFI_Write(LF);    //
                                    }
                                }
                            }
                        }
                        billtype.close();


                        allbufbillno = new byte[][]{
                                setHT321, un1, "Bill no.".getBytes(), bill_no.getBytes(), HT, "   ".getBytes(), billtypeaa.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                        };


                        if (statussusbs.toString().equals("ok")) {
                            BluetoothPrintDriver.BT_Write(setHT321);    //
                            BluetoothPrintDriver.BT_Write(un1);    //
                            BT_Write("Bill no." + bill_no);
                            BluetoothPrintDriver.BT_Write(HT);    //
                            BT_Write("   ");
                            BT_Write(billtypeaa);
                            BluetoothPrintDriver.BT_Write(LF);    //
                        } else {
                            if (statusnets_counter.toString().equals("ok")) {
                                wifiSocket2.WIFI_Write(setHT321);    //
                                wifiSocket2.WIFI_Write(un1);    //
                                wifiSocket2.WIFI_Write("Bill no." + bill_no);
                                wifiSocket2.WIFI_Write(HT);    //
                                wifiSocket2.WIFI_Write("   ");
                                wifiSocket2.WIFI_Write(billtypeaa);
                                wifiSocket2.WIFI_Write(LF);    //
                            }else {
                                if (statusnets.toString().equals("ok")) {
                                    wifiSocket.WIFI_Write(setHT321);    //
                                    wifiSocket.WIFI_Write(un1);    //
                                    wifiSocket.WIFI_Write("Bill no." + bill_no);
                                    wifiSocket.WIFI_Write(HT);    //
                                    wifiSocket.WIFI_Write("   ");
                                    wifiSocket.WIFI_Write(billtypeaa);
                                    wifiSocket.WIFI_Write(LF);    //
                                }
                            }
                        }

                        allbuf10 = new byte[][]{
                                setHT321, left, paymmethodaa.getBytes(), HT, "  ".getBytes(), date.getBytes(), LF
                                //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

                        };
                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                        if (statussusbs.toString().equals("ok")) {
                            BluetoothPrintDriver.BT_Write(setHT321);    //
                            BluetoothPrintDriver.BT_Write(left);    //
                            BT_Write(paymmethodaa);
                            BluetoothPrintDriver.BT_Write(HT);    //
                            BT_Write("  ");
                            BT_Write(date);
                            BluetoothPrintDriver.BT_Write(LF);    //
                        } else {
                            if (statusnets_counter.toString().equals("ok")) {
                                wifiSocket2.WIFI_Write(setHT321);    //
                                wifiSocket2.WIFI_Write(left);    //
                                wifiSocket2.WIFI_Write(paymmethodaa);
                                wifiSocket2.WIFI_Write(HT);    //
                                wifiSocket2.WIFI_Write("  ");
                                wifiSocket2.WIFI_Write(date);
                                wifiSocket2.WIFI_Write(LF);    //
                            }else {
                                if (statusnets.toString().equals("ok")) {
                                    wifiSocket.WIFI_Write(setHT321);    //
                                    wifiSocket.WIFI_Write(left);    //
                                    wifiSocket.WIFI_Write(paymmethodaa);
                                    wifiSocket.WIFI_Write(HT);    //
                                    wifiSocket.WIFI_Write("  ");
                                    wifiSocket.WIFI_Write(date);
                                    wifiSocket.WIFI_Write(LF);    //
                                }
                            }
                        }

                        allbuftime = new byte[][]{
                                setHT321, left, "Rs.".getBytes(), am.getBytes(), HT, "  ".getBytes(), time.getBytes(), LF
                        };


                        if (statussusbs.toString().equals("ok")) {
                            BluetoothPrintDriver.BT_Write(setHT321);    //
                            BluetoothPrintDriver.BT_Write(left);    //
                            BT_Write(insert1_rs);
                            BT_Write(am);
                            BluetoothPrintDriver.BT_Write(HT);    //
                            BT_Write("  ");
                            BT_Write(time);
                            BluetoothPrintDriver.BT_Write(LF);    //
                        } else {
                            if (statusnets_counter.toString().equals("ok")) {
                                wifiSocket2.WIFI_Write(setHT321);    //
                                wifiSocket2.WIFI_Write(left);    //
                                wifiSocket2.WIFI_Write(insert1_rs);
                                wifiSocket2.WIFI_Write(am);
                                wifiSocket2.WIFI_Write(HT);    //
                                wifiSocket2.WIFI_Write("  ");
                                wifiSocket2.WIFI_Write(time);
                                wifiSocket2.WIFI_Write(LF);    //
                            }else {
                                if (statusnets.toString().equals("ok")) {
                                    wifiSocket.WIFI_Write(setHT321);    //
                                    wifiSocket.WIFI_Write(left);    //
                                    wifiSocket.WIFI_Write(insert1_rs);
                                    wifiSocket.WIFI_Write(am);
                                    wifiSocket.WIFI_Write(HT);    //
                                    wifiSocket.WIFI_Write("  ");
                                    wifiSocket.WIFI_Write(time);
                                    wifiSocket.WIFI_Write(LF);    //
                                }
                            }
                        }


                    }

                    allbuftaxestype1 = new byte[][]{
                            left, normal, "Refund amount: Rs.".getBytes(), ref_am.getBytes(), HT, LF
                    };

                    if (statussusbs.toString().equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(normal);    //
                        BT_Write("Refund amount: "+insert1_rs);
                        BT_Write(ref_am);
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(normal);    //
                            wifiSocket2.WIFI_Write("Refund amount: "+insert1_rs);
                            wifiSocket2.WIFI_Write(ref_am);
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(normal);    //
                                wifiSocket.WIFI_Write("Refund amount: "+insert1_rs);
                                wifiSocket.WIFI_Write(ref_am);
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }

                    allbuftaxestype1 = new byte[][]{
                            left, normal, "Reason: ".getBytes(), reas.getBytes(), HT, LF
                    };

                    if (statussusbs.toString().equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(normal);    //
                        BT_Write("Reason: ");
                        BT_Write(reas);
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(normal);    //
                            wifiSocket2.WIFI_Write("Reason: ");
                            wifiSocket2.WIFI_Write(reas);
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(normal);    //
                                wifiSocket.WIFI_Write("Reason: ");
                                wifiSocket.WIFI_Write(reas);
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }


                    if (statussusbs.toString().equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(un1);    //
                        BT_Write(str_line);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(left);	//
                            wifiSocket2.WIFI_Write(un1);	//
                            wifiSocket2.WIFI_Write(str_line);
                            wifiSocket2.WIFI_Write(LF);	//
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(left);	//
                                wifiSocket.WIFI_Write(un1);	//
                                wifiSocket.WIFI_Write(str_line);
                                wifiSocket.WIFI_Write(LF);	//
                            }
                        }
                    }


                } while (cursor.moveToNext());
            }

            feedcut();
        }
    }

    private boolean runPrintCouponSequence(Dialog dialog) {
        if (!initializeObject()) {
            return false;
        }

        if (!createCouponData(dialog)) {
            finalizeObject();
            return false;
        }

        if (!printData()) {
            finalizeObject();
            return false;
        }

        return true;
    }

    private boolean runPrintCouponSequence_minireceipt_all() {
        if (!initializeObject()) {
            return false;
        }

        if (!createCouponData_minireceipt_all()) {
            finalizeObject();
            return false;
        }

        if (!printData()) {
            finalizeObject();
            return false;
        }

        return true;
    }



    private boolean initializeObject() {
        try {
            mPrinter = new Printer(((SpnModelsItem) mSpnSeries.getSelectedItem()).getModelConstant(),
                    ((SpnModelsItem) mSpnLang.getSelectedItem()).getModelConstant(),
                    mContext);
        } catch (Exception e) {
//            Toast.makeText(Refundswise_Saleslist.this, "Here3", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "Printer", mContext);
            return false;
        }

        mPrinter.setReceiveEventListener(this);

        return true;
    }

    private void finalizeObject() {
        if (mPrinter == null) {
            return;
        }

        mPrinter.clearCommandBuffer();

        mPrinter.setReceiveEventListener(null);

        mPrinter = null;
    }

    @Override
    public void onPtrReceive(final Printer printerObj, final int code, final PrinterStatusInfo status, final String printJobId) {
        runOnUiThread(new Runnable() {
            @Override
            public synchronized void run() {
                ShowMsg.showResult(code, makeErrorMessage(status), mContext);

                dispPrinterWarnings(status);

//                updateButtonState(true);

                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        disconnectPrinter();
                    }
                }).start();
            }
        });
    }

    private String makeErrorMessage(PrinterStatusInfo status) {
        String msg = "";

        if (status.getOnline() == Printer.FALSE) {
            msg += getString(R.string.handlingmsg_err_offline);
        }
        if (status.getConnection() == Printer.FALSE) {
            msg += getString(R.string.handlingmsg_err_no_response);
        }
        if (status.getCoverOpen() == Printer.TRUE) {
            msg += getString(R.string.handlingmsg_err_cover_open);
        }
        if (status.getPaper() == Printer.PAPER_EMPTY) {
            msg += getString(R.string.handlingmsg_err_receipt_end);
        }
        if (status.getPaperFeed() == Printer.TRUE || status.getPanelSwitch() == Printer.SWITCH_ON) {
            msg += getString(R.string.handlingmsg_err_paper_feed);
        }
        if (status.getErrorStatus() == Printer.MECHANICAL_ERR || status.getErrorStatus() == Printer.AUTOCUTTER_ERR) {
            msg += getString(R.string.handlingmsg_err_autocutter);
            msg += getString(R.string.handlingmsg_err_need_recover);
        }
        if (status.getErrorStatus() == Printer.UNRECOVER_ERR) {
            msg += getString(R.string.handlingmsg_err_unrecover);
        }
        if (status.getErrorStatus() == Printer.AUTORECOVER_ERR) {
            if (status.getAutoRecoverError() == Printer.HEAD_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_head);
            }
            if (status.getAutoRecoverError() == Printer.MOTOR_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_motor);
            }
            if (status.getAutoRecoverError() == Printer.BATTERY_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_battery);
            }
            if (status.getAutoRecoverError() == Printer.WRONG_PAPER) {
                msg += getString(R.string.handlingmsg_err_wrong_paper);
            }
        }
        if (status.getBatteryLevel() == Printer.BATTERY_LEVEL_0) {
            msg += getString(R.string.handlingmsg_err_battery_real_end);
        }

        return msg;
    }

    private void dispPrinterWarnings(PrinterStatusInfo status) {
//        EditText edtWarnings = (EditText) findViewById(R.id.edtWarnings);
        String warningsMsg = "";

        if (status == null) {
            return;
        }

        if (status.getPaper() == Printer.PAPER_NEAR_END) {
            warningsMsg += getString(R.string.handlingmsg_warn_receipt_near_end);
        }

        if (status.getBatteryLevel() == Printer.BATTERY_LEVEL_1) {
            warningsMsg += getString(R.string.handlingmsg_warn_battery_near_end);
        }

//        edtWarnings.setText(warningsMsg);
    }

    private void disconnectPrinter() {
        if (mPrinter == null) {
            return;
        }

        try {
            mPrinter.endTransaction();
        } catch (final Exception e) {
            runOnUiThread(new Runnable() {
                @Override
                public synchronized void run() {
//                    Toast.makeText(Refundswise_Saleslist.this, "Here6", Toast.LENGTH_SHORT).show();
                    ShowMsg.showException(e, "endTransaction", mContext);
                }
            });
        }

        try {
            mPrinter.disconnect();
        } catch (final Exception e) {
            runOnUiThread(new Runnable() {
                @Override
                public synchronized void run() {
//                    Toast.makeText(Refundswise_Saleslist.this, "Here7", Toast.LENGTH_SHORT).show();
                    ShowMsg.showException(e, "disconnect", mContext);
                }
            });
        }

        finalizeObject();
    }

    private boolean printData() {
        if (mPrinter == null) {
            return false;
        }

        if (!connectPrinter()) {
            return false;
        }

        PrinterStatusInfo status = mPrinter.getStatus();

        dispPrinterWarnings(status);

        if (!isPrintable(status)) {
            ShowMsg.showMsg(makeErrorMessage(status), mContext);
            try {
                mPrinter.disconnect();
            } catch (Exception ex) {
//                Toast.makeText(Refundswise_Saleslist.this, "Here9", Toast.LENGTH_SHORT).show();
                // Do nothing
            }
            return false;
        }

        try {
            mPrinter.sendData(Printer.PARAM_DEFAULT);
        } catch (Exception e) {
//            Toast.makeText(Refundswise_Saleslist.this, "Here10", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "sendData", mContext);
            try {
                mPrinter.disconnect();
            } catch (Exception ex) {
//                Toast.makeText(Refundswise_Saleslist.this, "Here11", Toast.LENGTH_SHORT).show();
                // Do nothing
            }
            return false;
        }

        return true;
    }

    private boolean isPrintable(PrinterStatusInfo status) {
        if (status == null) {
            return false;
        }

        if (status.getConnection() == Printer.FALSE) {
            return false;
        } else if (status.getOnline() == Printer.FALSE) {
            return false;
        } else {
            ;//print available
        }

        return true;
    }

    private boolean connectPrinter() {
        boolean isBeginTransaction = false;

        if (mPrinter == null) {
            return false;
        }

        try {
            mPrinter.connect(mEditTarget.getText().toString(), Printer.PARAM_DEFAULT);
        } catch (Exception e) {
//            Toast.makeText(Refundswise_Saleslist.this, "Here4", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "connect", mContext);
            return false;
        }

        try {
            mPrinter.beginTransaction();
            isBeginTransaction = true;
        } catch (Exception e) {
//            Toast.makeText(Refundswise_Saleslist.this, "Here12", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "beginTransaction", mContext);
        }

        if (isBeginTransaction == false) {
            try {
                mPrinter.disconnect();
            } catch (Epos2Exception e) {
//                Toast.makeText(Refundswise_Saleslist.this, "Here5", Toast.LENGTH_SHORT).show();
                // Do nothing
                return false;
            }
        }

        return true;
    }

    private boolean createCouponData(Dialog dialog) {

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x25,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x06,0x20,0x29,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    charlength = 23;
                    charlength1 = 46;
                    charlength2 = 69;
                    quanlentha = 5;
                    str_line = "------------------------------------------------";
                    allbufline = new byte[][]{
                            left,un1, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    Cursor print_ty = db1.rawQuery("SELECT * FROM Printer_type", null);
                    if (print_ty.moveToFirst()){
                        str_print_ty = print_ty.getString(1);
                    }
                    if (str_print_ty.toString().equals("Generic")) {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "epson", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 16;
                        charlength1 = 32;
                        charlength2 = 48;
                        quanlentha = 5;
                        str_line = "------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------".getBytes(), LF
                        };
                    }
                }
            }while(cc.moveToNext());
        }

//        Cursor getprint_type = db1.rawQuery("SELECT * FROM Printer_text_size", null);
//        if (getprint_type.moveToFirst()) {
//            String type = getprint_type.getString(1);
//
//            Cursor cc = db1.rawQuery("SELECT * FROM Printerreceiptsize", null);
//
//            if (cc.moveToFirst()) {
//                cc.moveToFirst();
//                do {
//                    NAME = cc.getString(1);
//                    if (NAME.equals("3 inch")) {
//                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
//                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
//                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
//                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
//                        setHT34 = new byte[]{0x1b, 0x44, 0x08, 0x20, 0x29, 0x00};//4 tabs 3"
//                        setHTKOT = new byte[]{0x1b, 0x44, 0x06, 0x00};//2 tabs 3"
//                        feedcut2 = new byte[]{0x1b, 0x64, 0x05, 0x1d, 0x56, 0x00};
//                        nPaperWidth = 576;
//                        charlength = 41;
//                        str_line = "------------------------------------------------";
//                        allbufline = new byte[][]{
//                                left, un1, "------------------------------------------------".getBytes(), LF
//
//                        };
//                    } else {
//
//                        Cursor print_ty = db1.rawQuery("SELECT * FROM Printer_type", null);
//                        if (print_ty.moveToFirst()){
//                            str_print_ty = print_ty.getString(1);
//                        }
//                        if (str_print_ty.toString().equals("Generic")) {
//                            Toast.makeText(Cash_Card_Credit_Sales1.this, "phi", Toast.LENGTH_SHORT).show();
//                            setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
//                            setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
//                            setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
//                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                            setHT34 = new byte[]{0x1b, 0x44, 0x04, 0x12, 0x19, 0x00};//4 tabs 2"
//                            setHTKOT = new byte[]{0x1b, 0x44, 0x06, 0x00};//2 tabs 2"
//                            feedcut2 = new byte[]{0x1b, 0x64, 0x03, 0x1d, 0x56, 0x00};
//                            nPaperWidth = 384;
//                            charlength = 25;
//                            str_line = "--------------------------------";
//                            allbufline = new byte[][]{
//                                    left, un1, "--------------------------------".getBytes(), LF
//                            };
//                        }else {
//                            Toast.makeText(Cash_Card_Credit_Sales1.this, "epson", Toast.LENGTH_SHORT).show();
//                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
//                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
//                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
//                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
//                            setHTKOT = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
//                            feedcut2 = new byte[]{0x1b, 0x64, 0x03, 0x1d, 0x56, 0x00};
//                            nPaperWidth = 384;
//                            charlength = 28;
//                            str_line = "------------------------------------------";
//                            allbufline = new byte[][]{
//                                    left, un1, "------------------------------------------".getBytes(), LF
//                            };
//                        }
//                    }
//                } while (cc.moveToNext());
//            }
//
//        }

//        final int barcodeWidth = 2;
//        final int barcodeHeight = 64;
        final int pageAreaHeight = 384;
        final int pageAreaWidth = 384;
//        final int fontAHeight = 24;
//        final int fontAWidth = 12;
//        final int barcodeWidthPos = 110;
//        final int barcodeHeightPos = 70;

        ArrayList<byte[]> list = new ArrayList<byte[]>();
        String method = "";
        String[] col = {"companylogo"};
        Cursor c = db1.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
            yourBitmap = BitmapFactory.decodeByteArray(img, 0, img.length);
        }

//        String method = "";
//        Bitmap coffeeData = BitmapFactory.decodeResource(getResources(), R.drawable.coffee);
//        Bitmap wmarkData = BitmapFactory.decodeResource(getResources(), R.drawable.wmark);

        if (mPrinter == null) {
            return false;
        }
        try{
//            method = "addPageBegin";
//            mPrinter.addPageBegin();

            method = "addPageArea";
            mPrinter.addPageArea(0, 0, nPaperWidth, pageAreaHeight);

            method = "addPageDirection";
            mPrinter.addPageDirection(Printer.DIRECTION_TOP_TO_BOTTOM);

            method = "addFeedLine";
            mPrinter.addFeedLine(1);
            method = "addPagePosition";
            mPrinter.addPagePosition(0, nPaperWidth);

//            // RECEIPT BODY//

            mPrinter.addCommand(LF);

//            method = "addPagePosition";
//            mPrinter.addPagePosition(0, wmarkData.getHeight());
//            mPrinter.addPagePosition(0, logoData.getScaledHeight(0));

//            method = "addImage";
//            mPrinter.addImage(wmarkData, 0, 0, wmarkData.getWidth(), wmarkData.getHeight(),
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT,
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
//Free coffee text

//            method = "addTextSize";
//            mPrinter.addTextSize(3, 3);
//            method = "addTextStyle";
//            mPrinter.addTextStyle(Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.TRUE, Printer.PARAM_DEFAULT);
//            method = "addTextSmooth";
//            mPrinter.addTextSmooth(Printer.TRUE);
//            method = "addText";
//            mPrinter.addText("FREE Coffee\n");

            Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
            if (connnet.moveToFirst()) {
                ipnamegets = connnet.getString(1);
                portgets = connnet.getString(2);
                statusnets = connnet.getString(3);
            }

            Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
            if (connnet_counter.moveToFirst()) {
                ipnamegets_counter = connnet_counter.getString(1);
                portgets_counter = connnet_counter.getString(2);
                statusnets_counter = connnet_counter.getString(3);
            }
            connnet_counter.close();

            Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
            if (connusb.moveToFirst()) {
                addgets = connusb.getString(1);
                namegets = connusb.getString(2);
                statussusbs = connusb.getString(3);
            }


            imageViewPicture = (ImageView) dialog.findViewById(R.id.imageViewPicturew);
            mView = dialog.findViewById(R.id.f_vieww1);

            if (c.moveToFirst()) {
                method = "addImage";

                if (NAME.equals("3 inch")) {
                    logoData = Bitmap.createScaledBitmap(yourBitmap, 576, 94, true);
                    mPrinter.addImage(logoData, 0, 0, logoData.getWidth(), logoData.getHeight(),
                            Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT,
                            Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
                } else {
                    logoData = Bitmap.createScaledBitmap(yourBitmap, 384, 94, true);
                    mPrinter.addImage(logoData, 0, 0, logoData.getWidth(), logoData.getHeight(),
                            Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT,
                            Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
                }
            }

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    straddress2 = getcom.getString(17);
                    straddress3 = getcom.getString(18);
                    strphone = getcom.getString(2);
                    stremailid = getcom.getString(15);
                    strwebsite = getcom.getString(16);
                    strtaxone = getcom.getString(10);
                    strbillone = getcom.getString(12);
                } while (getcom.moveToNext());
            }


            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, un1, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(bold);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strcompanyname);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

/////////
            tvkot.setText(straddress1);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf2 = new byte[][]{
                        normal, straddress1.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress1);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot.setText(straddress2);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf3 = new byte[][]{
                        normal, straddress2.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress2);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot.setText(straddress3);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf4 = new byte[][]{
                        normal, straddress3.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress3);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strphone);
            String pp = "Ph. " + strphone;
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf5 = new byte[][]{
                        normal, pp.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(pp);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(stremailid);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf6 = new byte[][]{
                        normal, stremailid.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(stremailid);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strwebsite);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, strwebsite.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strwebsite);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strtaxone);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf8 = new byte[][]{
                        normal, strtaxone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strtaxone);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }



            Cursor cursor10 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (cursor10.moveToFirst()) {
                billtypea = cursor10.getString(5);
                paymmethoda = cursor10.getString(6);
            }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

            if (billtypea.toString().equals("  Cash")) {
                billtypeaa = "Cash"; //0
            }
            if (billtypea.toString().equals("  Card")) {
                billtypeaa = "Card"; //0
            }
            if (billtypea.toString().equals("  Paytm")) {
                billtypeaa = "Paytm"; //0
            }
            if (billtypea.toString().equals("  Mobikwik")) {
                billtypeaa = "Mobikwik"; //0
            }
            if (billtypea.toString().equals("  Freecharge")) {
                billtypeaa = "Freecharge"; //0
            }
            if (billtypea.toString().equals("  Pay Later")) {
                billtypeaa = "Pay Later"; //0
            }
            if (billtypea.toString().equals("  Cheque")) {
                billtypeaa = "Cheque"; //0
            }
            if (billtypea.toString().equals("  Sodexo")) {
                billtypeaa = "Sodexo"; //0
            }
            if (billtypea.toString().equals("  Zeta")) {
                billtypeaa = "Zeta"; //0
            }
            if (billtypea.toString().equals("  Ticket")) {
                billtypeaa = "Ticket"; //0
            }
            if (billtypea.toString().equals("  Upiqr")) {
                billtypeaa = "Upiqr"; //0
            }
            billtypeaa = billtypea.toString().replace(" ", "");

            //String bill_no = billnum.getText().toString();
            allbufbillno = new byte[][]{
                    setHT32, "Bill no.".getBytes(), billnoget.getBytes(), HT, "   ".getBytes(), billtypeaa.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Bill no."+billnoget);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("   "+billtypeaa);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
//                paymmethodaa = "Dine-in";
                //billtypee.setText("Dine-in");
                if (account_selection.toString().equals("Dine") || account_selection.toString().equals("Qsr")) {
                    paymmethodaa = "Dine-in";
                }else {
                    paymmethodaa = "General";
                }
            } else {
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    paymmethodaa = "Takeaway";
                    //billtypee.setText("Takeaway");
                } else {
                    paymmethodaa = "Home delivery";
                    //billtypee.setText("Home delivery");
                }
            }

            Cursor date = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (date.moveToFirst()) {
                datee = date.getString(25);
                timee = date.getString(12);
            } else {
                Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (date_cancel.moveToFirst()) {
                    datee = date_cancel.getString(22);
                    timee = date_cancel.getString(12);
                }
            }

            allbuf10 = new byte[][]{
                    setHT321, left, paymmethodaa.getBytes(), HT, "  ".getBytes(), datee.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(paymmethodaa);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+datee);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor9.moveToFirst()) {
                tableida = cursor9.getString(15);
            }
//        else {
//            Cursor cursor9_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

            Cursor vbnm = db1.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
            if (vbnm.moveToFirst()) {
                assa1 = vbnm.getString(1);
                assa2 = vbnm.getString(2);
            }
            TextView cx = new TextView(Refundswise_Saleslist.this);
            cx.setText(assa1);
            if (cx.getText().toString().equals("")) {
                tableidaa = "Tab" + assa2;
                allbuftime = new byte[][]{
                        setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
                };
            } else {
                tableidaa = "Tab" + assa1;
                allbuftime = new byte[][]{
                        setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
                };
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(tableidaa);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+timee);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LFv
            }

            String u_name = "";
            Cursor cursor9_1 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor9_1.moveToFirst()) {
                u_name = cursor9_1.getString(45);
            }
            cursor9_1.close();

            TextView tv_u_name = new TextView(Refundswise_Saleslist.this);
            tv_u_name.setText(u_name);

            if (tv_u_name.getText().toString().equals("")){

            }else {
                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);    //
                    mPrinter.addCommand(setHT321);    //
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("Counter person: "+tv_u_name.getText().toString());
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor caddress = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
            if (caddress.moveToFirst()) {
                String nam = caddress.getString(1);
                String addr = caddress.getString(4);
                String phon = caddress.getString(2);
                String emai = caddress.getString(3);

                if (nam.toString().length() > 0 || addr.toString().length() > 0 ||
                        phon.toString().length() > 0 || emai.toString().length() > 0) {
                    allbufcust = new byte[][]{
                            left, un, "Customer:".getBytes(), LF, un1,
                    };

                    if (statussusbs.toString().equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(un);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append("Customer:");
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                        mPrinter.addCommand(un1); //LF
                    }
                } else {

                }

                if (nam.toString().length() > 0) {
                    allbufcustname = new byte[][]{
                            nam.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(nam);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                    }
                } else {

                }

                if (addr.toString().length() > 0) {
                    allbufcustadd = new byte[][]{
                            addr.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(addr);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                    }
                } else {

                }

                if (phon.toString().length() > 0) {
                    String cust_ph = "Ph. " + phon.toString();
                    allbufcustph = new byte[][]{
                            cust_ph.getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(cust_ph);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                    }
                } else {

                }

                if (emai.toString().length() > 0) {
                    allbufcustemail = new byte[][]{
                            emai.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(emai);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                    }
                } else {

                }

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(un1);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(str_line);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            allbufqty = new byte[][]{
                    setHT34, normal, "Qty".getBytes(), HT, "Item".getBytes(), HT, "Price".getBytes(), HT, "Amount".getBytes(), left, LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT34);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Qty");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("Item");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData3 = new StringBuilder();
                textData3.append("Price");
                mPrinter.addText(textData3.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData4 = new StringBuilder();
                textData4.append("Amount");
                mPrinter.addText(textData4.toString());
                mPrinter.addCommand(left);
                mPrinter.addCommand(LF); //LF
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            Cursor ccursorr = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursorr.moveToFirst()) {

                do {

                    String name = ccursorr.getString(1);
                    String value = ccursorr.getString(2);
                    String pq = ccursorr.getString(5);
                    String itna = ccursorr.getString(2);
                    String pricee = ccursorr.getString(3);
                    String tototot = ccursorr.getString(4);

                    final String newid = ccursorr.getString(20);

                    final String newids = ccursorr.getString(0);

                    int padding_in_px;

                    int padding_in_dp = 30;  // 34 dps
                    final float scale1 = getResources().getDisplayMetrics().density;
                    padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                    if (pq.equals("Item")) {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                        final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                        final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));

                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                        final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                        //tv.setTextSize(18);
                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv.setText(value);
                        row.addView(tv);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv1.setTextSize(15);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv1.setText(name);
                        String value1 = tv1.getText().toString();
                        row.addView(tv1);

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.append(value + "% " + name);
                        tv2.setText(pricee);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv2.setTextColor(R.color.black);
                        row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.setPadding(0, 0, 1, 0);
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv3.setText(tototot);
                        //tv3.setTextColor(R.color.black);
                        //row.addView(tv3);


                        String value2 = tv3.getText().toString();

                        Cursor modcursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                        if (modcursor.moveToFirst()) {

                            Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor4.moveToFirst()) {
                                sub2a = cursor4.getFloat(0);
                                String sub2a1 = String.valueOf(sub2a);
                                ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                                ss1 = String.format("%.1f", ss);
                            }

                            if (name.toString().length() > charlength) {
                                int print1 = 0;
                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(string1quan);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(ss1);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF); //LF
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append(string2quan);
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        print1 = 1;
                                    }
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(value);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(ss1);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF); //LF
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("      ");
                                        mPrinter.addText(textData5.toString());
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        print1 = 1;
                                    }
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, ss1.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
/////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), LF, string2quan.getBytes(),HT, string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(string1quan);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(ss1);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF); //LF
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append(string2quan);
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append("      ");
                                        mPrinter.addText(textData7.toString());
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append(string3);
                                        mPrinter.addText(textData8.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF);
                                        print1 = 1;
                                    }
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(value);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(ss1);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF); //LF
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("      ");
                                        mPrinter.addText(textData5.toString());
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append("      ");
                                        mPrinter.addText(textData7.toString());
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append(string3);
                                        mPrinter.addText(textData8.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF);
                                        print1 = 1;
                                    }
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            } else {
                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(ss1);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(LF);
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(ss1);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            }

                            do {

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                float modprice1 = Float.parseFloat(modiprice);
                                String modpricestr = String.valueOf(modprice1);

                                if (modiname.toString().length() > charlength) {
                                    if (modiname.toString().length() > charlength) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                        };
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(string1);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append("    ");
                                        mPrinter.addText(textData6.toString());
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append(string2);
                                        mPrinter.addText(textData7.toString());
                                        mPrinter.addCommand(LF); //LF
                                    }
                                    if (modiname.toString().length() > charlength1) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength, charlength1);
                                        String string3 = modiname.substring(charlength1);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(string1);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append("      ");
                                        mPrinter.addText(textData6.toString());
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append(string2);
                                        mPrinter.addText(textData7.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append("    ");
                                        mPrinter.addText(textData8.toString());
                                        StringBuilder textData9 = new StringBuilder();
                                        textData9.append(string3);
                                        mPrinter.addText(textData9.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                    }

                                    Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.toString().equals("ok")) {
                                                mPrinter.addCommand(left);
                                                mPrinter.addCommand(normal);
                                                StringBuilder textData1 = new StringBuilder();
                                                textData1.append("HSN "+hsn);
                                                mPrinter.addText(textData1.toString());
                                                mPrinter.addCommand(HT);
                                                mPrinter.addCommand(LF); //LF
                                            }
                                        }
                                    }

                                } else {
                                    allbufmodifiers = new byte[][]{
                                            setHT34, normal, "".getBytes(), HT, ">".getBytes(), modiname.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), left, LF
                                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                    };
                                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                                    if (statussusbs.toString().equals("ok")) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(modiname);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                    }

                                    Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.toString().equals("ok")) {
                                                mPrinter.addCommand(left);
                                                mPrinter.addCommand(normal);
                                                StringBuilder textData1 = new StringBuilder();
                                                textData1.append("HSN "+hsn);
                                                mPrinter.addText(textData1.toString());
                                                mPrinter.addCommand(HT);
                                                mPrinter.addCommand(LF); //LF
                                            }
                                        }
                                    }

                                }

                                final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                final TextView tvv = new TextView(Refundswise_Saleslist.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);

                                row.removeView(tv8);


                                tv8 = new TextView(Refundswise_Saleslist.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tv.getText().toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(ss));
                                row.addView(tv8);


                                tableLayout1.addView(tableRow11);
                            } while (modcursor.moveToNext());

                            Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(31);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(setHT34);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("");
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData2 = new StringBuilder();
                                            textData2.append("");
                                            mPrinter.addText(textData2.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData3 = new StringBuilder();
                                            textData3.append("");
                                            mPrinter.addText(textData3.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData4 = new StringBuilder();
                                            textData4.append("(");
                                            mPrinter.addText(textData4.toString());
                                            StringBuilder textData5 = new StringBuilder();
                                            textData5.append("-");
                                            mPrinter.addText(textData5.toString());
                                            StringBuilder textData6 = new StringBuilder();
                                            textData6.append(total_disc_print_q);
                                            mPrinter.addText(textData6.toString());
                                            StringBuilder textData7 = new StringBuilder();
                                            textData7.append(")");
                                            mPrinter.addText(textData7.toString());
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }
                        } else {

                            float fgh = Float.parseFloat(tototot);
                            String tototott = String.format("%.1f", fgh);
                            if (name.toString().length() > charlength) {
                                int print1 = 0;
                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(string1quan);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(tototott);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append(string2quan);
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF); //LF
                                        print1 = 1;
                                    }
                                }
                                if (name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(value);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(tototott);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("      ");
                                        mPrinter.addText(textData5.toString());
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF); //LF
                                        print1 = 1;
                                    }
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,total.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(string1quan);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(tototott);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append(string2quan);
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append("      ");
                                        mPrinter.addText(textData7.toString());
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append(string3);
                                        mPrinter.addText(textData8.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                        print1 = 1;
                                    }
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(value);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(tototott);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("      ");
                                        mPrinter.addText(textData5.toString());
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append("      ");
                                        mPrinter.addText(textData7.toString());
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append(string3);
                                        mPrinter.addText(textData8.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                        print1 = 1;
                                    }
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            } else {
                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(LF); //LF
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            }

                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(multiply));
                            row.addView(tv8);

                            Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(31);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(setHT34);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("");
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData2 = new StringBuilder();
                                            textData2.append("");
                                            mPrinter.addText(textData2.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData3 = new StringBuilder();
                                            textData3.append("");
                                            mPrinter.addText(textData3.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData4 = new StringBuilder();
                                            textData4.append("(");
                                            mPrinter.addText(textData4.toString());
                                            StringBuilder textData5 = new StringBuilder();
                                            textData5.append("-");
                                            mPrinter.addText(textData5.toString());
                                            StringBuilder textData6 = new StringBuilder();
                                            textData6.append(total_disc_print_q);
                                            mPrinter.addText(textData6.toString());
                                            StringBuilder textData7 = new StringBuilder();
                                            textData7.append(")");
                                            mPrinter.addText(textData7.toString());
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }

                        }
                    }


                } while (ccursorr.moveToNext());
            }

            allbuf6 = new byte[][]{
                    normal, un, "Returns/Cancel:".getBytes(), LF, un1,

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(normal);
                mPrinter.addCommand(un);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Returns/Cancel:");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
                mPrinter.addCommand(un1);
            }


            Cursor ccursorreturn = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursorreturn.moveToFirst()) {

                do {

                    String name = ccursorreturn.getString(1);
                    String value = ccursorreturn.getString(2);
                    String pq = ccursorreturn.getString(5);
                    String itna = ccursorreturn.getString(2);
                    String pricee = ccursorreturn.getString(3);
                    String tototot = ccursorreturn.getString(4);

                    final String newtt = ccursorreturn.getString(4);

                    final String newid = ccursorreturn.getString(19);

                    final String newids = ccursorreturn.getString(0);
                    int padding_in_px;

                    int padding_in_dp = 30;  // 34 dps
                    final float scale1 = getResources().getDisplayMetrics().density;
                    padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                    if (pq.equals("Item")) {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                        final TableRow row1 = new TableRow(Refundswise_Saleslist.this);
                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                        final TableRow row2 = new TableRow(Refundswise_Saleslist.this);
                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));

                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                        final TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                        //tv.setTextSize(18);
                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv.setText(value);
                        row.addView(tv);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv1.setTextSize(15);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv1.setText(name);
                        String value1 = tv1.getText().toString();
                        row.addView(tv1);

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.append(value + "% " + name);
                        tv2.setText(pricee);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv2.setTextColor(R.color.black);
                        row.addView(tv2);

//                                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.setPadding(0, 0, 1, 0);
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv3.setText(tototot);
                        //tv3.setTextColor(R.color.black);
                        //row.addView(tv3);


                        String value2 = tv3.getText().toString();

                        //tableLayoutt.addView(row);

                        Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                        if (modcursor.moveToFirst()) {

                            Cursor modt = db.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                            if (modt.moveToFirst()) {
                                do {
                                    //row.removeView(tv3);
                                    float aq = modt.getFloat(0);
                                    String aqq = String.valueOf(aq);
                                    aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                    aqq2 = String.format("%.1f", aqq1);
                                } while (modt.moveToNext());
                            }


                            if (name.toString().length() > charlength) {

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append("      ");
                                    mPrinter.addText(textData5.toString());
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, aqq2.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = total.substring(0, quanlentha);
                                    String string2quan = total.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    mPrinter.addCommand(un1);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData7 = new StringBuilder();
                                    textData7.append("      ");
                                    mPrinter.addText(textData7.toString());
                                    StringBuilder textData8 = new StringBuilder();
                                    textData8.append(string3);
                                    mPrinter.addText(textData8.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF);
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append("      ");
                                    mPrinter.addText(textData5.toString());
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData7 = new StringBuilder();
                                    textData7.append("      ");
                                    mPrinter.addText(textData7.toString());
                                    StringBuilder textData8 = new StringBuilder();
                                    textData8.append(string3);
                                    mPrinter.addText(textData8.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF);
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            } else {
                                if (total.toString().length() > quanlentha) {
                                    String string1quan = total.substring(0, quanlentha);
                                    String string2quan = total.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(LF);
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            }

                            do {

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                float modprice1 = Float.parseFloat(modiprice);
                                String modpricestr = String.valueOf(modprice1);

                                if (modiname.toString().length() > charlength) {
                                    if (modiname.toString().length() > charlength) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, un1, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(string1);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append("      ");
                                        mPrinter.addText(textData6.toString());
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append(string2);
                                        mPrinter.addText(textData7.toString());
                                        mPrinter.addCommand(LF); //LF
                                    }
                                    if (modiname.toString().length() > charlength1) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength, charlength1);
                                        String string3 = modiname.substring(charlength1);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, un1, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(string1);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append("      ");
                                        mPrinter.addText(textData6.toString());
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append(string2);
                                        mPrinter.addText(textData7.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append("      ");
                                        mPrinter.addText(textData8.toString());
                                        StringBuilder textData9 = new StringBuilder();
                                        textData9.append(string3);
                                        mPrinter.addText(textData9.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                    }

                                    Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.toString().equals("ok")) {
                                                mPrinter.addCommand(left);
                                                mPrinter.addCommand(normal);
                                                StringBuilder textData1 = new StringBuilder();
                                                textData1.append("HSN "+hsn);
                                                mPrinter.addText(textData1.toString());
                                                mPrinter.addCommand(HT);
                                                mPrinter.addCommand(LF); //LF
                                            }
                                        }
                                    }

                                } else {
                                    allbufmodifiers = new byte[][]{
                                            setHT34, normal, un1, "".getBytes(), HT, ">".getBytes(), modiname.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), left, LF
                                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                    };
                                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                                    if (statussusbs.toString().equals("ok")) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(modiname);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                    }

                                    Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.toString().equals("ok")) {
                                                mPrinter.addCommand(left);
                                                mPrinter.addCommand(normal);
                                                StringBuilder textData1 = new StringBuilder();
                                                textData1.append("HSN "+hsn);
                                                mPrinter.addText(textData1.toString());
                                                mPrinter.addCommand(HT);
                                                mPrinter.addCommand(LF); //LF
                                            }
                                        }
                                    }

                                }


                                final TableRow tableRow11 = new TableRow(Refundswise_Saleslist.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                final TextView tvv = new TextView(Refundswise_Saleslist.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(Refundswise_Saleslist.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(Refundswise_Saleslist.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);


                                row.removeView(tv8);
                                tv8 = new TextView(Refundswise_Saleslist.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tv.getText().toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                                row.addView(tv8);


                                tableLayout1.addView(tableRow11);
                            } while (modcursor.moveToNext());

                            //Cursor modcursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                            Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(27);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(28);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(setHT34);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("");
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData2 = new StringBuilder();
                                            textData2.append("");
                                            mPrinter.addText(textData2.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData3 = new StringBuilder();
                                            textData3.append("");
                                            mPrinter.addText(textData3.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData4 = new StringBuilder();
                                            textData4.append("(");
                                            mPrinter.addText(textData4.toString());
                                            StringBuilder textData5 = new StringBuilder();
                                            textData5.append("-");
                                            mPrinter.addText(textData5.toString());
                                            StringBuilder textData6 = new StringBuilder();
                                            textData6.append(total_disc_print_q);
                                            mPrinter.addText(textData6.toString());
                                            StringBuilder textData7 = new StringBuilder();
                                            textData7.append(")");
                                            mPrinter.addText(textData7.toString());
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(LF); //LF
                                        }

                                    }
                                } while (disc_cursor.moveToNext());
                            }
                        } else {

                            float fgh = Float.parseFloat(tototot);
                            String tototott = String.format("%.1f", fgh);

                            if (name.toString().length() > charlength) {
                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF); //LF
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append("      ");
                                    mPrinter.addText(textData5.toString());
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF); //LF
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,un1,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
//////////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData7 = new StringBuilder();
                                    textData7.append("      ");
                                    mPrinter.addText(textData7.toString());
                                    StringBuilder textData8 = new StringBuilder();
                                    textData8.append(string3);
                                    mPrinter.addText(textData8.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append("      ");
                                    mPrinter.addText(textData5.toString());
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData7 = new StringBuilder();
                                    textData7.append("      ");
                                    mPrinter.addText(textData7.toString());
                                    StringBuilder textData8 = new StringBuilder();
                                    textData8.append(string3);
                                    mPrinter.addText(textData8.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            } else {

                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(LF); //LF
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            }

                            tv8 = new TextView(Refundswise_Saleslist.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(multiply));
                            row.addView(tv8);

                            Cursor disc_cursor = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(27);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(28);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(setHT34);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("");
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData2 = new StringBuilder();
                                            textData2.append("");
                                            mPrinter.addText(textData2.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData3 = new StringBuilder();
                                            textData3.append("");
                                            mPrinter.addText(textData3.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData4 = new StringBuilder();
                                            textData4.append("(");
                                            mPrinter.addText(textData4.toString());
                                            StringBuilder textData5 = new StringBuilder();
                                            textData5.append("-");
                                            mPrinter.addText(textData5.toString());
                                            StringBuilder textData6 = new StringBuilder();
                                            textData6.append(total_disc_print_q);
                                            mPrinter.addText(textData6.toString());
                                            StringBuilder textData7 = new StringBuilder();
                                            textData7.append(")");
                                            mPrinter.addText(textData7.toString());
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }

                        }

                    }
                } while (ccursorreturn.moveToNext());

            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }
////////////////////////////////////sub total

            Cursor cursor3 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor3.moveToFirst()) {
                sub1 = cursor3.getFloat(0);
            }

            Cursor cursor4 = db.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (cursor4.moveToFirst()) {
                sub2 = cursor4.getFloat(0);
            }
            float sub12 = sub1 + sub2;
            String total2 = String.valueOf(sub12);
            float to = Float.parseFloat(total2);
            String tot = String.valueOf(to);


            allbufsubtot = new byte[][]{
                    setHT32, left, "Sub total".getBytes(), HT, tot.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Sub total");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(tot);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }
/////////////////////////////////// tax
            TableLayout tableLayout1 = new TableLayout(Refundswise_Saleslist.this);
            tableLayout1.removeAllViews();

            Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor.moveToFirst()) {

                do {
                    String name = ccursor.getString(10);
                    String value = ccursor.getString(9);
                    String pq = ccursor.getString(4);
                    String itna = ccursor.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor.moveToNext());
            }

            Cursor ccursor2 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor2.moveToFirst()) {

                do {
                    String name = ccursor2.getString(35);
                    String value = ccursor2.getString(36);
                    String pq = ccursor2.getString(4);
                    String itna = ccursor2.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor2.moveToNext());
            }

            Cursor ccursor3 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor3.moveToFirst()) {

                do {
                    String name = ccursor3.getString(37);
                    String value = ccursor3.getString(38);
                    String pq = ccursor3.getString(4);
                    String itna = ccursor3.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor3.moveToNext());
            }

            Cursor ccursor4 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor4.moveToFirst()) {

                do {
                    String name = ccursor4.getString(39);
                    String value = ccursor4.getString(40);
                    String pq = ccursor4.getString(4);
                    String itna = ccursor4.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor4.moveToNext());
            }

            Cursor ccursor5 = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor5.moveToFirst()) {

                do {
                    String name = ccursor5.getString(41);
                    String value = ccursor5.getString(42);
                    String pq = ccursor5.getString(4);
                    String itna = ccursor5.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursor5.moveToNext());
            }

//            Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            mPrinter.addCommand(left);
//                            mPrinter.addCommand(normal);
//                            StringBuilder textData1 = new StringBuilder();
//                            textData1.append(mod1);
//                            mPrinter.addText(textData1.toString());
//                            mPrinter.addCommand(HT);
//                            mPrinter.addCommand(LF); //LF
//                        }
//                    }
//                } while (ccursor.moveToNext());
//            }

//            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(Refundswise_Saleslist.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(tota1);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            mPrinter.addCommand(left);
//                            mPrinter.addCommand(normal);
//                            StringBuilder textData1 = new StringBuilder();
//                            textData1.append(mod1);
//                            mPrinter.addText(textData1.toString());
//                            mPrinter.addCommand(HT);
//                            mPrinter.addCommand(LF); //LF
//                        }
//                    }
//                } while (ccursortaxreturn.moveToNext());
//            }

            Cursor ccursortaxreturn = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn.moveToFirst()) {

                do {
                    String name = ccursortaxreturn.getString(10);
                    String value = ccursortaxreturn.getString(9);
                    String pq = ccursortaxreturn.getString(4);
                    String itna = ccursortaxreturn.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursortaxreturn.moveToNext());
            }

            Cursor ccursortaxreturn2 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn2.moveToFirst()) {

                do {
                    String name = ccursortaxreturn2.getString(30);
                    String value = ccursortaxreturn2.getString(31);
                    String pq = ccursortaxreturn2.getString(4);
                    String itna = ccursortaxreturn2.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursortaxreturn2.moveToNext());
            }

            Cursor ccursortaxreturn3 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn3.moveToFirst()) {

                do {
                    String name = ccursortaxreturn3.getString(32);
                    String value = ccursortaxreturn3.getString(33);
                    String pq = ccursortaxreturn3.getString(4);
                    String itna = ccursortaxreturn3.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursortaxreturn3.moveToNext());
            }

            Cursor ccursortaxreturn4 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn4.moveToFirst()) {

                do {
                    String name = ccursortaxreturn4.getString(34);
                    String value = ccursortaxreturn4.getString(35);
                    String pq = ccursortaxreturn4.getString(4);
                    String itna = ccursortaxreturn4.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursortaxreturn4.moveToNext());
            }

            Cursor ccursortaxreturn5 = db.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn5.moveToFirst()) {

                do {
                    String name = ccursortaxreturn5.getString(36);
                    String value = ccursortaxreturn5.getString(37);
                    String pq = ccursortaxreturn5.getString(4);
                    String itna = ccursortaxreturn5.getString(1);

                    TextView v = new TextView(Refundswise_Saleslist.this);
                    v.setText(value);

                    TextView v1 = new TextView(Refundswise_Saleslist.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }
                } while (ccursortaxreturn5.moveToNext());
            }

            ArrayList<String> groupList1 = new ArrayList<String>();

            float sum_p1 = 0;
            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(Refundswise_Saleslist.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

                if (groupList1.contains(mTextView.getText().toString())) {

                }else {
                    sum_p1 = 0;
                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                        mTextView1 = (TextView) mRow1.getChildAt(0);
                        mTextView2 = (TextView) mRow1.getChildAt(2);
                        if (groupList1.contains(mTextView.getText().toString())) {
                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                            }
                        } else {
                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                groupList1.add(mTextView.getText().toString());
                                sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(Refundswise_Saleslist.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                            }
                        }
                    }
//                    Toast.makeText(Refundswise_Saleslist.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                    String mod1 = mTextView.getText().toString() + "" + String.format("%.2f", sum_p1);
                    String mod12 = mTextView.getText().toString();
                    allbuftaxestype1 = new byte[][]{
                            left, normal, mod12.getBytes(), HT, LF
                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        mPrinter.addCommand(setHT32);
                        mPrinter.addCommand(normal);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(mod12);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        StringBuilder textData2 = new StringBuilder();
                        textData2.append(String.format("%.2f", sum_p1));
                        mPrinter.addCommand(LF); //LF
                    }

//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
                    String mod2 = mTextView.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, " "+mod2, Toast.LENGTH_LONG).show();
                    Cursor ccursor6 = db.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    if (ccursor6.moveToFirst()) {
                        String hsn = ccursor6.getString(38);

                        TextView hsn_hsn = new TextView(Refundswise_Saleslist.this);
                        hsn_hsn.setText(hsn);

                        if (hsn_hsn.getText().toString().equals("")) {
                        } else {
                            allbuftaxestype1 = new byte[][]{
                                    left, normal, hsn.getBytes(), HT, LF
                            };
                            if (statussusbs.toString().equals("ok")) {
                                mPrinter.addCommand(left);
                                mPrinter.addCommand(normal);
                                StringBuilder textData1 = new StringBuilder();
                                textData1.append("HSN "+hsn);
                                mPrinter.addText(textData1.toString());
                                mPrinter.addCommand(HT);
                                mPrinter.addCommand(LF); //LF
                            }
                        }
                    }

                }
            }

            String phon = "0";

            Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
            if (caddress1.moveToFirst()) {
                phon = caddress1.getString(2);
            }

            TextView tvvs = new TextView(Refundswise_Saleslist.this);
            tvvs.setText(phon);


            Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
            if (us_name1.moveToLast()) {
//            Toast.makeText(Refundswise_Saleslist.this, "user id there", Toast.LENGTH_LONG).show();
                String na53 = us_name1.getString(53);
                String na38 = us_name1.getString(38);
                String na39 = us_name1.getString(39);
                String na40 = us_name1.getString(40);
                String na41 = us_name1.getString(41);
                String na42 = us_name1.getString(42);
                String na43 = us_name1.getString(43);
                String na44 = us_name1.getString(44);
                String na45 = us_name1.getString(45);
                String na46 = us_name1.getString(46);
                String na47 = us_name1.getString(47);
                String na48 = us_name1.getString(48);
                String na49 = us_name1.getString(49);
                String na50 = us_name1.getString(50);
                String na51 = us_name1.getString(51);
                String na52 = us_name1.getString(52);
                String na38_value = us_name1.getString(54);
                String na39_value = us_name1.getString(55);
                String na40_value = us_name1.getString(56);
                String na41_value = us_name1.getString(57);
                String na42_value = us_name1.getString(58);
                String na43_value = us_name1.getString(59);
                String na44_value = us_name1.getString(60);
                String na45_value = us_name1.getString(61);
                String na46_value = us_name1.getString(62);
                String na47_value = us_name1.getString(63);
                String na48_value = us_name1.getString(64);
                String na49_value = us_name1.getString(65);
                String na50_value = us_name1.getString(66);
                String na51_value = us_name1.getString(67);
                String na52_value = us_name1.getString(68);

                String proc = us_name1.getString(69);

                TextView hid = new TextView(Refundswise_Saleslist.this);
                hid.setText(proc);

                if (hid.getText().toString().equals("off")) {
                    Cursor cursorr = null;
                    if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymmethoda.toString().equals("  Home delivery")) {
                        cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                    if (cursorr.moveToFirst()) {

                        do {

                            String name = cursorr.getString(1);
                            String value = cursorr.getString(2);

                            final TableRow row = new TableRow(Refundswise_Saleslist.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT));
                            row.setGravity(Gravity.CENTER);

                            TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                            TextView tvv = new TextView(Refundswise_Saleslist.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText(name);

                            TextView tv1 = new TextView(Refundswise_Saleslist.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv1.setText(value);
                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(Refundswise_Saleslist.this);
                            //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                            //tv2.setLayoutParams(lp);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                            tv2.append(name + " @ " + value + "%");
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(tv2);

                            TextView textView1 = new TextView(Refundswise_Saleslist.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(textView1);

                            TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            //tv3.setPadding(0,0,10,0);
                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                            float tota = mul;
                            String tota1 = String.format("%.2f", tota);
                            tv3.setText(String.valueOf(tota));
                            //row.addView(tv3);


                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            String value2 = tv3.getText().toString();
                            row.addView(tv3);

                            tableLayout1.addView(row);

                            String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                            allbuftaxestype2 = new byte[][]{
                                    left, normal, mod1.getBytes(), HT, LF
                                    //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                            };
                            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                            if (statussusbs.toString().equals("ok")) {
                                mPrinter.addCommand(left);
                                mPrinter.addCommand(normal);
                                StringBuilder textData1 = new StringBuilder();
                                textData1.append(mod1);
                                mPrinter.addText(textData1.toString());
                                mPrinter.addCommand(HT);
                                mPrinter.addCommand(LF); //LF
                            }

                        } while (cursorr.moveToNext());
                    }
                } else {
                    for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                        int i1 = 0;
                        if (i2 == 38) {
                            i1 = 54;
                        }
                        if (i2 == 39) {
                            i1 = 55;
                        }
                        if (i2 == 40) {
                            i1 = 56;
                        }
                        if (i2 == 41) {
                            i1 = 57;
                        }
                        if (i2 == 42) {
                            i1 = 58;
                        }
                        if (i2 == 43) {
                            i1 = 59;
                        }
                        if (i2 == 44) {
                            i1 = 60;
                        }
                        if (i2 == 45) {
                            i1 = 61;
                        }
                        if (i2 == 46) {
                            i1 = 62;
                        }
                        if (i2 == 47) {
                            i1 = 63;
                        }
                        if (i2 == 48) {
                            i1 = 64;
                        }
                        if (i2 == 49) {
                            i1 = 65;
                        }
                        if (i2 == 50) {
                            i1 = 66;
                        }
                        if (i2 == 51) {
                            i1 = 67;
                        }
                        if (i2 == 52) {
                            i1 = 68;
                        }


                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv.setGravity(Gravity.START);
                        tv.setTextSize(15);
                        //text = cursor.getString(1);
//                String v = na;

                        tv.setText(us_name1.getString(i2));


                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        //text = cursor.getString(1);
                        tv1.setText(us_name1.getString(i1));
                        String value1 = "0";
                        if (tv1.getText().toString().equals("")) {

                        } else {
                            value1 = tv1.getText().toString();
                        }


                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);
//                    Toast.makeText(Refundswise_Saleslist.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

//                    Toast.makeText(Refundswise_Saleslist.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                        TextView tv33 = new TextView(Refundswise_Saleslist.this);
                        tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv33.setText(String.valueOf(tota));
                        tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv3.setTextColor(Color.parseColor("#000000"));
                        //row.addView(tv3);


                        tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv33);

                        String value2 = tv33.getText().toString();
//                    Toast.makeText(Refundswise_Saleslist.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                        if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                                || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                        } else {
                            tableLayout1.addView(row);

                            String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);
                            allbuftaxestype2 = new byte[][]{
                                    left, normal, mod1.getBytes(), HT, LF
                                    //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                            };
                            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                            if (statussusbs.toString().equals("ok")) {
                                mPrinter.addCommand(left);
                                mPrinter.addCommand(normal);
                                StringBuilder textData1 = new StringBuilder();
                                textData1.append(mod1);
                                mPrinter.addText(textData1.toString());
                                mPrinter.addCommand(HT);
                                mPrinter.addCommand(LF); //LF
                            }
                        }

                    }
                }

            } else {
//            Toast.makeText(Refundswise_Saleslist.this, "user id not there", Toast.LENGTH_LONG).show();
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(Refundswise_Saleslist.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(Refundswise_Saleslist.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(Refundswise_Saleslist.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(Refundswise_Saleslist.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(Refundswise_Saleslist.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(Refundswise_Saleslist.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                        allbuftaxestype2 = new byte[][]{
                                left, normal, mod1.getBytes(), HT, LF
                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                        };
                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                        if (statussusbs.toString().equals("ok")) {
                            mPrinter.addCommand(left);
                            mPrinter.addCommand(normal);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append(mod1);
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(HT);
                            mPrinter.addCommand(LF); //LF
                        }

                    } while (cursorr.moveToNext());
                }
            }


            float sum = 0;
            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                TextView mTextView = (TextView) mRow.getChildAt(2);
                sum = sum
                        + Float.parseFloat(mTextView.getText().toString());
            }


            String newsum = String.format("%.2f", sum);

            if (sum == 0 || sum == 0.0 || sum == 0.00) {

            } else {
                allbuftax = new byte[][]{
                        setHT32, left, "Tax".getBytes(), HT, newsum.getBytes(), LF
                };

                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(setHT32);
                    mPrinter.addCommand(left);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("Tax");
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    StringBuilder textData2 = new StringBuilder();
                    textData2.append(newsum);
                    mPrinter.addText(textData2.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


///////////////////////////////// discount


            Cursor cursor5 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
            if (cursor5.moveToFirst()) {
                dsirs = cursor5.getString(7);
                float ds = Float.parseFloat(dsirs);
                dsirs1 = String.format("%.2f", ds);
            } else {
                dsirs = "0";
            }
            TextView dis = new TextView(Refundswise_Saleslist.this);
            Cursor cursor7 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
            if (cursor7.moveToFirst()) {
                taxpe = cursor7.getString(5);
                float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
                on1 = String.format("%.1f", on);
                if (on % 1 != 0) {
                    // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                    int newww = (int) on;
                    float decpart = on - newww;
                    ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                    ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                    if (decpart > 0.5) {
                        ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                        float addall = on;
                        //alltotal.setText(String.valueOf(newww + 1));
                        //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                        float dee = 1 - decpart;
                        dis.setText("+ " + String.format("%.2f", dee));

                    } else {
                        // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                        //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                        float addall = on;
                        //alltotal1.setText(String.valueOf(newww));
                        //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                        dis.setText("- " + String.format("%.2f", decpart));

                    }
                } else {
                    ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    int addall = (int) on;
                    //alltotal1.setText(String.valueOf(addall));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("+ " + "0.00");
                    ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
                }
            } else {
                taxpe = "0";
                dis.setText("+ " + "0.00");
                on1 = "0";
            }

            //tot-is-subtotal

            String alldiscinperc1 = "Discount(" + taxpe + "%)";
            allbufdisc = new byte[][]{
                    setHT32, left, alldiscinperc1.getBytes(), HT, on1.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(alldiscinperc1);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(on1);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }
            float newe;

//////////////////////////////////////////

            Cursor cursor113 = db.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
            if (cursor113.moveToFirst()) {
                float level = cursor113.getFloat(0);
                total = String.valueOf(level);
                Float total1 = Float.parseFloat(total);
                total_disc_print_q = String.format("%.2f", total1);

                allbufrounded = new byte[][]{
                        setHT32, left, "Savings".getBytes(), HT, total_disc_print_q.getBytes(), LF
                };

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(setHT32);
                    mPrinter.addCommand(left);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("Savings");
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    StringBuilder textData2 = new StringBuilder();
                    textData2.append(total_disc_print_q);
                    mPrinter.addText(textData2.toString());
                    mPrinter.addCommand(LF); //LF
                }

            }
////////////////////////////////

            Cursor cursor = db.rawQuery("SELECT * FROM billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (cursor.moveToFirst()) {
                String t_total_points = cursor.getString(16);
                String v_tq = cursor.getString(17);

                TextView tv = new TextView(Refundswise_Saleslist.this);
                tv.setText(t_total_points);

                if (tv.getText().toString().equals("")){

                }else {
                    allbufrounded = new byte[][]{
                            setHT32, left, "Loyalty".getBytes(), HT, v_tq.getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(setHT32);
                        mPrinter.addCommand(left);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append("Loyalty(" + t_total_points + ")");
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        StringBuilder textData2 = new StringBuilder();
                        textData2.append(v_tq);
                        mPrinter.addText(textData2.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                }
            }

////////////////////////////////rounded

            if (taxpe.toString().equals("")) {
                newe = sum + Float.parseFloat(String.valueOf(tot));
            } else {
                newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
            }

            TextView round = new TextView(Refundswise_Saleslist.this);
            if (newe % 1 != 0) {
                // //////Toast.makeText(Refundswise_Saleslist.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                int newww = (int) newe;
                float decpart = newe - newww;
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                ////////Toast.makeText(Refundswise_Saleslist.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                if (decpart > 0.5) {
                    ////////Toast.makeText(Refundswise_Saleslist.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                    float addall = newe;
                    //alltotal.setText(String.valueOf(newww + 1));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    round.setText("+ " + String.format("%.2f", dee));
                } else {
                    // //////Toast.makeText(Refundswise_Saleslist.this, "2", Toast.LENGTH_SHORT).show();
                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    float addall = newe;
                    //alltotal1.setText(String.valueOf(newww));
                    //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    round.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                ////////Toast.makeText(Refundswise_Saleslist.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                int addall = (int) newe;
                //alltotal1.setText(String.valueOf(addall));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                round.setText("+ " + "0.00");
                ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
            }

            allbufrounded = new byte[][]{
                    setHT32, left, "Rounded".getBytes(), HT, round.getText().toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Rounded");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(round.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LFv
            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

/////////////////////refund

            //19
            Cursor billcan = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (billcan.moveToFirst()) {
                String asd = billcan.getString(18);
                refundamounta = String.valueOf(asd);
            } else {
                Cursor billcan_cancel = db.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (billcan_cancel.moveToFirst()) {
                    String asd = billcan_cancel.getString(17);
                    refundamounta = String.valueOf(asd);
                }
            }

            Cursor c1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (c1.moveToFirst()) {
                String c11 = c1.getString(2);
                alltotal1 = c11;
            } else {
                alltotal1 = "0";
            }
            float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
            String mn1 = String.valueOf(min);

            allbufrounded = new byte[][]{
                    setHT32, left, "Refund".getBytes(), HT, "-".getBytes(), mn1.toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Refund");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("-"+mn1);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
            final String normal1 = normal5.format(new Date());

            Date dt = new Date();
            SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
            final String time1 = sdf1.format(dt);

            Date dtt = new Date();
            SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
            String time24 = sdf1t.format(dtt);

            Cursor dateq = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (dateq.moveToFirst()) {
                datee = dateq.getString(25);
                timee = dateq.getString(12);
            } else {
                Cursor date_cancel = db.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (date_cancel.moveToFirst()) {
                    datee = date_cancel.getString(22);
                    timee = date_cancel.getString(12);
                }
            }

            String refundtime = "(" + datee + "," + timee + ")";
            allbuf6 = new byte[][]{
                    left, normal, refundtime.getBytes(), LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(refundtime);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }
/////////////////////////

            float all = Float.parseFloat(alltotal1);
            String newf = String.valueOf(all);

            allbufrounded = new byte[][]{
                    setHT3212, left, "Total".getBytes(), HT, "Rs ".getBytes(), newf.toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT3212);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Total");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(insert1_rs+""+newf);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            tvkot.setText(bill_coun);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, bill_coun.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(un1);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("Bill id."+bill_coun);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

//            footer();
//            cashopen();

//            allbuf2 = new byte[][]{
//                    normal, "Thank you! visit again.".getBytes(), LF, LF
//
//            };
//            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//            if (statussusbs.toString().equals("ok")) {
//                mPrinter.addCommand(normal);
//                StringBuilder textData1 = new StringBuilder();
//                textData1.append("Thank you! visit again.");
//                mPrinter.addText(textData1.toString());
//                mPrinter.addCommand(LF); //LF
//                mPrinter.addCommand(LF); //LF
//            }

            tvkot.setText(strbillone);
            if (tvkot.getText().toString().equals("")){

            }else {
                allbuf2 = new byte[][]{
                        normal, strbillone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strbillone);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            Cursor acc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

            if(acc.moveToFirst()){
                acc.moveToFirst();
                do{
                    NAME = acc.getString(1);
                    if (NAME.equals("3 inch")) {
                        feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                    }
                    else {
                        feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                    }
                }while(acc.moveToNext());
            }

            byte[][] allbuf = new byte[][]{
                    feedcut2
            };
            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(feedcut2);
            }

            if (str_print_ty.equals("POS")) {
                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(feedcut2);
                }
            }
//            method = "addCut";
//            mPrinter.addCut(Printer.CUT_FEED);
        } catch (Exception e) {
//            Toast.makeText(Refundswise_Saleslist.this, "Here2", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, method, mContext);
            return false;
        }

        return true;
    }

    private boolean createCouponData_minireceipt_all() {

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x25,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x06,0x20,0x29,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    charlength = 23;
                    charlength1 = 46;
                    charlength2 = 69;
                    quanlentha = 5;
                    str_line = "------------------------------------------------";
                    allbufline = new byte[][]{
                            left,un1, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    Cursor print_ty = db1.rawQuery("SELECT * FROM Printer_type", null);
                    if (print_ty.moveToFirst()){
                        str_print_ty = print_ty.getString(1);
                    }
                    if (str_print_ty.toString().equals("Generic")) {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "epson", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 16;
                        charlength1 = 32;
                        charlength2 = 48;
                        quanlentha = 5;
                        str_line = "------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------".getBytes(), LF
                        };
                    }
                }
            }while(cc.moveToNext());
        }

//        final int barcodeWidth = 2;
//        final int barcodeHeight = 64;
        final int pageAreaHeight = 384;
        final int pageAreaWidth = 384;
//        final int fontAHeight = 24;
//        final int fontAWidth = 12;
//        final int barcodeWidthPos = 110;
//        final int barcodeHeightPos = 70;

        ArrayList<byte[]> list = new ArrayList<byte[]>();
        String method = "";
        String[] col = {"companylogo"};
        Cursor c = db1.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
            yourBitmap = BitmapFactory.decodeByteArray(img, 0, img.length);
        }

//        String method = "";
//        Bitmap coffeeData = BitmapFactory.decodeResource(getResources(), R.drawable.coffee);
//        Bitmap wmarkData = BitmapFactory.decodeResource(getResources(), R.drawable.wmark);

        if (mPrinter == null) {
            return false;
        }
        try{
//            method = "addPageBegin";
//            mPrinter.addPageBegin();

            method = "addPageArea";
            mPrinter.addPageArea(0, 0, nPaperWidth, pageAreaHeight);

            method = "addPageDirection";
            mPrinter.addPageDirection(Printer.DIRECTION_TOP_TO_BOTTOM);

            method = "addFeedLine";
            mPrinter.addFeedLine(1);
            method = "addPagePosition";
            mPrinter.addPagePosition(0, nPaperWidth);

//            // RECEIPT BODY//

            mPrinter.addCommand(LF);

//            method = "addPagePosition";
//            mPrinter.addPagePosition(0, wmarkData.getHeight());
//            mPrinter.addPagePosition(0, logoData.getScaledHeight(0));

//            method = "addImage";
//            mPrinter.addImage(wmarkData, 0, 0, wmarkData.getWidth(), wmarkData.getHeight(),
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT,
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
//Free coffee text

//            method = "addTextSize";
//            mPrinter.addTextSize(3, 3);
//            method = "addTextStyle";
//            mPrinter.addTextStyle(Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.TRUE, Printer.PARAM_DEFAULT);
//            method = "addTextSmooth";
//            mPrinter.addTextSmooth(Printer.TRUE);
//            method = "addText";
//            mPrinter.addText("FREE Coffee\n");

            Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
            if (connnet.moveToFirst()) {
                ipnamegets = connnet.getString(1);
                portgets = connnet.getString(2);
                statusnets = connnet.getString(3);
            }

            Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
            if (connnet_counter.moveToFirst()) {
                ipnamegets_counter = connnet_counter.getString(1);
                portgets_counter = connnet_counter.getString(2);
                statusnets_counter = connnet_counter.getString(3);
            }
            connnet_counter.close();

            Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
            if (connusb.moveToFirst()) {
                addgets = connusb.getString(1);
                namegets = connusb.getString(2);
                statussusbs = connusb.getString(3);
            }

            allbuf1 = new byte[][]{
                    bold, un, "Sales Overview".getBytes(), LF

            };
            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(bold);
                mPrinter.addCommand(un);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Sales Overview");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    straddress2 = getcom.getString(17);
                    straddress3 = getcom.getString(18);
                    strphone = getcom.getString(2);
                    stremailid = getcom.getString(15);
                    strwebsite = getcom.getString(16);
                    strtaxone = getcom.getString(10);
                    strbillone = getcom.getString(12);
                } while (getcom.moveToNext());
            }


            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, un1, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(bold);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strcompanyname);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

/////////
            tvkot.setText(straddress1);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf2 = new byte[][]{
                        normal, un1, cen, straddress1.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress1);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot.setText(straddress2);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf3 = new byte[][]{
                        normal, un1, cen, straddress2.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress2);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot.setText(straddress3);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf4 = new byte[][]{
                        normal, un1, cen, straddress3.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress3);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strphone);
            String pp = "Ph. " + strphone;
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf5 = new byte[][]{
                        normal, un1, cen, pp.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(pp);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(stremailid);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf6 = new byte[][]{
                        normal, un1, cen, stremailid.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(stremailid);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strwebsite);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, un1, cen, strwebsite.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strwebsite);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strtaxone);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf8 = new byte[][]{
                        normal, un1, cen, strtaxone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strtaxone);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuf10 = new byte[][]{
                    setHT321, left, editText11.getText().toString().getBytes(), HT, "  ".getBytes(), editText22.getText().toString().getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(editText11.getText().toString());
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+editText22.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuftax = new byte[][]{
                    setHT321, left, editText_from_day_visible.getText().toString().getBytes(), HT, "  ".getBytes(), editText_to_day_visible.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(editText_from_day_visible.getText().toString());
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+editText_to_day_visible.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuftax = new byte[][]{
                    setHT321, left, "Sales".getBytes(), HT, "| ".getBytes(), "No. of bills".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Sales");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+"No. of bills");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor11.moveToFirst()) {
                int level = cursor11.getInt(0);
                total = String.valueOf(level);
            }

            Cursor count = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (count.moveToFirst()) {
                int level = count.getInt(0);
                total1 = String.valueOf(level);
            }

            String avgbill = String.valueOf(Integer.parseInt(total) / Integer.parseInt(total1));


            noofbills = new TextView(Refundswise_Saleslist.this);


            Cursor countc = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (countc.moveToFirst()) {
                int level = countc.getInt(0);
                String total1 = String.valueOf(level);
                noofbills.setText(total1);
            }


            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), total.toString().getBytes(), HT, "| ".getBytes(), noofbills.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(insert1_rs+""+total);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+noofbills.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Refunds".getBytes(), HT, "| ".getBytes(), "Refunded bills".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Refunds");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+"Refunded bills");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            String sumtotal = "";
            Cursor summ = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems", null);
            float sum1 = 0;
            if (summ.moveToFirst()) {
                do {
                    float sumlevel = summ.getFloat(0);
                    sumtotal = String.valueOf(sumlevel);
                    //Toast.makeText(getActivity(), " total is "+max, Toast.LENGTH_SHORT).show();
                } while (summ.moveToNext());

            }

            refundamount_bill = new TextView(Refundswise_Saleslist.this);
            Cursor refundam_bill = db.rawQuery("Select count(billno) from Cancelwiseorderlistitems", null);
            if (refundam_bill.moveToFirst()) {
                int refundedstr_bill = refundam_bill.getInt(0);
                refundamount_bill.setText(String.valueOf(refundedstr_bill));
            }


            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), sumtotal.toString().getBytes(), HT, "| ".getBytes(), refundamount_bill.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(insert1_rs+""+sumtotal);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+refundamount_bill.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            TextView top_reason = new TextView(Refundswise_Saleslist.this);
            Cursor to = db.rawQuery("SELECT MAX(value) FROM Top_Reason", null);
            if (to.moveToFirst()) {
                int one11 = to.getInt(0);
                to = db.rawQuery("SELECT * FROM Top_Reason WHERE value = '" + one11 + "' ", null);
                if (to.moveToFirst()) {
                    String two111 = to.getString(1);
                    top_reason.setText(two111);
                } else {
                    top_reason.setText("");
                }
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Top Reason: ".getBytes(), "".getBytes(), HT, LF
            };

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Top Reason: "+"");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, top_reason.getText().toString().getBytes(), "".getBytes(), HT, LF
            };

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(top_reason.getText().toString()+"");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor cursor = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems ORDER BY refund ASC", null);
            if (cursor.moveToFirst()) {
                do {
                    String bill_no = cursor.getString(4);
                    String date = cursor.getString(1);
                    String time = cursor.getString(2);
                    String am = cursor.getString(5);
                    String reas = cursor.getString(7);
                    String ref_am = cursor.getString(6);

                    Cursor cursor2 = db.rawQuery("SELECt * FROM Billnumber WHERE billnumber = '" + bill_no + "'", null);
                    if (cursor2.moveToFirst()) {
                        String billtypea = cursor2.getString(5);
                        String paymmethoda = cursor2.getString(6);

                        TextView tv = new TextView(Refundswise_Saleslist.this);
                        tv.setText(billtypea);

//                        if (tv.getText().toString().equals("  Cash")) {
//                            billtypeaa = "Cash";
//                        } else {
//                            billtypeaa = "Card";
//                        }

                        if (tv.getText().toString().equals("  Cash")) {
                            billtypeaa = "Cash"; //0
                        }
                        if (tv.getText().toString().equals("  Card")) {
                            billtypeaa = "Card"; //0
                        }
                        if (tv.getText().toString().equals("  Paytm")) {
                            billtypeaa = "Paytm"; //0
                        }
                        if (tv.getText().toString().equals("  Mobikwik")) {
                            billtypeaa = "Mobikwik"; //0
                        }
                        if (tv.getText().toString().equals("  Freecharge")) {
                            billtypeaa = "Freecharge"; //0
                        }
                        if (tv.getText().toString().equals("  Pay Later")) {
                            billtypeaa = "Pay Later"; //0
                        }
                        if (tv.getText().toString().equals("  Cheque")) {
                            billtypeaa = "Cheque"; //0
                        }
                        if (tv.getText().toString().equals("  Sodexo")) {
                            billtypeaa = "Sodexo"; //0
                        }
                        if (tv.getText().toString().equals("  Zeta")) {
                            billtypeaa = "Zeta"; //0
                        }
                        if (tv.getText().toString().equals("  Ticket")) {
                            billtypeaa = "Ticket"; //0
                        }
                        if (tv.getText().toString().equals("  Upiqr")) {
                            billtypeaa = "Upiqr"; //0
                        }
                        billtypeaa = tv.getText().toString().replace(" ", "");

                        TextView tv1 = new TextView(Refundswise_Saleslist.this);
                        tv1.setText(paymmethoda);
                        if (tv1.getText().toString().equals("  Dine-in") || tv1.getText().toString().equals("  General") || tv1.getText().toString().equals("  Others")) {
//                            paymmethodaa = "Dine-in";
                            //billtypee.setText("Dine-in");
                            if (account_selection.toString().equals("Dine") || account_selection.toString().equals("Qsr")) {
                                paymmethodaa = "Dine-in";
                            }else {
                                paymmethodaa = "General";
                            }
                        } else {
                            if (tv1.getText().toString().equals("  Takeaway") || tv1.getText().toString().equals("  Main")) {
                                paymmethodaa = "Takeaway";
                                //billtypee.setText("Takeaway");
                            } else {
                                paymmethodaa = "Home delivery";
                                //billtypee.setText("Home delivery");
                            }
                        }


                        Cursor billtype = db.rawQuery("Select * from Billnumber WHERE billnumber = '" + bill_no + "' ", null);
                        if (billtype.moveToFirst()) {
                            String bill_coun = billtype.getString(11);

                            if (statussusbs.equals("ok")) {
                                mPrinter.addCommand(normal);
                                mPrinter.addCommand(un1);
                                StringBuilder textData1 = new StringBuilder();
                                textData1.append("Bill id."+bill_coun);
                                mPrinter.addText(textData1.toString());
                                mPrinter.addCommand(LF); //LF
                            }
                        }


                        allbufbillno = new byte[][]{
                                setHT321, un1, "Bill no.".getBytes(), bill_no.getBytes(), HT, "   ".getBytes(), billtypeaa.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                        };


                        if (statussusbs.toString().equals("ok")) {
                            mPrinter.addCommand(setHT321);
                            mPrinter.addCommand(un1);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append("Bill no."+bill_no);
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(HT);
                            StringBuilder textData2 = new StringBuilder();
                            textData2.append("   "+billtypeaa);
                            mPrinter.addText(textData2.toString());
                            mPrinter.addCommand(LF); //LF
                        }

                        allbuf10 = new byte[][]{
                                setHT321, left, paymmethodaa.getBytes(), HT, "  ".getBytes(), date.getBytes(), LF
                                //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

                        };
                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                        if (statussusbs.toString().equals("ok")) {
                            mPrinter.addCommand(setHT321);
                            mPrinter.addCommand(left);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append(paymmethodaa);
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(HT);
                            StringBuilder textData2 = new StringBuilder();
                            textData2.append("  "+date);
                            mPrinter.addText(textData2.toString());
                            mPrinter.addCommand(LF); //LF
                        }

                        allbuftime = new byte[][]{
                                setHT321, left, "Rs.".getBytes(), am.getBytes(), HT, "  ".getBytes(), time.getBytes(), LF
                        };


                        if (statussusbs.toString().equals("ok")) {
                            mPrinter.addCommand(setHT321);
                            mPrinter.addCommand(left);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append(insert1_rs+""+am);
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(HT);
                            StringBuilder textData2 = new StringBuilder();
                            textData2.append("  "+time);
                            mPrinter.addText(textData2.toString());
                            mPrinter.addCommand(LF); //LF
                        }


                    }

                    allbuftaxestype1 = new byte[][]{
                            left, normal, "Refund amount: Rs.".getBytes(), ref_am.getBytes(), HT, LF
                    };

                    if (statussusbs.toString().equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(normal);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append("Refund amount: "+insert1_rs+ref_am);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        mPrinter.addCommand(LF); //LF
                    }

                    allbuftaxestype1 = new byte[][]{
                            left, normal, "Reason: ".getBytes(), reas.getBytes(), HT, LF
                    };

                    if (statussusbs.toString().equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(normal);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append("Reason: "+reas);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        mPrinter.addCommand(LF); //LF
                    }


                    if (statussusbs.toString().equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(un1);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(str_line);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF); //LF
                    }


                } while (cursor.moveToNext());
            }


            Cursor acc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

            if(acc.moveToFirst()){
                acc.moveToFirst();
                do{
                    NAME = acc.getString(1);
                    if (NAME.equals("3 inch")) {
                        feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                    }
                    else {
                        feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                    }
                }while(acc.moveToNext());
            }

            byte[][] allbuf = new byte[][]{
                    feedcut2
            };
            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(feedcut2);
            }

            if (str_print_ty.equals("POS")) {
                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(feedcut2);
                }
            }

//            method = "addCut";
//            mPrinter.addCut(Printer.CUT_FEED);
        } catch (Exception e) {
//            Toast.makeText(Refundswise_Saleslist.this, "Here2", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, method, mContext);
            return false;
        }

        return true;
    }

    @Override
    public void onStart() {
        super.onStart();

        String printer_type="";
        Cursor aallrows = db1.rawQuery("SELECT * FROM Printer_type WHERE _id = '1'", null);
        if (aallrows.moveToFirst()) {
            do {
                printer_type = aallrows.getString(1);

            } while (aallrows.moveToNext());
        }
        aallrows.close();

        if(printer_type.equalsIgnoreCase("wiseposplus")){
            doBindMswipeWisepadDeviceService();
        }

    }

    @Override
    protected void onStop() {
        super.onStop();

        String printer_type="";
        Cursor aallrows = db1.rawQuery("SELECT * FROM Printer_type WHERE _id = '1'", null);
        if (aallrows.moveToFirst()) {
            do {
                printer_type = aallrows.getString(1);

            } while (aallrows.moveToNext());
        }
        aallrows.close();

        if(printer_type.equalsIgnoreCase("wiseposplus")){
            doUnbindMswipeWisepadDeviceService();
        }


    }

    void doBindMswipeWisepadDeviceService()
    {
        bindService(new Intent(this, MSWisepadDeviceController.class), mMSWisepadDeviceControllerService, Context.BIND_AUTO_CREATE);
    }


    public void doUnbindMswipeWisepadDeviceService()
    {

        if (ApplicationData.IS_DEBUGGING_ON)
            Logs.v(ApplicationData.packName,  "wisePadConnection ", true, true);

        unbindService(mMSWisepadDeviceControllerService);

    }

    private ServiceConnection mMSWisepadDeviceControllerService = new ServiceConnection()
    {
        public void onServiceConnected(ComponentName className, IBinder service)
        {
            try
            {
                MSWisepadDeviceController.LocalBinder localBinder = (MSWisepadDeviceController.LocalBinder) service;
                mMSWisepadDeviceController = localBinder.getService();

                if(mMSWisepadDeviceController != null) {

                    mMSWisepadDeviceController.initMswipeWisepadDeviceController(new Refundswise_Saleslist.MSWisepadDeviceObserver(),
                            true, false, false,
                            false, null);

                }
            }
            catch (Exception e) {

                if (ApplicationData.IS_DEBUGGING_ON)
                    Logs.v(ApplicationData.packName, "exception."+e.toString(), true, true);
            }
        }

        public void onServiceDisconnected(ComponentName className)
        {
            if (ApplicationData.IS_DEBUGGING_ON)
                Logs.v(ApplicationData.packName, "Wisepad servcie un-binded and wisepad is disconnected...", true, true);
            /**
             * This is called when the connection with the service has been
             * unexpectedly disconnected - process crashed.
             *
             */

            mMSWisepadDeviceController = null;

        }
    };


    class MSWisepadDeviceObserver implements MSWisepadDeviceControllerResponseListener
    {

        @Override
        public void onReturnWisepadConnection(WisePadConnection wisePadConntection, BluetoothDevice bluetoothDevice) {

            if (ApplicationData.IS_DEBUGGING_ON)
                Logs.v(ApplicationData.packName,  "wisePadConntection " + wisePadConntection, true, true);

            String msg = getString(R.string.unknown);

            if(wisePadConntection == WisePadConnection.WisePadConnection_CONNECTED)
            {
                msg = getString(R.string.device_connected);
            }
            else if(wisePadConntection == WisePadConnection.WisePadConnection_CONNECTING){

                msg = getString(R.string.device_connecting);
            }
            else if(wisePadConntection == WisePadConnection.WisePadConnection_NOT_CONNECTED){

                msg = getString(R.string.device_not_connected);
            }
            else if(wisePadConntection == WisePadConnection.WisePadConnection_DIS_CONNECTED){

                msg = getString(R.string.device_disconnected);
            }

            //mTXTStatus.setText(msg);

        }

        @Override
        public void onRequestWisePadCheckCardProcess(CheckCardProcess checkCardProcess, ArrayList<String> dataList) {

        }

        @Override
        public void onReturnWisePadOfflineCardTransactionResults(CheckCardProcessResults checkCardResults, Hashtable<String, Object> paramHashtable) {

        }

        @Override
        public void onError(Error error, String errorMsg) {

            if (ApplicationData.IS_DEBUGGING_ON)
                Logs.v(ApplicationData.packName,  "error " + error, true, true);

        }

        @Override
        public void onRequestDisplayWispadStatusInfo(DisplayText msg) {

        }

        @Override
        public void onReturnDeviceInfo(Hashtable<String, String> paramHashtable) {

        }

        @Override
        public void onReturnFunctionKeyResult(FunctionKeyResult keyType) {

        }

        @Override
        public void onReturnWispadNetwrokSettingInfo(WispadNetwrokSetting wispadNetwrokSetting, boolean status, Hashtable<String, Object> netwrokSettingInfo) {

        }

        @Override
        public void onReturnNfcDetectCardResult(NfcDetectCardResult nfcDetectCardResult, Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onReturnNfcDataExchangeResult(boolean isSuccess, Hashtable<String, String> data) {

        }

        @Override
        public void onPrintResult(PrintResult printResult) {


            if (ApplicationData.IS_DEBUGGING_ON)
                Logs.v(ApplicationData.packName,  "printResult " + printResult, true, true);

            String msg = getString(R.string.unknown);

            if(printResult == PrintResult.PRINT_SUCCESS)
            {
                msg = getString(R.string.printer_command_success);

            }
            else if(printResult == PrintResult.PRINT_NO_PAPER_OR_COVER_OPENED)
            {
                msg = getString(R.string.no_paper);

            }
            else if(printResult == PrintResult.PRINT_WRONG_PRINTER_COMMAND)
            {
                msg = getString(R.string.printer_command_not_available);

            }
            else if(printResult == PrintResult.PRINT_OVERHEAT)
            {
                msg = getString(R.string.printer_overheat);

            }
            else if(printResult == PrintResult.PRINT_PRINTER_ERROR)
            {
                msg = getString(R.string.printer_command_not_available);

            }

            //mTXTStatus.setText(msg);


        }
    }
}
