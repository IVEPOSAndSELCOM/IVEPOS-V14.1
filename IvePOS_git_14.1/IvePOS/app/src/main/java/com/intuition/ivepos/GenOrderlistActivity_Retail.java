package com.intuition.ivepos;

/**
 * Created by Rohithkumar on 1/6/2015.
 */

import android.Manifest;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.SeekBar;
import android.widget.SimpleCursorAdapter;
import android.widget.Spinner;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.RequestQueue;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.epson.epos2.Epos2Exception;
import com.epson.epos2.printer.Printer;
import com.epson.epos2.printer.PrinterStatusInfo;
import com.epson.epos2.printer.ReceiveListener;
import com.github.mikephil.charting.animation.Easing;
import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.charts.PieChart;
import com.github.mikephil.charting.components.AxisBase;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;
import com.github.mikephil.charting.formatter.IAxisValueFormatter;
import com.github.mikephil.charting.formatter.PercentFormatter;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;
import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
import com.github.mikephil.charting.utils.ColorTemplate;
import com.github.mikephil.charting.utils.MPPointF;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textfield.TextInputLayout;
import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
import com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException;
import com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.repackaged.org.apache.commons.codec.binary.Base64;
import com.google.api.client.util.ExponentialBackOff;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.GmailScopes;
import com.google.api.services.gmail.model.Label;
import com.google.api.services.gmail.model.ListLabelsResponse;
import com.intuition.ivepos.paytm.Cash_Card_Credit_Sales2;
import com.intuition.ivepos.paytm.Cash_Card_Credit_Sales3;
import com.intuition.ivepos.paytm.Cash_Card_Credit_Sales4;
import com.intuition.ivepos.syncapp.SyncHelperApp;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import pub.devrel.easypermissions.AfterPermissionGranted;
import pub.devrel.easypermissions.EasyPermissions;

import static com.intuition.ivepos.BluetoothPrintDriver.BT_Write;
import static com.intuition.ivepos.SplashScreenActivity.getDefaultSharedPreferencesMultiProcess;
import static com.intuition.ivepos.sync.SyncHelper.AUTHORITY;
import static com.intuition.ivepos.sync.SyncHelper.mAccount;

/**
 * Created by Rohithkumar on 1/6/2015.
 */
public class GenOrderlistActivity_Retail extends Fragment implements SeekBar.OnSeekBarChangeListener,
        OnChartValueSelectedListener, ReceiveListener {

    Fragment frag;
    FragmentTransaction fragTransaction;


    TextView mEdit;

    Button btnok; TextView tax_value_l;
    public SQLiteDatabase db = null;
    String glob_ta, global_taxx;
    public SQLiteDatabase db1 = null;
    public SQLiteDatabase db_inapp = null; TextView tv_inapp, tv_inapp_da; String currentDateandTime1_pro;
    String assa, assa1, assa2, id, bilcc;
    String sub, compna, companynameis;
    private View mView;
    ImageView imageViewPicture;
    byte[] img;
    String item;
    int level, level1, level111, level111card, level12, leveliss;
    String total, total1, total11, total111, total111card, discount, totalis, totalbillis, avgbill, totaal1credit, totaal1credit_percent, tax_total, refund_total, disc_total, gross_total, sub_total, round_total;
    TextView totalsales, totalsales_r, noofbills, avgsales, tax_value, avgsales_r, cashcardtotalsales, cashcarddiscount, cashcardcashsales, cashcardcardsales, cashcarddiscountpercent, cashcardcashsalespercent, cashcardcardsalespercent, creditsales1, creditsalespercent ;
    TextView fourtotalsales, fourdinein, fourdineinpercent, fourtakeaway, fourtakeawaypercent, fourhomedelivery, fourhomedeliverypercent;
    TextView refundamount, refundpercentage, crashername, crasherpercentage, crashervalue, top_reason;
    TextView total_customers, customer_sales, top_customer, top_customer_sales, top_customer_percent;
    TextView discounttotal, disc_percent, discount_no_of_bills;
    TextView topcat1, topcat1_sales, topcat1_percent;
    TextView topcat2, topcat2_sales, topcat2_percent;
    TextView topcat3, topcat3_sales, topcat3_percent;



    TextView cost_items_indent, cost_ingredient_indent;
    TextView vendors_today, ingredient_vendors_today;
    TextView i_low_stock_value, mi_low_stock_value;
    TextView i_cost_value, mi_cost_value;
    TextView i_cost_percent, mi_cost_percent;

    TextView paid_value, ingredient_paid_value;
    TextView paid_percent, ingredient_paid_percent;
    TextView pending_value, ingredient_pending_value;
    TextView pending_percent, ingredient_pending_percent;



    Spinner getlisting;
    LinearLayout ascdesc, cashcard;
    int dineinsales, takeawaysales, homedeliverysales, refunded;
    String dineinsalesstr, takeawaysalesstr, homedeliverysalesstr, refundedstr, rupper1;

    String billno, date, time, user, date11, date111;
    ListView listView, listView1, listviewdis, listView2;
    SimpleCursorAdapter adapter, dataAdapterr;
    Cursor cursor1;
    String strpaymentmethod, strbilltype, one1, pone, max, iittnn, iittnnquan, iittnntable, iittnnindprice, iittnnindtotalprice, bill_coun, iittnninddate, oone1, ppone, mmax, ppercen, cardnum;
    TextView topone, topuserone, topuser1percent, topitemone, topitem1percent, topuser1price;
    TextView topusertwo, topuser2percent, topuser2price;
    TextView topuserthree, topuser3percent, topuser3price;
    TextView totalsalesitemwise, toptwo, topthree;
    TextView topitem2percent, topitem3percent;
    TextView topitem1price, topitem2price, topitem3price;
    String two2, three3, salesee1, salesee2, salesee3;
    String ptwo, pthree;

    TextView topmodone, topmodtwo, topmodthree;
    TextView topmod1percent, topmod2percent, topmod3percent;
    TextView topmod1price, topmod2price, topmod3price;
    int mum;
    String mumstr, username, itemname;
    TableLayout table_layout;
    private int year, year1;
    private int month, month1;
    private int day, day1;
    final int DATE_DIALOG_ID = 999;

    String name;

    String onee, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve;
    String onee1, two1, three1, four1, five1, six1, seven1, eight1, nine1, ten1, eleven1, twelve1;

    int clickcount=1, clickcounts = 1;
    RelativeLayout dis_click, sales_click, cashsales_click, cardsales_click;
    RelativeLayout dinein_click_four, sales_click_four, takeaway_click_four, homedelivery_click_four;
    LinearLayout saleslist, discountlist, cardlist;

    File file=null, file1=null;
    SimpleDateFormat sdff2, sdff1;
    String currentDateandTimee1;
    String timee1;

    LinearLayout panel1, panel11, panel111;
    RelativeLayout text1, text11, text111;
    ImageView rotatearrow, rotatearrow1, rotatearrow11;
    View openLayout;


    TextView editText1, editText2, editText11, editText22, editText1_filter, editText2_filter;
    int v;


    String billnumb, datee, timee;
    String papersizeget;
    String ipnamegets, portgets, statusnets, addgets, namegets, statussusbs;
    String ipnamegets_counter, portgets_counter, statusnets_counter;
    //DatePickerDialog.OnDateSetListener datePickerListener;


    String ipnameget, portget, statusnet, nameget, addget, statussusb;
    String ipnameget_counter, portget_counter, statusnet_counter;
    byte[][] allbuf, allbuf1, allbuf2, allbuf3, allbuf4, allbuf5, allbuf6, allbuf7, allbuf8, allbuf9, allbuf10, allbuf11, allbufqty, allbufitems, allbufmodifiers, allbufsubtot,
            allbuftax, allbufdisc, allbufrounded, allbuffulltot, allbuf12, allbuf13, allbuf14,allbufbillno,allbuftime,allbufline1,allbufline,allbufcust,allbufcustname,
            allbufcustadd,allbufcustph,allbufcustemail, allbuftaxestype2, allbuftaxestype1, allbuf1122, allbufKOT;
    String strcompanyname, straddress1, straddress2, straddress3, strphone, stremailid, strwebsite, strtaxone, strbillone;
    String alltaxinprerc = "10", alltaxinrs;
    String alldiscinprerc = "5", alldiscinrs;
    TextView tvkot;
    String aqq2;
    float aqq1;
    String total2, rr1, rr2, rr3, rr4, rr5;
    byte[] setHT32, setHT321, setHT33, setHT34, setHT3212, setHTKOT, feedcut2;
    int nPaperWidth;
    int charlength, charlength1, charlength2, quanlentha;
    String NAME, tableidaa, tableida;
    String paymmethodaa, paymmethoda, billtypeaa, billtypea;
    TextView tv8, disc_tv;
    float ss;
    String ss1;
    int sub1;
    String taxpe, dsirs, subro, alltotal1;
    String total_disc_print_q;
    RelativeLayout sales, product, seller, refund, discount1;


    TextView editText_from_day_visible, editText_from_day_hide, editText_to_day_visible, editText_to_day_hide;


    private int hour;
    private int minute;


    float dsirsq1, dsirsq2, dsirsq3, dsirsq4;
    String dis_val, dis_status, dis_ty;
    String ropq;

    String Itemtype, itemtotal, id5, total1quan;


    List toEmailList;

    String response;
    GoogleAccountCredential mCredential;
    ProgressDialog mProgress;

    final int REQUEST_ACCOUNT_PICKER = 1000;
    final int REQUEST_AUTHORIZATION = 1001;
    final int REQUEST_GOOGLE_PLAY_SERVICES = 1002;
    final int REQUEST_PERMISSION_GET_ACCOUNTS = 1003;

    private  final String BUTTON_TEXT = "Call Gmail API";
    private  final String PREF_ACCOUNT_NAME = "accountName";
    private  final String[] SCOPES = { GmailScopes.GMAIL_SEND };


    EditText email_id_send;
    String emailPattern = "[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";

    String date1 = "201707210001";
    String date2 = "201707212359";

    BarChart mChart; PieChart mChart_pie; ScrollView mScrollView;
    String date1_filter, date2_filter, date1_end, date2_end, date1_end1, date2_end1, date1_filter_2, date2_filter_2, date1_filter_month_2, date2_filter_month_2;
    int i1;

    ArrayList<BarEntry> yVals1;
    float val;

    String str_print_ty;

    private Context mContext = null;

    private Printer mPrinter = null;
    int barcodeWidth, barcodeHeight, pageAreaHeight, pageAreaWidth;

    private EditText mEditTarget = null;
    private Spinner mSpnSeries = null;
    private Spinner mSpnLang = null;

    RelativeLayout proceed_button;
    ProgressBar proceed_button1;
    LinearLayout rela;
    FloatingActionButton miniprint_orderlist1;

    private WifiPrintDriver wifiSocket = null;
    private WifiPrintDriver2 wifiSocket2 = null;

    TextView mTextView1, mTextView2;

    LinearLayout ll_dateselecter;
    LinearLayout ll_custom;
    TextView tv_dateselecter;
    int selectedPosition=0;

    TextView editText1_dialog,editText2_dialog,editText11_dialog,editText22_dialog,editText_from_day_hide_dialog,editText_from_day_visible_dialog;
    TextView editText_to_day_hide_dialog,editText_to_day_visible_dialog;
    String str_editText11_dialog="",str_editText22_dialog="",str_editText_from_day_visible_dialog="",str_editText_to_day_visible_dialog="";

    TextView paytmwalletsales1, mobikwiksales1, freechargesales1,sodexosales1,zetasales1, ticketsales1, credquesales1,
            chequesales1;
    TextView paytmsales1percent,mobikwiksales1percent,freechargesales1percent,sodexosales1percent,
            zetasales1percent, ticketsales1percent, creditsales1percent, chequesales1percent;
    String total111credit, total111cheq,total111ticket, total111zeta,total111sodexo,total111free,total111mobi, total111paytm;
    int level111cred, level111cheq,  level111ticket,  level111zeta,  level111sodexo,  level111free, level111mobi,  level111paytm;


    View rootview;

    String insert1_cc = "", insert1_rs = "", str_country;

    TextView tv_pro, ic_value, mic_value, amount_before_tax;

    AlertDialog alertDialogItems;
    TextView upiqrsales1,upiqrsales1percent;
    int levelbharat,levelupi;
    String totalbharat,totalupi;
    RequestQueue queue;
    String all_sales="0",all_sales_cancelled="0",billnumber="0",cardnumber="0";
    ProgressDialog statusDialog;

    String WebserviceUrl;

    public GenOrderlistActivity_Retail(){

    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        setHasOptionsMenu(true);
        rootview = inflater.inflate(R.layout.fragment_multi_genorderlist3_retail, null);

        SharedPreferences sharedpreferences_select =  SplashScreenActivity_Selection.getDefaultSharedPreferencesMultiProcess(getActivity());
        String account_selection= sharedpreferences_select.getString("account_selection", null);

        if (account_selection.toString().equals("Dine")) {
            WebserviceUrl = "https://theandroidpos.com/IVEPOS_NEW/";
        }else {
            if (account_selection.toString().equals("Qsr")) {
                WebserviceUrl = "https://theandroidpos.com/IVEPOS_NEW/";
            }else {
                WebserviceUrl = "https://theandroidpos.com/IVEPOSRETAIL_NEW/";
            }
        }

        if (getActivity() instanceof AppCompatActivity){
            androidx.appcompat.app.ActionBar actionbar = ((AppCompatActivity) getActivity()).getSupportActionBar();
            actionbar.setSubtitle("Sales");
        }

        upiqrsales1=(TextView)rootview.findViewById(R.id.upiqrsales1);
        upiqrsales1percent=(TextView)rootview.findViewById(R.id.upiqrsales1percent);

        tv_pro = new TextView(getActivity());
        ic_value = new TextView(getActivity());
        mic_value = new TextView(getActivity());
        amount_before_tax = new TextView(getActivity());

//        BarChart chart = (BarChart) rootview.findViewById(R.id.chart1);
        paytmwalletsales1 = (TextView)rootview.findViewById(R.id.paytmwalletsales1);
        mobikwiksales1 = (TextView)rootview.findViewById(R.id.mobikwiksales1);
        freechargesales1 = (TextView)rootview.findViewById(R.id.freechargesales1);
        sodexosales1 = (TextView)rootview.findViewById(R.id.sodexosales1);
        zetasales1 = (TextView)rootview.findViewById(R.id.zetasales1);
        ticketsales1 = (TextView)rootview.findViewById(R.id.ticketsales1);
        chequesales1 = (TextView)rootview.findViewById(R.id.chequesales1);
        creditsales1 = (TextView)rootview.findViewById(R.id.creditsales1);


        paytmsales1percent = (TextView)rootview.findViewById(R.id.paytmsales1percent);
        mobikwiksales1percent = (TextView)rootview.findViewById(R.id.mobikwiksales1percent);
        freechargesales1percent = (TextView)rootview.findViewById(R.id.freechargesales1percent);
        sodexosales1percent = (TextView)rootview.findViewById(R.id.sodexosales1percent);
        zetasales1percent = (TextView)rootview.findViewById(R.id.zetasales1percent);
        ticketsales1percent = (TextView)rootview.findViewById(R.id.ticketsales1percent);
        chequesales1percent = (TextView)rootview.findViewById(R.id.chequesales1percent);
        creditsales1percent = (TextView)rootview.findViewById(R.id.creditsales1percent);

        mContext = getActivity();
        tv_dateselecter= (TextView)rootview.findViewById(R.id.tv_dateselecter);
        mSpnSeries = (Spinner) rootview.findViewById(R.id.spnModel);
        ArrayAdapter<SpnModelsItem> seriesAdapter = new ArrayAdapter<SpnModelsItem>(getActivity(), android.R.layout.simple_spinner_item);
        seriesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        seriesAdapter.add(new SpnModelsItem(getString(R.string.printerseries_t82), Printer.TM_T82));
        mSpnSeries.setAdapter(seriesAdapter);
        mSpnSeries.setSelection(0);

        mSpnLang = (Spinner) rootview.findViewById(R.id.spnLang);
        ArrayAdapter<SpnModelsItem> langAdapter = new ArrayAdapter<SpnModelsItem>(getActivity(), android.R.layout.simple_spinner_item);
        langAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        langAdapter.add(new SpnModelsItem(getString(R.string.lang_ank), Printer.MODEL_ANK));
        mSpnLang.setAdapter(langAdapter);
        mSpnLang.setSelection(0);


//        try {
//            com.epson.epos2.Log.setLogSettings(mContext, com.epson.epos2.Log.PERIOD_TEMPORARY, com.epson.epos2.Log.OUTPUT_STORAGE, null, 0, 1, com.epson.epos2.Log.LOGLEVEL_LOW);
//        } catch (Exception e) {
////            Toast.makeText(getActivity(), "Here8", Toast.LENGTH_SHORT).show();
//            ShowMsg.showException(e, "setLogSettings", mContext);
//        }
        mEditTarget = (EditText) rootview.findViewById(R.id.edtTarget);

        mChart_pie = (PieChart) rootview.findViewById(R.id.mChart_pie);

/////////////////////////////////////////////////////////
        mChart = (BarChart) rootview.findViewById(R.id.chart1);
        mScrollView = (ScrollView) rootview.findViewById(R.id.mScrollView);
        mChart.setOnChartValueSelectedListener(this);

        mChart.setDrawBarShadow(false);
        mChart.setDrawValueAboveBar(true);

        mChart.getDescription().setEnabled(false);

        // if more than 60 entries are displayed in the chart, no values will be
        // drawn
        mChart.setMaxVisibleValueCount(60);

        // scaling can now only be done on x- and y-axis separately
        mChart.setPinchZoom(false);

        mChart.setDrawGridBackground(false);



        totalsales_r = new TextView(getActivity());
        avgsales_r = new TextView(getActivity());
        final Calendar c = Calendar.getInstance();
        // Current Hour
        hour = c.get(Calendar.HOUR_OF_DAY);
        // Current Minute
        minute = c.get(Calendar.MINUTE);

        mCredential = GoogleAccountCredential.usingOAuth2(
                getActivity().getApplicationContext(), Arrays.asList(SCOPES))
                .setBackOff(new ExponentialBackOff());

        mProgress = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);
        mProgress.setMessage(getString(R.string.setmessage14));

        tvkot = new TextView(getActivity());
        editText1_filter = new TextView(getActivity());
        editText2_filter = new TextView(getActivity());

        totalsales = (TextView)rootview.findViewById(R.id.totalsales1);
        noofbills = (TextView)rootview.findViewById(R.id.noofbills1);
        avgsales = (TextView)rootview.findViewById(R.id.avgsales1);

        tax_value = (TextView) rootview.findViewById(R.id.tax_value);


        cashcarddiscount = new TextView(getActivity());
        cashcarddiscountpercent = new TextView(getActivity());
        cashcardcashsales = (TextView)rootview.findViewById(R.id.cashsales1);
        cashcardcashsalespercent = (TextView)rootview.findViewById(R.id.cashsales1percent);
        cashcardcardsales = (TextView)rootview.findViewById(R.id.cardsales1);
        cashcardcardsalespercent = (TextView)rootview.findViewById(R.id.cardsales1percent);

        creditsales1 = (TextView)rootview.findViewById(R.id.creditsales1);
        creditsalespercent = (TextView)rootview.findViewById(R.id.creditsales1percent);


        fourdinein = (TextView)rootview.findViewById(R.id.dine_in1);
        fourdineinpercent = (TextView)rootview.findViewById(R.id.dine_in1percent);
        fourtakeaway = (TextView)rootview.findViewById(R.id.take_away1);
        fourtakeawaypercent = (TextView)rootview.findViewById(R.id.take_away1percent);
        fourhomedelivery = (TextView)rootview.findViewById(R.id.home_delivery1);
        fourhomedeliverypercent = (TextView)rootview.findViewById(R.id.home_delivery1percent);


        topone = (TextView)rootview.findViewById(R.id.topitem1);
        toptwo = (TextView)rootview.findViewById(R.id.topitem2);
        topthree = (TextView)rootview.findViewById(R.id.topitem3);

        topitem1percent = (TextView)rootview.findViewById(R.id.topitem1percen);
        topitem2percent = (TextView)rootview.findViewById(R.id.topitem2percen);
        topitem3percent = (TextView)rootview.findViewById(R.id.topitem3percen);

        topitem1price = (TextView) rootview.findViewById(R.id.topitem1_sales);
        topitem2price = (TextView) rootview.findViewById(R.id.topitem2_sales);
        topitem3price = (TextView) rootview.findViewById(R.id.topitem3_sales);

        topuserone = (TextView)rootview.findViewById(R.id.topuser1);
        topuser1percent = (TextView)rootview.findViewById(R.id.topuser1percent);
        topuser1price = (TextView) rootview.findViewById(R.id.topuser1_sales);
        topusertwo = (TextView)rootview.findViewById(R.id.topuser2);
        topuser2percent = (TextView)rootview.findViewById(R.id.topuser2percent);
        topuser2price = (TextView) rootview.findViewById(R.id.topuser2_sales);
        topuserthree = (TextView)rootview.findViewById(R.id.topuser3);
        topuser3percent = (TextView)rootview.findViewById(R.id.topuser3percent);
        topuser3price = (TextView) rootview.findViewById(R.id.topuser3_sales);


        refundamount = (TextView)rootview.findViewById(R.id.refund_amount);
        refundpercentage = (TextView)rootview.findViewById(R.id.refund_perc);

        crashername = (TextView)rootview.findViewById(R.id.crasher_name);
        crasherpercentage = (TextView)rootview.findViewById(R.id.crasher_perc);
        crashervalue = (TextView) rootview.findViewById(R.id.crasher_value);

        top_reason = (TextView) rootview.findViewById(R.id.top_reason);

        total_customers = (TextView) rootview.findViewById(R.id.count);
        customer_sales = (TextView) rootview.findViewById(R.id.customer_sales);

        top_customer = (TextView) rootview.findViewById(R.id.top_customer);
        top_customer_sales = (TextView) rootview.findViewById(R.id.top_customer_sales);
        top_customer_percent = (TextView) rootview.findViewById(R.id.top_customer_percent);

        discounttotal = (TextView) rootview.findViewById(R.id.totaldiscount);
        disc_percent = (TextView) rootview.findViewById(R.id.discountsales1percent_1);
        discount_no_of_bills = (TextView) rootview.findViewById(R.id.no_of_bills);

        topcat1 = (TextView) rootview.findViewById(R.id.topcat1);
        topcat1_sales = (TextView) rootview.findViewById(R.id.topcat1_sales);
        topcat1_percent = (TextView) rootview.findViewById(R.id.topcat1percen);

        topcat2 = (TextView) rootview.findViewById(R.id.topcat2);
        topcat2_sales = (TextView) rootview.findViewById(R.id.topcat2_sales);
        topcat2_percent = (TextView) rootview.findViewById(R.id.topcat2percen);

        topcat3 = (TextView) rootview.findViewById(R.id.topcat3);
        topcat3_sales = (TextView) rootview.findViewById(R.id.topcat3_sales);
        topcat3_percent = (TextView) rootview.findViewById(R.id.topcat3percen);



        cost_items_indent = (TextView) rootview.findViewById(R.id.cost_items_indent);
        cost_ingredient_indent = (TextView) rootview.findViewById(R.id.cost_ingredient_indent);

        vendors_today = (TextView) rootview.findViewById(R.id.vendors_today);
        ingredient_vendors_today = (TextView) rootview.findViewById(R.id.ingredient_vendors_today);

        i_low_stock_value = (TextView) rootview.findViewById(R.id.i_low_stock_value) ;
        mi_low_stock_value = (TextView) rootview.findViewById(R.id.mi_low_stock_value);

        paid_value = (TextView) rootview.findViewById(R.id.paid_value);
        ingredient_paid_value = (TextView) rootview.findViewById(R.id.ingredient_paid_value);

        paid_percent = (TextView) rootview.findViewById(R.id.paid_percent);
        ingredient_paid_percent = (TextView) rootview.findViewById(R.id.ingredient_paid_percent);

        pending_value = (TextView) rootview.findViewById(R.id.pending_value);
        ingredient_pending_value = (TextView) rootview.findViewById(R.id.ingredient_pending_value);

        pending_percent = (TextView) rootview.findViewById(R.id.pending_percent);
        ingredient_pending_percent = (TextView) rootview.findViewById(R.id.ingredient_pending_percent);

        i_cost_value = (TextView) rootview.findViewById(R.id.i_cost_value) ;
        mi_cost_value = (TextView) rootview.findViewById(R.id.mi_cost_value);

        i_cost_percent = (TextView) rootview.findViewById(R.id.i_cost_percent) ;
        mi_cost_percent = (TextView) rootview.findViewById(R.id.mi_cost_percent);


        btnok = (Button) rootview.findViewById(R.id.okok);

//        topitemone = (TextView)rootview.findViewById(R.id.topproduct1);
//        topitem1percent = (TextView)rootview.findViewById(R.id.topproduct1percent);

        //actionBar.setTitle("Sales report");

        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd",Locale.US);
        final String currentDateandTime1 = sdf2.format(new Date());

        SimpleDateFormat sdf3 = new SimpleDateFormat("dd MMM yyyy",Locale.US);
        final String currentDateandTime2 = sdf3.format(new Date());


        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm",Locale.US);
        String time_hide = sdf.format(new Date());

        SimpleDateFormat sdf1 = new SimpleDateFormat("HH:mm aa",Locale.US);
        String time_visible = sdf1.format(new Date());

        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        Date tomorrow = calendar.getTime();

        Calendar calendar11 = Calendar.getInstance();
        calendar11.add(Calendar.DAY_OF_YEAR, -1);
        Date yesterday = calendar11.getTime();

        editText1 = (TextView)rootview.findViewById(R.id.editText1);
        editText1.setText(currentDateandTime1);
        editText2 = (TextView)rootview.findViewById(R.id.editText2);
        editText2.setText(currentDateandTime1);

        editText11 = (TextView)rootview.findViewById(R.id.editText11);
        editText11.setText(currentDateandTime2);


        editText22 = (TextView)rootview.findViewById(R.id.editText22);
        editText22.setText(currentDateandTime2);


        editText_from_day_hide = (TextView) rootview.findViewById(R.id.editText_from_day_hide);
        editText_from_day_visible = (TextView) rootview.findViewById(R.id.editText_from_day_visible);


        editText_to_day_hide = (TextView) rootview.findViewById(R.id.editText_to_day_hide);
        editText_to_day_visible = (TextView) rootview.findViewById(R.id.editText_to_day_visible);


        editText11.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
//                Calendar now = Calendar.getInstance();
//                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
//                        datePickerListener,
//                        now.get(Calendar.YEAR),
//                        now.get(Calendar.MONTH),
//                        now.get(Calendar.DAY_OF_MONTH)
//
//
//                );
//
//                dpd.show(getActivity().getFragmentManager(), "Datepickerdialog");

                Calendar now = Calendar.getInstance();
                DatePickerDialog datePickerDialog = new DatePickerDialog(
                        getActivity(), datePickerListener, now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH));
                datePickerDialog.show();


            }
            DatePickerDialog.OnDateSetListener datePickerListener=new DatePickerDialog.OnDateSetListener(){

                @Override
                public void onDateSet(DatePicker datePicker, int selectedYear1, int selectedMonth1, int selectedDay1) {
                    year1 = selectedYear1;
                    month1 = selectedMonth1;
                    day1 = selectedDay1;

                    // set selected date into textview
                    populateSetDate(year1, month1 + 1, day1);
                }

            };
         /*   com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener datePickerListener
                    = new com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener() {

                @Override
                public void onDateSet(com.wdullaer.materialdatetimepicker.date.DatePickerDialog datePickerDialog, int selectedYear1, int selectedMonth1, int selectedDay1) {
                    year1 = selectedYear1;
                    month1 = selectedMonth1;
                    day1 = selectedDay1;

                    // set selected date into textview
                    populateSetDate(year1, month1 + 1, day1);
                }
            };*/





            public void populateSetDate(int year, int month, int day) {
                TextView mEdit = (TextView) rootview.findViewById(R.id.editText1);
                TextView mEdit1  = (TextView)rootview.findViewById(R.id.editText11);
                if (month == 1 && day < 10) {
                    mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                    onee1 = "0" + day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee1);
                } else {
                    if (month == 1) {
                        mEdit.setText(year + " " + "0" + 1 + " " + day);
                        onee = day + " " + "Jan" + " " + year;
                        mEdit1.setText(onee);
                    }
                }

                if (month == 2 && day < 10) {
                    mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                    two1 = "0" + day + " " + "Feb" + " " + year;
                    mEdit1.setText(two1);
                } else {
                    if (month == 2) {
                        mEdit.setText(year + " " + "0" + 2 + " " + day);
                        two = day + " " + "Feb" + " " + year;
                        mEdit1.setText(two);
                    }
                }

                if (month == 3 && day < 10) {
                    mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                    three1 = "0" + day + " " + "Mar" + " " + year;
                    mEdit1.setText(three1);
                } else {
                    if (month == 3) {
                        mEdit.setText(year + " " + "0" + 3 + " " + day);
                        three = day + " " + "Mar" + " " + year;
                        mEdit1.setText(three);
                    }
                }

                if (month == 4 && day < 10) {
                    mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                    four1 = "0" + day + " " + "Apr" + " " + year;
                    mEdit1.setText(four1);
                } else {
                    if (month == 4) {
                        mEdit.setText(year + " " + "0" + 4 + " " + day);
                        four = day + " " + "Apr" + " " + year;
                        mEdit1.setText(four);
                    }
                }

                if (month == 5 && day < 10) {
                    mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                    five1 = "0" + day + " " + "May" + " " + year;
                    mEdit1.setText(five1);
                } else {
                    if (month == 5) {
                        mEdit.setText(year + " " + "0" + 5 + " " + day);
                        five = day + " " + "May" + " " + year;
                        mEdit1.setText(five);
                    }
                }

                if (month == 6 && day < 10) {
                    mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                    six1 = "0" + day + " " + "Jun" + " " + year;
                    mEdit1.setText(six1);
                } else {
                    if (month == 6) {
                        mEdit.setText(year + " " + "0" + 6 + " " + day);
                        six = day + " " + "Jun" + " " + year;
                        mEdit1.setText(six);
                    }
                }

                if (month == 7 && day < 10) {
                    mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                    seven1 = "0" + day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven1);
                } else {
                    if (month == 7) {
                        mEdit.setText(year + " " + "0" + 7 + " " + day);
                        seven = day + " " + "Jul" + " " + year;
                        mEdit1.setText(seven);
                    }
                }

                if (month == 8 && day < 10) {
                    mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                    eight1 = "0" + day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight1);
                } else {
                    if (month == 8) {
                        mEdit.setText(year + " " + "0" + 8 + " " + day);
                        eight = day + " " + "Aug" + " " + year;
                        mEdit1.setText(eight);
                    }
                }

                if (month == 9 && day < 10) {
                    mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                    nine1 = "0" + day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine1);
                } else {
                    if (month == 9) {
                        mEdit.setText(year + " " + "0" + 9 + " " + day);
                        nine = day + " " + "Sep" + " " + year;
                        mEdit1.setText(nine);
                    }
                }

                if (month == 10 && day < 10) {
                    mEdit.setText(year + " " + 10 + " " + "0" + day);
                    ten1 = "0" + day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten1);
                } else {
                    if (month == 10) {
                        mEdit.setText(year + " " + 10 + " " + day);
                        ten = day + " " + "Oct" + " " + year;
                        mEdit1.setText(ten);
                    }
                }

                if (month == 11 && day < 10) {
                    mEdit.setText(year + " " + 11 + " " + "0" + day);
                    eleven1 = "0" + day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven1);
                } else {
                    if (month == 11) {
                        mEdit.setText(year + " " + 11 + " " + day);
                        eleven = day + " " + "Nov" + " " + year;
                        mEdit1.setText(eleven);
                    }
                }

                if (month == 12 && day < 10) {
                    mEdit.setText(year + " " + 12 + " " + "0" + day);
                    twelve1 = "0" + day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve1);
                } else {
                    if (month == 12) {
                        mEdit.setText(year + " " + 12 + " " + day);
                        twelve = day + " " + "Dec" + " " + year;
                        mEdit1.setText(twelve);
                    }
                }

            }

        });


        editText22.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
//                Calendar now = Calendar.getInstance();
//                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
//                        datePickerListener,
//                        now.get(Calendar.YEAR),
//                        now.get(Calendar.MONTH),
//                        now.get(Calendar.DAY_OF_MONTH)
//
//
//                );
//
//                dpd.show(getActivity().getFragmentManager(), "Datepickerdialog");
                //if (clickcount == 1){
                Calendar now = Calendar.getInstance();
                DatePickerDialog datePickerDialog = new DatePickerDialog(
                        getActivity(), datePickerListener, now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH));
                datePickerDialog.show();
                clickcount++;
//                }else {
//                    Calendar now = Calendar.getInstance();
//                    com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
//                            datePickerListener, year, month, day
//                    );
//
//                    dpd.show(getActivity().getFragmentManager(), "Datepickerdialog");
//                }

            }

            DatePickerDialog.OnDateSetListener datePickerListener=new DatePickerDialog.OnDateSetListener(){

                @Override
                public void onDateSet(DatePicker datePicker, int selectedYear1, int selectedMonth1, int selectedDay1) {
                    year1 = selectedYear1;
                    month1 = selectedMonth1;
                    day1 = selectedDay1;

                    // set selected date into textview
                    populateSetDate(year1, month1 + 1, day1);
                }

            };

//                // when dialog box is closed, below method will be called.
//                public void onDateSet(DatePicker view, int selectedYear,
//                                      int selectedMonth, int selectedDay) {
//
//
//
//
//                }
//            };


            public void populateSetDate(int year, int month, int day) {
                TextView mEdit = (TextView) rootview.findViewById(R.id.editText2);
                TextView mEdit1  = (TextView)rootview.findViewById(R.id.editText22);
                if (month == 1 && day < 10) {
                    mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                    onee1 = "0" + day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee1);
                } else {
                    if (month == 1) {
                        mEdit.setText(year + " " + "0" + 1 + " " + day);
                        onee = day + " " + "Jan" + " " + year;
                        mEdit1.setText(onee);
                    }
                }

                if (month == 2 && day < 10) {
                    mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                    two1 = "0" + day + " " + "Feb" + " " + year;
                    mEdit1.setText(two1);
                } else {
                    if (month == 2) {
                        mEdit.setText(year + " " + "0" + 2 + " " + day);
                        two = day + " " + "Feb" + " " + year;
                        mEdit1.setText(two);
                    }
                }

                if (month == 3 && day < 10) {
                    mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                    three1 = "0" + day + " " + "Mar" + " " + year;
                    mEdit1.setText(three1);
                } else {
                    if (month == 3) {
                        mEdit.setText(year + " " + "0" + 3 + " " + day);
                        three = day + " " + "Mar" + " " + year;
                        mEdit1.setText(three);
                    }
                }

                if (month == 4 && day < 10) {
                    mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                    four1 = "0" + day + " " + "Apr" + " " + year;
                    mEdit1.setText(four1);
                } else {
                    if (month == 4) {
                        mEdit.setText(year + " " + "0" + 4 + " " + day);
                        four = day + " " + "Apr" + " " + year;
                        mEdit1.setText(four);
                    }
                }

                if (month == 5 && day < 10) {
                    mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                    five1 = "0" + day + " " + "May" + " " + year;
                    mEdit1.setText(five1);
                } else {
                    if (month == 5) {
                        mEdit.setText(year + " " + "0" + 5 + " " + day);
                        five = day + " " + "May" + " " + year;
                        mEdit1.setText(five);
                    }
                }

                if (month == 6 && day < 10) {
                    mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                    six1 = "0" + day + " " + "Jun" + " " + year;
                    mEdit1.setText(six1);
                } else {
                    if (month == 6) {
                        mEdit.setText(year + " " + "0" + 6 + " " + day);
                        six = day + " " + "Jun" + " " + year;
                        mEdit1.setText(six);
                    }
                }

                if (month == 7 && day < 10) {
                    mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                    seven1 = "0" + day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven1);
                } else {
                    if (month == 7) {
                        mEdit.setText(year + " " + "0" + 7 + " " + day);
                        seven = day + " " + "Jul" + " " + year;
                        mEdit1.setText(seven);
                    }
                }

                if (month == 8 && day < 10) {
                    mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                    eight1 = "0" + day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight1);
                } else {
                    if (month == 8) {
                        mEdit.setText(year + " " + "0" + 8 + " " + day);
                        eight = day + " " + "Aug" + " " + year;
                        mEdit1.setText(eight);
                    }
                }

                if (month == 9 && day < 10) {
                    mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                    nine1 = "0" + day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine1);
                } else {
                    if (month == 9) {
                        mEdit.setText(year + " " + "0" + 9 + " " + day);
                        nine = day + " " + "Sep" + " " + year;
                        mEdit1.setText(nine);
                    }
                }

                if (month == 10 && day < 10) {
                    mEdit.setText(year + " " + 10 + " " + "0" + day);
                    ten1 = "0" + day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten1);
                } else {
                    if (month == 10) {
                        mEdit.setText(year + " " + 10 + " " + day);
                        ten = day + " " + "Oct" + " " + year;
                        mEdit1.setText(ten);
                    }
                }

                if (month == 11 && day < 10) {
                    mEdit.setText(year + " " + 11 + " " + "0" + day);
                    eleven1 = "0" + day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven1);
                } else {
                    if (month == 11) {
                        mEdit.setText(year + " " + 11 + " " + day);
                        eleven = day + " " + "Nov" + " " + year;
                        mEdit1.setText(eleven);
                    }
                }

                if (month == 12 && day < 10) {
                    mEdit.setText(year + " " + 12 + " " + "0" + day);
                    twelve1 = "0" + day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve1);
                } else {
                    if (month == 12) {
                        mEdit.setText(year + " " + 12 + " " + day);
                        twelve = day + " " + "Dec" + " " + year;
                        mEdit1.setText(twelve);
                    }
                }

            }

        });

        editText_from_day_visible.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                android.app.TimePickerDialog timePickerDialog = new android.app.TimePickerDialog(getActivity(), R.style.timepicker_date_dialog, timePickerListener_open, hour, minute,
                        false);

                timePickerDialog.show();
            }
        });

        editText_to_day_visible.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                android.app.TimePickerDialog timePickerDialog = new android.app.TimePickerDialog(getActivity(), R.style.timepicker_date_dialog, timePickerListener_close, hour, minute,
                        false);

                timePickerDialog.show();
            }
        });

        db = getActivity().openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);
        db1 = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        db_inapp = getActivity().openOrCreateDatabase("amazoninapp", Context.MODE_PRIVATE, null);

        Cursor cursor_country = db1.rawQuery("SELECT * FROM Country_Selection", null);
        if (cursor_country.moveToFirst()){
            str_country = cursor_country.getString(1);
        }
        cursor_country.close();

        if (str_country.toString().equals("Rupee") || str_country.toString().equals("India")) {
            insert1_cc = "\u20B9";
            insert1_rs = "Rs.";
        }else {
            if (str_country.toString().equals("Pound") || str_country.toString().equals("UK Pound")) {
                insert1_cc = "\u00a3";
                insert1_rs = "BP.";
            }else {
                if (str_country.toString().equals("Euro") || str_country.toString().equals("UK Euro")) {
                    insert1_cc = "\u20ac";
                    insert1_rs = "EU.";
                }else {
                    if (str_country.toString().equals("Dollar")) {
                        insert1_cc = "\u0024";
                        insert1_rs = "\u0024";
                    }else {
                        if (str_country.toString().equals("Dinars")) {
                            insert1_cc = "D";
                            insert1_rs = "KD.";
                        }else {
                            if (str_country.toString().equals("Shilling")) {
                                insert1_cc = "S";
                                insert1_rs = "S.";
                            }else {
                                if (str_country.toString().equals("Ringitt")) {
                                    insert1_cc = "R";
                                    insert1_rs = "RM.";
                                }else {
                                    if (str_country.toString().equals("Rial")) {
                                        insert1_cc = "R";
                                        insert1_rs = "OR.";
                                    }else {
                                        if (str_country.toString().equals("Yen")) {
                                            insert1_cc = "\u00a5";
                                            insert1_rs = "\u00a5";
                                        }else {
                                            if (str_country.toString().equals("Papua New Guinean")) {
                                                insert1_cc = "K";
                                                insert1_rs = "K.";
                                            }else {
                                                if (str_country.toString().equals("UAE")) {
                                                    insert1_cc = "D";
                                                    insert1_rs = "DH.";
                                                }else {
                                                    if (str_country.toString().equals("South African Rand")) {
                                                        insert1_cc = "R";
                                                        insert1_rs = "R.";
                                                    }else {
                                                        if (str_country.toString().equals("Congolese Franc")) {
                                                            insert1_cc = "F";
                                                            insert1_rs = "FC.";
                                                        }else {
                                                            if (str_country.toString().equals("Qatari Riyals")) {
                                                                insert1_cc = "QAR";
                                                                insert1_rs = "QAR.";
                                                            }else {
                                                                if (str_country.toString().equals("Dirhams")) {
                                                                    insert1_cc = "AED";
                                                                    insert1_rs = "AED.";
                                                                }else {
                                                                    if (str_country.toString().equals("Kuwait Dinar")) {
                                                                        insert1_cc = "KWD";
                                                                        insert1_rs = "KWD.";
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

//        TextView inn = (TextView) rootview.findViewById(R.id.inn);
//        TextView inn1 = (TextView) rootview.findViewById(R.id.inn1);
        TextView inn2 = (TextView) rootview.findViewById(R.id.inn2);
        TextView inn3 = (TextView) rootview.findViewById(R.id.inn3);
        TextView inn4 = (TextView) rootview.findViewById(R.id.inn4);
        TextView inn5 = (TextView) rootview.findViewById(R.id.inn5);
        TextView inn6 = (TextView) rootview.findViewById(R.id.inn6);
        TextView inn7 = (TextView) rootview.findViewById(R.id.inn7);
        TextView inn8 = (TextView) rootview.findViewById(R.id.inn8);
        TextView inn9 = (TextView) rootview.findViewById(R.id.inn9);
//        inn.setText(insert1_cc);
//        inn1.setText(insert1_cc);
        inn2.setText(insert1_cc);
        inn3.setText(insert1_cc);
        inn4.setText(insert1_cc);
        inn5.setText(insert1_cc);
        inn6.setText(insert1_cc);
        inn7.setText(insert1_cc);
        inn8.setText(insert1_cc);
        inn9.setText(insert1_cc);

        SimpleDateFormat sdf2_pro = new SimpleDateFormat("yyyyMMdd");
        currentDateandTime1_pro = sdf2_pro.format(new Date());

        tv_inapp = new TextView(getActivity());
        tv_inapp_da = new TextView(getActivity());

        Cursor cursor1_pro = db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
        if (cursor1_pro.moveToFirst()) {
            String st = cursor1_pro.getString(1);
            String st_da = cursor1_pro.getString(3);

            tv_inapp.setText(st);
            tv_inapp_da.setText(st_da);
        }
        cursor1_pro.close();

        Cursor ccornn = db1.rawQuery("SELECT * FROM BTConn", null);
        if (ccornn.moveToFirst()) {
            nameget = ccornn.getString(1);
            addget = ccornn.getString(2);
            statussusb = ccornn.getString(3);
            mEditTarget.setText(addget);
        }
        ccornn.close();

        Cursor time_get = db1.rawQuery("SELECT * FROM Working_hours", null);
        if (time_get.moveToFirst()){
            String two = time_get.getString(2);
            String four = time_get.getString(4);
            String five = time_get.getString(5);
            String six = time_get.getString(6);
            String three = time_get.getString(3);

            editText_from_day_hide.setText(five);
            editText_from_day_visible.setText(two);
            editText_to_day_hide.setText(six);
            editText_to_day_visible.setText(four);

            SimpleDateFormat sdf4 = new SimpleDateFormat("dd MMM yyyy");
            final String currentDateandTime4 = sdf4.format(new Date());
            tv_dateselecter.setText(currentDateandTime2+","+two+" - "+currentDateandTime4+","+four);

            if (three.equals("Tomorrow")) {

                try {
//                    String string1 = five;
                    Date time1 = new SimpleDateFormat("HH:mm",Locale.US).parse(five);
                    Calendar calendar1 = Calendar.getInstance();
                    calendar1.add(Calendar.DAY_OF_YEAR, 0);
                    calendar1.setTime(time1);

                    String string2 = "23:59";
                    Date time2 = new SimpleDateFormat("HH:mm",Locale.US).parse(string2);
                    Calendar calendar2 = Calendar.getInstance();
                    calendar2.setTime(time2);

                    String string1_new = "00:00";
                    Date time1_new = new SimpleDateFormat("HH:mm",Locale.US).parse(string1_new);
                    Calendar calendar1_new = Calendar.getInstance();
                    calendar1_new.setTime(time1_new);
                    calendar1_new.add(Calendar.DATE, 1);

//                    String string2_new = five;
                    Date time2_new = new SimpleDateFormat("HH:mm",Locale.US).parse(five);
                    Calendar calendar2_new = Calendar.getInstance();
                    calendar2_new.setTime(time2_new);
                    calendar2_new.add(Calendar.DATE, 1);


//                    String someRandomTime = time_hide;
                    Date d = new SimpleDateFormat("HH:mm",Locale.US).parse(time_hide);
                    Calendar calendar3 = Calendar.getInstance();
                    calendar3.setTime(d);
//                    calendar3.add(Calendar.DATE, 1);

//                    String someRandomTime_new = time_hide;
                    Date d_new = new SimpleDateFormat("HH:mm",Locale.US).parse(time_hide);
                    Calendar calendar3_new = Calendar.getInstance();
                    calendar3_new.setTime(d_new);
                    calendar3_new.add(Calendar.DATE, 1);

                    Date x = calendar3.getTime();
                    Date x_new = calendar3_new.getTime();
                    if ((x.after(calendar1.getTime()) && x.before(calendar2.getTime())) || (x_new.after(calendar1_new.getTime()) && x_new.before(calendar2_new.getTime()))) {
                        //checkes whether the current time is between 14:49:00 and 20:11:13.
                        System.out.println(true);
//                    Toast.makeText(getActivity(),"yes", Toast.LENGTH_SHORT).show();
//                    Toast.makeText(getActivity(),"time is "+time_hide, Toast.LENGTH_SHORT).show();


                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy",Locale.US);
                        String yesterday_visible = dateFormat.format(yesterday);

                        SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyyMMdd",Locale.US);
                        String yesterday_hide = dateFormat1.format(yesterday);


                        SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd MMM yyyy",Locale.US);
                        String tomorrow_visible = dateFormat2.format(tomorrow);

                        SimpleDateFormat dateFormat3 = new SimpleDateFormat("yyyyMMdd",Locale.US);
                        String tomorrow_hide = dateFormat3.format(tomorrow);

                        if ((x.after(calendar1.getTime()) && x.before(calendar2.getTime()))) {
                            editText11.setText(currentDateandTime2);
                            editText22.setText(tomorrow_visible);

                            editText1.setText(currentDateandTime1);
                            editText2.setText(tomorrow_hide);
                        }
                        if ((x_new.after(calendar1_new.getTime()) && x_new.before(calendar2_new.getTime()))) {
                            editText11.setText(yesterday_visible);
                            editText22.setText(currentDateandTime2);

                            editText1.setText(yesterday_hide);
                            editText2.setText(currentDateandTime1);
                        }


                    } else {
//                    Toast.makeText(getActivity(),"no", Toast.LENGTH_SHORT).show();
//                    Toast.makeText(getActivity(),"time is "+time_hide, Toast.LENGTH_SHORT).show();

                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy",Locale.US);
                        String tomorrow_visible = dateFormat.format(tomorrow);

                        SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyyMMdd",Locale.US);
                        String tomorrow_hide = dateFormat1.format(tomorrow);

                        editText11.setText(currentDateandTime2);
                        editText22.setText(tomorrow_visible);

                        editText1.setText(currentDateandTime1);
                        editText2.setText(tomorrow_hide);

                    }
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            }


            if (five.contains(":")){
                five = five.replace(":", "");
            }

            if (six.contains(":")){
                six = six.replace(":", "");
            }

            String r1, r2;
            r1 = editText1.getText().toString();
            r2 = editText2.getText().toString();
            if (r1.contains(" ")){
                r1 = r1.replace(" ", "");
            }
            if (r2.contains(" ")){
                r2 = r2.replace(" ", "");
            }

            editText1_filter.setText(r1+""+five);
            editText2_filter.setText(r2+""+six);

        }
        time_get.close();


        date1 = editText1_filter.getText().toString();
        date2 = editText2_filter.getText().toString();



        if (date1.length() == 11) {
//            Toast.makeText(getActivity(), "11 "+date1, Toast.LENGTH_LONG).show();
//            Toast.makeText(getActivity(), "11 "+date1, Toast.LENGTH_LONG).show();
            String onetoeight = date1.substring(0, 11);
            date1 = onetoeight + "1";
        }else {
//            Toast.makeText(getActivity(), "12 "+date1, Toast.LENGTH_LONG).show();
//            Toast.makeText(getActivity(), "12 "+date1, Toast.LENGTH_LONG).show();
        }

//        Toast.makeText(getActivity(), "new "+date1, Toast.LENGTH_LONG).show();
//        Toast.makeText(getActivity(), "new "+date1, Toast.LENGTH_LONG).show();




        String cgt1 = "0";
        int cgt2;
        Cursor cgt = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
        if (cgt.moveToFirst()) {
            cgt2 = cgt.getInt(0);
            cgt1 = String.valueOf(cgt2);
        }
        cgt.close();

        TextView cgt3 = new TextView(getActivity());
        cgt3.setText(cgt1);
        if (cgt3.getText().toString().equals("0")){
            mChart.setVisibility(View.GONE);
        }else {
            mChart.setVisibility(View.VISIBLE);
            String year1_check = date1.substring(0, 4);
            String year2_check = date2.substring(0, 4);
            if (year1_check.equals(year2_check)) {

                String month1_check = date1.substring(4, 6);
                String month2_check = date2.substring(4, 6);

                if (month1_check.equals(month2_check)) {


                    String date1_check = date1.substring(6, 8);
                    String date2_check = date2.substring(6, 8);

                    if (date1_check.equals(date2_check)) {


                        date1_filter = date1.substring(0, 8);
                        date2_filter = date2.substring(0, 8);

                        date1_end = date1.substring(8, 10);
                        date2_end = date2.substring(8, 10);

                        final ArrayList<String> xLabel = new ArrayList<>();

//                            int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
//                            if (diff<=0){
//                                diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
//                            }

                        // or use some other logic to save your data in list. For ex.
                        for (int i = 1; i <= 24; i++) {
                            xLabel.add("" + i + ":00");
                        }

                        IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                        XAxis xAxis = mChart.getXAxis();
                        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                    xAxis.setTypeface(mTfLight);
                        xAxis.setDrawGridLines(false);
                        xAxis.setGranularity(1f); // only intervals of 1 day
                        //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                        xAxis.setValueFormatter(new IAxisValueFormatter() {
                            @Override
                            public String getFormattedValue(float value, AxisBase axis) {
                                return xLabel.get((int) value);
                            }
                        });


                        IAxisValueFormatter custom = new MyAxisValueFormatter();

                        YAxis leftAxis = mChart.getAxisLeft();
//                    leftAxis.setTypeface(mTfLight);
                        //leftAxis.setLabelCount(6, false);
                        leftAxis.setValueFormatter(custom);
                        leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                        leftAxis.setSpaceTop(15f);
                        leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                        YAxis rightAxis = mChart.getAxisRight();
                        rightAxis.setEnabled(false);
                        rightAxis.setDrawGridLines(false);
//                    rightAxis.setTypeface(mTfLight);
                        //rightAxis.setLabelCount(6, false);
                        rightAxis.setValueFormatter(custom);
                        rightAxis.setSpaceTop(15f);
                        rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                        Legend l = mChart.getLegend();
                        l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                        l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                        l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                        l.setDrawInside(false);
                        l.setForm(Legend.LegendForm.SQUARE);
                        l.setFormSize(9f);
                        l.setTextSize(11f);
                        l.setXEntrySpace(4f);
                        // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                        // "def", "ghj", "ikl", "mno" });
                        // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                        // "def", "ghj", "ikl", "mno" });

                        XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                        mv.setChartView(mChart); // For bounds control
                        mChart.setMarker(mv); // Set the marker to the chart
                        //mChart.notifyDataSetChanged();

                        float max_sale = 3500;


                        setData_day(24, max_sale);


                    } else {
//                    Toast.makeText(getActivity(), "hi1", Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "hi2", Toast.LENGTH_LONG).show();
                        date1_end = date1.substring(8, 12);
                        date2_end = date2.substring(8, 12);

//                    int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

                        final ArrayList<String> xLabel = new ArrayList<>();

                        String mon = "";
                        String month = date1.substring(4, 6);
                        if (month.equals("01") || month.equals("1")) {
                            mon = "Jan";
                        }
                        if (month.equals("02") || month.equals("2")) {
                            mon = "Feb";
                        }
                        if (month.equals("03") || month.equals("3")) {
                            mon = "Mar";
                        }
                        if (month.equals("04") || month.equals("4")) {
                            mon = "Apr";
                        }
                        if (month.equals("05") || month.equals("5")) {
                            mon = "May";
                        }
                        if (month.equals("06") || month.equals("6")) {
                            mon = "Jun";
                        }
                        if (month.equals("07") || month.equals("7")) {
//                        Toast.makeText(getActivity(), "month is1 "+month, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "month is2 "+month, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "month is3 "+month, Toast.LENGTH_LONG).show();
                            mon = "Jul";
                        }
                        if (month.equals("08") || month.equals("8")) {
                            mon = "Aug";
                        }
                        if (month.equals("09") || month.equals("9")) {
                            mon = "Sep";
                        }
                        if (month.equals("10") || month.equals("10")) {
                            mon = "Oct";
                        }
                        if (month.equals("11") || month.equals("11")) {
                            mon = "Nov";
                        }
                        if (month.equals("12") || month.equals("12")) {
                            mon = "Dec";
                        }

                        int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
                        if (diff <= 0) {
                            diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                        }

                        for (int i = 1; i <= diff; i++) {
                            int j = i - 1;
                            xLabel.add("" + j + "-" + mon);
                        }

                        IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                        XAxis xAxis = mChart.getXAxis();
                        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                    xAxis.setTypeface(mTfLight);
                        xAxis.setDrawGridLines(false);
                        xAxis.setGranularity(1f); // only intervals of 1 day
                        //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                        xAxis.setValueFormatter(new IAxisValueFormatter() {
                            @Override
                            public String getFormattedValue(float value, AxisBase axis) {
                                return xLabel.get((int) value);
                            }
                        });


                        IAxisValueFormatter custom = new MyAxisValueFormatter();

                        YAxis leftAxis = mChart.getAxisLeft();
//                    leftAxis.setTypeface(mTfLight);
                        //leftAxis.setLabelCount(6, false);
                        leftAxis.setValueFormatter(custom);
                        leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                        leftAxis.setSpaceTop(15f);
                        leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                        YAxis rightAxis = mChart.getAxisRight();
                        rightAxis.setEnabled(false);
                        rightAxis.setDrawGridLines(false);
//                    rightAxis.setTypeface(mTfLight);
                        //rightAxis.setLabelCount(6, false);
                        rightAxis.setValueFormatter(custom);
                        rightAxis.setSpaceTop(15f);
                        rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                        Legend l = mChart.getLegend();
                        l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                        l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                        l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                        l.setDrawInside(false);
                        l.setForm(Legend.LegendForm.SQUARE);
                        l.setFormSize(9f);
                        l.setTextSize(11f);
                        l.setXEntrySpace(4f);
                        // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                        // "def", "ghj", "ikl", "mno" });
                        // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                        // "def", "ghj", "ikl", "mno" });

                        XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                        mv.setChartView(mChart); // For bounds control
                        mChart.setMarker(mv); // Set the marker to the chart
                        // mChart.notifyDataSetChanged();

                        float max_sale = 3500;


                        setData_date(diff, max_sale);
                    }
                } else {
                    date1_end = date1.substring(8, 12);
                    date2_end = date2.substring(8, 12);

                    date1_filter_month_2 = date1.substring(4, 6);
                    date2_filter_month_2 = date2.substring(4, 6);

                    int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
                    if (diff <= 0) {
                        diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                    }

                    final ArrayList<String> xLabel = new ArrayList<>();

                    String year = date1.substring(0, 4);
                    for (int i = 1; i <= diff; i++) {
                        int j = i - 1;
                        xLabel.add("" + j + "-" + year);

                    }

                    IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                    XAxis xAxis = mChart.getXAxis();
                    xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                xAxis.setTypeface(mTfLight);
                    xAxis.setDrawGridLines(false);
                    xAxis.setGranularity(1f); // only intervals of 1 day
                    //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                    xAxis.setValueFormatter(new IAxisValueFormatter() {
                        @Override
                        public String getFormattedValue(float value, AxisBase axis) {
                            return xLabel.get((int) value);
                        }
                    });


                    IAxisValueFormatter custom = new MyAxisValueFormatter();

                    YAxis leftAxis = mChart.getAxisLeft();
//                leftAxis.setTypeface(mTfLight);
                    //leftAxis.setLabelCount(6, false);
                    leftAxis.setValueFormatter(custom);
                    leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                    leftAxis.setSpaceTop(15f);
                    leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                    YAxis rightAxis = mChart.getAxisRight();
                    rightAxis.setEnabled(false);
                    rightAxis.setDrawGridLines(false);
//                rightAxis.setTypeface(mTfLight);
                    //rightAxis.setLabelCount(6, false);
                    rightAxis.setValueFormatter(custom);
                    rightAxis.setSpaceTop(15f);
                    rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                    Legend l = mChart.getLegend();
                    l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                    l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                    l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                    l.setDrawInside(false);
                    l.setForm(Legend.LegendForm.SQUARE);
                    l.setFormSize(9f);
                    l.setTextSize(11f);
                    l.setXEntrySpace(4f);
                    // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                    // "def", "ghj", "ikl", "mno" });
                    // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                    // "def", "ghj", "ikl", "mno" });

                    XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                    mv.setChartView(mChart); // For bounds control
                    mChart.setMarker(mv); // Set the marker to the chart
                    // mChart.notifyDataSetChanged();

                    float max_sale = 3500;


                    setData_month(diff, max_sale);
                }
            } else {
                date1_end = date1.substring(8, 12);
                date2_end = date2.substring(8, 12);

                date1_filter_month_2 = date1.substring(4, 6);
                date2_filter_month_2 = date2.substring(4, 6);

                int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

                if (diff <= 0) {
                    diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                }

                final ArrayList<String> xLabel = new ArrayList<>();

                String year = date1.substring(0, 2);
                for (int i = 1; i <= diff; i++) {
                    int j = i - 1;
                    if (j <= 9) {
                        xLabel.add(year + "" + "0" + j);
                    } else {
                        xLabel.add(year + "" + j);
                    }
                }

                IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                XAxis xAxis = mChart.getXAxis();
                xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//            xAxis.setTypeface(mTfLight);
                xAxis.setDrawGridLines(false);
                xAxis.setGranularity(1f); // only intervals of 1 day
                //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                xAxis.setValueFormatter(new IAxisValueFormatter() {
                    @Override
                    public String getFormattedValue(float value, AxisBase axis) {
                        return xLabel.get((int) value);
                    }
                });


                IAxisValueFormatter custom = new MyAxisValueFormatter();

                YAxis leftAxis = mChart.getAxisLeft();
//            leftAxis.setTypeface(mTfLight);
                //leftAxis.setLabelCount(6, false);
                leftAxis.setValueFormatter(custom);
                leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                leftAxis.setSpaceTop(15f);
                leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                YAxis rightAxis = mChart.getAxisRight();
                rightAxis.setEnabled(false);
                rightAxis.setDrawGridLines(false);
//            rightAxis.setTypeface(mTfLight);
                //rightAxis.setLabelCount(6, false);
                rightAxis.setValueFormatter(custom);
                rightAxis.setSpaceTop(15f);
                rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                Legend l = mChart.getLegend();
                l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                l.setDrawInside(false);
                l.setForm(Legend.LegendForm.SQUARE);
                l.setFormSize(9f);
                l.setTextSize(11f);
                l.setXEntrySpace(4f);
                // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                // "def", "ghj", "ikl", "mno" });
                // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                // "def", "ghj", "ikl", "mno" });

                XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                mv.setChartView(mChart); // For bounds control
                mChart.setMarker(mv); // Set the marker to the chart
                // mChart.notifyDataSetChanged();

                float max_sale = 3500;


                setData_year(diff, max_sale);
            }
        }

        Cursor cc = db.rawQuery("SELECT * FROM Discountdetails", null);
        if (cc.moveToFirst()){
            do {
                String idv = cc.getString(0);
                String billnoo = cc.getString(3);
                Cursor cc1 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoo+"'", null);
                if (cc1.moveToFirst()){
                    String bic = cc1.getString(11);

                    ContentValues contentValuesh1 = new ContentValues();
                    contentValuesh1.put("billcount", bic);
                    String whereh1 = "_id = '" +idv+ "' ";
                    db.update("Discountdetails", contentValuesh1, whereh1, new String[]{});
                }
                cc1.close();
            }while (cc.moveToNext());
        }
        cc.close();


        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
        if (cursor11.moveToFirst()) {
            level = cursor11.getInt(0);
            total = String.valueOf(level);
        }
        cursor11.close();
//                Toast.makeText(getActivity(), " sum is "+total, Toast.LENGTH_SHORT).show();
        totalsales.setText(insert1_cc);
        totalsales.append(total);
        totalsales_r.setText(total);

        float taxtot = 0, tot1 = 0;
        Cursor cursor2 = db.rawQuery("SELECT SUM(taxtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
        if (cursor2.moveToFirst()){
            taxtot = cursor2.getFloat(0);
            tax_total = String.format(Locale.US,"%.0f", taxtot);
        }
        cursor2.close();
        tax_value.setText(tax_total);

//                Toast.makeText(getActivity(), " sum is "+total, Toast.LENGTH_SHORT).show();

        Cursor count = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
        if (count.moveToFirst()) {
            level = count.getInt(0);
            total1 = String.valueOf(level);

            noofbills.setText(total1);
        }
        count.close();


        if (total1.equals("0")){
            avgsales.setText(insert1_cc);
            avgsales.append("0");
            avgsales_r.setText("0");
        }else {
            avgsales.setText(insert1_cc);
            avgbill = String.valueOf(Integer.parseInt(total) / Integer.parseInt(total1));
            avgsales.append(avgbill);
            avgsales_r.setText(avgbill);
        }

        Cursor cashcardcash= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Cash' ", null);
        if (cashcardcash.moveToFirst()) {
            level111 = cashcardcash.getInt(0);
            total111 = String.valueOf(level111);
        }
        cashcardcash.close();

        final Cursor cashcardcard= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Card' ", null);
        if (cashcardcard.moveToFirst()) {
            level111card = cashcardcard.getInt(0);
            total111card = String.valueOf(level111card);
        }
        cashcardcard.close();

        final Cursor paytm= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Paytm' ", null);
        if (paytm.moveToFirst()) {
            level111paytm = paytm.getInt(0);
            total111paytm = String.valueOf(level111paytm);
        }
        paytm.close();
        final Cursor mobikwik= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Mobikwik' ", null);
        if (mobikwik.moveToFirst()) {
            level111mobi = mobikwik.getInt(0);
            total111mobi = String.valueOf(level111mobi);
        }
        mobikwik.close();
        final Cursor freecharge= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Freecharge' ", null);
        if (freecharge.moveToFirst()) {
            level111free = freecharge.getInt(0);
            total111free = String.valueOf(level111free);
        }
        freecharge.close();
        final Cursor sodexo= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Sodexo' ", null);
        if (sodexo.moveToFirst()) {
            level111sodexo = sodexo.getInt(0);
            total111sodexo = String.valueOf(level111sodexo);
        }
        sodexo.close();
        final Cursor zeta= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Zeta' ", null);
        if (zeta.moveToFirst()) {
            level111zeta = zeta.getInt(0);
            total111zeta = String.valueOf(level111zeta);
        }
        zeta.close();
        final Cursor ticket= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Ticket' ", null);
        if (ticket.moveToFirst()) {
            level111ticket = ticket.getInt(0);
            total111ticket = String.valueOf(level111ticket);
        }
        ticket.close();
        final Cursor cheque= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Cheque' ", null);
        if (cheque.moveToFirst()) {
            level111cheq = cheque.getInt(0);
            total111cheq = String.valueOf(level111cheq);
        }
        cheque.close();


        Cursor upiqr= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Upiqr' ", null);
        if (upiqr.moveToFirst()) {
            levelupi = upiqr.getInt(0);
            totalupi = String.valueOf(levelupi);
        }
        upiqr.close();




        final Cursor credit= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Pay Later' ", null);
        if (credit.moveToFirst()) {
            level111cred = credit.getInt(0);
            total111credit = String.valueOf(level111cred);
        }
        credit.close();
        //Cheque above

        Cursor dinein = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  General' ", null);
        if (dinein.moveToFirst()){
            dineinsales = dinein.getInt(0);
            dineinsalesstr = String.valueOf(dineinsales);
        }
        dinein.close();

        Cursor takeaway = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  Takeaway' ", null);
        if (takeaway.moveToFirst()){
            takeawaysales = takeaway.getInt(0);
            takeawaysalesstr = String.valueOf(takeawaysales);
        }
        takeaway.close();

        Cursor homedelivery = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  Home delivery' ", null);
        if (homedelivery.moveToFirst()){
            homedeliverysales = homedelivery.getInt(0);
            homedeliverysalesstr = String.valueOf(homedeliverysales);
        }
        homedelivery.close();


        Cursor creditsales = db.rawQuery("SELECT SUM(credit) FROM Customerdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND credit != ''", null);
        if (creditsales.moveToFirst()){
            int homedeliverysales = creditsales.getInt(0);
            totaal1credit = String.valueOf(homedeliverysales);


            float value = (Float.parseFloat(totaal1credit) / Float.parseFloat(total))* 100 ;
            totaal1credit_percent = String.format(Locale.US,"%.1f", value);

        }
        creditsales.close();

        cashcardcashsales.setText(insert1_cc);
        cashcardcardsales.setText(insert1_cc);
        paytmwalletsales1.setText(insert1_cc);
        mobikwiksales1.setText(insert1_cc);
        freechargesales1.setText(insert1_cc);
        sodexosales1.setText(insert1_cc);
        zetasales1.setText(insert1_cc);
        ticketsales1.setText(insert1_cc);
        chequesales1.setText(insert1_cc);
        creditsales1.setText(insert1_cc);
        upiqrsales1.setText(insert1_cc);

        cashcardcashsales.append(total111);
        cashcardcardsales.append(total111card);
        paytmwalletsales1.append(total111paytm);
        mobikwiksales1.append(total111mobi);
        freechargesales1.append(total111free);
        sodexosales1.append(total111sodexo);
        zetasales1.append(total111zeta);
        ticketsales1.append(total111ticket);
        chequesales1.append(total111cheq);

        float va_cre = Float.parseFloat(total111credit);
//        creditsales1.append(String.valueOf(Math.abs(va_cre)));
        creditsales1.append(String.format("%.0f", va_cre));
        upiqrsales1.append(totalupi);


        float value1 = Float.parseFloat(total111)*100 / Float.parseFloat(total);
        String ruppercent1 = String.format(Locale.US,"%.1f", value1);
        cashcardcashsalespercent.setText(String.valueOf(ruppercent1));
        cashcardcashsalespercent.append("%");

        float value2 = Float.parseFloat(total111card)*100 / Float.parseFloat(total);
        //String ruppercent = String.format("%.1f", value);
        String ruppercent2 = String.format(Locale.US,"%.1f", value2);
        cashcardcardsalespercent.setText(String.valueOf(ruppercent2));
        cashcardcardsalespercent.append("%");

        float valuee11 = Float.parseFloat(total111paytm)*100 / Float.parseFloat(total);
        String ruppercentt11 = String.format(Locale.US,"%.1f", valuee11);
        paytmsales1percent.setText(String.valueOf(ruppercentt11));
        paytmsales1percent.append("%");

        float value111 = Float.parseFloat(total111mobi)*100 / Float.parseFloat(total);
        String ruppercent111 = String.format(Locale.US,"%.1f", value111);
        mobikwiksales1percent.setText(String.valueOf(ruppercent111));
        mobikwiksales1percent.append("%");

        float value1111 = Float.parseFloat(total111free)*100 / Float.parseFloat(total);
        String ruppercent1111 = String.format(Locale.US,"%.1f", value1111);
        freechargesales1percent.setText(String.valueOf(ruppercent1111));
        freechargesales1percent.append("%");

        float valueV = Float.parseFloat(total111sodexo)*100 / Float.parseFloat(total);
        String ruppercentV = String.format(Locale.US,"%.1f", valueV);
        sodexosales1percent.setText(String.valueOf(ruppercentV));
        sodexosales1percent.append("%");

        float valueVI = Float.parseFloat(total111zeta)*100 / Float.parseFloat(total);
        String ruppercentVI = String.format(Locale.US,"%.1f", valueVI);
        zetasales1percent.setText(String.valueOf(ruppercentVI));
        zetasales1percent.append("%");

        float valueV11 = Float.parseFloat(total111ticket)*100 / Float.parseFloat(total);
        String ruppercentV11 = String.format(Locale.US,"%.1f", valueV11);
        ticketsales1percent.setText(String.valueOf(ruppercentV11));
        ticketsales1percent.append("%");

        float valueV111 = Float.parseFloat(total111cheq)*100 / Float.parseFloat(total);
        String ruppercentV111 = String.format(Locale.US,"%.1f", valueV111);
        chequesales1percent.setText(String.valueOf(ruppercentV111));
        chequesales1percent.append("%");

        float valueix = Float.parseFloat(total111credit)*100 / Float.parseFloat(total);
        String ruppercentix = String.format(Locale.US,"%.1f", valueix);
        creditsales1percent.setText(String.valueOf(ruppercentix));
        creditsales1percent.append("%");




        float valueeupi = Float.parseFloat(totalupi)*100 / Float.parseFloat(total);
        String ruppercentt11upi = String.format(Locale.US,"%.1f", valueeupi);
        upiqrsales1percent.setText(String.valueOf(ruppercentt11upi));
        upiqrsales1percent.append("%");

//        if (total.toString().equals("0")){
//            cashcardcashsalespercent.setText("0");
//            cashcardcashsalespercent.append("%");
//            cashcardcardsalespercent.setText("0");
//            cashcardcardsalespercent.append("%");
//        }else {
//            float value1 = Float.parseFloat(total111)*100 / Float.parseFloat(total);
//            String ruppercent1 = String.format(Locale.US,"%.1f", value1);
//            cashcardcashsalespercent.setText(String.valueOf(ruppercent1));
//            cashcardcashsalespercent.append("%");
//
//            float value2 = Float.parseFloat(total111card)*100 / Float.parseFloat(total);
//            //String ruppercent = String.format("%.1f", value);
//            String ruppercent2 = String.format(Locale.US,"%.1f", value2);
//            cashcardcardsalespercent.setText(String.valueOf(ruppercent2));
//            cashcardcardsalespercent.append("%");
//        }

        creditsales1.setText(insert1_cc);
        float va_cre1 = Float.parseFloat(totaal1credit);
//        creditsales1.append(String.valueOf(Math.abs(va_cre1)));
        creditsales1.append(String.format("%.0f", va_cre1));

        float va_cre_per = Float.parseFloat(totaal1credit_percent);
        creditsalespercent.setText(String.valueOf(Math.abs(va_cre_per)));
        creditsalespercent.append("%");

        fourdinein.setText(insert1_cc);
        fourdinein.append(dineinsalesstr);

        fourtakeaway.setText(insert1_cc);
        fourtakeaway.append(takeawaysalesstr);

        fourhomedelivery.setText(insert1_cc);
        fourhomedelivery.append(homedeliverysalesstr);

        float value = Float.parseFloat(dineinsalesstr)*100/Float.parseFloat(total);
        String ruppercent = String.format(Locale.US,"%.1f", value);
        fourdineinpercent.setText(String.valueOf(ruppercent));
        fourdineinpercent.append("%");

//        if (Integer.parseInt(total) == 0){
//
//        }else {
//            float value = Float.parseFloat(dineinsalesstr)*100/Float.parseFloat(total);
//            String ruppercent = String.format(Locale.US,"%.1f", value);
//            fourdineinpercent.setText(String.valueOf(ruppercent));
//            fourdineinpercent.append("%");
//        }

        value1 = Float.parseFloat(takeawaysalesstr)*100 / Float.parseFloat(total);
        ruppercent1 = String.format(Locale.US,"%.1f", value1);
        fourtakeawaypercent.setText(String.valueOf(ruppercent1));
        fourtakeawaypercent.append("%");

//        if (Integer.parseInt(total) == 0){
//
//        }else {
//            float value1 = Float.parseFloat(takeawaysalesstr)*100 / Float.parseFloat(total);
//            String ruppercent1 = String.format(Locale.US,"%.1f", value1);
//            fourtakeawaypercent.setText(String.valueOf(ruppercent1));
//            fourtakeawaypercent.append("%");
//        }

        value2 = Float.parseFloat(homedeliverysalesstr)*100 / Float.parseFloat(total);
        ruppercent2 = String.format(Locale.US,"%.1f", value2);
        fourhomedeliverypercent.setText(String.valueOf(ruppercent2));
        fourhomedeliverypercent.append("%");

//        if (Integer.parseInt(total) == 0){
//
//        }else {
//            float value2 = Float.parseFloat(homedeliverysalesstr)*100 / Float.parseFloat(total);
//            String ruppercent2 = String.format(Locale.US,"%.1f", value2);
//            fourhomedeliverypercent.setText(String.valueOf(ruppercent2));
//            fourhomedeliverypercent.append("%");
//        }

        miniprint_orderlist1 = (FloatingActionButton) rootview.findViewById(R.id.print_ministatement);

        proceed_button = (RelativeLayout) rootview.findViewById(R.id.proceed_button);
        rela = (LinearLayout) rootview.findViewById(R.id.rela);

        DownloadMusicfromInternet_new downloadMusicfromInternet_new = new DownloadMusicfromInternet_new();
        try {
            downloadMusicfromInternet_new.execute();
            //
        } catch (Exception e) {
            downloadMusicfromInternet_new.cancel(true);
            e.printStackTrace();
        }

//        new Handler().postDelayed(new Runnable() {
//
//            /*
//             * Showing splash screen with a timer. This will be useful when you
//             * want to show case your app logo / company
//             */
//
//            @Override
//            public void run() {
//                // This method will be executed once the timer is over
//                // Start your app main activity
//                DownloadMusicfromInternet_new downloadMusicfromInternet_new = new DownloadMusicfromInternet_new();
//                try {
//                    downloadMusicfromInternet_new.execute();
//                  //
//                } catch (Exception e) {
//                    downloadMusicfromInternet_new.cancel(true);
//                    e.printStackTrace();
//                }
//            }
//        }, 2000);






        btnok.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mChart.setVisibility(View.GONE);
                proceed_button.setVisibility(View.VISIBLE);
                rela.setVisibility(View.GONE);
                miniprint_orderlist1.setVisibility(View.GONE);

//                proceed_button.setVisibility(View.GONE);
//                rela.setVisibility(View.VISIBLE);
                String r1, r2, r3, r4;
                r1 = editText1.getText().toString();
                r2 = editText2.getText().toString();
                if (r1.contains(" ")){
                    r1 = r1.replace(" ", "");
                }
                if (r2.contains(" ")){
                    r2 = r2.replace(" ", "");
                }

                r3 = editText_from_day_hide.getText().toString();
                r4 = editText_to_day_hide.getText().toString();
                if (r3.contains(":")){
                    r3 = r3.replace(":", "");
                }
                if (r4.contains(":")){
                    r4 = r4.replace(":", "");
                }

                editText1_filter.setText(r1+""+r3);
                editText2_filter.setText(r2+""+r4);


                date1 = editText1_filter.getText().toString();
                date2 = editText2_filter.getText().toString();

                if (date1.length() == 11) {
//                    Toast.makeText(getActivity(), "11 "+date1, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "11 "+date1, Toast.LENGTH_LONG).show();
                    String onetoeight = date1.substring(0, 11);
                    date1 = onetoeight + "1";
                }else {
//                    Toast.makeText(getActivity(), "12 "+date1, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "12 "+date1, Toast.LENGTH_LONG).show();
                }

//                Toast.makeText(getActivity(), "new "+date1, Toast.LENGTH_LONG).show();
//                Toast.makeText(getActivity(), "new "+date1, Toast.LENGTH_LONG).show();


                String cgt1 = "0";
                int cgt2;
                Cursor cgt = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cgt.moveToFirst()) {
                    cgt2 = cgt.getInt(0);
                    cgt1 = String.valueOf(cgt2);
                }
                cgt.close();

                TextView cgt3 = new TextView(getActivity());
                cgt3.setText(cgt1);
                if (cgt3.getText().toString().equals("0")){
                    mChart.setVisibility(View.GONE);
                }else {
                    mChart.setVisibility(View.VISIBLE);
                    String year1_check = date1.substring(0, 4);
                    String year2_check = date2.substring(0, 4);
                    if (year1_check.equals(year2_check)) {

                        String month1_check = date1.substring(4, 6);
                        String month2_check = date2.substring(4, 6);

                        if (month1_check.equals(month2_check)) {


                            String date1_check = date1.substring(6, 8);
                            String date2_check = date2.substring(6, 8);

                            if (date1_check.equals(date2_check)) {


                                date1_filter = date1.substring(0, 8);
                                date2_filter = date2.substring(0, 8);

                                date1_end = date1.substring(8, 10);
                                date2_end = date2.substring(8, 10);

                                final ArrayList<String> xLabel = new ArrayList<>();

//                            int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
//                            if (diff<=0){
//                                diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
//                            }

                                // or use some other logic to save your data in list. For ex.
                                for (int i = 1; i <= 24; i++) {
                                    xLabel.add("" + i + ":00");
                                }

                                IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                                XAxis xAxis = mChart.getXAxis();
                                xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                    xAxis.setTypeface(mTfLight);
                                xAxis.setDrawGridLines(false);
                                xAxis.setGranularity(1f); // only intervals of 1 day
                                //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                                xAxis.setValueFormatter(new IAxisValueFormatter() {
                                    @Override
                                    public String getFormattedValue(float value, AxisBase axis) {
                                        return xLabel.get((int) value);
                                    }
                                });


                                IAxisValueFormatter custom = new MyAxisValueFormatter();

                                YAxis leftAxis = mChart.getAxisLeft();
//                    leftAxis.setTypeface(mTfLight);
                                //leftAxis.setLabelCount(6, false);
                                leftAxis.setValueFormatter(custom);
                                leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                                leftAxis.setSpaceTop(15f);
                                leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                YAxis rightAxis = mChart.getAxisRight();
                                rightAxis.setEnabled(false);
                                rightAxis.setDrawGridLines(false);
//                    rightAxis.setTypeface(mTfLight);
                                //rightAxis.setLabelCount(6, false);
                                rightAxis.setValueFormatter(custom);
                                rightAxis.setSpaceTop(15f);
                                rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                Legend l = mChart.getLegend();
                                l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                                l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                                l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                                l.setDrawInside(false);
                                l.setForm(Legend.LegendForm.SQUARE);
                                l.setFormSize(9f);
                                l.setTextSize(11f);
                                l.setXEntrySpace(4f);
                                // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                // "def", "ghj", "ikl", "mno" });
                                // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                // "def", "ghj", "ikl", "mno" });

                                XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                                mv.setChartView(mChart); // For bounds control
                                mChart.setMarker(mv); // Set the marker to the chart
                                // mChart.notifyDataSetChanged();

                                float max_sale = 3500;


                                setData_day(24, max_sale);


                            } else {
//                            Toast.makeText(getActivity(), "hi1", Toast.LENGTH_LONG).show();
//                            Toast.makeText(getActivity(), "hi2", Toast.LENGTH_LONG).show();
                                date1_end = date1.substring(8, 12);
                                date2_end = date2.substring(8, 12);

//                            int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

                                final ArrayList<String> xLabel = new ArrayList<>();

                                String mon = "";
                                String month = date1.substring(4, 6);
                                if (month.equals("01") || month.equals("1")) {
                                    mon = "Jan";
                                }
                                if (month.equals("02") || month.equals("2")) {
                                    mon = "Feb";
                                }
                                if (month.equals("03") || month.equals("3")) {
                                    mon = "Mar";
                                }
                                if (month.equals("04") || month.equals("4")) {
                                    mon = "Apr";
                                }
                                if (month.equals("05") || month.equals("5")) {
                                    mon = "May";
                                }
                                if (month.equals("06") || month.equals("6")) {
                                    mon = "Jun";
                                }
                                if (month.equals("07") || month.equals("7")) {
//                                Toast.makeText(getActivity(), "month is1 "+month, Toast.LENGTH_LONG).show();
//                                Toast.makeText(getActivity(), "month is2 "+month, Toast.LENGTH_LONG).show();
//                                Toast.makeText(getActivity(), "month is3 "+month, Toast.LENGTH_LONG).show();
                                    mon = "Jul";
                                }
                                if (month.equals("08") || month.equals("8")) {
                                    mon = "Aug";
                                }
                                if (month.equals("09") || month.equals("9")) {
                                    mon = "Sep";
                                }
                                if (month.equals("10") || month.equals("10")) {
                                    mon = "Oct";
                                }
                                if (month.equals("11") || month.equals("11")) {
                                    mon = "Nov";
                                }
                                if (month.equals("12") || month.equals("12")) {
                                    mon = "Dec";
                                }

                                int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
                                if (diff <= 0) {
                                    diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                                }

                                for (int i = 1; i <= diff; i++) {
                                    int j = i - 1;
                                    xLabel.add("" + j + "-" + mon);
                                }

                                IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                                XAxis xAxis = mChart.getXAxis();
                                xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                    xAxis.setTypeface(mTfLight);
                                xAxis.setDrawGridLines(false);
                                xAxis.setGranularity(1f); // only intervals of 1 day
                                //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                                xAxis.setValueFormatter(new IAxisValueFormatter() {
                                    @Override
                                    public String getFormattedValue(float value, AxisBase axis) {
                                        return xLabel.get((int) value);
                                    }
                                });


                                IAxisValueFormatter custom = new MyAxisValueFormatter();

                                YAxis leftAxis = mChart.getAxisLeft();
//                    leftAxis.setTypeface(mTfLight);
                                //leftAxis.setLabelCount(6, false);
                                leftAxis.setValueFormatter(custom);
                                leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                                leftAxis.setSpaceTop(15f);
                                leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                YAxis rightAxis = mChart.getAxisRight();
                                rightAxis.setEnabled(false);
                                rightAxis.setDrawGridLines(false);
//                    rightAxis.setTypeface(mTfLight);
                                //rightAxis.setLabelCount(6, false);
                                rightAxis.setValueFormatter(custom);
                                rightAxis.setSpaceTop(15f);
                                rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                Legend l = mChart.getLegend();
                                l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                                l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                                l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                                l.setDrawInside(false);
                                l.setForm(Legend.LegendForm.SQUARE);
                                l.setFormSize(9f);
                                l.setTextSize(11f);
                                l.setXEntrySpace(4f);
                                // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                // "def", "ghj", "ikl", "mno" });
                                // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                // "def", "ghj", "ikl", "mno" });

                                XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                                mv.setChartView(mChart); // For bounds control
                                mChart.setMarker(mv); // Set the marker to the chart
                                // mChart.notifyDataSetChanged();

                                float max_sale = 3500;


                                setData_date(diff, max_sale);
                            }
                        } else {
                            date1_end = date1.substring(8, 12);
                            date2_end = date2.substring(8, 12);

                            date1_filter_month_2 = date1.substring(4, 6);
                            date2_filter_month_2 = date2.substring(4, 6);

                            int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
                            if (diff <= 0) {
                                diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                            }

                            final ArrayList<String> xLabel = new ArrayList<>();

                            String year = date1.substring(0, 4);
                            for (int i = 1; i <= diff; i++) {
                                int j = i - 1;
                                xLabel.add("" + j + "-" + year);

                            }

                            IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                            XAxis xAxis = mChart.getXAxis();
                            xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                xAxis.setTypeface(mTfLight);
                            xAxis.setDrawGridLines(false);
                            xAxis.setGranularity(1f); // only intervals of 1 day
                            //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                            xAxis.setValueFormatter(new IAxisValueFormatter() {
                                @Override
                                public String getFormattedValue(float value, AxisBase axis) {
                                    return xLabel.get((int) value);
                                }
                            });


                            IAxisValueFormatter custom = new MyAxisValueFormatter();

                            YAxis leftAxis = mChart.getAxisLeft();
//                leftAxis.setTypeface(mTfLight);
                            //leftAxis.setLabelCount(6, false);
                            leftAxis.setValueFormatter(custom);
                            leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                            leftAxis.setSpaceTop(15f);
                            leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                            YAxis rightAxis = mChart.getAxisRight();
                            rightAxis.setEnabled(false);
                            rightAxis.setDrawGridLines(false);
//                rightAxis.setTypeface(mTfLight);
                            //rightAxis.setLabelCount(6, false);
                            rightAxis.setValueFormatter(custom);
                            rightAxis.setSpaceTop(15f);
                            rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                            Legend l = mChart.getLegend();
                            l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                            l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                            l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                            l.setDrawInside(false);
                            l.setForm(Legend.LegendForm.SQUARE);
                            l.setFormSize(9f);
                            l.setTextSize(11f);
                            l.setXEntrySpace(4f);
                            // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                            // "def", "ghj", "ikl", "mno" });
                            // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                            // "def", "ghj", "ikl", "mno" });

                            XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                            mv.setChartView(mChart); // For bounds control
                            mChart.setMarker(mv); // Set the marker to the chart
                            //  mChart.notifyDataSetChanged();

                            float max_sale = 3500;


                            setData_month(diff, max_sale);
                        }
                    } else {
                        date1_end = date1.substring(8, 12);
                        date2_end = date2.substring(8, 12);

                        date1_filter_month_2 = date1.substring(4, 6);
                        date2_filter_month_2 = date2.substring(4, 6);

                        int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

                        if (diff <= 0) {
                            diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                        }

                        final ArrayList<String> xLabel = new ArrayList<>();

                        String year = date1.substring(0, 2);
                        for (int i = 1; i <= diff; i++) {
                            int j = i - 1;
                            if (j <= 9) {
                                xLabel.add(year + "" + "0" + j);
                            } else {
                                xLabel.add(year + "" + j);
                            }
                        }

                        IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                        XAxis xAxis = mChart.getXAxis();
                        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//            xAxis.setTypeface(mTfLight);
                        xAxis.setDrawGridLines(false);
                        xAxis.setGranularity(1f); // only intervals of 1 day
                        //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                        xAxis.setValueFormatter(new IAxisValueFormatter() {
                            @Override
                            public String getFormattedValue(float value, AxisBase axis) {
                                return xLabel.get((int) value);
                            }
                        });


                        IAxisValueFormatter custom = new MyAxisValueFormatter();

                        YAxis leftAxis = mChart.getAxisLeft();
//            leftAxis.setTypeface(mTfLight);
                        //leftAxis.setLabelCount(6, false);
                        leftAxis.setValueFormatter(custom);
                        leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                        leftAxis.setSpaceTop(15f);
                        leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                        YAxis rightAxis = mChart.getAxisRight();
                        rightAxis.setEnabled(false);
                        rightAxis.setDrawGridLines(false);
//            rightAxis.setTypeface(mTfLight);
                        //rightAxis.setLabelCount(6, false);
                        rightAxis.setValueFormatter(custom);
                        rightAxis.setSpaceTop(15f);
                        rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                        Legend l = mChart.getLegend();
                        l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                        l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                        l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                        l.setDrawInside(false);
                        l.setForm(Legend.LegendForm.SQUARE);
                        l.setFormSize(9f);
                        l.setTextSize(11f);
                        l.setXEntrySpace(4f);
                        // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                        // "def", "ghj", "ikl", "mno" });
                        // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                        // "def", "ghj", "ikl", "mno" });

                        XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                        mv.setChartView(mChart); // For bounds control
                        mChart.setMarker(mv); // Set the marker to the chart
                        //  mChart.notifyDataSetChanged();

                        float max_sale = 3500;


                        setData_year(diff, max_sale);
                    }
                }


                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    level = cursor11.getInt(0);
                    total = String.valueOf(level);
                }
                cursor11.close();
//                Toast.makeText(getActivity(), " sum is "+total, Toast.LENGTH_SHORT).show();
                totalsales.setText(insert1_cc);
                totalsales.append(total);
                totalsales_r.setText(total);

                float taxtot = 0, tot1 = 0;
                Cursor cursor2 = db.rawQuery("SELECT SUM(taxtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
                if (cursor2.moveToFirst()){
                    taxtot = cursor2.getFloat(0);
                    tax_total = String.format(Locale.US,"%.0f", taxtot);

                }
                cursor2.close();

                tax_value.setText(tax_total);

//                Toast.makeText(getActivity(), " sum is "+total, Toast.LENGTH_SHORT).show();

                Cursor count = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (count.moveToFirst()) {
                    level = count.getInt(0);
                    total1 = String.valueOf(level);

                    noofbills.setText(total1);
                }
                count.close();


                if (total1.toString().equals("0")){
                    avgsales.setText(insert1_cc);
                    avgsales.append("0");
                    avgsales_r.setText("0");
                }else {
                    avgsales.setText(insert1_cc);
                    avgbill = String.valueOf(Integer.parseInt(total) / Integer.parseInt(total1));
                    avgsales.append(avgbill);
                    avgsales_r.setText(avgbill);
                }

                Cursor cashcardcash= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Cash' ", null);
                if (cashcardcash.moveToFirst()) {
                    level111 = cashcardcash.getInt(0);
                    total111 = String.valueOf(level111);
                }
                cashcardcash.close();

                final Cursor cashcardcard= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Card' ", null);
                if (cashcardcard.moveToFirst()) {
                    level111card = cashcardcard.getInt(0);
                    total111card = String.valueOf(level111card);
                }
                cashcardcard.close();

                final Cursor paytm= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Paytm' ", null);
                if (paytm.moveToFirst()) {
                    level111paytm = paytm.getInt(0);
                    total111paytm = String.valueOf(level111paytm);
                }
                paytm.close();
                final Cursor mobikwik= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Mobikwik' ", null);
                if (mobikwik.moveToFirst()) {
                    level111mobi = mobikwik.getInt(0);
                    total111mobi = String.valueOf(level111mobi);
                }
                mobikwik.close();
                final Cursor freecharge= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Freecharge' ", null);
                if (freecharge.moveToFirst()) {
                    level111free = freecharge.getInt(0);
                    total111free = String.valueOf(level111free);
                }
                freecharge.close();
                final Cursor sodexo= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Sodexo' ", null);
                if (sodexo.moveToFirst()) {
                    level111sodexo = sodexo.getInt(0);
                    total111sodexo = String.valueOf(level111sodexo);
                }
                sodexo.close();
                final Cursor zeta= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Zeta' ", null);
                if (zeta.moveToFirst()) {
                    level111zeta = zeta.getInt(0);
                    total111zeta = String.valueOf(level111zeta);
                }
                zeta.close();
                final Cursor ticket= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Ticket' ", null);
                if (ticket.moveToFirst()) {
                    level111ticket = ticket.getInt(0);
                    total111ticket = String.valueOf(level111ticket);
                }
                ticket.close();
                final Cursor cheque= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Cheque' ", null);
                if (cheque.moveToFirst()) {
                    level111cheq = cheque.getInt(0);
                    total111cheq = String.valueOf(level111cheq);
                }
                cheque.close();

                final Cursor credit= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Pay Later' ", null);
                if (credit.moveToFirst()) {
                    level111cred = credit.getInt(0);
                    total111credit = String.valueOf(level111cred);
                }
                credit.close();
                //Cheque above


                Cursor upiqr= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Upiqr' ", null);
                if (upiqr.moveToFirst()) {
                    levelupi = upiqr.getInt(0);
                    totalupi = String.valueOf(levelupi);
                }
                upiqr.close();


                Cursor dinein = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  Dine-in' ", null);
                if (dinein.moveToFirst()){
                    dineinsales = dinein.getInt(0);
                    dineinsalesstr = String.valueOf(dineinsales);
                }
                dinein.close();

                Cursor takeaway = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  Takeaway' ", null);
                if (takeaway.moveToFirst()){
                    takeawaysales = takeaway.getInt(0);
                    takeawaysalesstr = String.valueOf(takeawaysales);
                }
                takeaway.close();

                Cursor homedelivery = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  Home delivery' ", null);
                if (homedelivery.moveToFirst()){
                    homedeliverysales = homedelivery.getInt(0);
                    homedeliverysalesstr = String.valueOf(homedeliverysales);
                }
                homedelivery.close();


                Cursor creditsales = db.rawQuery("SELECT SUM(credit) FROM Customerdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND credit != ''", null);
                if (creditsales.moveToFirst()){
                    int homedeliverysales = creditsales.getInt(0);
                    totaal1credit = String.valueOf(homedeliverysales);


                    float value = (Float.parseFloat(totaal1credit) / Float.parseFloat(total))* 100 ;
                    totaal1credit_percent = String.format(Locale.US,"%.1f", value);

                }
                creditsales.close();

                cashcardcardsales.setText(insert1_cc);
                cashcardcashsales.setText(insert1_cc);
                paytmwalletsales1.setText(insert1_cc);
                mobikwiksales1.setText(insert1_cc);
                freechargesales1.setText(insert1_cc);
                sodexosales1.setText(insert1_cc);
                zetasales1.setText(insert1_cc);
                ticketsales1.setText(insert1_cc);
                chequesales1.setText(insert1_cc);
                creditsales1.setText(insert1_cc);
                upiqrsales1.setText(insert1_cc);

                cashcardcardsales.append(total111card);
                cashcardcashsales.append(total111);
                paytmwalletsales1.append(total111paytm);
                mobikwiksales1.append(total111mobi);
                freechargesales1.append(total111free);
                sodexosales1.append(total111sodexo);
                zetasales1.append(total111zeta);
                ticketsales1.append(total111ticket);
                chequesales1.append(total111cheq);
                float va_cre = Float.parseFloat(total111credit);
//                creditsales1.append(String.valueOf(Math.abs(va_cre)));
                creditsales1.append(String.format("%.0f", va_cre));
                upiqrsales1.append(totalupi);

                float value1 = Float.parseFloat(total111)*100 / Float.parseFloat(total);
                String ruppercent1 = String.format(Locale.US,"%.1f", value1);
                cashcardcashsalespercent.setText(String.valueOf(ruppercent1));
                cashcardcashsalespercent.append("%");

                float value2 = Float.parseFloat(total111card)*100 / Float.parseFloat(total);
                //String ruppercent = String.format("%.1f", value);
                String ruppercent2 = String.format(Locale.US,"%.1f", value2);
                cashcardcardsalespercent.setText(String.valueOf(ruppercent2));
                cashcardcardsalespercent.append("%");

                float valuee11 = Float.parseFloat(total111paytm)*100 / Float.parseFloat(total);
                String ruppercentt11 = String.format(Locale.US,"%.1f", valuee11);
                paytmsales1percent.setText(String.valueOf(ruppercentt11));
                paytmsales1percent.append("%");

                float value111 = Float.parseFloat(total111mobi)*100 / Float.parseFloat(total);
                String ruppercent111 = String.format(Locale.US,"%.1f", value111);
                mobikwiksales1percent.setText(String.valueOf(ruppercent111));
                mobikwiksales1percent.append("%");

                float value1111 = Float.parseFloat(total111free)*100 / Float.parseFloat(total);
                String ruppercent1111 = String.format(Locale.US,"%.1f", value1111);
                freechargesales1percent.setText(String.valueOf(ruppercent1111));
                freechargesales1percent.append("%");

                float valueV = Float.parseFloat(total111sodexo)*100 / Float.parseFloat(total);
                String ruppercentV = String.format(Locale.US,"%.1f", valueV);
                sodexosales1percent.setText(String.valueOf(ruppercentV));
                sodexosales1percent.append("%");

                float valueVI = Float.parseFloat(total111zeta)*100 / Float.parseFloat(total);
                String ruppercentVI = String.format(Locale.US,"%.1f", valueVI);
                zetasales1percent.setText(String.valueOf(ruppercentVI));
                zetasales1percent.append("%");

                float valueV11 = Float.parseFloat(total111ticket)*100 / Float.parseFloat(total);
                String ruppercentV11 = String.format(Locale.US,"%.1f", valueV11);
                ticketsales1percent.setText(String.valueOf(ruppercentV11));
                ticketsales1percent.append("%");

                float valueV111 = Float.parseFloat(total111cheq)*100 / Float.parseFloat(total);
                String ruppercentV111 = String.format(Locale.US,"%.1f", valueV111);
                chequesales1percent.setText(String.valueOf(ruppercentV111));
                chequesales1percent.append("%");

                float valueix = Float.parseFloat(total111credit)*100 / Float.parseFloat(total);
                String ruppercentix = String.format(Locale.US,"%.1f", valueix);
                creditsales1percent.setText(String.valueOf(ruppercentix));
                creditsales1percent.append("%");


                float valueeupi = Float.parseFloat(totalupi)*100 / Float.parseFloat(total);
                String ruppercentt11upi = String.format(Locale.US,"%.1f", valueeupi);
                upiqrsales1percent.setText(String.valueOf(ruppercentt11upi));
                upiqrsales1percent.append("%");

//                if (total.toString().equals("0")){
//                    cashcardcashsalespercent.setText("0");
//                    cashcardcashsalespercent.append("%");
//                    cashcardcardsalespercent.setText("0");
//                    cashcardcardsalespercent.append("%");
//                }else {
//                    float value1 = Float.parseFloat(total111)*100 / Float.parseFloat(total);
//                    String ruppercent1 = String.format(Locale.US,"%.1f", value1);
//                    cashcardcashsalespercent.setText(String.valueOf(ruppercent1));
//                    cashcardcashsalespercent.append("%");
//
//                    float value2 = Float.parseFloat(total111card)*100 / Float.parseFloat(total);
//                    //String ruppercent = String.format("%.1f", value);
//                    String ruppercent2 = String.format(Locale.US,"%.1f", value2);
//                    cashcardcardsalespercent.setText(String.valueOf(ruppercent2));
//                    cashcardcardsalespercent.append("%");
//                }

                creditsales1.setText(insert1_cc);
                float va_cre1 = Float.parseFloat(totaal1credit);
//                creditsales1.append(String.valueOf(Math.abs(va_cre1)));
                creditsales1.append(String.format("%.0f", va_cre1));

                float va_cre_per = Float.parseFloat(totaal1credit_percent);
                creditsalespercent.setText(String.valueOf(Math.abs(va_cre_per)));
                creditsalespercent.append("%");

                fourdinein.setText(insert1_cc);
                fourdinein.append(dineinsalesstr);

                fourtakeaway.setText(insert1_cc);
                fourtakeaway.append(takeawaysalesstr);

                fourhomedelivery.setText(insert1_cc);
                fourhomedelivery.append(homedeliverysalesstr);

                float value = Float.parseFloat(dineinsalesstr)*100/Float.parseFloat(total);
                String ruppercent = String.format(Locale.US,"%.1f", value);
                fourdineinpercent.setText(String.valueOf(ruppercent));
                fourdineinpercent.append("%");

//                if (Integer.parseInt(total) == 0){
//
//                }else {
//                    float value = Float.parseFloat(dineinsalesstr)*100/Float.parseFloat(total);
//                    String ruppercent = String.format(Locale.US,"%.1f", value);
//                    fourdineinpercent.setText(String.valueOf(ruppercent));
//                    fourdineinpercent.append("%");
//                }

                value1 = Float.parseFloat(takeawaysalesstr)*100 / Float.parseFloat(total);
                ruppercent1 = String.format(Locale.US,"%.1f", value1);
                fourtakeawaypercent.setText(String.valueOf(ruppercent1));
                fourtakeawaypercent.append("%");

//                if (Integer.parseInt(total) == 0){
//
//                }else {
//                    float value1 = Float.parseFloat(takeawaysalesstr)*100 / Float.parseFloat(total);
//                    String ruppercent1 = String.format(Locale.US,"%.1f", value1);
//                    fourtakeawaypercent.setText(String.valueOf(ruppercent1));
//                    fourtakeawaypercent.append("%");
//                }

                value2 = Float.parseFloat(homedeliverysalesstr)*100 / Float.parseFloat(total);
                ruppercent2 = String.format(Locale.US,"%.1f", value2);
                fourhomedeliverypercent.setText(String.valueOf(ruppercent2));
                fourhomedeliverypercent.append("%");

//                if (Integer.parseInt(total) == 0){
//
//                }else {
//                    float value2 = Float.parseFloat(homedeliverysalesstr)*100 / Float.parseFloat(total);
//                    String ruppercent2 = String.format(Locale.US,"%.1f", value2);
//                    fourhomedeliverypercent.setText(String.valueOf(ruppercent2));
//                    fourhomedeliverypercent.append("%");
//                }

                DownloadMusicfromInternet_new downloadMusicfromInternet_new = new DownloadMusicfromInternet_new();
                try {
                    downloadMusicfromInternet_new.execute();
                } catch (Exception e) {
                    downloadMusicfromInternet_new.cancel(true);
                    e.printStackTrace();
                }

            }
        });


        TextView sales_summ = (TextView) rootview.findViewById(R.id.sales_summ);
        sales_summ.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final Dialog dialoge = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                dialoge.setContentView(R.layout.sales_summary);
                dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                dialoge.show();

                TextView inn = (TextView) dialoge.findViewById(R.id.inn);
                TextView inn1 = (TextView) dialoge.findViewById(R.id.inn1);
                TextView inn2 = (TextView) dialoge.findViewById(R.id.inn2);
                TextView inn3 = (TextView) dialoge.findViewById(R.id.inn3);
                TextView inn4 = (TextView) dialoge.findViewById(R.id.inn4);
                TextView inn5 = (TextView) dialoge.findViewById(R.id.inn5);
                TextView inn6 = (TextView) dialoge.findViewById(R.id.inn6);
                TextView inn7 = (TextView) dialoge.findViewById(R.id.inn7);
                inn.setText(insert1_cc);
                inn1.setText(insert1_cc);
                inn2.setText(insert1_cc);
                inn3.setText(insert1_cc);
                inn4.setText(insert1_cc);
                inn5.setText(insert1_cc);
                inn6.setText(insert1_cc);
                inn7.setText(insert1_cc);

                ImageView closetaxq = (ImageView) dialoge.findViewById(R.id.closetext);
                closetaxq.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialoge.dismiss();
                    }
                });

                Button close = (Button) dialoge.findViewById(R.id.close);
                close.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        dialoge.dismiss();
                    }
                });


                TextView gross_sale = (TextView) dialoge.findViewById(R.id.gross_sale);
                TextView refunds = (TextView) dialoge.findViewById(R.id.refunds);
                TextView tax = (TextView) dialoge.findViewById(R.id.tax);
                TextView discount = (TextView) dialoge.findViewById(R.id.discount);

                TextView amount_before_tax = (TextView) dialoge.findViewById(R.id.amount_before_tax);
                TextView amount_after_tax = (TextView) dialoge.findViewById(R.id.amount_after_tax);
                TextView tax_amount = (TextView) dialoge.findViewById(R.id.tax_amount);

                float subtot = 0;
                Cursor cursor = db.rawQuery("SELECT SUM(subtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor.moveToFirst()){
                    subtot = cursor.getFloat(0);
                    sub_total = String.format(Locale.US,"%.0f", subtot);
                }
                cursor.close();

                Cursor summ = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems", null);
                float sumrefund = 0;
                if (summ.moveToFirst()){
                    do {
                        sumrefund = summ.getFloat(0);
                        refund_total = String.format(Locale.US,"%.0f",sumrefund);
                        //Toast.makeText(getActivity(), " total is "+max, Toast.LENGTH_SHORT).show();
                    }while (summ.moveToNext());

                }
                summ.close();
                refunds.setText(refund_total);

                float sumdisc = 0;
                Cursor ccursor11 = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
                if (ccursor11.moveToFirst()) {
                    sumdisc = ccursor11.getFloat(0);
                    disc_total = String.format(Locale.US,"%.0f",sumdisc);
                }
                ccursor11.close();
                discount.setText(disc_total);

                float taxtot = 0, tot1 = 0;
                Cursor cursor2 = db.rawQuery("SELECT SUM(taxtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
                if (cursor2.moveToFirst()){
                    taxtot = cursor2.getFloat(0);
                    tax_total = String.format(Locale.US,"%.0f", taxtot);
//                    Toast.makeText(getActivity(), "itemtax "+tot, Toast.LENGTH_LONG).show();
                }
                cursor2.close();
                tax_amount.setText(tax_total);

//                float round = 0;
//                Cursor cursor3 = db.rawQuery("SELECT SUM(roundoff) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
//                if (cursor3.moveToFirst()){
//                    round = cursor3.getFloat(0);
//                    round_total = String.format(Locale.US,"%.0f", round);
//
//                }
//                cursor3.close();

                float five = 0;
                String two;
                Cursor cursor3 = db.rawQuery("SELECT * FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
                if (cursor3.moveToFirst()){
                    do {
                        two = cursor3.getString(9);

                        if (two.contains("+")){
                            two = two.replace("+ ", "");
                            five = five+Float.parseFloat(two);
//                            if (two.toString().contains("+")) {
//                                two = two.replace("+ ", "");
//                                five = five+Float.parseFloat(two);
////                                Toast.makeText(getActivity(), "+ "+five, Toast.LENGTH_LONG).show();
//                            }

                        }else {

                            two = two.replace("- ", "");
                            five = five-Float.parseFloat(two);

//                            if (two.toString().contains("-")) {
//                                two = two.replace("- ", "");
//                                five = five-Float.parseFloat(two);
////                                Toast.makeText(getActivity(), "- "+five, Toast.LENGTH_LONG).show();
//                            }
                        }

                    }while (cursor3.moveToNext());
                }
                cursor3.close();
//                Toast.makeText(getActivity(), "round "+five, Toast.LENGTH_LONG).show();

                Cursor cursor4 = db.rawQuery("SELECT SUM(globaltaxtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
                if (cursor4.moveToFirst()){
                    tot1 = cursor4.getFloat(0);
//                    Toast.makeText(getActivity(), "global "+tot1, Toast.LENGTH_LONG).show();
                }
                cursor4.close();

                float fi = taxtot+five;
//                Toast.makeText(getActivity(), "tax is "+fi, Toast.LENGTH_LONG).show();

//                tax.setText(String.valueOf(fi));

//                float nm = Float.parseFloat(s1)+Float.parseFloat(sumtotal)+fi;
                float nm = Float.parseFloat(total)+Float.parseFloat(refund_total)+Float.parseFloat(disc_total);
                gross_total = String.format(Locale.US,"%.0f", nm);
                gross_sale.setText(gross_total);

                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    level = cursor11.getInt(0);
                }
                cursor11.close();

                total = String.valueOf(level);
                amount_after_tax.setText(total);
//                amount_before_tax.setText(s1);

                Float amout_notax = Float.parseFloat(total) - Float.parseFloat(tax_total);
                String amount_notax = String.format(Locale.US,"%.0f", amout_notax);
                amount_before_tax.setText(String.valueOf(amount_notax));
//                tax_amount.setText(String.valueOf(tot));


                TextView np_value = (TextView) dialoge.findViewById(R.id.np_value);
//                float az1 = Float.parseFloat(amount_before_tax.getText().toString());
                np_value.setText(String.valueOf(amount_notax));


                final TableLayout tableLayout = (TableLayout) dialoge.findViewById(R.id.listView);
                tableLayout.removeAllViews();

                float cw = 0;
                Cursor cursor5 = db1.rawQuery("SELECT SUM(value) FROM Taxes", null);
                if (cursor5.moveToFirst()){
                    cw = cursor5.getFloat(0);
                }
                cursor5.close();

                float d1 = fi/cw;
                String d2 = String.format(Locale.US,"%.1f", d1);


                Cursor cursor6 = db1.rawQuery("SELECT * FROM Taxes WHERE taxtype = 'Globaltax'", null);
                if (cursor6.moveToFirst()){
                    do {
                        String taxname = cursor6.getString(1);
                        String taxvalue = cursor6.getString(2);

                        float z1 = d1*Float.parseFloat(taxvalue);
                        String z2 = String.format(Locale.US,"%.1f", z1);

//                        Toast.makeText(getActivity(), "Globaltax "+taxname+" "+z2, Toast.LENGTH_LONG).show();

                        final TableRow row = new TableRow(getActivity());
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 2f));

                        final TextView tvv = new TextView(getActivity());
                        // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                        tvv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextColor(getResources().getColor(R.color.ColorAccentLight));
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 12);
                        //tvv.setTypeface(Typeface.MONOSPACE);
                        tvv.setText(taxname+"("+taxvalue+"%"+")");
                        row.addView(tvv);

                        TextView tv4 = new TextView(getActivity());
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv4.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        String Rs = insert1_cc;
                        tv4.setText(Rs+z2);
                        tv4.setTextColor(getResources().getColor(R.color.ColorAccentLight));
                        tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 12);
                        //tv4.setTypeface(Typeface.MONOSPACE);
                        tv4.setGravity(Gravity.END);
                        //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                        //tv3.setTextColor(R.color.black);
                        row.addView(tv4);

                        tableLayout.addView(row);

                    }while (cursor6.moveToNext());
                }
                cursor6.close();


                Cursor cursor7 = db1.rawQuery("SELECT * FROM Taxes WHERE taxtype = 'Itemtax'", null);
                if (cursor7.moveToFirst()){
                    do {
                        String taxname = cursor7.getString(1);
                        String taxvalue = cursor7.getString(2);

                        float z1 = d1*Float.parseFloat(taxvalue);
                        String z2 = String.format(Locale.US,"%.1f", z1);

//                        Toast.makeText(getActivity(), "Itemtax "+taxname+" "+z2, Toast.LENGTH_LONG).show();

                        final TableRow row = new TableRow(getActivity());
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 2f));

                        final TextView tvv = new TextView(getActivity());
                        // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                        tvv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                        //tvv.setTypeface(Typeface.MONOSPACE);
                        tvv.setText(taxname+"("+taxvalue+"%"+")");
                        row.addView(tvv);

                        TextView tv4 = new TextView(getActivity());
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv4.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv4.setText(insert1_rs+""+z2);
//                        tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                        //tv4.setTypeface(Typeface.MONOSPACE);
                        tv4.setGravity(Gravity.END);
                        //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                        //tv3.setTextColor(R.color.black);
                        row.addView(tv4);

                        tableLayout.addView(row);

                    }while (cursor7.moveToNext());
                }
                cursor7.close();

//                panel1 = (LinearLayout) dialoge.findViewById(R.id.relativeLayout2);
                text1 = (RelativeLayout)dialoge.findViewById(R.id.text1);
                rotatearrow = (ImageView) dialoge.findViewById(R.id.arrow);

//                text1.setOnClickListener(new View.OnClickListener() {
//                    @Override
//                    public void onClick(View v) {
//                        //hideOthers(v);
//                        if (tableLayout.getVisibility() == View.VISIBLE){
//                            rotatearrow.setRotation(180);
//                            tableLayout.setVisibility(View.GONE);
//                        }else {
//                            rotatearrow.setRotation(360);
//                            tableLayout.setVisibility(View.VISIBLE);
//                        }
//                    }
//                });


            }
        });

        CardView all_sales = (CardView) rootview.findViewById(R.id.all_sales);

        all_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());

                    startActivity(intent);
                }
            }
        });

        CardView all_sales1 = (CardView) rootview.findViewById(R.id.all_sales1);

        all_sales1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());

                    startActivity(intent);
                }
            }
        });

//        CardView all_sales2 = (CardView) rootview.findViewById(R.id.all_sales2);

//        all_sales2.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                String hjk = "";
//                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
//                if (cursor11.moveToFirst()) {
//                    int level = cursor11.getInt(0);
//                    hjk = String.valueOf(level);
//                }
//                cursor11.close();
//                TextView ghj = new TextView(getActivity());
//                ghj.setText(hjk);
//                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
//                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
//                }else {
//                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales.class);
//                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
//                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
//                    intent.putExtra("edittext1", editText1.getText().toString());
//                    intent.putExtra("edittext11", editText11.getText().toString());
//                    intent.putExtra("edittext2", editText2.getText().toString());
//                    intent.putExtra("edittext22", editText22.getText().toString());
//                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
//                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
//                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
//                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
//
//                    startActivity(intent);
//                }
//            }
//        });

        CardView taxes_click = (CardView) rootview.findViewById(R.id.taxes_click);
        taxes_click.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(getActivity(), Taxes_List_Sales1.class);
                intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                intent.putExtra("edittext1", editText1.getText().toString());
                intent.putExtra("edittext11", editText11.getText().toString());
                intent.putExtra("edittext2", editText2.getText().toString());
                intent.putExtra("edittext22", editText22.getText().toString());
                intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());

                startActivity(intent);
            }
        });

        TextView general_sales = (TextView) rootview.findViewById(R.id.general_sales);
        general_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales1.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "All");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });

        RelativeLayout cash_sales = (RelativeLayout) rootview.findViewById(R.id.cash_sales);
        cash_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales1.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Cash");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });

        RelativeLayout card_sales = (RelativeLayout) rootview.findViewById(R.id.card_sales);
        card_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales1.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Card");
                    startActivity(intent);
                }
            }
        });


        RelativeLayout credit_sales = (RelativeLayout) rootview.findViewById(R.id.credit_sales);
        credit_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales1.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Pay Later");
                    startActivity(intent);
                }
            }
        });

        //Wallet Code
        TextView wallet_in_all_sales = (TextView) rootview.findViewById(R.id.wallet_in_all_sales);
        wallet_in_all_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales2.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "All");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Upiqr
        RelativeLayout upiqr_sales = (RelativeLayout) rootview.findViewById(R.id.upiqr_sales);
        upiqr_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales2.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Paytm");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Paytm
        RelativeLayout paytm_sales = (RelativeLayout) rootview.findViewById(R.id.paytm_sales);
        paytm_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales2.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Paytm");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Mobikwik
        RelativeLayout mobikwik_sales = (RelativeLayout) rootview.findViewById(R.id.mobikwik_sales);
        mobikwik_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales2.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Mobikwik");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Freecharge
        RelativeLayout freecharge_sales = (RelativeLayout) rootview.findViewById(R.id.freecharge_sales);
        freecharge_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales2.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Freecharge");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Coupons Code
        TextView coupon_sales = (TextView) rootview.findViewById(R.id.coupon_sales);
        coupon_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales3.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "All");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Sodexo
        RelativeLayout sodexo_sales = (RelativeLayout) rootview.findViewById(R.id.sodexo_sales);
        sodexo_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales3.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Sodexo");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Zeta
        RelativeLayout zeta_sales = (RelativeLayout) rootview.findViewById(R.id.zeta_sales);
        zeta_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales3.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Zeta");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Ticket
        RelativeLayout ticket_sales = (RelativeLayout) rootview.findViewById(R.id.ticket_sales);
        ticket_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales3.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Ticket");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        //Others Code
        TextView others_in_all_sales = (TextView) rootview.findViewById(R.id.others_in_all_sales);
        others_in_all_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales4.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "All");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });
        // Cheque
        RelativeLayout cheque_sales = (RelativeLayout) rootview.findViewById(R.id.cheque_sales);
        cheque_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Cash_Card_Credit_Sales4.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Cheque");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });


        TextView dine_in_all_sales = (TextView) rootview.findViewById(R.id.dine_in_all_sales);
        dine_in_all_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), General_HomeDelivery_Sales.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "All");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });


        RelativeLayout dine_in_sales = (RelativeLayout) rootview.findViewById(R.id.dine_in_sales);
        dine_in_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), General_HomeDelivery_Sales.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "General");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });


        RelativeLayout take_away_sales = (RelativeLayout) rootview.findViewById(R.id.take_away_sales);
        take_away_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), General_HomeDelivery_Sales.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Takeaway");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });

        RelativeLayout home_delivery_sales = (RelativeLayout) rootview.findViewById(R.id.home_delivery_sales);
        home_delivery_sales.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), General_HomeDelivery_Sales.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Home delivery");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });


        LinearLayout itemwise_list = (LinearLayout) rootview.findViewById(R.id.itemwise_list);
        itemwise_list.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Itemwise_Saleslist.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Items");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });


        LinearLayout categorywise_list = (LinearLayout) rootview.findViewById(R.id.categorywise_list);
        categorywise_list.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Itemwise_Saleslist.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "Category");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });


        LinearLayout userwise_list = (LinearLayout) rootview.findViewById(R.id.userwise_list);
        userwise_list.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Userwise_Saleslist.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "User");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });


        LinearLayout refundswise_list = (LinearLayout) rootview.findViewById(R.id.refundswise_list);
        refundswise_list.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), getString(R.string.no_sales_to_see), Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Refundswise_Saleslist.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "All");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });

        LinearLayout customerwise_list = (LinearLayout) rootview.findViewById(R.id.customerwise_list);
        customerwise_list.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
//                AlertDialog alertDialog = new AlertDialog.Builder(getActivity()).create();
//                alertDialog.setTitle(getString(R.string.title7));
//                alertDialog.setMessage(getString(R.string.setmessage1));
//                alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
//                        new DialogInterface.OnClickListener() {
//                            public void onClick(DialogInterface dialog, int which) {
//                                dialog.dismiss();
//                            }
//                        });
//                alertDialog.show();

                Intent intent = new Intent(getActivity(), MultiFragCustomerActivity.class);
                startActivity(intent);

            }
        });


        LinearLayout discountwise_list = (LinearLayout) rootview.findViewById(R.id.discountwise_list);
        discountwise_list.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
//                Cursor ccursor11 = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
//                if (ccursor11.moveToFirst()) {
//                    level = ccursor11.getInt(0);
//                    total = String.valueOf(level);
//                }
                String hjk = "";
                Cursor ccursor11 = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
                if (ccursor11.moveToFirst()) {
                    int level = ccursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                ccursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), "no Discounts to see", Toast.LENGTH_SHORT).show();
                }else {
                    Intent intent = new Intent(getActivity(), Discountwise_Saleslist.class);
                    intent.putExtra("PLAYER1NAME", editText1_filter.getText().toString());
                    intent.putExtra("PLAYER2NAME", editText2_filter.getText().toString());
                    intent.putExtra("PLAYER3NAME", "All");
                    intent.putExtra("edittext1", editText1.getText().toString());
                    intent.putExtra("edittext11", editText11.getText().toString());
                    intent.putExtra("edittext2", editText2.getText().toString());
                    intent.putExtra("edittext22", editText22.getText().toString());
                    intent.putExtra("edittext_from_day_visible", editText_from_day_visible.getText().toString());
                    intent.putExtra("edittext_from_day_hide", editText_from_day_hide.getText().toString());
                    intent.putExtra("edittext_to_day_visible", editText_to_day_visible.getText().toString());
                    intent.putExtra("edittext_to_day_hide", editText_to_day_hide.getText().toString());
                    startActivity(intent);
                }
            }
        });


        RelativeLayout i_indent = (RelativeLayout) rootview.findViewById(R.id.i_indent);
        i_indent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getActivity(), Inventory_Indent_Items_History.class);
                startActivity(intent);
            }
        });

        RelativeLayout i_suppliers = (RelativeLayout) rootview.findViewById(R.id.i_suppliers);
        i_suppliers.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getActivity(), Inventory_Indent_Vendor_list.class);
                startActivity(intent);
            }
        });

        RelativeLayout i_l_stock = (RelativeLayout) rootview.findViewById(R.id.i_l_stock);
        i_l_stock.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getActivity(), Inventory_Indent.class);
                startActivity(intent);
            }
        });

        LinearLayout i_bill_history = (LinearLayout) rootview.findViewById(R.id.i_bill_history);
        i_bill_history.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(getActivity(), Inventory_Indent_History.class);
                startActivity(intent);
            }
        });


        RelativeLayout mi_indent = (RelativeLayout) rootview.findViewById(R.id.mi_indent);
        mi_indent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getActivity(), Micro_Inventory_Indent_Ingredients_History.class);
                startActivity(intent);
            }
        });

        RelativeLayout mi_suppliers = (RelativeLayout) rootview.findViewById(R.id.mi_suppliers);
        mi_suppliers.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getActivity(), Micro_Inventory_Indent_Vendor_list.class);
                startActivity(intent);
            }
        });

        RelativeLayout mi_l_stock = (RelativeLayout) rootview.findViewById(R.id.mi_l_stock);
        mi_l_stock.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getActivity(), Micro_inventory_indent.class);
                intent.putExtra("hii", "1");
                startActivity(intent);
            }
        });

        LinearLayout mi_bill_history = (LinearLayout) rootview.findViewById(R.id.mi_bill_history);
        mi_bill_history.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(getActivity(), Micro_Inventory_Indent_History.class);
                startActivity(intent);
            }
        });

//        LinearLayout net_cost_pro = (LinearLayout) rootview.findViewById(R.id.net_cost_pro);
        CardView net_profit_pro = (CardView) rootview.findViewById(R.id.net_profit_pro);
        CardView cost_of_goods_pro = (CardView) rootview.findViewById(R.id.cost_of_goods_pro);

        LinearLayout proo = (LinearLayout) rootview.findViewById(R.id.prooo);

        if (tv_inapp.getText().toString().equals("Activated")) {
            if (Integer.parseInt(tv_inapp_da.getText().toString()) > Integer.parseInt(currentDateandTime1_pro)) {
                proo.setVisibility(View.VISIBLE);
//            net_cost_pro.setVisibility(View.VISIBLE);
                net_profit_pro.setVisibility(View.VISIBLE);
                cost_of_goods_pro.setVisibility(View.VISIBLE);
            }else {
                proo.setVisibility(View.GONE);
//            net_cost_pro.setVisibility(View.GONE);
                net_profit_pro.setVisibility(View.GONE);
                cost_of_goods_pro.setVisibility(View.GONE);
            }
        } else {
            proo.setVisibility(View.GONE);
//            net_cost_pro.setVisibility(View.GONE);
            net_profit_pro.setVisibility(View.GONE);
            cost_of_goods_pro.setVisibility(View.GONE);
        }

//        Cursor cursor1 = db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
//        if (cursor1.moveToFirst()) {
//            String st = cursor1.getString(1);
//
//            TextView tv = new TextView(getActivity());
//            tv.setText(st);
//
//            if (tv.getText().toString().equals("Activated")) {
//                proo.setVisibility(View.VISIBLE);
//                net_cost_pro.setVisibility(View.VISIBLE);
//                net_profit_pro.setVisibility(View.VISIBLE);
//                cost_of_goods_pro.setVisibility(View.VISIBLE);
//            } else {
//                proo.setVisibility(View.GONE);
//                net_cost_pro.setVisibility(View.GONE);
//                net_profit_pro.setVisibility(View.GONE);
//                cost_of_goods_pro.setVisibility(View.GONE);
//            }
//        }else {
//            proo.setVisibility(View.GONE);
//            net_cost_pro.setVisibility(View.GONE);
//            net_profit_pro.setVisibility(View.GONE);
//            cost_of_goods_pro.setVisibility(View.GONE);
//        }

        final FloatingActionButton miniprint_orderlist = (FloatingActionButton) rootview.findViewById(R.id.print_ministatement);
        miniprint_orderlist.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    Toast.makeText(getActivity(), "no report to print", Toast.LENGTH_SHORT).show();
                }else {
//                    Toast.makeText(getActivity(), "mini receipt", Toast.LENGTH_SHORT).show();

                    Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
                    if (connnet.moveToFirst()) {
                        ipnameget = connnet.getString(1);
                        portget = connnet.getString(2);
                        statusnet = connnet.getString(3);
                    }
                    connnet.close();

                    Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
                    if (connnet_counter.moveToFirst()) {
                        ipnameget_counter = connnet_counter.getString(1);
                        portget_counter = connnet_counter.getString(2);
                        statusnet_counter = connnet_counter.getString(3);
                    }
                    connnet_counter.close();

                    Cursor conn = db1.rawQuery("SELECT * FROM BTConn", null);
                    if (conn.moveToFirst()) {
                        nameget = conn.getString(1);
                        addget = conn.getString(2);
                        statussusb = conn.getString(3);
                    }
                    conn.close();
                    if (statusnet.equals("ok") || statusnet_counter.equals("ok") || statussusb.equals("ok")) {

//                        byte[] LF = {0x0d,0x0a};
//
//                        allbufline = new byte[][]{
//                                " ".getBytes(),LF
//                        };
//                        if (statussusb.toString().equals("ok")) {
//                            String encoding = "";
//                            encoding = "US-ASCII";
//                            String text = "";
//                            text = " ";
//                            byte[] bufq1 = DataUtils.byteArraysToBytes(allbufline);
//                            Bundle data = new Bundle();
//                            Bundle dataLineHeight = new Bundle();
//                            dataLineHeight.putInt(Global.INTPARA1, 32);
//                            Bundle dataTextOut = new Bundle();
//                            dataTextOut.putString(Global.STRPARA1, text);
//                            dataTextOut.putString(Global.STRPARA2, encoding);
//                            dataTextOut.putInt(Global.INTPARA1, 0);
//                            dataTextOut.putInt(Global.INTPARA4, 0);
//                            data.putByteArray(Global.BYTESPARA1, bufq1);
//                            data.putInt(Global.INTPARA1, 0);
//                            data.putInt(Global.INTPARA2, bufq1.length);
//                            DrawerService.workThread.handleCmd(Global.CMD_POS_SETLINEHEIGHT, dataLineHeight);
//                            DrawerService.workThread.handleCmd(Global.CMD_POS_STEXTOUT, dataTextOut);
//                            DrawerService.workThread.handleCmd(Global.CMD_POS_WRITE, data);
//                        }else {
//                            if (statusnet.toString().equals("ok")) {
//                                String encoding = "";
//                                encoding = "US-ASCII";
//                                String text = "";
//                                text = " ";
//                                byte[] bufq1 = DataUtils1.byteArraysToBytes(allbufline);
//                                Bundle data = new Bundle();
//                                Bundle dataLineHeight = new Bundle();
//                                dataLineHeight.putInt(Global1.INTPARA1, 32);
//                                Bundle dataTextOut = new Bundle();
//                                dataTextOut.putString(Global1.STRPARA1, text);
//                                dataTextOut.putString(Global1.STRPARA2, encoding);
//                                dataTextOut.putInt(Global1.INTPARA1, 0);
//                                dataTextOut.putInt(Global1.INTPARA4, 0);
//                                data.putByteArray(Global1.BYTESPARA1, bufq1);
//                                data.putInt(Global1.INTPARA1, 0);
//                                data.putInt(Global1.INTPARA2, bufq1.length);
//                                DrawerService1.workThread.handleCmd(Global1.CMD_POS_SETLINEHEIGHT, dataLineHeight);
//                                DrawerService1.workThread.handleCmd(Global1.CMD_POS_STEXTOUT, dataTextOut);
//                                DrawerService1.workThread.handleCmd(Global1.CMD_POS_WRITE1, data);
//                            }
//                        }

                        printbillcopy_minireceipt();
                        //dialog.dismiss();


                    }else {
                        final Dialog dialogconn = new Dialog(getActivity(), R.style.notitle);
                        dialogconn.setContentView(R.layout.dialog_printer_conn_error_orderlist);

                        Button conti = (Button) dialogconn.findViewById(R.id.ok);
                        conti.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                //Toast.makeText(getActivity(), "checkprinterconncash11", Toast.LENGTH_SHORT).show();
                                dialogconn.dismiss();
                            }
                        });

                        dialogconn.show();
                    }

                }
            }
        });



        ll_custom=rootview.findViewById(R.id.ll_custom);

        ll_dateselecter=rootview.findViewById(R.id.ll_dateselecter);
        ll_dateselecter.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                final String[] select = {"Working Hours \n (Today)", "This week", "This Month", "This Year","All Time","Custom"};
                AlertDialog dialog = new AlertDialog.Builder(getActivity(),R.style.timepicker_date_dialog)
                        .setTitle(getString(R.string.title18))
                        .setSingleChoiceItems(select, selectedPosition, new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                selectedPosition = ((AlertDialog) dialog).getListView().getCheckedItemPosition();
                                if (selectedPosition == 0) {
                                    // new LoadDataTask().execute();
                                    dialog.dismiss();
                                    new WorkingTask().execute();
                                    ll_custom.setVisibility(View.GONE);
                                }/*else if (selectedPosition==1){

                                    dialog.dismiss();
                                    new TodayTask().execute();
                                }*/else if (selectedPosition==1){

                                    dialog.dismiss();
                                    new WeekTask().execute();
                                    ll_custom.setVisibility(View.GONE);

                                }else if (selectedPosition==2){


                                    dialog.dismiss();
                                    new MonthTask().execute();
                                    ll_custom.setVisibility(View.GONE);


                                }else if(selectedPosition==3){

                                    dialog.dismiss();
                                    //  Toast.makeText(HomeActivity.this, " 3", Toast.LENGTH_LONG).show();
                                    new YearTask().execute();
                                    ll_custom.setVisibility(View.GONE);
                                }else if(selectedPosition==4) {

                                    dialog.dismiss();
                                    new AllTimeTask().execute();
                                    ll_custom.setVisibility(View.GONE);
                                }else if(selectedPosition==5) {

                                    dialog.dismiss();
                                    final Dialog dialoge1 = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                                    dialoge1.setContentView(R.layout.customdialog);
                                    initCustom(dialoge1);
                                    dialoge1.show();
                                    ImageView iv_cancel=dialoge1.findViewById(R.id.iv_cancel);
                                    iv_cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            dialoge1.cancel();
                                        }
                                    });


                                    Button btn_ok=dialoge1.findViewById(R.id.okok);
                                    btn_ok.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            mChart.setVisibility(View.GONE);
                                            proceed_button.setVisibility(View.VISIBLE);
                                            rela.setVisibility(View.GONE);
                                            miniprint_orderlist1.setVisibility(View.GONE);

                                            str_editText11_dialog= editText11_dialog.getText().toString();//11 Jul 2021 - from
                                            str_editText22_dialog= editText22_dialog.getText().toString();//13 Jul 2021 - to
                                            str_editText_from_day_visible_dialog= editText_from_day_visible_dialog.getText().toString();//12:01 AM
                                            str_editText_to_day_visible_dialog= editText_to_day_visible_dialog.getText().toString();//11:59 PM

                                            editText11.setText(str_editText11_dialog);
                                            editText22.setText(str_editText22_dialog);
                                            editText_from_day_visible.setText(str_editText_from_day_visible_dialog);
                                            editText_to_day_visible.setText(str_editText_to_day_visible_dialog);



                                            String[] date_start=str_editText11_dialog.split(" ");
                                            String date_dialog1=date_start[2];
                                            if(date_start[1].equalsIgnoreCase("Jan")){
                                                date_dialog1=date_dialog1+"01";
                                            }else if(date_start[1].equalsIgnoreCase("Feb")){
                                                date_dialog1=date_dialog1+"02";
                                            }else if(date_start[1].equalsIgnoreCase("Mar")){
                                                date_dialog1=date_dialog1+"03";
                                            }else if(date_start[1].equalsIgnoreCase("Apr")){
                                                date_dialog1=date_dialog1+"04";
                                            }else if(date_start[1].equalsIgnoreCase("May")){
                                                date_dialog1=date_dialog1+"05";
                                            }else if(date_start[1].equalsIgnoreCase("Jun")){
                                                date_dialog1=date_dialog1+"06";
                                            }else if(date_start[1].equalsIgnoreCase("Jul")){
                                                date_dialog1=date_dialog1+"07";
                                            }else if(date_start[1].equalsIgnoreCase("Aug")){
                                                date_dialog1=date_dialog1+"08";
                                            }else if(date_start[1].equalsIgnoreCase("Sep")){
                                                date_dialog1=date_dialog1+"09";
                                            }else if(date_start[1].equalsIgnoreCase("Oct")){
                                                date_dialog1=date_dialog1+"10";
                                            }else if(date_start[1].equalsIgnoreCase("Nov")){
                                                date_dialog1=date_dialog1+"11";
                                            }else if(date_start[1].equalsIgnoreCase("Dec")){
                                                date_dialog1=date_dialog1+"12";
                                            }
                                            date_dialog1=date_dialog1+date_start[0];//20210711 - from
                                            String time_dialog1="";//0001

                                            editText1.setText(date_dialog1);

                                            SimpleDateFormat displayFormat = new SimpleDateFormat("HH:mm");
                                            SimpleDateFormat parseFormat = new SimpleDateFormat("hh:mm a");
                                            Date date = null;
                                            try {
                                                date = parseFormat.parse(str_editText_from_day_visible_dialog);
                                                time_dialog1=displayFormat.format(date);
                                                time_dialog1=time_dialog1.replace(":","");
                                            } catch (ParseException e) {
                                                e.printStackTrace();
                                            }

                                            date_dialog1=date_dialog1+time_dialog1;

                                            String editt_fr_day_hi = time_dialog1.substring(0, 2)+":"+time_dialog1.substring(2, 4);
                                            editText_from_day_hide.setText(editt_fr_day_hi);


                                            String[] date_end=str_editText22_dialog.split(" ");
                                            String date_dialog2=date_end[2];
                                            if(date_end[1].equalsIgnoreCase("Jan")){
                                                date_dialog2=date_dialog2+"01";
                                            }else if(date_end[1].equalsIgnoreCase("Feb")){
                                                date_dialog2=date_dialog2+"02";
                                            }else if(date_end[1].equalsIgnoreCase("Mar")){
                                                date_dialog2=date_dialog2+"03";
                                            }else if(date_end[1].equalsIgnoreCase("Apr")){
                                                date_dialog2=date_dialog2+"04";
                                            }else if(date_end[1].equalsIgnoreCase("May")){
                                                date_dialog2=date_dialog2+"05";
                                            }else if(date_end[1].equalsIgnoreCase("Jun")){
                                                date_dialog2=date_dialog2+"06";
                                            }else if(date_end[1].equalsIgnoreCase("Jul")){
                                                date_dialog2=date_dialog2+"07";
                                            }else if(date_end[1].equalsIgnoreCase("Aug")){
                                                date_dialog2=date_dialog2+"08";
                                            }else if(date_end[1].equalsIgnoreCase("Sep")){
                                                date_dialog2=date_dialog2+"09";
                                            }else if(date_end[1].equalsIgnoreCase("Oct")){
                                                date_dialog2=date_dialog2+"10";
                                            }else if(date_end[1].equalsIgnoreCase("Nov")){
                                                date_dialog2=date_dialog2+"11";
                                            }else if(date_end[1].equalsIgnoreCase("Dec")){
                                                date_dialog2=date_dialog2+"12";
                                            }
                                            date_dialog2=date_dialog2+date_end[0];//20210713 - to

                                            String time_dialog2="";//2359

                                            editText2.setText(date_dialog2);

                                            try {
                                                date = parseFormat.parse(str_editText_to_day_visible_dialog);
                                                time_dialog2=displayFormat.format(date);
                                                time_dialog2=time_dialog2.replace(":","");
                                            } catch (ParseException e) {
                                                e.printStackTrace();
                                            }
                                            date_dialog2=date_dialog2+time_dialog2;

                                            String editt_to_day_hi = time_dialog2.substring(0, 2)+":"+time_dialog2.substring(2, 4);
                                            editText_to_day_hide.setText(editt_to_day_hi);

                                            editText1_filter.setText(date_dialog1);
                                            editText2_filter.setText(date_dialog2);


                                            date1 = editText1_filter.getText().toString();
                                            date2 = editText2_filter.getText().toString();

                                            if (date1.length() == 11) {
//                    Toast.makeText(getActivity(), "11 "+date1, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "11 "+date1, Toast.LENGTH_LONG).show();
                                                String onetoeight = date1.substring(0, 11);
                                                date1 = onetoeight + "1";
                                            }else {
//                    Toast.makeText(getActivity(), "12 "+date1, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "12 "+date1, Toast.LENGTH_LONG).show();
                                            }

//                Toast.makeText(getActivity(), "new "+date1, Toast.LENGTH_LONG).show();
//                Toast.makeText(getActivity(), "new "+date1, Toast.LENGTH_LONG).show();





                                            dialoge1.dismiss();
                                            tv_dateselecter.setText(str_editText11_dialog+","+str_editText_from_day_visible_dialog+" - "+str_editText22_dialog+","+str_editText_to_day_visible_dialog);

                                            String cgt1 = "0";
                                            int cgt2;
                                            Cursor cgt = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                                            if (cgt.moveToFirst()) {
                                                cgt2 = cgt.getInt(0);
                                                cgt1 = String.valueOf(cgt2);
                                            }
                                            cgt.close();

                                            TextView cgt3 = new TextView(getActivity());
                                            cgt3.setText(cgt1);
                                            if (cgt3.getText().toString().equals("0")){
                                                mChart.setVisibility(View.GONE);
                                            }else {
                                                mChart.setVisibility(View.VISIBLE);
                                                String year1_check = date1.substring(0, 4);
                                                String year2_check = date2.substring(0, 4);
                                                if (year1_check.equals(year2_check)) {

                                                    String month1_check = date1.substring(4, 6);
                                                    String month2_check = date2.substring(4, 6);

                                                    if (month1_check.equals(month2_check)) {


                                                        String date1_check = date1.substring(6, 8);
                                                        String date2_check = date2.substring(6, 8);

                                                        if (date1_check.equals(date2_check)) {


                                                            date1_filter = date1.substring(0, 8);
                                                            date2_filter = date2.substring(0, 8);

                                                            date1_end = date1.substring(8, 10);
                                                            date2_end = date2.substring(8, 10);

                                                            final ArrayList<String> xLabel = new ArrayList<>();

//                            int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
//                            if (diff<=0){
//                                diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
//                            }

                                                            // or use some other logic to save your data in list. For ex.
                                                            for (int i = 1; i <= 24; i++) {
                                                                xLabel.add("" + i + ":00");
                                                            }

                                                            IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                                                            XAxis xAxis = mChart.getXAxis();
                                                            xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                    xAxis.setTypeface(mTfLight);
                                                            xAxis.setDrawGridLines(false);
                                                            xAxis.setGranularity(1f); // only intervals of 1 day
                                                            //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                                                            xAxis.setValueFormatter(new IAxisValueFormatter() {
                                                                @Override
                                                                public String getFormattedValue(float value, AxisBase axis) {
                                                                    return xLabel.get((int) value);
                                                                }
                                                            });


                                                            IAxisValueFormatter custom = new MyAxisValueFormatter();

                                                            YAxis leftAxis = mChart.getAxisLeft();
//                    leftAxis.setTypeface(mTfLight);
                                                            //leftAxis.setLabelCount(6, false);
                                                            leftAxis.setValueFormatter(custom);
                                                            leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                                                            leftAxis.setSpaceTop(15f);
                                                            leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                                            YAxis rightAxis = mChart.getAxisRight();
                                                            rightAxis.setEnabled(false);
                                                            rightAxis.setDrawGridLines(false);
//                    rightAxis.setTypeface(mTfLight);
                                                            //rightAxis.setLabelCount(6, false);
                                                            rightAxis.setValueFormatter(custom);
                                                            rightAxis.setSpaceTop(15f);
                                                            rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                                            Legend l = mChart.getLegend();
                                                            l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                                                            l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                                                            l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                                                            l.setDrawInside(false);
                                                            l.setForm(Legend.LegendForm.SQUARE);
                                                            l.setFormSize(9f);
                                                            l.setTextSize(11f);
                                                            l.setXEntrySpace(4f);
                                                            // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                                            // "def", "ghj", "ikl", "mno" });
                                                            // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                                            // "def", "ghj", "ikl", "mno" });

                                                            XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                                                            mv.setChartView(mChart); // For bounds control
                                                            mChart.setMarker(mv); // Set the marker to the chart
                                                            // mChart.notifyDataSetChanged();

                                                            float max_sale = 3500;


                                                            setData_day(24, max_sale);


                                                        } else {
//                            Toast.makeText(getActivity(), "hi1", Toast.LENGTH_LONG).show();
//                            Toast.makeText(getActivity(), "hi2", Toast.LENGTH_LONG).show();
                                                            date1_end = date1.substring(8, 12);
                                                            date2_end = date2.substring(8, 12);

//                            int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

                                                            final ArrayList<String> xLabel = new ArrayList<>();

                                                            String mon = "";
                                                            String month = date1.substring(4, 6);
                                                            if (month.equals("01") || month.equals("1")) {
                                                                mon = "Jan";
                                                            }
                                                            if (month.equals("02") || month.equals("2")) {
                                                                mon = "Feb";
                                                            }
                                                            if (month.equals("03") || month.equals("3")) {
                                                                mon = "Mar";
                                                            }
                                                            if (month.equals("04") || month.equals("4")) {
                                                                mon = "Apr";
                                                            }
                                                            if (month.equals("05") || month.equals("5")) {
                                                                mon = "May";
                                                            }
                                                            if (month.equals("06") || month.equals("6")) {
                                                                mon = "Jun";
                                                            }
                                                            if (month.equals("07") || month.equals("7")) {
//                                Toast.makeText(getActivity(), "month is1 "+month, Toast.LENGTH_LONG).show();
//                                Toast.makeText(getActivity(), "month is2 "+month, Toast.LENGTH_LONG).show();
//                                Toast.makeText(getActivity(), "month is3 "+month, Toast.LENGTH_LONG).show();
                                                                mon = "Jul";
                                                            }
                                                            if (month.equals("08") || month.equals("8")) {
                                                                mon = "Aug";
                                                            }
                                                            if (month.equals("09") || month.equals("9")) {
                                                                mon = "Sep";
                                                            }
                                                            if (month.equals("10") || month.equals("10")) {
                                                                mon = "Oct";
                                                            }
                                                            if (month.equals("11") || month.equals("11")) {
                                                                mon = "Nov";
                                                            }
                                                            if (month.equals("12") || month.equals("12")) {
                                                                mon = "Dec";
                                                            }

                                                            int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
                                                            if (diff <= 0) {
                                                                diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                                                            }

                                                            for (int i = 1; i <= diff; i++) {
                                                                int j = i - 1;
                                                                xLabel.add("" + j + "-" + mon);
                                                            }

                                                            IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                                                            XAxis xAxis = mChart.getXAxis();
                                                            xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                    xAxis.setTypeface(mTfLight);
                                                            xAxis.setDrawGridLines(false);
                                                            xAxis.setGranularity(1f); // only intervals of 1 day
                                                            //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                                                            xAxis.setValueFormatter(new IAxisValueFormatter() {
                                                                @Override
                                                                public String getFormattedValue(float value, AxisBase axis) {
                                                                    return xLabel.get((int) value);
                                                                }
                                                            });


                                                            IAxisValueFormatter custom = new MyAxisValueFormatter();

                                                            YAxis leftAxis = mChart.getAxisLeft();
//                    leftAxis.setTypeface(mTfLight);
                                                            //leftAxis.setLabelCount(6, false);
                                                            leftAxis.setValueFormatter(custom);
                                                            leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                                                            leftAxis.setSpaceTop(15f);
                                                            leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                                            YAxis rightAxis = mChart.getAxisRight();
                                                            rightAxis.setEnabled(false);
                                                            rightAxis.setDrawGridLines(false);
//                    rightAxis.setTypeface(mTfLight);
                                                            //rightAxis.setLabelCount(6, false);
                                                            rightAxis.setValueFormatter(custom);
                                                            rightAxis.setSpaceTop(15f);
                                                            rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                                            Legend l = mChart.getLegend();
                                                            l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                                                            l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                                                            l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                                                            l.setDrawInside(false);
                                                            l.setForm(Legend.LegendForm.SQUARE);
                                                            l.setFormSize(9f);
                                                            l.setTextSize(11f);
                                                            l.setXEntrySpace(4f);
                                                            // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                                            // "def", "ghj", "ikl", "mno" });
                                                            // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                                            // "def", "ghj", "ikl", "mno" });

                                                            XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                                                            mv.setChartView(mChart); // For bounds control
                                                            mChart.setMarker(mv); // Set the marker to the chart
                                                            // mChart.notifyDataSetChanged();

                                                            float max_sale = 3500;


                                                            setData_date(diff, max_sale);
                                                        }
                                                    } else {
                                                        date1_end = date1.substring(8, 12);
                                                        date2_end = date2.substring(8, 12);

                                                        date1_filter_month_2 = date1.substring(4, 6);
                                                        date2_filter_month_2 = date2.substring(4, 6);

                                                        int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);
                                                        if (diff <= 0) {
                                                            diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                                                        }

                                                        final ArrayList<String> xLabel = new ArrayList<>();

                                                        String year = date1.substring(0, 4);
                                                        for (int i = 1; i <= diff; i++) {
                                                            int j = i - 1;
                                                            xLabel.add("" + j + "-" + year);

                                                        }

                                                        IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                                                        XAxis xAxis = mChart.getXAxis();
                                                        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//                xAxis.setTypeface(mTfLight);
                                                        xAxis.setDrawGridLines(false);
                                                        xAxis.setGranularity(1f); // only intervals of 1 day
                                                        //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                                                        xAxis.setValueFormatter(new IAxisValueFormatter() {
                                                            @Override
                                                            public String getFormattedValue(float value, AxisBase axis) {
                                                                return xLabel.get((int) value);
                                                            }
                                                        });


                                                        IAxisValueFormatter custom = new MyAxisValueFormatter();

                                                        YAxis leftAxis = mChart.getAxisLeft();
//                leftAxis.setTypeface(mTfLight);
                                                        //leftAxis.setLabelCount(6, false);
                                                        leftAxis.setValueFormatter(custom);
                                                        leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                                                        leftAxis.setSpaceTop(15f);
                                                        leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                                        YAxis rightAxis = mChart.getAxisRight();
                                                        rightAxis.setEnabled(false);
                                                        rightAxis.setDrawGridLines(false);
//                rightAxis.setTypeface(mTfLight);
                                                        //rightAxis.setLabelCount(6, false);
                                                        rightAxis.setValueFormatter(custom);
                                                        rightAxis.setSpaceTop(15f);
                                                        rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                                        Legend l = mChart.getLegend();
                                                        l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                                                        l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                                                        l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                                                        l.setDrawInside(false);
                                                        l.setForm(Legend.LegendForm.SQUARE);
                                                        l.setFormSize(9f);
                                                        l.setTextSize(11f);
                                                        l.setXEntrySpace(4f);
                                                        // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                                        // "def", "ghj", "ikl", "mno" });
                                                        // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                                        // "def", "ghj", "ikl", "mno" });

                                                        XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                                                        mv.setChartView(mChart); // For bounds control
                                                        mChart.setMarker(mv); // Set the marker to the chart
                                                        //  mChart.notifyDataSetChanged();

                                                        float max_sale = 3500;


                                                        setData_month(diff, max_sale);
                                                    }
                                                } else {
                                                    date1_end = date1.substring(8, 12);
                                                    date2_end = date2.substring(8, 12);

                                                    date1_filter_month_2 = date1.substring(4, 6);
                                                    date2_filter_month_2 = date2.substring(4, 6);

                                                    int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

                                                    if (diff <= 0) {
                                                        diff = Integer.parseInt(date1_end) - Integer.parseInt(date2_end);
                                                    }

                                                    final ArrayList<String> xLabel = new ArrayList<>();

                                                    String year = date1.substring(0, 2);
                                                    for (int i = 1; i <= diff; i++) {
                                                        int j = i - 1;
                                                        if (j <= 9) {
                                                            xLabel.add(year + "" + "0" + j);
                                                        } else {
                                                            xLabel.add(year + "" + j);
                                                        }
                                                    }

                                                    IAxisValueFormatter xAxisFormatter = new DayAxisValueFormatter(mChart);

                                                    XAxis xAxis = mChart.getXAxis();
                                                    xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
//            xAxis.setTypeface(mTfLight);
                                                    xAxis.setDrawGridLines(false);
                                                    xAxis.setGranularity(1f); // only intervals of 1 day
                                                    //xAxis.setLabelCount(5);
//        xAxis.setValueFormatter(xAxisFormatter);
                                                    xAxis.setValueFormatter(new IAxisValueFormatter() {
                                                        @Override
                                                        public String getFormattedValue(float value, AxisBase axis) {
                                                            return xLabel.get((int) value);
                                                        }
                                                    });


                                                    IAxisValueFormatter custom = new MyAxisValueFormatter();

                                                    YAxis leftAxis = mChart.getAxisLeft();
//            leftAxis.setTypeface(mTfLight);
                                                    //leftAxis.setLabelCount(6, false);
                                                    leftAxis.setValueFormatter(custom);
                                                    leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                                                    leftAxis.setSpaceTop(15f);
                                                    leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                                    YAxis rightAxis = mChart.getAxisRight();
                                                    rightAxis.setEnabled(false);
                                                    rightAxis.setDrawGridLines(false);
//            rightAxis.setTypeface(mTfLight);
                                                    //rightAxis.setLabelCount(6, false);
                                                    rightAxis.setValueFormatter(custom);
                                                    rightAxis.setSpaceTop(15f);
                                                    rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

                                                    Legend l = mChart.getLegend();
                                                    l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                                                    l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                                                    l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                                                    l.setDrawInside(false);
                                                    l.setForm(Legend.LegendForm.SQUARE);
                                                    l.setFormSize(9f);
                                                    l.setTextSize(11f);
                                                    l.setXEntrySpace(4f);
                                                    // l.setExtra(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                                    // "def", "ghj", "ikl", "mno" });
                                                    // l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "abc",
                                                    // "def", "ghj", "ikl", "mno" });

                                                    XYMarkerView mv = new XYMarkerView(getActivity(), xAxisFormatter);
                                                    mv.setChartView(mChart); // For bounds control
                                                    mChart.setMarker(mv); // Set the marker to the chart
                                                    //  mChart.notifyDataSetChanged();

                                                    float max_sale = 3500;


                                                    setData_year(diff, max_sale);
                                                }
                                            }


                                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                                            if (cursor11.moveToFirst()) {
                                                level = cursor11.getInt(0);
                                                total = String.valueOf(level);
                                            }
                                            cursor11.close();
//                Toast.makeText(getActivity(), " sum is "+total, Toast.LENGTH_SHORT).show();
                                            totalsales.setText(insert1_cc);
                                            totalsales.append(total);
                                            totalsales_r.setText(total);

                                            float taxtot = 0, tot1 = 0;
                                            Cursor cursor2 = db.rawQuery("SELECT SUM(taxtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
                                            if (cursor2.moveToFirst()){
                                                taxtot = cursor2.getFloat(0);
                                                tax_total = String.format(Locale.US,"%.0f", taxtot);

                                            }
                                            cursor2.close();

                                            tax_value.setText(tax_total);

//                Toast.makeText(getActivity(), " sum is "+total, Toast.LENGTH_SHORT).show();

                                            Cursor count = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                                            if (count.moveToFirst()) {
                                                level = count.getInt(0);
                                                total1 = String.valueOf(level);

                                                noofbills.setText(total1);
                                            }
                                            count.close();


                                            if (total1.toString().equals("0")){
                                                avgsales.setText(insert1_cc);
                                                avgsales.append("0");
                                                avgsales_r.setText("0");
                                            }else {
                                                avgsales.setText(insert1_cc);
                                                avgbill = String.valueOf(Integer.parseInt(total) / Integer.parseInt(total1));
                                                avgsales.append(avgbill);
                                                avgsales_r.setText(avgbill);
                                            }

                                            Cursor cashcardcash= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Cash' ", null);
                                            if (cashcardcash.moveToFirst()) {
                                                level111 = cashcardcash.getInt(0);
                                                total111 = String.valueOf(level111);
                                            }
                                            cashcardcash.close();

                                            final Cursor cashcardcard= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Card' ", null);
                                            if (cashcardcard.moveToFirst()) {
                                                level111card = cashcardcard.getInt(0);
                                                total111card = String.valueOf(level111card);
                                            }
                                            cashcardcard.close();



                                            final Cursor paytm= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Paytm' ", null);
                                            if (paytm.moveToFirst()) {
                                                level111paytm = paytm.getInt(0);
                                                total111paytm = String.valueOf(level111paytm);
                                            }
                                            paytm.close();
                                            final Cursor mobikwik= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Mobikwik' ", null);
                                            if (mobikwik.moveToFirst()) {
                                                level111mobi = mobikwik.getInt(0);
                                                total111mobi = String.valueOf(level111mobi);
                                            }
                                            mobikwik.close();
                                            final Cursor freecharge= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Freecharge' ", null);
                                            if (freecharge.moveToFirst()) {
                                                level111free = freecharge.getInt(0);
                                                total111free = String.valueOf(level111free);
                                            }
                                            freecharge.close();
                                            final Cursor sodexo= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Sodexo' ", null);
                                            if (sodexo.moveToFirst()) {
                                                level111sodexo = sodexo.getInt(0);
                                                total111sodexo = String.valueOf(level111sodexo);
                                            }
                                            sodexo.close();
                                            final Cursor zeta= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Zeta' ", null);
                                            if (zeta.moveToFirst()) {
                                                level111zeta = zeta.getInt(0);
                                                total111zeta = String.valueOf(level111zeta);
                                            }
                                            zeta.close();
                                            final Cursor ticket= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Ticket' ", null);
                                            if (ticket.moveToFirst()) {
                                                level111ticket = ticket.getInt(0);
                                                total111ticket = String.valueOf(level111ticket);
                                            }
                                            ticket.close();
                                            final Cursor cheque= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Cheque' ", null);
                                            if (cheque.moveToFirst()) {
                                                level111cheq = cheque.getInt(0);
                                                total111cheq = String.valueOf(level111cheq);
                                            }
                                            cheque.close();

                                            final Cursor credit= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Pay Later' ", null);
                                            if (credit.moveToFirst()) {
                                                level111cred = credit.getInt(0);
                                                total111credit = String.valueOf(level111cred);
                                            }
                                            credit.close();

                                            Cursor upiqr= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Upiqr' ", null);
                                            if (upiqr.moveToFirst()) {
                                                levelupi = upiqr.getInt(0);
                                                totalupi = String.valueOf(levelupi);
                                            }
                                            upiqr.close();

                                            Cursor dinein = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  General' ", null);
                                            if (dinein.moveToFirst()){
                                                dineinsales = dinein.getInt(0);
                                                dineinsalesstr = String.valueOf(dineinsales);
                                            }
                                            dinein.close();

                                            Cursor takeaway = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  Takeaway' ", null);
                                            if (takeaway.moveToFirst()){
                                                takeawaysales = takeaway.getInt(0);
                                                takeawaysalesstr = String.valueOf(takeawaysales);
                                            }
                                            takeaway.close();

                                            Cursor homedelivery = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND billtype = '  Home delivery' ", null);
                                            if (homedelivery.moveToFirst()){
                                                homedeliverysales = homedelivery.getInt(0);
                                                homedeliverysalesstr = String.valueOf(homedeliverysales);
                                            }
                                            homedelivery.close();


                                            Cursor creditsales = db.rawQuery("SELECT SUM(credit) FROM Customerdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND credit != ''", null);
                                            if (creditsales.moveToFirst()){
                                                int homedeliverysales = creditsales.getInt(0);
                                                totaal1credit = String.valueOf(homedeliverysales);


                                                float value = (Float.parseFloat(totaal1credit) / Float.parseFloat(total))* 100 ;
                                                totaal1credit_percent = String.format(Locale.US,"%.1f", value);

                                            }
                                            creditsales.close();

//                                            cashcardcashsales.setText(insert1_cc);
//                                            cashcardcashsales.append(total111);
//
//                                            cashcardcardsales.setText(insert1_cc);
//                                            cashcardcardsales.append(total111card);

                                            cashcardcardsales.setText(insert1_cc);
                                            cashcardcashsales.setText(insert1_cc);
                                            paytmwalletsales1.setText(insert1_cc);
                                            mobikwiksales1.setText(insert1_cc);
                                            freechargesales1.setText(insert1_cc);
                                            sodexosales1.setText(insert1_cc);
                                            zetasales1.setText(insert1_cc);
                                            ticketsales1.setText(insert1_cc);
                                            chequesales1.setText(insert1_cc);
                                            creditsales1.setText(insert1_cc);
                                            upiqrsales1.setText(insert1_cc);

                                            cashcardcardsales.append(total111card);
                                            cashcardcashsales.append(total111);
                                            paytmwalletsales1.append(total111paytm);
                                            mobikwiksales1.append(total111mobi);
                                            freechargesales1.append(total111free);
                                            sodexosales1.append(total111sodexo);
                                            zetasales1.append(total111zeta);
                                            ticketsales1.append(total111ticket);
                                            chequesales1.append(total111cheq);
                                            float va_cre = Float.parseFloat(total111credit);
//                                            creditsales1.append(String.valueOf(Math.abs(va_cre)));
                                            creditsales1.append(String.format("%.0f", va_cre));
                                            upiqrsales1.append(totalupi);

                                            float value1 = Float.parseFloat(total111)*100 / Float.parseFloat(total);
                                            String ruppercent1 = String.format(Locale.US,"%.1f", value1);
                                            cashcardcashsalespercent.setText(String.valueOf(ruppercent1));
                                            cashcardcashsalespercent.append("%");

                                            float value2 = Float.parseFloat(total111card)*100 / Float.parseFloat(total);
                                            //String ruppercent = String.format("%.1f", value);
                                            String ruppercent2 = String.format(Locale.US,"%.1f", value2);
                                            cashcardcardsalespercent.setText(String.valueOf(ruppercent2));
                                            cashcardcardsalespercent.append("%");

//                if (total.toString().equals("0")){
//                    cashcardcashsalespercent.setText("0");
//                    cashcardcashsalespercent.append("%");
//                    cashcardcardsalespercent.setText("0");
//                    cashcardcardsalespercent.append("%");
//                }else {
//                    float value1 = Float.parseFloat(total111)*100 / Float.parseFloat(total);
//                    String ruppercent1 = String.format(Locale.US,"%.1f", value1);
//                    cashcardcashsalespercent.setText(String.valueOf(ruppercent1));
//                    cashcardcashsalespercent.append("%");
//
//                    float value2 = Float.parseFloat(total111card)*100 / Float.parseFloat(total);
//                    //String ruppercent = String.format("%.1f", value);
//                    String ruppercent2 = String.format(Locale.US,"%.1f", value2);
//                    cashcardcardsalespercent.setText(String.valueOf(ruppercent2));
//                    cashcardcardsalespercent.append("%");
//                }

//                                            creditsales1.setText(insert1_cc);
//                                            float va_cre = Float.parseFloat(totaal1credit);
//                                            creditsales1.append(String.valueOf(Math.abs(va_cre)));

                                            float va_cre_per = Float.parseFloat(totaal1credit_percent);
                                            creditsalespercent.setText(String.valueOf(Math.abs(va_cre_per)));
                                            creditsalespercent.append("%");

                                            fourdinein.setText(insert1_cc);
                                            fourdinein.append(dineinsalesstr);

                                            fourtakeaway.setText(insert1_cc);
                                            fourtakeaway.append(takeawaysalesstr);

                                            fourhomedelivery.setText(insert1_cc);
                                            fourhomedelivery.append(homedeliverysalesstr);

                                            float value = Float.parseFloat(dineinsalesstr)*100/Float.parseFloat(total);
                                            String ruppercent = String.format(Locale.US,"%.1f", value);
                                            fourdineinpercent.setText(String.valueOf(ruppercent));
                                            fourdineinpercent.append("%");

//                if (Integer.parseInt(total) == 0){
//
//                }else {
//                    float value = Float.parseFloat(dineinsalesstr)*100/Float.parseFloat(total);
//                    String ruppercent = String.format(Locale.US,"%.1f", value);
//                    fourdineinpercent.setText(String.valueOf(ruppercent));
//                    fourdineinpercent.append("%");
//                }

                                            value1 = Float.parseFloat(takeawaysalesstr)*100 / Float.parseFloat(total);
                                            ruppercent1 = String.format(Locale.US,"%.1f", value1);
                                            fourtakeawaypercent.setText(String.valueOf(ruppercent1));
                                            fourtakeawaypercent.append("%");

//                if (Integer.parseInt(total) == 0){
//
//                }else {
//                    float value1 = Float.parseFloat(takeawaysalesstr)*100 / Float.parseFloat(total);
//                    String ruppercent1 = String.format(Locale.US,"%.1f", value1);
//                    fourtakeawaypercent.setText(String.valueOf(ruppercent1));
//                    fourtakeawaypercent.append("%");
//                }

                                            value2 = Float.parseFloat(homedeliverysalesstr)*100 / Float.parseFloat(total);
                                            ruppercent2 = String.format(Locale.US,"%.1f", value2);
                                            fourhomedeliverypercent.setText(String.valueOf(ruppercent2));
                                            fourhomedeliverypercent.append("%");

//                if (Integer.parseInt(total) == 0){
//
//                }else {
//                    float value2 = Float.parseFloat(homedeliverysalesstr)*100 / Float.parseFloat(total);
//                    String ruppercent2 = String.format(Locale.US,"%.1f", value2);
//                    fourhomedeliverypercent.setText(String.valueOf(ruppercent2));
//                    fourhomedeliverypercent.append("%");
//                }

                                            DownloadMusicfromInternet_new downloadMusicfromInternet_new = new DownloadMusicfromInternet_new();
                                            try {
                                                downloadMusicfromInternet_new.execute();
                                            } catch (Exception e) {
                                                downloadMusicfromInternet_new.cancel(true);
                                                e.printStackTrace();
                                            }

                                        }

                                    });

                                    //   dialog.dismiss();

                                    //  ll_custom.setVisibility(View.VISIBLE);
                                }

                            }
                        })
                        .create();
                dialog.show();
            }




        });




        return rootview;
    }


    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        // Inflate the menu; this adds items to the action bar if it is present.

        inflater.inflate(R.menu.gen_menu, menu);
        super.onCreateOptionsMenu(menu, inflater);


//        if (adapter.isEmpty()){
//            MenuItem bedMenuItem = menu.findItem(R.id.action_export);
//            bedMenuItem.setVisible(false);
//        }else {
//            MenuItem bedMenuItem = menu.findItem(R.id.action_export);
//            bedMenuItem.setVisible(true);
//        }


        //this.menu = menu;

    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        switch (item.getItemId()){
            case R.id.sync_sales:
             syncsales();
                break;
//
//            case R.id.action_userwise:
//                frag = new UserwiseOrderlistActivity();
//                fragTransaction = getFragmentManager().beginTransaction().replace(R.id.container, frag);
//                fragTransaction.commit();
//                break;
//
//
//            case R.id.action_cancellation:
//                frag = new CancellationOrderlistActivity();
//                fragTransaction = getFragmentManager().beginTransaction().replace(R.id.container, frag);
//                fragTransaction.commit();
//                break;
//
//            case R.id.action_discountwise:
//                frag = new DiscountlistReportActivity();
//                fragTransaction = getFragmentManager().beginTransaction().replace(R.id.container, frag);
//                fragTransaction.commit();
//                break;

            case R.id.action_export:

                String hjk = "";
                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor11.moveToFirst()) {
                    int level = cursor11.getInt(0);
                    hjk = String.valueOf(level);
                }
                cursor11.close();
                TextView ghj = new TextView(getActivity());
                ghj.setText(hjk);
                if (ghj.getText().toString().equals("") || ghj.getText().toString().equals("0")) {
                    //MenuItem bedMenuItem = menu.findItem(R.id.action_export);
                    //bedMenuItem.setVisible(false);
                    Toast.makeText(getActivity(), getString(R.string.no_report_to_export), Toast.LENGTH_SHORT).show();
                }else {
                    //MenuItem bedMenuItem = menu.findItem(R.id.action_export);
                    //bedMenuItem.setVisible(true);
                    //Toast.makeText(getActivity(), "yes", Toast.LENGTH_SHORT).show();
                    sdff2 = new SimpleDateFormat("ddMMMyy",Locale.US);
                    currentDateandTimee1 = sdff2.format(new Date());

                    Date dt = new Date();
                    sdff1 = new SimpleDateFormat("hhmmssaa",Locale.US);
                    timee1 = sdff1.format(dt);

                    ExportDatabaseCSVTask task=new ExportDatabaseCSVTask();
                    task.execute();
                }


                break;

            case R.id.action_exportmail:

                String hjk1 = "";
                Cursor ccursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (ccursor11.moveToFirst()) {
                    int level = ccursor11.getInt(0);
                    hjk1 = String.valueOf(level);
                }
                ccursor11.close();
                TextView ghj1 = new TextView(getActivity());
                ghj1.setText(hjk1);
                if (ghj1.getText().toString().equals("") || ghj1.getText().toString().equals("0")) {
                    //MenuItem bedMenuItem = menu.findItem(R.id.action_export);
                    //bedMenuItem.setVisible(false);
                    Toast.makeText(getActivity(), getString(R.string.no_report_to_mail), Toast.LENGTH_SHORT).show();
                }else {

                    sdff2 = new SimpleDateFormat("ddMMMyy",Locale.US);
                    currentDateandTimee1 = sdff2.format(new Date());

                    Date dt1 = new Date();
                    sdff1 = new SimpleDateFormat("hhmmssaa",Locale.US);
                    timee1 = sdff1.format(dt1);


                    Cursor cursor = db1.rawQuery("SELECT * FROM Companydetailss", null);
                    if (cursor.moveToFirst()) {
                        companynameis = cursor.getString(1);
                    }else {
                        companynameis = "";
                    }
                    cursor.close();

                    Cursor ccursore = db1.rawQuery("SELECT * FROM Email_setup", null);
                    if (ccursore.moveToFirst()) {
                        Cursor ccursoree = db1.rawQuery("SELECT * FROM Email_recipient", null);
                        if (ccursoree.moveToFirst()) {

                            ExportDatabaseCSVTask task=new ExportDatabaseCSVTask();
                            task.execute();

                        }
                        ccursoree.close();
                    }
                    ccursore.close();

                    Cursor oone = db.rawQuery("SELECT MAX(total) FROM itemdata ", null);
                    if (oone.moveToFirst()) {
                        int one11 = oone.getInt(0);
                        oone = db.rawQuery("SELECT * FROM itemdata WHERE total = '" + one11 + "' ", null);
                        if (oone.moveToFirst()) {
                            one1 = oone.getString(1);
                            pone = oone.getString(1);
                            max = oone.getString(2);
//                            topitemone.setText(one1);

                            float perc = Float.parseFloat(max) * 100 / Float.parseFloat(total);
                            String percen = String.format(Locale.US,"%.1f", perc);

                            topitem1percent.setText(percen);
                            topitem1percent.append("%");

                        } else {
//                            topitemone.setText("NA");
                            topitem1percent.setText("0%");
                        }
                    }
                    oone.close();


                    Cursor count = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
                    if (count.moveToFirst()) {
                        leveliss = count.getInt(0);
                        totalbillis = String.valueOf(leveliss);
                    }
                    count.close();

                    Cursor one = db.rawQuery("SELECT MAX(total) FROM userdata ", null);
                    if (one.moveToFirst()) {
                        int one11 = one.getInt(0);
                        one = db.rawQuery("SELECT * FROM userdata WHERE total = '" + one11 + "' ", null);
                        if (one.moveToFirst()) {
                            oone1 = one.getString(1);
                            ppone = one.getString(1);
                            mmax = one.getString(2);

                            float perc = Float.parseFloat(max) * 100 / Float.parseFloat(total);
                            ppercen = String.format(Locale.US,"%.1f", perc);
                        }
                    }
                    one.close();

                    Cursor discountcashcard = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
                    if (discountcashcard.moveToFirst()) {
                        level1 = discountcashcard.getInt(0);
                        total11 = String.valueOf(level1);
                    }
                    discountcashcard.close();

                    TextView textView = new TextView(getActivity());
                    textView.setText(R.string.underline);

                    float value22 = Float.parseFloat(total11) * 100 / Float.parseFloat(total);
                    String ruppercent22 = String.format(Locale.US,"%.1f", value22);


                    float value1 = Float.parseFloat(total111) * 100 / Float.parseFloat(total);
                    String ruppercent1 = String.format(Locale.US,"%.1f", value1);
                    //cashcardcashsalespercent.setText(String.valueOf(ruppercent1));

                    float value2 = Float.parseFloat(total111card) * 100 / Float.parseFloat(total);
                    //String ruppercent = String.format("%.1f", value);
                    String ruppercent2 = String.format(Locale.US,"%.1f", value2);
                    //cashcardcardsalespercent.setText(String.valueOf(ruppercent2));

                    float value = Float.parseFloat(dineinsalesstr) * 100 / Float.parseFloat(total);
                    String ruppercent = String.format(Locale.US,"%.1f", value);

                    float value11 = Float.parseFloat(takeawaysalesstr) * 100 / Float.parseFloat(total);
                    String ruppercent11 = String.format(Locale.US,"%.1f", value11);

                    float value21 = Float.parseFloat(homedeliverysalesstr) * 100 / Float.parseFloat(total);
                    String ruppercent21 = String.format(Locale.US,"%.1f", value21);

                    //float perc = Float.parseFloat(max) * 100 / Float.parseFloat(totalis);
                    //String percen = String.format("%.1f", perc);

                    String url = "www.intuitionsoftwares.com";

                    String msg = "Sales report (" + editText11.getText().toString() + "," + editText_from_day_visible.getText().toString()+" to " + editText22.getText().toString() +","+editText_to_day_visible.getText().toString()+ ")\n\n" + textView.getText().toString() + " (Detailed report attached)" +
                            "\n\nTotal sales: "+insert1_rs+" " + totalsales_r.getText().toString() + "\n\nCash sales: "+insert1_rs+" " + total111 + "(" + ruppercent1 + "%)\n\nCard sales: "+insert1_rs+" " + total111card + "(" + ruppercent2 + "%)\n\n" +
                            "General sales: "+insert1_rs+" " + dineinsalesstr + "(" + ruppercent + "%)\n\n" +
                            "Home-delivery sales: "+insert1_rs+" " + homedeliverysalesstr + "(" + ruppercent21 + "%)\n\nNo. of bills: " + totalbillis + "\n\n" +
                            "Avg. sales/bill: "+insert1_rs+" " + avgsales_r.getText().toString() + "\n\nTop selling product:\n" + one1 + " - "+insert1_rs+" " + max + "(" + topitem1percent.getText().toString() + ")\n\nTop seller:\n" + oone1 + " - "+insert1_rs+" " + mmax + "(" + topuser1percent.getText().toString() + ")\n\n" +
                            "Discounts: "+insert1_rs+" " + total11 + "(" + ruppercent22 + "%)\n\nRefunds: "+insert1_rs+" " + refundedstr + "(" + rupper1 + "%)\n\n" +
                            "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                            "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
                            "Powered by: " + Uri.parse(url);


                    Cursor cursore = db1.rawQuery("SELECT * FROM Email_setup", null);
                    if (cursore.moveToFirst()){
                        Cursor cursoree = db1.rawQuery("SELECT * FROM Email_recipient", null);
                        if (cursoree.moveToFirst()){
                            //both are there
                            Cursor cursoor = db1.rawQuery("SELECT * FROM Email_setup", null);
                            if (cursoor.moveToFirst()) {
                                String un = cursoor.getString(1);
                                String pwd = cursoor.getString(2);
                                String em_ca = cursoor.getString(3);
                                if (em_ca.equals("Gmail")) {
                                    getResultsFromApi();
                                    new MakeRequestTask(mCredential).execute();
                                    new MakeRequestTask2(mCredential).execute();
                                }else {
                                    if (em_ca.equals("Yahoo")){
//                                        Toast.makeText(getActivity(), "yahoo "+un, Toast.LENGTH_LONG).show();
                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
                                        if (cursor1.moveToFirst()) {
                                            do {
                                                String unn = cursor1.getString(3);
                                                String toEmails = unn;
                                                toEmailList = Arrays.asList(toEmails
                                                        .split("\\s*,\\s*"));
                                                new SendMailTask_Yahoo_attachment_GenOrderlist(getActivity()).execute(un,
                                                        pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                                new SendMailTask_Yahoo_attachment_GenOrderlist1(getActivity()).execute(un,
                                                        pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                            } while (cursor1.moveToNext());
                                        }
                                        cursor1.close();


                                    }else {
                                        if (em_ca.equals("Hotmail")){
//                                            Toast.makeText(getActivity(), "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();
                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
                                            if (cursor1.moveToFirst()) {
                                                do {
                                                    String unn = cursor1.getString(3);
                                                    String toEmails = unn;
                                                    toEmailList = Arrays.asList(toEmails
                                                            .split("\\s*,\\s*"));
                                                    new SendMailTask_Hotmail_Outlook_attachment_GenOrderlist(getActivity()).execute(un,
                                                            pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                                    new SendMailTask_Hotmail_Outlook_attachment_GenOrderlist1(getActivity()).execute(un,
                                                            pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                                } while (cursor1.moveToNext());
                                            }
                                            cursor1.close();
                                        }else {
                                            if (em_ca.equals("Office365")) {
//                                                Toast.makeText(getActivity(), "office 365 " + un, Toast.LENGTH_LONG).show();
                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        String unn = cursor1.getString(3);
                                                        String toEmails = unn;
                                                        toEmailList = Arrays.asList(toEmails
                                                                .split("\\s*,\\s*"));
                                                        new SendMailTask_Office365_attachment_GenOrderlist(getActivity()).execute(un,
                                                                pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                                        new SendMailTask_Office365_attachment_GenOrderlist1(getActivity()).execute(un,
                                                                pwd, toEmailList, companynameis, msg, currentDateandTimee1, timee1);
                                                    } while (cursor1.moveToNext());
                                                }
                                                cursor1.close();
                                            }
                                        }
                                    }
                                }
                            }
                            cursoor.close();
                        }else {
                            //only recipient not there
                            final Dialog dialoge = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                            dialoge.setContentView(R.layout.email_prerequisites);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                            dialoge.show();

                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                            btncancel.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialoge.dismiss();
                                }
                            });

                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                            recipient_notset.setVisibility(View.VISIBLE);

                            sender_set.setVisibility(View.VISIBLE);

                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                            gotosettings.setVisibility(View.GONE);
                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(getActivity(), EmailSetup_Recipients.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                getActivity().finish();
                                    dialoge.dismiss();
                                }
                            });

                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(getActivity(), EmailSetup_Recipients.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                getActivity().finish();
                                    dialoge.dismiss();
                                }
                            });


                        }
                        cursoree.close();
                    }else {
                        Cursor cursoree = db1.rawQuery("SELECT * FROM Email_recipient", null);
                        if (cursoree.moveToFirst()){
                            //only sender not there
                            final Dialog dialoge = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                            dialoge.setContentView(R.layout.email_prerequisites);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                            dialoge.show();

                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                            btncancel.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialoge.dismiss();
                                }
                            });

                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                            sender_notset.setVisibility(View.VISIBLE);

                            recipient_set.setVisibility(View.VISIBLE);

                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(getActivity(), EmailSetup.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                getActivity().finish();
                                    dialoge.dismiss();
                                }
                            });

                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                            gotosettings1.setVisibility(View.GONE);
                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(getActivity(), EmailSetup.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                getActivity().finish();
                                    dialoge.dismiss();
                                }
                            });

                        }else {
                            //both recipient and sender not there
                            final Dialog dialoge = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                            dialoge.setContentView(R.layout.email_prerequisites);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                            dialoge.show();

                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                            btncancel.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialoge.dismiss();
                                }
                            });

                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                            recipient_notset.setVisibility(View.VISIBLE);
                            sender_notset.setVisibility(View.VISIBLE);

                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(getActivity(), EmailSetup.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                getActivity().finish();
                                    dialoge.dismiss();
                                }
                            });

                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Intent intent = new Intent(getActivity(), EmailSetup_Recipients.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(intent);
//                                                                getActivity().finish();
                                    dialoge.dismiss();
                                }
                            });

                        }
                        cursoree.close();
                    }
                    cursore.close();

                }

                break;

            default:
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    public void syncsales() {

        SharedPreferences sharedpreferences=getDefaultSharedPreferencesMultiProcess(getActivity());
        String company= sharedpreferences.getString("companyname", null);
        String store= sharedpreferences.getString("storename", null);
        String device= sharedpreferences.getString("devicename", null);

        JSONObject params = new JSONObject();

        try {
            params.put("device",device);
            params.put("store",store);
            params.put("company",company);

        } catch (JSONException e) {
            e.printStackTrace();
        }

        //  if(queue==null){
        queue = Volley.newRequestQueue(getActivity());
        // }

        statusDialog = new ProgressDialog(getActivity());
        statusDialog.setMessage(getString(R.string.setmessage23));
        statusDialog.setIndeterminate(false);
        statusDialog.setCancelable(false);
        statusDialog.show();

        JsonObjectRequest sr = new JsonObjectRequest(
                com.android.volley.Request.Method.POST,
                WebserviceUrl+"getlastids.php",params,
                new com.android.volley.Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject responseString) {


                        Log.e("responseString",responseString.toString());
                        String response= "";
                        JSONObject jsonObject=null;
                        try {
                            jsonObject=responseString;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            response = jsonObject.getString("status");
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if(response.equalsIgnoreCase("success")){

                            try {

                                all_sales=jsonObject.getString("all_sales");
                                all_sales_cancelled=all_sales_cancelled=jsonObject.getString("all_sales_cancelled");
                                billnumber=jsonObject.getString("billnumber");
                                cardnumber=jsonObject.getString("cardnumber");

                                Log.e("all_sales",all_sales);
                                Log.e("all_sales_cancelled",all_sales_cancelled);
                                Log.e("billnumber",billnumber);
                                Log.e("cardnumber",cardnumber);

                                callsyncadapter(all_sales,all_sales_cancelled,billnumber,cardnumber);

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }


                        }else{
                            statusDialog.dismiss();
                            Toast.makeText(getActivity(), "sync failed", Toast.LENGTH_SHORT).show();
                        }

                    }
                },
                new com.android.volley.Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        statusDialog.dismiss();
                        Log.d("Signup confirm", "Error: " + error.getMessage());
                    }
                })  {

        };
/*    sr.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
            DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));*/
        sr.setRetryPolicy(new DefaultRetryPolicy(0,-1,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(sr);

    }

    public void callsyncadapter(String all_sales,String all_sales_cancelled,String billnumber,String cardnumber) {
        SQLiteDatabase syncdb= getActivity().openOrCreateDatabase("syncdb", Context.MODE_PRIVATE,null);

        Cursor cursor=syncdb.rawQuery("select * from salesdata",null);
        if(cursor.moveToFirst()) {
            do {
                final int lastsynced = cursor.getInt(2);
                final int id = cursor.getInt(0);
                final String table = cursor.getString(1);

                Log.e(table,lastsynced+"");


            }while (cursor.moveToNext());
        }





        ContentValues contentValues = new ContentValues();
        contentValues.put("lastsyncedid", Integer.parseInt(all_sales));
        String wherecu = "tablename = '" + "All_Sales" + "'";
        int update1 =syncdb.update("salesdata", contentValues, wherecu, new String[]{});

        Log.e("upadate1",update1+"");



         contentValues = new ContentValues();
        contentValues.put("lastsyncedid", Integer.parseInt(all_sales_cancelled));
         wherecu = "tablename = '" + "All_Sales_Cancelled" + "'";
        update1 =syncdb.update("salesdata", contentValues, wherecu, new String[]{});

        Log.e("upadate1",update1+"");

        Bundle extras = new Bundle();
        extras.putString("table","All_Sales_Cancelled");

        extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
        ContentResolver.setSyncAutomatically(mAccount, SyncHelperApp.AUTHORITY, true);
        ContentResolver.requestSync(null, AUTHORITY, extras);

        contentValues = new ContentValues();
        contentValues.put("lastsyncedid", Integer.parseInt(cardnumber));
        wherecu = "tablename = '" + "Cardnumber" + "'";
        update1 =syncdb.update("salesdata", contentValues, wherecu, new String[]{});

        Log.e("upadate1",update1+"");

        extras = new Bundle();
        extras.putString("table","Cardnumber");

        extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
        ContentResolver.setSyncAutomatically(mAccount, SyncHelperApp.AUTHORITY, true);
        ContentResolver.requestSync(null, AUTHORITY, extras);


         contentValues = new ContentValues();
        contentValues.put("lastsyncedid", Integer.parseInt(billnumber));
         wherecu = "tablename = '" + "Billnumber" + "'";
        update1 = syncdb.update("salesdata", contentValues, wherecu, new String[]{});

        Log.e("upadate1",update1+"");

        extras = new Bundle();
        extras.putString("table","Billnumber");

        extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
        ContentResolver.setSyncAutomatically(mAccount, SyncHelperApp.AUTHORITY, true);
        ContentResolver.requestSync(null, AUTHORITY, extras);



         extras = new Bundle();
        extras.putString("table","All_Sales");

        extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
        ContentResolver.setSyncAutomatically(mAccount, SyncHelperApp.AUTHORITY, true);
        ContentResolver.requestSync(null, AUTHORITY, extras);

        statusDialog.dismiss();

    }

    @Override
    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {

    }

    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {

    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {

    }


    private class ExportDatabaseCSVTask extends AsyncTask<String, Void, Boolean> {
        private final ProgressDialog dialog = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);

        @Override
        protected void onPreExecute() {

            this.dialog.setMessage(getString(R.string.setmessage13));
            this.dialog.show();

        }
        protected Boolean doInBackground(final String... args){

//            File dbFile=getActivity().getDatabasePath("mydb_Salesdata");
            //Log.v(TAG, "Db path is: "+dbFile);  //get the path of db


            Cursor cursor = db.rawQuery("Select DISTINCT * from All_Sales WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' GROUP BY bill_no ", null);//replace to cursor = dbHelper.fetchAllHotels();
            db.execSQL("delete from Generalorderlistascdesc1");
            if (cursor.moveToFirst()) {
                do {

//                        final TableRow row = new TableRow(getActivity());
//                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,
//                                TableRow.LayoutParams.MATCH_PARENT, 1.0f));
//                        row.setGravity(Gravity.CENTER_VERTICAL);

                    billno = cursor.getString(11);


                    Cursor modcursor = db.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno + "' AND datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
                    if (modcursor.moveToFirst()) {
                        //level = modcursor.getString(2);
                        total1 = modcursor.getString(2);

                    }
                    modcursor.close();

                    Cursor dis = db.rawQuery("Select * from Discountdetails WHERE billno = '" + billno + "' ", null);
                    if (dis.moveToFirst()) {
                        discount = dis.getString(7);
                    }else {
                        discount = "0";
                    }
                    dis.close();

                    Cursor billtype = db.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno + "' ", null);
                    if (billtype.moveToFirst()) {
                        strpaymentmethod = billtype.getString(5);
                        strbilltype = billtype.getString(6);
                        bill_coun = billtype.getString(11);
                        glob_ta = billtype.getString(10);
                    }
                    billtype.close();

                    Cursor cardno = db.rawQuery("Select * from Cardnumber WHERE billnumber = '" + billno + "' ", null);
                    if (cardno.moveToFirst()) {
                        cardnum = cardno.getString(1);
                    }else {
                        cardnum = "";
                    }
                    cardno.close();

//                        Cursor billcou = db.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno + "' ", null);
//                        if (billcou.moveToFirst()){
//                            bill_coun = billcou.getString(11);
//                        }

                    Cursor itemmnn = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno + "' ", null);
                    if (itemmnn.moveToFirst()){

                        do {
                            date = itemmnn.getString(25);
                            date11 = itemmnn.getString(13);

                            time = itemmnn.getString(12);

                            user = itemmnn.getString(45);
                            String hsn = itemmnn.getString(34);
                            String tax_name = itemmnn.getString(10);
                            String tax_perc = itemmnn.getString(9);

                            String tax_name2 = itemmnn.getString(35);
                            String tax_perc2 = itemmnn.getString(36);
                            String tax_name3 = itemmnn.getString(37);
                            String tax_perc3 = itemmnn.getString(38);
                            String tax_name4 = itemmnn.getString(39);
                            String tax_perc4 = itemmnn.getString(40);
                            String tax_name5 = itemmnn.getString(41);
                            String tax_perc5 = itemmnn.getString(42);

                            iittnn = itemmnn.getString(1);
                            iittnnquan = itemmnn.getString(2);
                            iittnntable = itemmnn.getString(15);
                            iittnnindprice = itemmnn.getString(3);
                            iittnnindtotalprice = itemmnn.getString(4);
                            iittnninddate = itemmnn.getString(33);
                            String add_sec = itemmnn.getString(12);

                            if (iittnninddate.contains(":")){
                                iittnninddate = iittnninddate.replace(":", "");
                            }

                            if (add_sec.contains(":")){
                                add_sec = add_sec.replace(":", "");
                            }

                            add_sec = add_sec.substring(4, 6);

                            String tax_rs1 = "0";
                            float f1 = 0;
                            TextView cv1 = new TextView(getActivity());
                            cv1.setText(tax_perc);
                            if (cv1.getText().toString().equals("")){
                                tax_rs1 = "0";
                            }else {
                                f1 = (Float.parseFloat(iittnnindtotalprice) * Float.parseFloat(tax_perc))/100;
                                tax_rs1 = String.format("%.2f", f1);
                            }

                            String tax_rs2 = "0";
                            float f2 = 0;
                            TextView cv2 = new TextView(getActivity());
                            cv2.setText(tax_perc2);
                            if (cv2.getText().toString().equals("")){
                                tax_rs2 = "0";
                            }else {
                                f2 = (Float.parseFloat(iittnnindtotalprice) * Float.parseFloat(tax_perc2))/100;
                                tax_rs2 = String.format("%.2f", f2);
                            }

                            String tax_rs3 = "0";
                            float f3 = 0;
                            TextView cv3 = new TextView(getActivity());
                            cv3.setText(tax_perc3);
                            if (cv3.getText().toString().equals("")){
                                tax_rs3 = "0";
                            }else {
                                f3 = (Float.parseFloat(iittnnindtotalprice) * Float.parseFloat(tax_perc3))/100;
                                tax_rs3 = String.format("%.2f", f3);
                            }

                            String tax_rs4 = "0";
                            float f4 = 0;
                            TextView cv4 = new TextView(getActivity());
                            cv4.setText(tax_perc4);
                            if (cv4.getText().toString().equals("")){
                                tax_rs4 = "0";
                            }else {
                                f4 = (Float.parseFloat(iittnnindtotalprice) * Float.parseFloat(tax_perc4))/100;
                                tax_rs4 = String.format("%.2f", f4);
                            }

                            String tax_rs5 = "0";
                            float f5 = 0;
                            TextView cv5 = new TextView(getActivity());
                            cv5.setText(tax_perc5);
                            if (cv5.getText().toString().equals("")){
                                tax_rs5 = "0";
                            }else {
                                f5 = (Float.parseFloat(iittnnindtotalprice) * Float.parseFloat(tax_perc5))/100;
                                tax_rs5 = String.format("%.2f", f5);
                            }


                            TextView cv0 = new TextView(getActivity());
//                            cv.setText(iittnnindtotalprice);

                            TextView cv8 = new TextView(getActivity());
                            cv8.setText(glob_ta);

                            if (cv8.getText().toString().equals("") || cv8.getText().toString().equals("0") || cv8.getText().toString().equals("0.0") || cv8.getText().toString().equals("0.00")){
                                global_taxx = "0";
                            }else {
                                float fv = (Float.parseFloat(iittnnindtotalprice) * Float.parseFloat(glob_ta))/100;
                                global_taxx = String.format("%.2f", fv);
                            }

                            float f8 = Float.parseFloat(iittnnindtotalprice)+Float.parseFloat(tax_rs1)+Float.parseFloat(tax_rs2)+Float.parseFloat(tax_rs3)+
                                    Float.parseFloat(tax_rs4)+Float.parseFloat(tax_rs5)+Float.parseFloat(global_taxx);
                            String iittnnindtotalprice1 = String.format("%.2f", f8);

                            ContentValues contentValues = new ContentValues();
                            contentValues.put("date", date);
                            contentValues.put("time", time);
                            contentValues.put("user", user);
                            contentValues.put("billno", billno);
                            contentValues.put("sales", total1);
                            contentValues.put("discountamount", discount);
                            contentValues.put("paymentmethod", strpaymentmethod);
                            contentValues.put("billtype", strbilltype);
                            contentValues.put("itemname", iittnn);
                            contentValues.put("quan", iittnnquan);
                            contentValues.put("tableid", iittnntable);
                            contentValues.put("individualprice", iittnnindprice);
                            contentValues.put("individualtotal", iittnnindtotalprice1);
                            contentValues.put("billcount", bill_coun);
                            contentValues.put("cardnumber", cardnum);
                            contentValues.put("datetimee", iittnninddate+""+add_sec);
                            contentValues.put("hsn_code", hsn);
                            contentValues.put("itemtax_name", tax_name);
                            contentValues.put("itemtax_per", tax_perc);
                            contentValues.put("itemtax_rs", tax_rs1);
                            contentValues.put("globaltax_rs", global_taxx);

                            contentValues.put("itemtax_name2", tax_name2);
                            contentValues.put("itemtax_rs2", tax_rs2);
                            contentValues.put("itemtax_name3", tax_name3);
                            contentValues.put("itemtax_rs3", tax_rs3);
                            contentValues.put("itemtax_name4", tax_name4);
                            contentValues.put("itemtax_rs4", tax_rs4);
                            contentValues.put("itemtax_name5", tax_name5);
                            contentValues.put("itemtax_rs5", tax_rs5);
                            db.insert("Generalorderlistascdesc1", null, contentValues);
                        }while (itemmnn.moveToNext());


                    }
                    itemmnn.close();

                } while (cursor.moveToNext());
            }
            cursor.close();


//            File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_Billwise_items_report");
//            if (!exportDir.exists()) {
//                exportDir.mkdirs();
//            }
//
//            File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_sales_report");
//            if (!exportDir1.exists()) {
//                exportDir1.mkdirs();
//            }

            File exportDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), "/IVEPOS_reports/IVEPOS_Billwise_items_report");
            if (!exportDir.exists()) {
                exportDir.mkdirs();
            }

            File exportDir1 = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), "/IVEPOS_reports/IVEPOS_sales_report");
            if (!exportDir1.exists()) {
                exportDir1.mkdirs();
            }

            file = new File(exportDir, "IvePOS_Billwise_items_report"+currentDateandTimee1+"_"+timee1+".csv");
            file1 = new File(exportDir1, "IvePOS_sales_report"+currentDateandTimee1+"_"+timee1+".csv");
            try {

                file.createNewFile();
                CSVWriter csvWrite = new CSVWriter(new FileWriter(file));

                ArrayList<String> groupList = new ArrayList<String>();
                String arrStr2[] = new String[0];
                // this is the Column of the table and same for Header of CSV file
                Cursor cursor2 = db1.rawQuery("SELECT * FROM Taxes WHERE taxtype = 'Itemtax'", null);
                if (cursor2.moveToFirst()){
                    do {
                        String tax1 = cursor2.getString(1);
                        arrStr2 = new String[]{tax1};
                        groupList.add(tax1);
                    }while (cursor2.moveToNext());
                }
                cursor2.close();

                String arrStr1[] ={"Date", "Time", "User", "Bill count", "Bill no.", "Type", "Mode", "Table", "HSN Code", "Itemname", "Qty.", "Individualprice", "Global tax "+insert1_rs, "Total price"};
                int le = groupList.size();
                String arrStrTax[]=new String[(le+14)];
                for(int k=0;k<12;k++){
                    arrStrTax[k]=arrStr1[k];
                }
                int m=12;
                for (int i =0; i<le; i++){
                    String tax_l=groupList.get(i);
                    arrStrTax[m]=tax_l;
                    m++;
                }
                for(int k=12;k<14;k++){
                    arrStrTax[m]=arrStr1[k];
                    m++;
                }
                csvWrite.writeNext(arrStrTax);

//                db = getActivity().openOrCreateDatabase("mydb_Salesdata",
//                        Context.MODE_PRIVATE, null);
                Cursor curCSV = db.rawQuery("SELECT * FROM Generalorderlistascdesc1",null);
                //csvWrite.writeNext(curCSV.getColumnNames());

                while(curCSV.moveToNext())  {
                    String arrStr[] ={curCSV.getString(1), curCSV.getString(2), curCSV.getString(3), curCSV.getString(18), curCSV.getString(4), curCSV.getString(9),
                            curCSV.getString(8), curCSV.getString(12), curCSV.getString(19), curCSV.getString(10), curCSV.getString(11), curCSV.getString(13),
//                            curCSV.getString(20), curCSV.getString(21), curCSV.getString(22), curCSV.getString(23), curCSV.getString(17)
                    };


                    int le1 = groupList.size();
                    String arrStrTax3[]=new String[(le1+14)];
                    for(int k=0;k<12;k++){
                        arrStrTax3[k]=arrStr[k];
                    }
                    int m3 = 12;
                    for (int i =0; i<le1; i++){
                        String tax_l=groupList.get(i);
                        arrStrTax3[m3]=tax_l;
//                        System.out.println("genor genor "+arrStrTax3[m3]);

                        Cursor cursor3 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+curCSV.getString(4)+"' AND itemname = '"+curCSV.getString(10)+"'", null);
                        if (cursor3.moveToFirst()){
                            String tax1 = cursor3.getString(10);
                            String tax2 = cursor3.getString(35);
                            String tax3 = cursor3.getString(37);
                            String tax4 = cursor3.getString(39);
                            String tax5 = cursor3.getString(41);
                            if (arrStrTax3[m3].toString().equals(tax1)){
                                System.out.println("genor genor1 "+arrStrTax3[m3]);
//                                arrStrTax3[m3]=tax_l;
                                Cursor cursor4 = db.rawQuery("SELECT * FROM Generalorderlistascdesc1 WHERE billno = '"+curCSV.getString(4)+"' AND itemname = '"+curCSV.getString(10)+"' AND itemtax_name = '"+tax_l+"'", null);
                                if (cursor4.moveToFirst()){
                                    String v1 = cursor4.getString(22);
                                    arrStrTax3[m3]=v1;
                                }
                                cursor4.close();
                            }else {
                                if (arrStrTax3[m3].toString().equals(tax2)){
                                    System.out.println("genor genor2 "+arrStrTax3[m3]);
//                                    arrStrTax3[m3]=tax_l;
                                    Cursor cursor4 = db.rawQuery("SELECT * FROM Generalorderlistascdesc1 WHERE billno = '"+curCSV.getString(4)+"' AND itemname = '"+curCSV.getString(10)+"' AND itemtax_name2 = '"+tax_l+"'", null);
                                    if (cursor4.moveToFirst()){
                                        String v1 = cursor4.getString(25);
                                        arrStrTax3[m3]=v1;
                                    }
                                    cursor4.close();
                                }else {
                                    if (arrStrTax3[m3].toString().equals(tax3)){
                                        System.out.println("genor genor3 "+arrStrTax3[m3]);
//                                        arrStrTax3[m3]=tax_l;
                                        Cursor cursor4 = db.rawQuery("SELECT * FROM Generalorderlistascdesc1 WHERE billno = '"+curCSV.getString(4)+"' AND itemname = '"+curCSV.getString(10)+"' AND itemtax_name3 = '"+tax_l+"'", null);
                                        if (cursor4.moveToFirst()){
                                            String v1 = cursor4.getString(27);
                                            arrStrTax3[m3]=v1;
                                        }
                                        cursor4.close();
                                    }else {
                                        if (arrStrTax3[m3].toString().equals(tax4)){
                                            System.out.println("genor genor4 "+arrStrTax3[m3]);
//                                            arrStrTax3[m3]=tax_l;
                                            Cursor cursor4 = db.rawQuery("SELECT * FROM Generalorderlistascdesc1 WHERE billno = '"+curCSV.getString(4)+"' AND itemname = '"+curCSV.getString(10)+"' AND itemtax_name4 = '"+tax_l+"'", null);
                                            if (cursor4.moveToFirst()){
                                                String v1 = cursor4.getString(29);
                                                arrStrTax3[m3]=v1;
                                            }
                                            cursor4.close();
                                        }else {
                                            if (arrStrTax3[m3].toString().equals(tax5)){
                                                System.out.println("genor genor5 "+arrStrTax3[m3]);
//                                                arrStrTax3[m3]=tax_l;
                                                Cursor cursor4 = db.rawQuery("SELECT * FROM Generalorderlistascdesc1 WHERE billno = '"+curCSV.getString(4)+"' AND itemname = '"+curCSV.getString(10)+"' AND itemtax_name5 = '"+tax_l+"'", null);
                                                if (cursor4.moveToFirst()){
                                                    String v1 = cursor4.getString(31);
                                                    arrStrTax3[m3]=v1;
                                                }
                                                cursor4.close();
                                            }else {
                                                System.out.println("genor genor5 0 "+arrStrTax3[m3]);
                                                arrStrTax3[m3]="0";
                                            }
                                        }
                                    }
                                }
                            }

                        }
                        cursor3.close();
                        m3++;
                    }
                  /*  for(int k=12;k<14;k++){
                        arrStrTax3[m3]=arrStr[k];
                        m3++;
                    }*/
                    arrStrTax3[m3]= curCSV.getString(23);
                    m3++;
                    arrStrTax3[m3]= curCSV.getString(17);


                    csvWrite.writeNext(arrStrTax3);

                }
                curCSV.close();

                csvWrite.close();

                String filepath = String.valueOf(file);
                FileReader filee = new FileReader(filepath);

                BufferedReader buffer = new BufferedReader(filee);
                String[] line;

                String linee; int c= 0;
                while ((linee = buffer.readLine()) != null) {
                    c = StringUtils.countMatches(linee, ",");
                }

                CSVWriter csvWrite2 = new CSVWriter(new FileWriter(file, true));
                String arrStr112[] ={"", "", "", "", "", "", "", "", "", "", "Total", "", "", ""};
                int lee = groupList.size();
                String arrStrTax2[]=new String[(lee+14)];
                for(int k=0;k<12;k++){
                    arrStrTax2[k]=arrStr112[k];
                }
                int mm=12;

                float sum = 0;
                for (int i = 12; i<(c+1); i++) {
                    CSVReader reader = new CSVReader(new FileReader(filepath));
                    while ((line = reader.readNext()) != null) {
//                    rowNumber++;
                        String name = line[i];
                        if (name.contains("\"")) {
                            name = name.replaceAll("\"", "");
                        }
                        if (name.matches(".*[a-zA-Z]+.*")) {

                        }else {
//                            System.out.println(i+" count , is "+name);
                            sum = sum + Float.parseFloat(name);
//                            break;
                        }
                    }
                    System.out.println(c+" "+i+" count , is " + sum);
//                    for (int ii =0; ii<lee; ii++){
//                        String tax_l=groupList.get(ii);
                    arrStrTax2[mm]=String.valueOf(String.format("%.2f",sum));
                    mm++;
//                    }
                    sum = 0;
                }

//                for(int k=12;k<14;k++){
//                    arrStrTax2[mm]=arrStr112[k];
//                    mm++;
//                }
                csvWrite2.writeNext(arrStrTax2);
                csvWrite2.close();

//                String linee;
//                while ((linee = buffer.readLine()) != null) {
//                    int c = StringUtils.countMatches(linee, ",");
////                    System.out.println("count , is "+(c+1));
//                    String[] str = linee.split(",", (c+1));  // defining 3 columns with null or blank field //values acceptance
//                    for (int i = 12; i<(c+1); i++){
//                        String name = str[i];
//
//                        if (name.contains("\"")) {
//                            name = name.replaceAll("\"", "");
//                        }
//                        if (name.matches(".*[a-zA-Z]+.*")) {
//
//                        }else {
//                            System.out.println(i+" count , is "+name);
//                            break;
//                        }
//                    }
//                }

/////////////////////////////////////////////
                file1.createNewFile();
                CSVWriter csvWrite1 = new CSVWriter(new FileWriter(file1));

                // this is the Column of the table and same for Header of CSV file
//                String arrStr11[] ={"Date", "Time", "User", "Bill count", "Bill no.", "Type", "Mode", "Table", "Subtotal", "Tax", "Discount", "Total"};
                String arrStr11[] ={"Date", "Time", "User", "Bill count", "Bill no.", "Type", "Mode", "Table", "Subtotal", "Tax", "Discount", "Total"};
                int le_sales = groupList.size();
                String arrStrTax_sales[]=new String[(le_sales+14)];
                for(int k=0;k<9;k++){
                    arrStrTax_sales[k]=arrStr11[k];
                }
                int m_sales=9;
                for (int i =0; i<le_sales; i++){
                    String tax_l=groupList.get(i);
                    arrStrTax_sales[m_sales]=tax_l;
                    m_sales++;
                }
                for(int k=9;k<12;k++){
                    arrStrTax_sales[m_sales]=arrStr11[k];
                    m_sales++;
                }
                csvWrite1.writeNext(arrStrTax_sales);

//                db = getActivity().openOrCreateDatabase("mydb_Salesdata",
//                        Context.MODE_PRIVATE, null);
                Cursor curCSVv = db.rawQuery("SELECT * FROM Billnumber",null);
                //csvWrite.writeNext(curCSV.getColumnNames());

                if (curCSVv.moveToFirst())  {
                    do {
                        String billnos = curCSVv.getString(1);
                        Cursor curCSV1 = db.rawQuery("SELECT * FROM Generalorderlistascdesc1 WHERE billno = '"+billnos+"'",null);
                        if (curCSV1.moveToFirst()) {
                            String arrStr[] = {curCSV1.getString(1), curCSV1.getString(2), curCSVv.getString(3), curCSVv.getString(11), curCSVv.getString(1), curCSVv.getString(6),
                                    curCSVv.getString(5), curCSV1.getString(12), curCSVv.getString(7),
//                                    curCSVv.getString(8),     //tax
//                                    curCSV1.getString(7), curCSVv.getString(2)    //discount, total
                            };


                            int le1 = groupList.size();
                            String arrStrTax3[] = new String[(le1 + 12)];
                            for (int k = 0; k < 9; k++) {
                                arrStrTax3[k] = arrStr[k];
                            }
                            int m3 = 9;
                            for (int i = 0; i < le1; i++) {
                                String tax_l = groupList.get(i);
                                arrStrTax3[m3] = tax_l;
//                        System.out.println("genor genor "+arrStrTax3[m3]);

                                TableLayout tableLayout1 = new TableLayout(getActivity());
                                tableLayout1.removeAllViews();

                                Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '" + curCSVv.getString(1) + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {

                                    do {
                                        String name = ccursor.getString(10);
                                        String value = ccursor.getString(9);
                                        String pq = ccursor.getString(4);
                                        String itna = ccursor.getString(1);

                                        TextView v = new TextView(getActivity());
                                        v.setText(value);

                                        TextView v1 = new TextView(getActivity());
                                        v1.setText(name);
                                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                                || v.getText().toString().equals("")) {

                                        } else {
                                            final TableRow row = new TableRow(getActivity());
                                            row.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                            TableRow.LayoutParams lp, lp1, lp2;

                                            TextView tvv = new TextView(getActivity());
                                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            //tv.setBackgroundResource(R.drawable.cell_shape);
                                            tvv.setGravity(Gravity.START);
                                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tvv.setText(name);

                                            TextView tv1 = new TextView(getActivity());
                                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            tv1.setGravity(Gravity.START);
                                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tv1.setText(value);
                                            float vbn = Float.parseFloat(value);
                                            String bvn = String.format(Locale.US,"%.2f", vbn);
                                            String value1 = tv1.getText().toString();

                                            TextView tv2 = new TextView(getActivity());
                                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                                            tv2.append(name);
                                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv2.setPadding(0, 0, 20, 0);
                                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            //tv2.setTextColor(Color.parseColor("#000000"));
                                            row.addView(tv2);

                                            TextView textView1 = new TextView(getActivity());
                                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            row.addView(textView1);

                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                                            String tota1 = String.format(Locale.US,"%.2f", tota);
                                            tv3.setText(String.valueOf(tota));
                                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            String value2 = tv3.getText().toString();
                                            row.addView(tv3);

                                            tableLayout1.addView(row);
                                        }
                                    } while (ccursor.moveToNext());
                                }
                                ccursor.close();

                                Cursor ccursor2 = db.rawQuery("Select * from All_Sales where bill_no = '" + curCSVv.getString(1) + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor2.moveToFirst()) {

                                    do {
                                        String name = ccursor2.getString(35);
                                        String value = ccursor2.getString(36);
                                        String pq = ccursor2.getString(4);
                                        String itna = ccursor2.getString(1);

                                        TextView v = new TextView(getActivity());
                                        v.setText(value);

                                        TextView v1 = new TextView(getActivity());
                                        v1.setText(name);
                                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                                || v.getText().toString().equals("")) {

                                        } else {
                                            final TableRow row = new TableRow(getActivity());
                                            row.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                            TableRow.LayoutParams lp, lp1, lp2;

                                            TextView tvv = new TextView(getActivity());
                                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            //tv.setBackgroundResource(R.drawable.cell_shape);
                                            tvv.setGravity(Gravity.START);
                                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tvv.setText(name);

                                            TextView tv1 = new TextView(getActivity());
                                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            tv1.setGravity(Gravity.START);
                                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tv1.setText(value);
                                            float vbn = Float.parseFloat(value);
                                            String bvn = String.format(Locale.US,"%.2f", vbn);
                                            String value1 = tv1.getText().toString();

                                            TextView tv2 = new TextView(getActivity());
                                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                                            tv2.append(name);
                                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv2.setPadding(0, 0, 20, 0);
                                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            //tv2.setTextColor(Color.parseColor("#000000"));
                                            row.addView(tv2);

                                            TextView textView1 = new TextView(getActivity());
                                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            row.addView(textView1);

                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                                            String tota1 = String.format(Locale.US,"%.2f", tota);
                                            tv3.setText(String.valueOf(tota));
                                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            String value2 = tv3.getText().toString();
                                            row.addView(tv3);

                                            tableLayout1.addView(row);
                                        }
                                    } while (ccursor2.moveToNext());
                                }
                                ccursor2.close();

                                Cursor ccursor3 = db.rawQuery("Select * from All_Sales where bill_no = '" + curCSVv.getString(1) + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor3.moveToFirst()) {

                                    do {
                                        String name = ccursor3.getString(37);
                                        String value = ccursor3.getString(38);
                                        String pq = ccursor3.getString(4);
                                        String itna = ccursor3.getString(1);

                                        TextView v = new TextView(getActivity());
                                        v.setText(value);

                                        TextView v1 = new TextView(getActivity());
                                        v1.setText(name);
                                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                                || v.getText().toString().equals("")) {

                                        } else {
                                            final TableRow row = new TableRow(getActivity());
                                            row.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                            TableRow.LayoutParams lp, lp1, lp2;

                                            TextView tvv = new TextView(getActivity());
                                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            //tv.setBackgroundResource(R.drawable.cell_shape);
                                            tvv.setGravity(Gravity.START);
                                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tvv.setText(name);

                                            TextView tv1 = new TextView(getActivity());
                                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            tv1.setGravity(Gravity.START);
                                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tv1.setText(value);
                                            float vbn = Float.parseFloat(value);
                                            String bvn = String.format(Locale.US,"%.2f", vbn);
                                            String value1 = tv1.getText().toString();

                                            TextView tv2 = new TextView(getActivity());
                                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                                            tv2.append(name);
                                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv2.setPadding(0, 0, 20, 0);
                                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            //tv2.setTextColor(Color.parseColor("#000000"));
                                            row.addView(tv2);

                                            TextView textView1 = new TextView(getActivity());
                                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            row.addView(textView1);

                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                                            String tota1 = String.format(Locale.US,"%.2f", tota);
                                            tv3.setText(String.valueOf(tota));
                                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            String value2 = tv3.getText().toString();
                                            row.addView(tv3);

                                            tableLayout1.addView(row);
                                        }
                                    } while (ccursor3.moveToNext());
                                }
                                ccursor3.close();

                                Cursor ccursor4 = db.rawQuery("Select * from All_Sales where bill_no = '" + curCSVv.getString(1) + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor4.moveToFirst()) {

                                    do {
                                        String name = ccursor4.getString(39);
                                        String value = ccursor4.getString(40);
                                        String pq = ccursor4.getString(4);
                                        String itna = ccursor4.getString(1);

                                        TextView v = new TextView(getActivity());
                                        v.setText(value);

                                        TextView v1 = new TextView(getActivity());
                                        v1.setText(name);
                                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                                || v.getText().toString().equals("")) {

                                        } else {
                                            final TableRow row = new TableRow(getActivity());
                                            row.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                            TableRow.LayoutParams lp, lp1, lp2;

                                            TextView tvv = new TextView(getActivity());
                                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            //tv.setBackgroundResource(R.drawable.cell_shape);
                                            tvv.setGravity(Gravity.START);
                                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tvv.setText(name);

                                            TextView tv1 = new TextView(getActivity());
                                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            tv1.setGravity(Gravity.START);
                                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tv1.setText(value);
                                            float vbn = Float.parseFloat(value);
                                            String bvn = String.format(Locale.US,"%.2f", vbn);
                                            String value1 = tv1.getText().toString();

                                            TextView tv2 = new TextView(getActivity());
                                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                                            tv2.append(name);
                                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv2.setPadding(0, 0, 20, 0);
                                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            //tv2.setTextColor(Color.parseColor("#000000"));
                                            row.addView(tv2);

                                            TextView textView1 = new TextView(getActivity());
                                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            row.addView(textView1);

                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                                            String tota1 = String.format(Locale.US,"%.2f", tota);
                                            tv3.setText(String.valueOf(tota));
                                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            String value2 = tv3.getText().toString();
                                            row.addView(tv3);

                                            tableLayout1.addView(row);
                                        }
                                    } while (ccursor4.moveToNext());
                                }
                                ccursor4.close();

                                Cursor ccursor5 = db.rawQuery("Select * from All_Sales where bill_no = '" + curCSVv.getString(1) + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor5.moveToFirst()) {

                                    do {
                                        String name = ccursor5.getString(41);
                                        String value = ccursor5.getString(42);
                                        String pq = ccursor5.getString(4);
                                        String itna = ccursor5.getString(1);

                                        TextView v = new TextView(getActivity());
                                        v.setText(value);

                                        TextView v1 = new TextView(getActivity());
                                        v1.setText(name);
                                        if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                                                || v.getText().toString().equals("")) {

                                        } else {
                                            final TableRow row = new TableRow(getActivity());
                                            row.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                            TableRow.LayoutParams lp, lp1, lp2;

                                            TextView tvv = new TextView(getActivity());
                                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            //tv.setBackgroundResource(R.drawable.cell_shape);
                                            tvv.setGravity(Gravity.START);
                                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tvv.setText(name);

                                            TextView tv1 = new TextView(getActivity());
                                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                                            tv1.setGravity(Gravity.START);
                                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            tv1.setText(value);
                                            float vbn = Float.parseFloat(value);
                                            String bvn = String.format(Locale.US,"%.2f", vbn);
                                            String value1 = tv1.getText().toString();

                                            TextView tv2 = new TextView(getActivity());
                                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                                            tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                                            tv2.append(name);
                                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                            tv2.setPadding(0, 0, 20, 0);
                                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            //tv2.setTextColor(Color.parseColor("#000000"));
                                            row.addView(tv2);

                                            TextView textView1 = new TextView(getActivity());
                                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            row.addView(textView1);

                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                            float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                                            String tota1 = String.format(Locale.US,"%.2f", tota);
                                            tv3.setText(String.valueOf(tota));
                                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                            String value2 = tv3.getText().toString();
                                            row.addView(tv3);

                                            tableLayout1.addView(row);
                                        }
                                    } while (ccursor5.moveToNext());
                                }
                                ccursor5.close();


                                ArrayList<String> groupListz = new ArrayList<String>();

                                float sum_p = 0;
                                for (int ij = 0; ij < tableLayout1.getChildCount(); ij++) {
                                    TableRow mRow = (TableRow) tableLayout1.getChildAt(ij);
                                    TextView mTextView = (TextView) mRow.getChildAt(0);
                                    System.out.println("arrStrTax3[m3] mTextView.getText() "+mTextView.getText().toString());
//                                Toast.makeText(BeveragesMenuFragment.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

//                                    if (groupListz.contains(mTextView.getText().toString())) {
//
//                                    }else {
                                    sum_p = 0;
                                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                                        mTextView1 = (TextView) mRow1.getChildAt(0);
                                        mTextView2 = (TextView) mRow1.getChildAt(2);
                                        if (groupListz.contains(mTextView.getText().toString())) {
                                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(BeveragesMenuFragment.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                                            }
                                        } else {
                                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                                groupListz.add(mTextView.getText().toString());
                                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(BeveragesMenuFragment.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                                            }
                                        }
                                    }

                                    String mod1 = String.valueOf(sum_p);

//                                        if (arrStrTax3[m3].toString().equals(tax_l)){
//                                            mod1 = "0";
//                                            arrStrTax3[m3]=mod1;
//                                        }

                                    System.out.println("arrStrTax3[m3] "+arrStrTax3[m3]);
                                    System.out.println("arrStrTax3[m3] mTextView1.getText() "+mTextView1.getText().toString());
                                    if (arrStrTax3[m3].toString().equals(mTextView.getText().toString())) {
                                        mod1 = String.valueOf(String.format("%.2f", sum_p));
                                        arrStrTax3[m3]=mod1;
                                        System.out.println("1 saleswise genor genor5 0 "+arrStrTax3[m3]);
                                    }




                                    else {

//                                            if (arrStrTax3[m3].matches(".*[a-zA-Z]+.*")) {
//                                                arrStrTax3[m3]="0";
//                                            }
//                                            String mod1 = "0";
//
//                                            arrStrTax3[m3]=mod1;
//                                            System.out.println("2 saleswise genor genor5 0 "+arrStrTax3[m3]);
                                    }

//                                    }
                                }

                                if (arrStrTax3[m3].matches(".*[a-zA-Z]+.*")) {
                                    arrStrTax3[m3]="0";
                                }

                                m3++;
                            }
                  /*  for(int k=12;k<14;k++){
                        arrStrTax3[m3]=arrStr[k];
                        m3++;
                    }*/

                            arrStrTax3[m3] = curCSVv.getString(8);
                            m3++;
                            arrStrTax3[m3] = curCSV1.getString(7);
                            m3++;
                            arrStrTax3[m3] = curCSVv.getString(2);


                            csvWrite1.writeNext(arrStrTax3);
                        }

                        curCSV1.close();
                    }while (curCSVv.moveToNext());

                }
                curCSVv.close();
                csvWrite1.close();


                String filepath_sales = String.valueOf(file1);
                FileReader filee_sales = new FileReader(filepath_sales);

                BufferedReader buffer_sales = new BufferedReader(filee_sales);
                String[] line_sales;

                String linee_sales; int c_sales= 0;
                while ((linee_sales = buffer_sales.readLine()) != null) {
                    c_sales = StringUtils.countMatches(linee_sales, ",");
                }

                CSVWriter csvWrite2_sales = new CSVWriter(new FileWriter(file1, true));
                String arrStr112_sales[] ={"", "", "", "", "", "", "", "", "", "", ""};
                int lee_sales = groupList.size();
                String arrStrTax2_sales[]=new String[(lee_sales+14)];
                for(int k=0;k<9;k++){
                    arrStrTax2_sales[k]=arrStr112_sales[k];
                }
                int mm_sales=9;

                float sum_sales = 0;
                for (int i = 9; i<(c_sales+1); i++) {
                    CSVReader reader = new CSVReader(new FileReader(filepath_sales));
                    while ((line_sales = reader.readNext()) != null) {
//                    rowNumber++;
                        String name = line_sales[i];
                        if (name.contains("\"")) {
                            name = name.replaceAll("\"", "");
                        }
                        if (name.matches(".*[a-zA-Z]+.*")) {

                        }else {
//                            System.out.println(i+" count , is "+name);
                            sum_sales = sum_sales + Float.parseFloat(name);
//                            break;
                        }
                    }
                    System.out.println(c_sales+" "+i+" count , is " + sum_sales);
//                    for (int ii =0; ii<lee; ii++){
//                        String tax_l=groupList.get(ii);
                    arrStrTax2_sales[mm_sales]=String.valueOf(String.format("%.2f", sum_sales));
                    mm_sales++;
//                    }
                    sum_sales = 0;
                }

//                for(int k=12;k<14;k++){
//                    arrStrTax2[mm]=arrStr112[k];
//                    mm++;
//                }
                csvWrite2_sales.writeNext(arrStrTax2_sales);
                csvWrite2_sales.close();


//                CSVWriter csvWrite2_sales1 = new CSVWriter(new FileWriter(file1, true));
//                String arrStr112_sales1[] ={"", "", "", "", "", "", "", "", "", "", ""};
//                int lee_sales1 = groupList.size();
//                String arrStrTax2_sales1[]=new String[(lee_sales1+14)];
//                for(int k=0;k<9;k++){
//                    arrStrTax2_sales1[k]=arrStr112_sales1[k];
//                }
//                int mm_sales1=9;
//
//                float sum_sales1 = 0;
//                for (int i = 9; i<(c_sales+1); i++) {
//                    CSVReader reader = new CSVReader(new FileReader(filepath_sales));
//                    while ((line_sales = reader.readNext()) != null) {
////                    rowNumber++;
//                        String name = line_sales[i];
//                        if (name.contains("\"")) {
//                            name = name.replaceAll("\"", "");
//                        }
//                        if (name.matches(".*[a-zA-Z]+.*")) {
//
//                        }else {
////                            System.out.println(i+" count , is "+name);
//                            sum_sales1 = sum_sales1 + Float.parseFloat(name);
////                            break;
//                        }
//                    }
//                    System.out.println(c_sales+" "+i+" count , is " + sum_sales1);
////                    for (int ii =0; ii<lee; ii++){
////                        String tax_l=groupList.get(ii);
//                    arrStrTax2_sales1[mm_sales1]=String.valueOf(String.format("%.2f", sum_sales1));
//                    mm_sales1++;
////                    }
//                    sum_sales1 = 0;
//                }
//
////                for(int k=12;k<14;k++){
////                    arrStrTax2[mm]=arrStr112[k];
////                    mm++;
////                }
//                csvWrite2_sales1.writeNext(arrStrTax2_sales1);
//                csvWrite2_sales1.close();

                return true;

            }
            catch (IOException e){
                Log.e("MainActivity", e.getMessage(), e);
                return false;

            }

        }

        @Override
        protected void onPostExecute(final Boolean success)	{

            if (this.dialog.isShowing()){
                this.dialog.dismiss();
            }
            if (success){
                Toast.makeText(getActivity(), getString(R.string.export_successful), Toast.LENGTH_SHORT).show();
            }
            else {
                Toast.makeText(getActivity(), getString(R.string.export_failed), Toast.LENGTH_SHORT).show();
            }
        }
    }




    class DownloadMusicfromInternet_new extends AsyncTask<String, Void, Integer> {

        @Override
        protected Integer doInBackground(String... params) {

            try {

                db.execSQL("delete from Cusotmer_activity_temp_top3");

                Cursor ref = db.rawQuery("SELECT * FROM Customerdetails", null);
                if (ref.moveToFirst()){
                    do {
                        String id = ref.getString(0);
                        String old_t = ref.getString(5);
                        String ref_t = ref.getString(18);

                        TextView tv = new TextView(getActivity());
                        tv.setText(old_t);

                        TextView tv1 = new TextView(getActivity());
                        tv1.setText(ref_t);

                        if (tv1.getText().toString().equals("") || tv.getText().toString().equals("")){
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("total_amount", tv.getText().toString());
                            String wherecu = "_id = '" + id + "'";
                            db.update("Customerdetails", contentValues, wherecu, new String[]{});
                        }else {
                            float ff = Float.parseFloat(tv.getText().toString()) - Float.parseFloat(tv1.getText().toString());

                            ContentValues contentValues = new ContentValues();
                            contentValues.put("total_amount", String.valueOf(ff));
                            String wherecu = "_id = '" + id + "'";
                            db.update("Customerdetails", contentValues, wherecu, new String[]{});
                        }
                    }while (ref.moveToNext());
                }
                ref.close();

                Cursor cursor8 = db.rawQuery("Select * from Customerdetails WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' GROUP BY phoneno", null);
                if (cursor8.moveToFirst()){
                    do {
                        String id = cursor8.getString(0);
                        String phon = cursor8.getString(2);
                        String name = cursor8.getString(1);
                        String email = cursor8.getString(3);
                        String addr = cursor8.getString(4);

                        ContentValues contentValues = new ContentValues();

                        contentValues.put("_id", id);
                        contentValues.put("name", name);
                        contentValues.put("phone_no", phon);
                        contentValues.put("email", email);
                        contentValues.put("addr", addr);

                        Cursor cursor2 = db.rawQuery("Select SUM(total_amount) from Customerdetails WHERE phoneno = '"+phon+"' AND datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' ", null);
                        if (cursor2.moveToFirst()){
                            float dsirsq = cursor2.getFloat(0);
                            String rop = String.format(Locale.US,"%.1f", dsirsq);

                            contentValues.put("total_amount", rop);
                            Log.d("rohith ", "rohiht "+rop);
                        }
                        cursor2.close();

                        Cursor sales_t = db.rawQuery("SELECT SUM(total_amount) FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (sales_t.moveToFirst()){
                            dsirsq1 = sales_t.getFloat(0);
                        }
                        sales_t.close();

                        Cursor credit_t = db.rawQuery("SELECT SUM(credit) FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (credit_t.moveToFirst()){
                            dsirsq2 = credit_t.getFloat(0);
                        }
                        credit_t.close();

                        Cursor deposi_t = db.rawQuery("SELECT SUM(deposit) FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (deposi_t.moveToFirst()){
                            dsirsq3 = deposi_t.getFloat(0);
                        }
                        deposi_t.close();

                        Cursor cashout_t = db.rawQuery("SELECT SUM(cashout) FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (cashout_t.moveToFirst()){
                            dsirsq4 = cashout_t.getFloat(0);
                        }
                        cashout_t.close();
                        final float cal_sale = ((dsirsq4 + dsirsq2) - dsirsq3);
                        String rop1 = String.format(Locale.US,"%.1f", cal_sale);

                        contentValues.put("balance", rop1);

                        Cursor set21w = db.rawQuery("SELECT * FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (set21w.moveToFirst()){
                            dis_val = set21w.getString(29);
                            dis_status = set21w.getString(27);
                            dis_ty = set21w.getString(30);
                        }
                        set21w.close();

                        TextView tv6 = new TextView(getActivity());
                        tv6.setText(dis_ty);

                        if (tv6.getText().toString().equals("") || tv6.getText().toString().equals("off")){

                        }else {
                            //save value
                            contentValues.put("discount_value", dis_val);
                            contentValues.put("discount_type", dis_ty);

                        }

                        Cursor rating_cursor = db.rawQuery("SELECT SUM(percentage) FROM Cust_feedback WHERE cust_phoneno = '"+phon+"'", null);
                        if (rating_cursor.moveToFirst()){
                            float dsirsq = rating_cursor.getFloat(0);
                            ropq = String.format(Locale.US,"%.1f", dsirsq);

                            //                        float div = dsirsq/Float.parseFloat(total1);//check
                        }
                        rating_cursor.close();

                        Cursor rating_cursor1 = db.rawQuery("SELECT * FROM Cust_feedback WHERE cust_phoneno = '"+phon+"'", null);
                        int coun = rating_cursor1.getCount();

                        if (ropq.equals("") || coun == 0){

                        }else {
                            float divw = Float.parseFloat(ropq) / coun;
                            String rope = String.format(Locale.US,"%.1f", divw);
                            contentValues.put("approval_rate", rope);
                        }
                        rating_cursor1.close();

                        db.insert("Cusotmer_activity_temp_top3", null, contentValues);

                    }while (cursor8.moveToNext());
                }
                cursor8.close();


                db.execSQL("delete from Cusotmer_activity_temp");

                Cursor cursor6 = db.rawQuery("Select * from Customerdetails GROUP BY phoneno ", null);
                if (cursor6.moveToFirst()){
                    do {
                        String id = cursor6.getString(0);
                        String phon = cursor6.getString(2);
                        String name = cursor6.getString(1);
                        String email = cursor6.getString(3);
                        String addr = cursor6.getString(4);

                        ContentValues contentValues = new ContentValues();

                        contentValues.put("_id", id);
                        contentValues.put("name", name);
                        contentValues.put("phone_no", phon);
                        contentValues.put("email", email);
                        contentValues.put("addr", addr);

                        Cursor cursor2 = db.rawQuery("Select SUM(total_amount) from Customerdetails WHERE phoneno = '"+phon+"' ", null);
                        if (cursor2.moveToFirst()){
                            float dsirsq = cursor2.getFloat(0);
                            String rop = String.format(Locale.US,"%.1f", dsirsq);

                            contentValues.put("total_amount", rop);
                        }
                        cursor2.close();

                        Cursor sales_t = db.rawQuery("SELECT SUM(total_amount) FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (sales_t.moveToFirst()){
                            dsirsq1 = sales_t.getFloat(0);
                        }
                        sales_t.close();

                        Cursor credit_t = db.rawQuery("SELECT SUM(credit) FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (credit_t.moveToFirst()){
                            dsirsq2 = credit_t.getFloat(0);
                        }
                        credit_t.close();

                        Cursor deposi_t = db.rawQuery("SELECT SUM(deposit) FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (deposi_t.moveToFirst()){
                            dsirsq3 = deposi_t.getFloat(0);
                        }
                        deposi_t.close();

                        Cursor cashout_t = db.rawQuery("SELECT SUM(cashout) FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (cashout_t.moveToFirst()){
                            dsirsq4 = cashout_t.getFloat(0);
                        }
                        cashout_t.close();
                        final float cal_sale = ((dsirsq4 + dsirsq2) - dsirsq3);
                        String rop1 = String.format(Locale.US,"%.1f", cal_sale);

                        contentValues.put("balance", rop1);

                        Cursor set21w = db.rawQuery("SELECT * FROM Customerdetails WHERE phoneno = '"+phon+"'", null);
                        if (set21w.moveToFirst()){
                            dis_val = set21w.getString(29);
                            dis_status = set21w.getString(27);
                            dis_ty = set21w.getString(30);
                        }
                        set21w.close();

                        TextView tv6 = new TextView(getActivity());
                        tv6.setText(dis_ty);

                        if (tv6.getText().toString().equals("") || tv6.getText().toString().equals("off")){

                        }else {
                            //save value
                            contentValues.put("discount_value", dis_val);
                            contentValues.put("discount_type", dis_ty);

                        }

                        Cursor rating_cursor = db.rawQuery("SELECT SUM(percentage) FROM Cust_feedback WHERE cust_phoneno = '"+phon+"'", null);
                        if (rating_cursor.moveToFirst()){
                            float dsirsq = rating_cursor.getFloat(0);
                            ropq = String.format(Locale.US,"%.1f", dsirsq);

                            //                        float div = dsirsq/Float.parseFloat(total1);//check
                        }
                        rating_cursor.close();

                        Cursor rating_cursor1 = db.rawQuery("SELECT * FROM Cust_feedback WHERE cust_phoneno = '"+phon+"'", null);
                        int coun = rating_cursor1.getCount();

                        if (ropq.equals("") || coun == 0){

                        }else {
                            float divw = Float.parseFloat(ropq) / coun;
                            String rope = String.format(Locale.US,"%.1f", divw);
                            contentValues.put("approval_rate", rope);
                        }
                        rating_cursor1.close();

                        db.insert("Cusotmer_activity_temp", null, contentValues);

                    }while (cursor6.moveToNext());
                }
                cursor6.close();


                db = getActivity().openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);
                db1 = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                Cursor cursor5 = db.rawQuery("Select DISTINCT * from All_Sales WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' GROUP BY itemname ", null);//replace to cursor = dbHelper.fetchAllHotels();
                db.execSQL("delete from Itemwiseorderlistitems");
                if (cursor5.moveToFirst()) {
                    do {

                        Itemtype = cursor5.getString(5);

                        if (Itemtype.equals("Item")) {

                            itemtotal = cursor5.getString(1);
                            String cat1 = cursor5.getString(43);

                            Cursor modcursor1 = db1.rawQuery("Select * from Items WHERE itemname = '" + itemtotal + "' ", null);
                            if (modcursor1.moveToFirst()) {

                                do {

                                    id5 = modcursor1.getString(0);
//                                    id51 = String.valueOf(id5);
//                                    final TextView tv0 = new TextView(getActivity());
//
//                                    tv0.setText(id5);
//                                    //row.addView(tv0);
//
//                                    id5 = modcursor1.getString(0);
//                                    final TextView tv = new TextView(getActivity());
//
//                                    tv.setText(id5);
                                    //row.addView(tv);
                                } while (modcursor1.moveToNext());
                            }
                            modcursor1.close();

//                            final TextView tv1 = new TextView(getActivity());
//
//                            tv1.setText(itemtotal);
                            //row.addView(tv1);

                            Cursor modcursor = db.rawQuery("Select SUM(total) from All_Sales WHERE itemname = '" + itemtotal + "' AND datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' GROUP BY itemname ", null);
                            if (modcursor.moveToFirst()) {

                                do {
                                    level = modcursor.getInt(0);
                                    total1 = String.valueOf(level);
//                                    final TextView tv2 = new TextView(getActivity());
//
//                                    tv2.setText(total1);
//                                    //row.addView(tv2);
                                } while (modcursor.moveToNext());
                            }
                            modcursor.close();

                            Cursor modcursorsor = db.rawQuery("Select SUM(quantity) from All_Sales WHERE itemname = '" + itemtotal + "' AND datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' GROUP BY itemname ", null);
                            if (modcursorsor.moveToFirst()) {

                                do {
                                    level = modcursorsor.getInt(0);
                                    total1quan = String.valueOf(level);
//                                    final TextView tv2 = new TextView(getActivity());
//
//                                    tv2.setText(total1quan);
//                                    //row.addView(tv2);
                                } while (modcursorsor.moveToNext());
                            }
                            modcursorsor.close();


                            Cursor cursorr11 = db.rawQuery("SELECT SUM(subtotal) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' ", null);
                            if (cursorr11.moveToFirst()) {
                                level = cursorr11.getInt(0);
                                total = String.valueOf(level);
                            }
                            cursorr11.close();

                            float perc = Float.parseFloat(total1) * 100 / Float.parseFloat(total);
                            String percen = String.format(Locale.US,"%.1f", perc);

//                            final TextView tv3 = new TextView(getActivity());
////                            tv3.setLayoutParams(new TableRow.LayoutParams(170, ViewGroup.LayoutParams.MATCH_PARENT));
//                            //tv.setBackgroundResource(R.drawable.cell_shape);
////                            tv3.setGravity(Gravity.CENTER);
////                            tv3.setTextSize(15);
////                            tv3.setTypeface(null, Typeface.NORMAL);
////                            tv3.setPadding(5, 0, 0, 0);
////                            tv3.setBackgroundResource(R.drawable.cell_shape);
//                            //text = cursor.getString(1);
//                            tv3.setText(percen);
//                            //row.addView(tv3);
//

                            ContentValues contentValues = new ContentValues();
                            contentValues.put("itemno", id5);
                            contentValues.put("itemname", itemtotal);
                            contentValues.put("sales", total1);
                            contentValues.put("salespercentage", percen);
                            contentValues.put("itemtotalquan", total1quan);
                            contentValues.put("category", cat1);
//                            Cursor cat = db1.rawQuery("SELECT * FROM Items WHERE itemname = '"+itemtotal+"'", null);
//                            if (cat.moveToFirst()){
//                                String cat1 = cat.getString(4);
//                                contentValues.put("category", cat1);
//
//                            }
//                            cat.close();
                            db.insert("Itemwiseorderlistitems", null, contentValues);
                        }
                    }while (cursor5.moveToNext());
                }
                cursor5.close();

                db.execSQL("delete from Top_Category");
                Cursor ct = db.rawQuery("SELECT * FROM Itemwiseorderlistitems GROUP BY category", null);
                if (ct.moveToFirst()){
                    do {
                        String n = ct.getString(6);
                        Cursor vbh1 = db.rawQuery("SELECT SUM(sales) FROM Itemwiseorderlistitems WHERE category = '"+n+"'", null);
                        if (vbh1.moveToFirst()) {
                            int level = vbh1.getInt(0);
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("category", n);
                            contentValues.put("value", level);
                            db.insert("Top_Category", null, contentValues);
                        }
                        vbh1.close();
                    }while (ct.moveToNext());
                }
                ct.close();

                Log.d("inserted1", "inserted1");

//                Cursor curssor = db.rawQuery("Select DISTINCT * from All_Sales WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND type = 'Modifier' GROUP BY itemname ", null);//replace to cursor = dbHelper.fetchAllHotels();
//                db.execSQL("delete from Itemwiseorderlistmodifiers");
//                //Toast.makeText(getActivity(), "Modifiersrsrsrsrsrsrsrs", Toast.LENGTH_SHORT).show();
//                Log.d("inserted11", "inserted11");
//                if (curssor.moveToFirst()) {
//                    Log.d("inserted2", "inserted2");
//                    do {
//                        Log.d("inserted3", "inserted3");
//                        //Toast.makeText(getActivity(), "Modifiersrsrsrsrsrsrsrs111", Toast.LENGTH_SHORT).show();
//                        //do {
//                        //Toast.makeText(getActivity(), "Modifiersrsrsrsrsrsrsrs222", Toast.LENGTH_SHORT).show();
//
//                        String itemtotal = curssor.getString(1);
//
//    //                        final TableRow row = new TableRow(getActivity());
//    //                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,
//    //                                TableRow.LayoutParams.MATCH_PARENT, 1.0f));
//    //                        row.setGravity(Gravity.CENTER_VERTICAL);
//
//    //                    db1 = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//                        Cursor modcursor1 = db1.rawQuery("Select * from Modifiers WHERE modifiername = '" + itemtotal + "' ", null);
//
//                        if (modcursor1.moveToFirst()) {
//                            do {
//
//                                id = modcursor1.getString(0);
//    //                                final TextView tv0 = new TextView(getActivity());
//    //                                tv0.setLayoutParams(new TableRow.LayoutParams(90, ViewGroup.LayoutParams.MATCH_PARENT));
//    //                                //tv.setBackgroundResource(R.drawable.cell_shape);
//    //                                tv0.setGravity(Gravity.CENTER);
//    //                                tv0.setTextSize(15);
//    //                                tv0.setTypeface(null, Typeface.NORMAL);
//    //                                tv0.setPadding(5, 0, 0, 0);
//    //                                tv0.setBackgroundResource(R.drawable.cell_shape);
//    //                                //text = cursor.getString(1);
//    //                                tv0.setText(id);
//    //                                row.addView(tv0);
//
//                                id = modcursor1.getString(2);
//    //                                final TextView tv = new TextView(getActivity());
//    //                                tv.setLayoutParams(new TableRow.LayoutParams(180, ViewGroup.LayoutParams.MATCH_PARENT));
//    //                                //tv.setBackgroundResource(R.drawable.cell_shape);
//    //                                tv.setGravity(Gravity.CENTER);
//    //                                tv.setTextSize(15);
//    //                                tv.setTypeface(null, Typeface.NORMAL);
//    //                                tv.setPadding(5, 0, 0, 0);
//    //                                tv.setBackgroundResource(R.drawable.cell_shape);
//    //                                //text = cursor.getString(1);
//    //                                tv.setText(id);
//    //                                row.addView(tv);
//                            } while (modcursor1.moveToNext());
//                        }
//                        modcursor1.close();
//
//    //                        final TextView tv1 = new TextView(getActivity());
//    //                        tv1.setLayoutParams(new TableRow.LayoutParams(260, ViewGroup.LayoutParams.MATCH_PARENT));
//    //                        //tv.setBackgroundResource(R.drawable.cell_shape);
//    //                        tv1.setGravity(Gravity.CENTER);
//    //                        tv1.setTextSize(15);
//    //                        tv1.setTypeface(null, Typeface.NORMAL);
//    //                        tv1.setPadding(5, 0, 0, 0);
//    //                        tv1.setBackgroundResource(R.drawable.cell_shape);
//    //                        //text = cursor.getString(1);
//    //                        tv1.setText(itemtotal);
//    //                        row.addView(tv1);
//
//                        Cursor modcursor = db.rawQuery("Select SUM(total) from All_Sales WHERE itemname = '" + itemtotal + "' AND datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' GROUP BY itemname ", null);
//
//                        if (modcursor.moveToFirst()) {
//                            do {
//                                level = modcursor.getInt(0);
//                                total1 = String.valueOf(level);
//    //                                final TextView tv2 = new TextView(getActivity());
//    //                                tv2.setLayoutParams(new TableRow.LayoutParams(150, ViewGroup.LayoutParams.MATCH_PARENT));
//    //                                //tv.setBackgroundResource(R.drawable.cell_shape);
//    //                                tv2.setGravity(Gravity.CENTER);
//    //                                tv2.setTextSize(15);
//    //                                tv2.setTypeface(null, Typeface.NORMAL);
//    //                                tv2.setPadding(5, 0, 0, 0);
//    //                                tv2.setBackgroundResource(R.drawable.cell_shape);
//    //                                //text = cursor.getString(1);
//    //                                tv2.setText(total1);
//    //                                row.addView(tv2);
//                            } while (modcursor.moveToNext());
//                        }
//                        modcursor.close();
//
//                        Cursor modcursorsor = db.rawQuery("Select SUM(quantity) from All_Sales WHERE itemname = '" + itemtotal + "' AND datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' GROUP BY itemname ", null);
//                        if (modcursorsor.moveToFirst()) {
//
//                            do {
//                                float level = modcursorsor.getFloat(0);
//                                total1quan = String.valueOf(level);
//    //                                final TextView tv2 = new TextView(getActivity());
//    //                                tv2.setLayoutParams(new TableRow.LayoutParams(150, ViewGroup.LayoutParams.MATCH_PARENT));
//    //                                //tv.setBackgroundResource(R.drawable.cell_shape);
//    //                                tv2.setGravity(Gravity.CENTER);
//    //                                tv2.setTextSize(15);
//    //                                tv2.setTypeface(null, Typeface.NORMAL);
//    //                                tv2.setPadding(5, 0, 0, 0);
//    //                                tv2.setBackgroundResource(R.drawable.cell_shape);
//    //                                //text = cursor.getString(1);
//    //                                tv2.setText(total1quan);
//    //                                row.addView(tv2);
//                            } while (modcursorsor.moveToNext());
//                        }
//                        modcursorsor.close();
//
//                        Cursor cursorr11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
//                        if (cursorr11.moveToFirst()) {
//                            level = cursorr11.getInt(0);
//                            total = String.valueOf(level);
//                        }
//
//                        float perc = Float.parseFloat(total1) * 100 / Float.parseFloat(total);
//                        String percen = String.format("%.2f", perc);
//
//    //                        final TextView tv3 = new TextView(getActivity());
//    //                        tv3.setLayoutParams(new TableRow.LayoutParams(170, ViewGroup.LayoutParams.MATCH_PARENT));
//    //                        //tv.setBackgroundResource(R.drawable.cell_shape);
//    //                        tv3.setGravity(Gravity.CENTER);
//    //                        tv3.setTextSize(15);
//    //                        tv3.setTypeface(null, Typeface.NORMAL);
//    //                        tv3.setPadding(5, 0, 0, 0);
//    //                        tv3.setBackgroundResource(R.drawable.cell_shape);
//    //                        //text = cursor.getString(1);
//    //                        tv3.setText(percen);
//    //                        row.addView(tv3);
//
//                        ContentValues contentValues = new ContentValues();
//                        contentValues.put("modno", String.valueOf(id));
//                        contentValues.put("modname", itemtotal);
//                        contentValues.put("sales", total1);
//                        contentValues.put("salespercentage", percen);
//                        contentValues.put("modtotalquan", total1quan);
//                        db.insert("Itemwiseorderlistmodifiers", null, contentValues);
//
//                        Log.d("inserted", "inserted");
//                    }while (curssor.moveToNext());
//                    //}while (cursor.moveToNext());
//                }
//                curssor.close();

                Cursor cursorrs = db.rawQuery("Select DISTINCT * from All_Sales WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' GROUP BY user ", null);//replace to cursor = dbHelper.fetchAllHotels();
                db.execSQL("delete from Userwiseorderlistitems");
                if (cursorrs.moveToFirst()) {
                    do {
                        username = cursorrs.getString(14);

                        Cursor modcursor1 = db1.rawQuery("Select * from User1 WHERE username = '" + username + "' ", null);
                        if (modcursor1.moveToFirst()) {

                            do {

                                name = modcursor1.getString(1);
                                final TextView tv = new TextView(getActivity());

                                tv.setText(name);
                                //                    row.addView(tv);
                                //                                    Toast.makeText(getActivity(), "users1", Toast.LENGTH_SHORT).show();
                            } while (modcursor1.moveToNext());
                        }
                        modcursor1.close();

                        Cursor modcursor2 = db1.rawQuery("Select * from User2 WHERE username = '" + username + "' ", null);
                        if (modcursor2.moveToFirst()) {

                            do {

                                name = modcursor2.getString(1);
                                final TextView tv = new TextView(getActivity());

                                tv.setText(name);
                                //                    row.addView(tv);
                                //                                    Toast.makeText(getActivity(), "users2", Toast.LENGTH_SHORT).show();
                            } while (modcursor2.moveToNext());
                        }
                        modcursor2.close();

                        Cursor modcursor3 = db1.rawQuery("Select * from User3 WHERE username = '" + username + "' ", null);
                        if (modcursor3.moveToFirst()) {

                            do {

                                name = modcursor3.getString(1);
                                final TextView tv = new TextView(getActivity());

                                tv.setText(name);
                                //                    row.addView(tv);
                                //                                    Toast.makeText(getActivity(), "users3", Toast.LENGTH_SHORT).show();
                            } while (modcursor3.moveToNext());
                        }
                        modcursor3.close();

                        Cursor modcursor4 = db1.rawQuery("Select * from User4 WHERE username = '" + username + "' ", null);
                        if (modcursor4.moveToFirst()) {

                            do {

                                name = modcursor4.getString(1);
                                final TextView tv = new TextView(getActivity());

                                tv.setText(name);
                                //                    row.addView(tv);
                                //                                    Toast.makeText(getActivity(), "users4", Toast.LENGTH_SHORT).show();
                            } while (modcursor4.moveToNext());
                        }
                        modcursor4.close();

                        Cursor modcursor5 = db1.rawQuery("Select * from User5 WHERE username = '" + username + "' ", null);
                        if (modcursor5.moveToFirst()) {

                            do {

                                name = modcursor5.getString(1);
                                final TextView tv = new TextView(getActivity());

                                tv.setText(name);
                                //                    row.addView(tv);
                                //                                    Toast.makeText(getActivity(), "users5", Toast.LENGTH_SHORT).show();
                            } while (modcursor5.moveToNext());
                        }
                        modcursor5.close();

                        Cursor modcursor6 = db1.rawQuery("Select * from User6 WHERE username = '" + username + "' ", null);
                        if (modcursor6.moveToFirst()) {

                            do {

                                name = modcursor6.getString(1);
                                final TextView tv = new TextView(getActivity());

                                tv.setText(name);
                                //                    row.addView(tv);
                                //                                    Toast.makeText(getActivity(), "users6", Toast.LENGTH_SHORT).show();
                            } while (modcursor6.moveToNext());
                        }
                        modcursor6.close();

                        Cursor modcursor7 = db1.rawQuery("Select * from LAdmin WHERE username = '" + username + "' ", null);
                        if (modcursor7.moveToFirst()) {

                            do {

                                name = modcursor7.getString(3);
                                final TextView tv = new TextView(getActivity());

                                tv.setText(name);
                                //                    row.addView(tv);
                                //                                    Toast.makeText(getActivity(), "Ladmin", Toast.LENGTH_SHORT).show();
                            } while (modcursor7.moveToNext());
                        }
                        modcursor7.close();

                        Cursor modcursor8 = db1.rawQuery("Select * from LOGIN WHERE USERNAME = '" + username + "' ", null);
                        if (modcursor8.moveToFirst()) {

                            do {

                                name = modcursor8.getString(3);
                                final TextView tv = new TextView(getActivity());

                                tv.setText(name);
                                //                    row.addView(tv);
                                //                                    Toast.makeText(getActivity(), "admin login", Toast.LENGTH_SHORT).show();
                            } while (modcursor8.moveToNext());
                        }
                        modcursor8.close();

                        Cursor modcursor = db.rawQuery("Select SUM(total) from Billnumber WHERE user = '" + username + "' AND datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' GROUP BY user ", null);
                        if (modcursor.moveToFirst()) {

                            do {
                                level = modcursor.getInt(0);
                                total1 = String.valueOf(level);
                                final TextView tv2 = new TextView(getActivity());
                                tv2.setText(total1);
                                //                    row.addView(tv2);
                                //                                    Toast.makeText(getActivity(), "user is "+username+" sales is "+total1 , Toast.LENGTH_SHORT).show();
                            } while (modcursor.moveToNext());
                        }
                        modcursor.close();

                        Cursor cursorr11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
                        if (cursorr11.moveToFirst()) {
                            level = cursorr11.getInt(0);
                            total = String.valueOf(level);
                        }
                        cursorr11.close();

                        float perc = Float.parseFloat(total1) * 100 / Float.parseFloat(total);
                        String percen = String.format(Locale.US,"%.1f", perc);

                        final TextView tv3 = new TextView(getActivity());

                        tv3.setText(percen);

                        ContentValues contentValues = new ContentValues();
                        contentValues.put("username", name);
                        contentValues.put("sales", total1);
                        contentValues.put("salespercentage", percen);
                        //                        Toast.makeText(getActivity(), "users are "+name+" sales "+total1+" % is "+percen, Toast.LENGTH_SHORT).show();
                        Log.d("inserted111 "+name, "inserted111 "+total1);
                        db.insert("Userwiseorderlistitems", null, contentValues);
                    } while (cursorrs.moveToNext());
                }
                cursorrs.close();


                Cursor cursorq = db.rawQuery("Select DISTINCT * from All_Sales_Cancelled WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' GROUP BY time, date ", null);//replace to cursor = dbHelper.fetchAllHotels();
                db.execSQL("delete from Cancelwiseorderlistitems");
                if (cursorq.moveToFirst()) {
                    do {
                        username = cursorq.getString(14);

                        billno = cursorq.getString(11);


                        Cursor modcursor = db.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno + "'", null);
                        if (modcursor.moveToFirst()) {
                            //level = modcursor.getString(2);
                            total1 = modcursor.getString(2);
                            bilcc = modcursor.getString(11);

                        }
                        modcursor.close();

                        String sales = cursorq.getString(17);
                        String refund = cursorq.getString(23);
                        String reason = cursorq.getString(20);
                        date = cursorq.getString(22);

                        time = cursorq.getString(12);


                        user = cursorq.getString(14);

                        ContentValues contentValues = new ContentValues();
                        contentValues.put("date", date);
                        contentValues.put("time", time);
                        contentValues.put("user", user);
                        contentValues.put("billno", billno);
                        contentValues.put("sale", sales);
                        contentValues.put("refund", refund);
                        contentValues.put("reason", reason);
                        contentValues.put("billcount", bilcc);
                        //                        Toast.makeText(getActivity(), "users are "+name+" sales "+total1+" % is "+percen, Toast.LENGTH_SHORT).show();
                        db.insert("Cancelwiseorderlistitems", null, contentValues);

                    } while (cursorq.moveToNext());
                }
                cursorq.close();


                Cursor user1 = db.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' GROUP BY user", null);
                db.execSQL("delete from usercancelleddata");
                //Toast.makeText(getActivity(), "1", Toast.LENGTH_SHORT).show();
                if (user1.moveToFirst()) {
                    //Toast.makeText(getActivity(), "2", Toast.LENGTH_SHORT).show();
                    do {
                        //Toast.makeText(getActivity(), "3", Toast.LENGTH_SHORT).show();
                        username = user1.getString(14);
                        Cursor maxi = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems WHERE user = '"+username+"'", null);
                        //Toast.makeText(getActivity(), "4", Toast.LENGTH_SHORT).show();
                        if (maxi.moveToFirst()) {
                            //Toast.makeText(getActivity(), "5", Toast.LENGTH_SHORT).show();
                            do {
                                // Toast.makeText(getActivity(), "6", Toast.LENGTH_SHORT).show();
                                mum = maxi.getInt(0);
                                mumstr = String.valueOf(mum);
                                //Toast.makeText(getActivity(), "user is"+username+"total is "+mumstr, Toast.LENGTH_SHORT).show();
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("username", username);
                                contentValues.put("total", mumstr);
                                db.insert("usercancelleddata", null, contentValues);
                            } while (maxi.moveToNext());
                        }
                        maxi.close();
                    } while (user1.moveToNext());
                }
                user1.close();

                db.execSQL("delete from Top_Reason");
                Cursor vbh = db.rawQuery("SELECT * FROM Cancelwiseorderlistitems GROUP BY reason", null);
                if (vbh.moveToFirst()){
                    do {
                        String n = vbh.getString(7);
                        Cursor vbh1 = db.rawQuery("SELECT COUNT(reason) FROM Cancelwiseorderlistitems WHERE reason = '"+n+"'", null);
                        if (vbh1.moveToFirst()) {
                            int level = vbh1.getInt(0);
                            total1 = String.valueOf(level);
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("reason", n);
                            contentValues.put("value", level);
                            db.insert("Top_Reason", null, contentValues);
                        }
                        vbh1.close();
                    }while (vbh.moveToNext());
                }
                vbh.close();


                Cursor uuser1 = db.rawQuery("SELECT * FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' GROUP BY user", null);
                db.execSQL("delete from userdata");
                if (uuser1.moveToFirst()){
                    do {
                        username = uuser1.getString(3);
                        Cursor maxi = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND user = '"+username+"'", null);
                        if (maxi.moveToFirst()){
                            do {
                                mum = maxi.getInt(0);
                                mumstr = String.valueOf(mum);
                                //                                Toast.makeText(getActivity(), "user is"+username+"total is "+mumstr, Toast.LENGTH_SHORT).show();
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("username", username);
                                contentValues.put("total", mumstr);
                                db.insert("userdata", null, contentValues);

                            }while (maxi.moveToNext());
                        }
                        maxi.close();
                    }while (uuser1.moveToNext());
                }
                uuser1.close();

                Cursor uuser2 = db.rawQuery("SELECT * FROM All_Sales WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' GROUP BY itemname", null);
                db.execSQL("delete from itemdata");
                if (uuser2.moveToFirst()){
                    do {
                        itemname = uuser2.getString(1);
                        Cursor maxi = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND itemname = '"+itemname+"'", null);
                        if (maxi.moveToFirst()){
                            do {
                                mum = maxi.getInt(0);
                                mumstr = String.valueOf(mum);

                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemname", itemname);
                                contentValues.put("total", mumstr);
                                db.insert("itemdata", null, contentValues);

                            }while (maxi.moveToNext());
                        }
                        maxi.close();
                    }while (uuser2.moveToNext());
                }
                uuser2.close();

                db1.delete("Items_temp_list", null, null);

                Cursor cursor = db1.rawQuery("SELECT * FROM Items", null);
                if (cursor.moveToFirst()){
                    do {
                        String id = cursor.getString(0);
                        String item_na = cursor.getString(1);
                        String prese_qty = cursor.getString(3);
                        String barcode = cursor.getString(16);
                        String min_qty = cursor.getString(20);


    //                    Log.v("barcode", barcode);

                        Cursor cursor11 = db1.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '"+item_na+"'", null);
                        if (cursor11.moveToFirst()) {

                            ContentValues contentValues = new ContentValues();

                            contentValues.put("itemname", item_na);
                            Cursor cursor1 = db1.rawQuery("SELECT SUM(total_price) FROM Vendor_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor1.moveToFirst()) {
                                float a = cursor1.getFloat(0);

                                Cursor cursor2 = db1.rawQuery("SELECT SUM(qty_add) FROM Vendor_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                                if (cursor2.moveToFirst()) {
                                    int a1 = cursor2.getInt(0);

                                    float a2 = a / a1;

                                    contentValues.put("avg_price", String.format("%.1f", a2));
                                }
                            }
                            cursor1.close();

                            Cursor cursor2 = db1.rawQuery("SELECT MIN(individual_price) FROM Vendor_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor2.moveToFirst()) {
                                float one11 = cursor2.getFloat(0);
                                contentValues.put("min_price", String.format("%.1f", one11));
                            }
                            cursor2.close();

                            Cursor cursor3 = db1.rawQuery("SELECT MAX(individual_price) FROM Vendor_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor3.moveToFirst()) {
                                float one11 = cursor3.getFloat(0);
                                contentValues.put("max_price", String.format("%.1f", one11));
                            }
                            cursor3.close();

                            Cursor cursor4 = db1.rawQuery("SELECT SUM(qty_add) FROM Vendor_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor4.moveToFirst()) {
                                float one11 = cursor4.getFloat(0);
                                contentValues.put("total_qty", String.format("%.1f", one11));
                            }
                            cursor4.close();

                            Cursor ccursor5 = db1.rawQuery("SELECT SUM(total_price) FROM Vendor_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (ccursor5.moveToFirst()) {
                                float one11 = ccursor5.getFloat(0);
                                contentValues.put("total_price", String.format("%.1f", one11));
                            }
                            ccursor5.close();
                            contentValues.put("barcode", barcode);
                            contentValues.put("not_required", "");
                            Log.v("barcode1", barcode);
                            db1.insert("Items_temp_list", null, contentValues);

                        }
                        cursor11.close();


                    }while (cursor.moveToNext());
                }
                cursor.close();

                db1.delete("Ingredients_temp_list", null, null);
                Cursor cursor_in = db1.rawQuery("SELECT * FROM Ingredients", null);
                if (cursor_in.moveToFirst()){
                    do {
                        String id = cursor_in.getString(0);
                        String item_na = cursor_in.getString(1);
                        String unit = cursor_in.getString(5);
                        String prese_qty = cursor_in.getString(3);
                        String barcode = cursor_in.getString(15);
                        String min_qty = cursor_in.getString(20);


                        Log.v("barcode", barcode);

                        Cursor cursor11 = db1.rawQuery("SELECT * FROM Ingredient_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '"+item_na+"'", null);
                        if (cursor11.moveToFirst()) {

                            ContentValues contentValues = new ContentValues();

                            contentValues.put("itemname", item_na);
                            contentValues.put("unit", unit);
                            Cursor cursor1 = db1.rawQuery("SELECT SUM(total_price) FROM Ingredient_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor1.moveToFirst()) {
                                float a = cursor1.getFloat(0);

                                Cursor cursor2 = db1.rawQuery("SELECT SUM(qty_add) FROM Ingredient_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                                if (cursor2.moveToFirst()) {
                                    int a1 = cursor2.getInt(0);

                                    float a2 = a / a1;

                                    contentValues.put("avg_price", String.format("%.1f", a2));
                                }
                            }

                            Cursor cursor2 = db1.rawQuery("SELECT MIN(individual_price) FROM Ingredient_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor2.moveToFirst()) {
                                float one11 = cursor2.getFloat(0);
                                contentValues.put("min_price", String.format("%.1f", one11));
                            }

                            Cursor cursor3 = db1.rawQuery("SELECT MAX(individual_price) FROM Ingredient_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor3.moveToFirst()) {
                                float one11 = cursor3.getFloat(0);
                                contentValues.put("max_price", String.format("%.1f", one11));
                            }

                            Cursor cursor4 = db1.rawQuery("SELECT SUM(qty_add) FROM Ingredient_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor4.moveToFirst()) {
                                float one11 = cursor4.getFloat(0);
                                contentValues.put("total_qty", String.format("%.1f", one11));
                            }

                            Cursor cursor5_in = db1.rawQuery("SELECT SUM(total_price) FROM Ingredient_sold_item_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' AND itemname = '" + item_na + "'", null);
                            if (cursor5_in.moveToFirst()) {
                                float one11 = cursor5_in.getFloat(0);
                                contentValues.put("total_price", String.format("%.1f", one11));
                            }



                            Cursor cursor41 = db1.rawQuery("SELECT SUM(wastage) FROM Ingredient_sold_item_details WHERE itemname = '" + item_na + "'", null);
                            if (cursor41.moveToFirst()) {
                                float one11 = cursor41.getFloat(0);
                                contentValues.put("wastage_qty", String.format("%.1f", one11));
                                if (String.valueOf(one11).toString().equals("0.0") || String.valueOf(one11).toString().equals("0") || String.valueOf(one11).toString().equals("")){
                                    contentValues.put("wastage_cost", "0");
                                }else {
                                    float a1 = 0;
                                    Cursor cursor51 = db1.rawQuery("SELECT * FROM Ingredient_sold_item_details WHERE itemname = '" + item_na + "' AND (wastage != '0' OR wastage != '0.0') ", null);
                                    if (cursor51.moveToFirst()) {
                                        do {
                                            String wast = cursor51.getString(51);
                                            String ind_pr = cursor51.getString(5);


                                            float a = Float.parseFloat(wast) * Float.parseFloat(ind_pr);
                                            a1 = a1 + a;
                                            contentValues.put("wastage_cost", String.format("%.1f", a1));

                                        } while (cursor51.moveToNext());
                                    } else {
                                        contentValues.put("wastage_cost", "0");
                                    }
                                }
                            }


                            contentValues.put("barcode", barcode);
                            contentValues.put("not_required", "");
                            Log.v("barcode1", barcode);
                            db1.insert("Ingredients_temp_list", null, contentValues);

                        }


                    }while (cursor_in.moveToNext());
                }

                db1.execSQL("UPDATE Items SET minimum_qty = minimum_qty_copy");
                db1.execSQL("UPDATE Items SET status_low = ''");
                db1.execSQL("UPDATE Items SET status_low = 'Low' WHERE stockquan <= minimum_qty");
//                db1.execSQL("UPDATE Items SET status_low = '' WHERE stockquan < 0 AND minimum_qty = 0");

//                db1.execSQL("UPDATE Ingredients SET status_low = ''");
//                db1.execSQL("UPDATE Ingredients SET status_low = 'Low' WHERE current_stock <= min_req");

                Cursor cursor_ing = db1.rawQuery("SELECT * FROM Ingredients", null);
                if (cursor_ing.moveToFirst()){
                    do {
                        String id = cursor_ing.getString(0);
                        String cur_qty = cursor_ing.getString(4);
                        String min_qty = cursor_ing.getString(2);


                        ContentValues contentValues = new ContentValues();
                        contentValues.put("status_low", "");
                        String where = "_id = '"+id+"'";


                        db1.update("Ingredients", contentValues, where, new String[]{});

                        TextView tv = new TextView(getActivity());
                        tv.setText(min_qty);

//                    TextView tv1 = new TextView(Micro_inventory_indent.this);
//                    tv.setText(cur_qty);

                        if (tv.getText().toString().equals("")){

                        }else {
                            if (Float.parseFloat(cur_qty) <= Float.parseFloat(tv.getText().toString())){
                                ContentValues contentValues1 = new ContentValues();
                                contentValues1.put("status_low", "Low");
                                String where1 = "_id = '"+id+"'";
                                System.out.println("ingredient qty is "+id+" current qty "+cur_qty+" min qty "+tv.getText().toString());

                                db1.update("Ingredients", contentValues1, where1, new String[]{});
                            }
                        }
                    }while (cursor_ing.moveToNext());
                }

//                Cursor vcursor = db1.rawQuery("SELECT * FROM Items", null);
//                if (vcursor.moveToFirst()){
//                    do {
//                        String id = vcursor.getString(0);
//                        String prese_qty = vcursor.getString(3);
//                        String min_qty = vcursor.getString(20);
//
//
//                        ContentValues contentValues = new ContentValues();
//                        contentValues.put("status_low", "");
//                        contentValues.put("minimum_qty_copy", min_qty);
//                        String where = "_id = '"+id+"'";
//                        db1.update("Items", contentValues, where, new String[]{});
//
//                        TextView tv = new TextView(getActivity());
//                        tv.setText(min_qty);
//
//                        if (tv.getText().toString().equals("")){
//
//                        }else {
//                            if (Float.parseFloat(prese_qty) <= Float.parseFloat(tv.getText().toString())){
//                                ContentValues contentValues1 = new ContentValues();
//                                contentValues1.put("status_low", "Low");
//                                String where1 = "_id = '"+id+"'";
//                                db1.update("Items", contentValues1, where1, new String[]{});
//                            }
//                        }
//                    }while (vcursor.moveToNext());
//                }
//                vcursor.close();
            } catch (NumberFormatException e) {
                e.printStackTrace();
            } catch (SQLException e) {
                e.printStackTrace();
            } catch(Exception e){
                e.printStackTrace();
            }

            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }


        @Override
        protected void onPostExecute(Integer file_url) {
            proceed_button.setVisibility(View.GONE);
            rela.setVisibility(View.VISIBLE);
            miniprint_orderlist1.setVisibility(View.VISIBLE);

            Cursor onee = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems ", null);
            if (onee.moveToFirst()) {
                int one11 = onee.getInt(0);
                onee = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + one11 + "' ", null);
                if (onee.moveToFirst()) {
                    String idw = onee.getString(0);
                    one1 = onee.getString(2);
                    salesee1 = onee.getString(3);
                    pone = onee.getString(4);
                    topone.setText(one1);
                    topitem1percent.setText(pone);
                    topitem1percent.append("%");
                    topitem1price.setText(insert1_cc);
                    topitem1price.append(salesee1);
//                                    one = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems WHERE MAX(sales)<'"+one11+"' ", null);
//                                    if (one.moveToFirst()){
//                                        two2 = one.getString(2);
//                                        toptwo.setText(two2);
//                                    }
                    Cursor two = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems WHERE sales <= '" + one11 + "' AND itemname != '"+one1+"' ORDER BY itemname ASC ", null);
                    if (two.moveToFirst()) {
                        int two111 = two.getInt(0);
                        two = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + two111 + "' AND itemname != '"+one1+"' ", null);
                        if (two.moveToFirst()) {
                            String idw1 = two.getString(0);
                            two2 = two.getString(2);
                            //salesee2 = one.getString(3);
                            ptwo = two.getString(4);
                            toptwo.setText(two2);
                            topitem2percent.setText(ptwo);
                            topitem2percent.append("%");
                            topitem2price.setText(insert1_cc);
                            topitem2price.append(String.valueOf(two111));

                            Cursor three = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems WHERE sales <= '" + two111 + "' AND itemname != '"+two2+"' AND itemname != '"+one1+"' ORDER BY itemname ASC ", null);
                            if (three.moveToFirst()) {
                                int three11 = three.getInt(0);
                                three = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + three11 + "' AND itemname != '"+two2+"' AND itemname != '"+one1+"' ", null);
                                if (three.moveToFirst()) {
                                    three3 = three.getString(2);
                                    //salesee3 = one.getString(3);
                                    pthree = three.getString(4);
                                    topthree.setText(three3);
                                    topitem3percent.setText(pthree);
                                    topitem3percent.append("%");
                                    topitem3price.setText(insert1_cc);
                                    topitem3price.append(String.valueOf(three11));
                                } else {
                                    topthree.setText("NA");
                                    topitem3percent.setText("0%");
                                    topitem3price.setText(insert1_cc);
                                    topitem3price.append(String.valueOf("0"));
                                }
                            }
                            three.close();
                        } else {
                            toptwo.setText("NA");
                            topitem2percent.setText("0%");
                            topitem2price.setText(insert1_cc);
                            topitem2price.append(String.valueOf("0"));
                        }
                    }
                    two.close();
                } else {
                    topone.setText("NA");
                    topitem1percent.setText("0%");
                    topitem1price.setText(insert1_cc);
                    topitem1price.append(String.valueOf("0"));
                }
            }
            onee.close();

            Cursor oone = db.rawQuery("SELECT MAX(sales) FROM Userwiseorderlistitems ", null);
            if (oone.moveToFirst()) {
                int one11 = oone.getInt(0);
                //
                System.out.println("Top Users 1.0 "+one11 );
              Cursor oone2 = db.rawQuery("SELECT username FROM Userwiseorderlistitems WHERE sales = '" + one11 + "' ", null);
              if (oone2.moveToFirst()){
                  String usssrr = oone2.getString(0);
                 // int usr1 =  oone2.getInt(0);
                  System.out.println("Top Users 1.10 usr "+ usssrr );
              }
                oone = db.rawQuery("SELECT * FROM Userwiseorderlistitems WHERE sales = '" + one11 + "' ", null);
                if (oone.moveToFirst()) {
                    String usr =  oone.getString(1);
                    one1 = oone.getString(1);
                    salesee1 = oone.getString(2);
                    System.out.println("Top Users 1.11 "+salesee1 );
                    pone = oone.getString(3);
                    System.out.println("Top Users 1.10 "+ usr );
                    System.out.println("Top Users 1 "+one1);
                    topuserone.setText(one1);
                    topuser1percent.setText(pone);
                    topuser1percent.append("%");
                    topuser1price.setText(insert1_cc);
                    topuser1price.append(salesee1);
                    //Toast.makeText(getActivity(), "1 is "+one1, Toast.LENGTH_SHORT).show();
//                                    one = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems WHERE MAX(sales)<'"+one11+"' ", null);
//                                    if (one.moveToFirst()){
//                                        two2 = one.getString(2);
//                                        toptwo.setText(two2);
//                                    }
                    Cursor two = db.rawQuery("SELECT MAX(sales) FROM Userwiseorderlistitems WHERE sales <= '" + one11 + "' AND username != '"+one1+"' ORDER BY username ASC ", null);
                    if (two.moveToFirst()) {
                        int two111 = two.getInt(0);
                        System.out.println("Top Users 2.00 "+two111);
                        two = db.rawQuery("SELECT * FROM Userwiseorderlistitems WHERE sales = '" + two111 + "' AND username != '"+one1+"' ", null);
                        if (two.moveToFirst()) {
                            two2 = two.getString(1);
                            ptwo = two.getString(3);
                            topusertwo.setText(two2);
                            System.out.println("Top Users 2 "+two2);
                            topuser2percent.setText(ptwo);
                            topuser2percent.append("%");
                            topuser2price.setText(insert1_cc);
                            topuser2price.append(String.valueOf(two111));
                            //Toast.makeText(getActivity(), "2 is "+two2, Toast.LENGTH_SHORT).show();

                            Cursor three = db.rawQuery("SELECT MAX(sales) FROM Userwiseorderlistitems WHERE sales <= '" + two111 + "' AND sales<= '"+one11+"' AND username != '"+one1+"' AND username != '"+two2+"' ORDER BY username ASC ", null);
                            if (three.moveToFirst()) {
                                int three11 = three.getInt(0);
                                System.out.println("Top Users 3.00 "+three11);
                                three = db.rawQuery("SELECT * FROM Userwiseorderlistitems WHERE sales = '" + three11 + "' AND username != '"+one1+"' AND username != '"+two2+"' ", null);
                                if (three.moveToFirst()) {
                                    three3 = three.getString(1);
                                    pthree = three.getString(3);
                                    System.out.println("Top Users 3 "+three3);
                                    topuserthree.setText(three3);
                                    topuser3percent.setText(pthree);
                                    topuser3percent.append("%");
                                    topuser3price.setText(insert1_cc);
                                    topuser3price.append(String.valueOf(three11));
                                    //Toast.makeText(getActivity(), "3 is "+three3, Toast.LENGTH_SHORT).show();
                                } else {
                                    topuserthree.setText("NA");
                                    System.out.println("Top Users na 3");
                                    topuser3percent.setText("0%");
                                    topuser3price.setText(insert1_cc);
                                    topuser3price.append("0");
                                    //Toast.makeText(getActivity(),"user33", Toast.LENGTH_SHORT).show();

                                }
                            }
                            three.close();
                        } else {
                            System.out.println("Top Users na 2");
                            topusertwo.setText("NA");
                            topuser2percent.setText("0%");
                            //Toast.makeText(getActivity(),"user23", Toast.LENGTH_SHORT).show();
                            topuserthree.setText("NA");
                            topuser3percent.setText("0%");
                            topuser2price.setText(insert1_cc);
                            topuser2price.append("0");
                        }
                    }
                    two.close();
                } else {
                    System.out.println("Top Users na 1");
                    topuserone.setText("NA");
                    topuser1percent.setText("0%");
                    topuser1price.setText(insert1_cc);
                    topuser1price.append("0");
                }
            }
            oone.close();


            Cursor tc = db.rawQuery("SELECT MAX(value) FROM Top_Category ORDER BY category ASC ", null);
            if (tc.moveToFirst()) {
                int one11 = tc.getInt(0);
                tc = db.rawQuery("SELECT * FROM Top_Category WHERE value = '" + one11 + "' ", null);
                if (tc.moveToFirst()) {
                    one1 = tc.getString(1);
                    salesee1 = tc.getString(2);
                    float subtot = 0;
                    Cursor cursor = db.rawQuery("SELECT SUM(subtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                    if (cursor.moveToFirst()){
                        subtot = cursor.getFloat(0);
                        sub_total = String.format(Locale.US,"%.0f", subtot);
                    }
                    cursor.close();
//                    pone = tc.getString(3);
                    float fa = (Float.parseFloat(salesee1)/Float.parseFloat(sub_total))*100;
                    String fa1 = String.format(Locale.US,"%.1f", fa);
                    topcat1.setText(one1);
                    topcat1_percent.setText(fa1);
                    topcat1_percent.append("%");
                    topcat1_sales.setText(insert1_cc);
                    topcat1_sales.append(salesee1);
                    Cursor two = db.rawQuery("SELECT MAX(value) FROM Top_Category WHERE value <= '" + one11 + "' AND category != '"+one1+"' ORDER BY category ASC ", null);
                    if (two.moveToFirst()) {
                        int two111 = two.getInt(0);
                        two = db.rawQuery("SELECT * FROM Top_Category WHERE value = '" + two111 + "' AND category != '"+one1+"' ", null);
                        if (two.moveToFirst()) {
                            two2 = two.getString(1);
                            salesee2 = two.getString(2);
                            float fb = (Float.parseFloat(salesee2)/Float.parseFloat(sub_total))*100;
                            String fb1 = String.format(Locale.US,"%.1f", fb);
                            topcat2.setText(two2);
                            topcat2_percent.setText(fb1);
                            topcat2_percent.append("%");
                            topcat2_sales.setText(insert1_cc);
                            topcat2_sales.append(String.valueOf(two111));

                            Cursor three = db.rawQuery("SELECT MAX(value) FROM Top_Category WHERE value <= '" + two111 + "' AND value <= '"+one11+"' AND category != '"+one1+"' AND category != '"+two2+"' ORDER BY category ASC ", null);
                            if (three.moveToFirst()) {
                                int three11 = three.getInt(0);
                                three = db.rawQuery("SELECT * FROM Top_Category WHERE value = '" + three11 + "' AND category != '"+one1+"' AND category != '"+two2+"' ", null);
                                if (three.moveToFirst()) {
                                    three3 = three.getString(1);
                                    salesee3 = three.getString(2);
                                    float fc = (Float.parseFloat(salesee3)/Float.parseFloat(sub_total))*100;
                                    String fc1 = String.format(Locale.US,"%.1f", fc);
                                    topcat3.setText(three3);
                                    topcat3_percent.setText(fc1);
                                    topcat3_percent.append("%");
                                    topcat3_sales.setText(insert1_cc);
                                    topcat3_sales.append(String.valueOf(three11));
                                } else {
                                    topcat3.setText("NA");
                                    topcat3_percent.setText("0%");
                                    topcat3_sales.setText(insert1_cc);
                                    topcat3_sales.append("0");

                                }
                            }
                            three.close();
                        } else {
                            topcat2.setText("NA");
                            topcat2_percent.setText("0%");
                            topcat3.setText("NA");
                            topcat3_percent.setText("0%");
                            topcat2_sales.setText(insert1_cc);
                            topcat2_sales.append("0");
                        }
                    }
                    two.close();
                } else {
                    topcat1.setText("NA");
                    topcat3_percent.setText("0%");
                    topcat1_sales.setText(insert1_cc);
                    topcat1_sales.append("0");
                }
            }
            tc.close();


            Cursor summ = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems", null);
            float sum1 = 0;
            if (summ.moveToFirst()){
                do {
                    float sumlevel = summ.getFloat(0);
                    refund_total = String.format(Locale.US,"%.0f",sumlevel);
                    //Toast.makeText(getActivity(), " total is "+max, Toast.LENGTH_SHORT).show();
                }while (summ.moveToNext());

            }
            summ.close();
            refundamount.setText(insert1_cc);
            refundamount.append(refund_total);

            Cursor cursor1w1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
            if (cursor1w1.moveToFirst()) {
                level = cursor1w1.getInt(0);
                total = String.valueOf(level);
            }
            cursor1w1.close();

            float div = Float.parseFloat(refund_total) * 100 / Float.parseFloat(total);
            refundpercentage.setText(String.format(Locale.US,"%.1f", div));
            refundpercentage.append("%");

//            if (refund_total.toString().equals("0.0") || refund_total.toString().equals("0")){
//                refundpercentage.setText("0%");
//            }else {
//
//                Cursor cursor1w1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
//                if (cursor1w1.moveToFirst()) {
//                    level = cursor1w1.getInt(0);
//                    total = String.valueOf(level);
//                }
//                cursor1w1.close();
//
//                float div = Float.parseFloat(refund_total) * 100 / Float.parseFloat(total);
//                refundpercentage.setText(String.format(Locale.US,"%.1f", div));
//                refundpercentage.append("%");
//            }

            Cursor onea = db.rawQuery("SELECT MAX(total) FROM usercancelleddata ", null);
            if (onea.moveToFirst()) {
                int one11 = onea.getInt(0);
                onea = db.rawQuery("SELECT * FROM usercancelleddata WHERE total = '" + one11 + "' ", null);
                if (onea.moveToFirst()) {
                    one1 = onea.getString(1);
                    pone = onea.getString(1);
                    max = onea.getString(2);
                    crashername.setText(one1);

                    float perc = Float.parseFloat(max) * 100 / Float.parseFloat(refund_total);
                    String percen = String.format(Locale.US,"%.1f", perc);

                    crasherpercentage.setText(percen);
                    crasherpercentage.append("%");

                    crashervalue.setText(insert1_cc);
                    crashervalue.append(max);

                } else {
                    crashername.setText("NA");
                    crasherpercentage.setText("0%");
                    crashervalue.setText(insert1_cc);
                    crashervalue.append("0");
                }
            }
            onea.close();

            Cursor to = db.rawQuery("SELECT MAX(value) FROM Top_Reason", null);
            if (to.moveToFirst()) {
                int one11 = to.getInt(0);
                to = db.rawQuery("SELECT * FROM Top_Reason WHERE value = '" + one11 + "' ", null);
                if (to.moveToFirst()) {
                    String two111 = to.getString(1);
                    top_reason.setText(two111);
                } else {
                    top_reason.setText("");
                }
            }
            to.close();

            Cursor top1 = db.rawQuery("SELECT MAX(total_amount) FROM Cusotmer_activity_temp_top3", null);
            if (top1.moveToFirst()){
                String pho1 = top1.getString(0);
                Cursor name1 = db.rawQuery("SELECT * FROM Cusotmer_activity_temp_top3 WHERE total_amount = '"+pho1+"'", null);
                if (name1.moveToFirst()){
                    String string_top1 = name1.getString(1);
                    String p = name1.getString(2);

                    top_customer.setText(string_top1);

                    Cursor cd1 = db.rawQuery("SELECT SUM(rupees) FROM Customerdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND phoneno = '"+p+"'", null);
                    if (cd1.moveToFirst()){
                        int all = cd1.getInt(0);
                        String all1 = String.valueOf(all);

                        top_customer_sales.setText(insert1_cc);
                        top_customer_sales.append(all1);

                        Cursor ccd = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                        if (ccd.moveToFirst()) {
                            level = ccd.getInt(0);
                            String call1 = String.valueOf(level);

                            float f = (Float.parseFloat(all1)/Float.parseFloat(call1))*100;
                            String f1 = String.format(Locale.US,"%.1f", f);
                            top_customer_percent.setText(f1);
                            top_customer_percent.append("%");
                        }
                        ccd.close();

                    }
                    cd1.close();

                }
                name1.close();
            }
            top1.close();


            Cursor ones = db.rawQuery("SELECT * FROM Customerdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' GROUP BY phoneno", null);
            int cou = ones.getCount();
//            level = one.getInt(0);
            String total1 = String.valueOf(cou);
            total_customers.setText(total1);
            ones.close();


            Cursor cd = db.rawQuery("SELECT SUM(rupees) FROM Customerdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
            if (cd.moveToFirst()){
                int all = cd.getInt(0);
                String all1 = String.valueOf(all);
                customer_sales.setText(insert1_cc);
                customer_sales.append(all1);

            }
            cd.close();


            Cursor ccursor11 = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
            if (ccursor11.moveToFirst()) {
                level = ccursor11.getInt(0);
                disc_total = String.valueOf(level);

                String rs = String.valueOf(insert1_cc);
                discounttotal.setText(insert1_cc);
                discounttotal.append(disc_total);

                Cursor cursoor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursoor11.moveToFirst()) {
                    level = cursoor11.getInt(0);
                    total = String.valueOf(level);

                    float f = (Float.parseFloat(disc_total)/Float.parseFloat(total))*100;
                    String f1 = String.format(Locale.US,"%.1f", f);
                    disc_percent.setText(String.valueOf(f1));
                    disc_percent.append("%");
                }
                cursoor11.close();
            }
            ccursor11.close();


            LinearLayout proo = (LinearLayout) rootview.findViewById(R.id.prooo);

            if (tv_inapp.getText().toString().equals("Activated")) {
                Cursor cursor = db1.rawQuery("SELECT COUNT(itemname) FROM Items_temp_list WHERE total_price != '0' OR total_price != '0.0'", null);
                if (cursor.moveToFirst()) {
                    int azz = cursor.getInt(0);
                    cost_items_indent.setText(String.valueOf(azz));
                }
                cursor.close();

                Cursor cuursor = db1.rawQuery("SELECT COUNT(itemname) FROM Ingredients_temp_list WHERE total_price != '0' OR total_price != '0.0'", null);
                if (cuursor.moveToFirst()) {
                    int azz1 = cuursor.getInt(0);
                    cost_ingredient_indent.setText(String.valueOf(azz1));
                }
                cuursor.close();

                Cursor oones = db1.rawQuery("SELECT * FROM Vendor_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY vendor_phoneno", null);
                int couf = oones.getCount();
                String tttal1 = String.valueOf(couf);
                vendors_today.setText(tttal1);

                Cursor ooones = db1.rawQuery("SELECT * FROM Ingredient_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY vendor_phoneno", null);
                int coouf = ooones.getCount();
                String tottal1 = String.valueOf(coouf);
                ingredient_vendors_today.setText(tottal1);


                Cursor cursor_qw = db1.rawQuery("SELECT * FROM Items WHERE status_low = 'Low'", null);
                int co = cursor_qw.getCount();
                i_low_stock_value.setText(String.valueOf(co));

                Cursor cursor_qw1 = db1.rawQuery("SELECT * FROM Ingredients WHERE status_low = 'Low'", null);
                int coq = cursor_qw1.getCount();
                mi_low_stock_value.setText(String.valueOf(coq));

                float co11 = 0;
                Cursor ccursor1 = db1.rawQuery("SELECT * FROM Ingredient_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY datetimee_new_from", null);
                if (ccursor1.moveToFirst()){
                    do {
                        String dateti = ccursor1.getString(13);
//                                    Toast.makeText(Inventory_Indent_Items_History.this, "1 "+dateti, Toast.LENGTH_SHORT).show();

                        Cursor cursor21 = db1.rawQuery("SELECT * FROM Ingredient_sold_details WHERE datetimee_new_from = '"+dateti+"'", null);
                        if (cursor21.moveToFirst()){
                            String toto = cursor21.getString(9);
//                                        Toast.makeText(Inventory_Indent_Items_History.this, "2 "+tot, Toast.LENGTH_SHORT).show();
                            co11 = co11+Float.parseFloat(toto);

                        }
                        cursor21.close();
                    }while (ccursor1.moveToNext());
                }
                ccursor1.close();
                mic_value.setText(String.valueOf(co11));
                mi_cost_value.setText(String.valueOf(co11));

                float co1 = 0;
                Cursor cursor1 = db1.rawQuery("SELECT * FROM Vendor_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY datetimee_new_from", null);
                if (cursor1.moveToFirst()){
                    do {
                        String dateti = cursor1.getString(13);
//                                    Toast.makeText(Inventory_Indent_Items_History.this, "1 "+dateti, Toast.LENGTH_SHORT).show();

                        Cursor ccursor2 = db1.rawQuery("SELECT * FROM Vendor_sold_details WHERE datetimee_new_from = '"+dateti+"'", null);
                        if (ccursor2.moveToFirst()){
                            String toto = ccursor2.getString(9);
//                                        Toast.makeText(Inventory_Indent_Items_History.this, "2 "+tot, Toast.LENGTH_SHORT).show();
                            co1 = co1+Float.parseFloat(toto);

                        }
                        ccursor2.close();
                    }while (cursor1.moveToNext());
                }
                cursor1.close();
                ic_value.setText(String.valueOf(co1));
                i_cost_value.setText(String.valueOf(co1));

                Cursor cursorx1 = db1.rawQuery("SELECT SUM(pay) FROM Vendor_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"'", null);
                if (cursorx1.moveToFirst()){
                    float cv = cursorx1.getFloat(0);
                    paid_value.setText(String.valueOf(cv));
                    float zx = (cv / Float.parseFloat(i_cost_value.getText().toString())) * 100;
                    paid_percent.setText(String.format("%.1f", zx));


                    float zx1 = Float.parseFloat(i_cost_value.getText().toString()) - cv;
                    pending_value.setText(String.valueOf(zx1));
                    float zx11 = (zx1/ Float.parseFloat(i_cost_value.getText().toString())) * 100;
                    pending_percent.setText(String.format("%.1f", zx11));
                }
                cursorx1.close();

                Cursor cursorx11 = db1.rawQuery("SELECT SUM(pay) FROM Ingredient_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"'", null);
                if (cursorx11.moveToFirst()){
                    float cv = cursorx11.getFloat(0);
                    ingredient_paid_value.setText(String.valueOf(cv));
                    float zx = (cv / Float.parseFloat(mi_cost_value.getText().toString())) * 100;
                    ingredient_paid_percent.setText(String.format("%.1f", zx));

                    float zx1 = Float.parseFloat(mi_cost_value.getText().toString()) - cv;
                    ingredient_pending_value.setText(String.valueOf(zx1));
                    float zx11 = (zx1/ Float.parseFloat(mi_cost_value.getText().toString())) * 100;
                    ingredient_pending_percent.setText(String.format("%.1f", zx11));
                }
                cursorx11.close();

//                ic_value = new TextView(getActivity());



                float df = (Float.parseFloat(i_cost_value.getText().toString()) / Float.parseFloat(totalsales_r.getText().toString())) * 100;
                i_cost_percent.setText(String.format("%.1f", df));



//                TextView mic_value = new TextView(getActivity());



                float df1 = (Float.parseFloat(mi_cost_value.getText().toString()) / Float.parseFloat(totalsales_r.getText().toString())) * 100;
                mi_cost_percent.setText(String.format("%.1f", df1));

                TextView cost_value = (TextView) rootview.findViewById(R.id.cost_value);
                float az = Float.parseFloat(ic_value.getText().toString()) + Float.parseFloat(mic_value.getText().toString());
                cost_value.setText(String.valueOf(az));

//                TextView amount_before_tax = new TextView(getActivity());
                String s1 = "0";
                Cursor cursorz = db.rawQuery("SELECT SUM(subtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursorz.moveToFirst()){
                    float s = cursorz.getFloat(0);
                    s1 = String.format("%.1f", s);
                }
                cursorz.close();
                amount_before_tax.setText(s1);

                TextView profit_value = (TextView) rootview.findViewById(R.id.profit_value);
                float az1 = Float.parseFloat(amount_before_tax.getText().toString()) - az;
                profit_value.setText(String.valueOf(az1));

//                String total = "0", tax_total = "0";
//                Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
//                if (cursor11.moveToFirst()) {
//                    level = cursor11.getInt(0);
//                    total = String.valueOf(level);
//                }
//                cursor11.close();
//
//                Cursor cursor2 = db.rawQuery("SELECT SUM(taxtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
//                if (cursor2.moveToFirst()){
//                    float taxtot = cursor2.getFloat(0);
//                    tax_total = String.format(Locale.US,"%.0f", taxtot);
////                    Toast.makeText(getActivity(), "itemtax "+tot, Toast.LENGTH_LONG).show();
//                }
//                cursor2.close();
//
//                Float amout_notax = Float.parseFloat(total) - Float.parseFloat(tax_total);
//                String amount_notax = String.format(Locale.US,"%.0f", amout_notax);
//                profit_value.setText(String.valueOf(amount_notax));

                Cursor cursor112 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
                if (cursor112.moveToFirst()) {
                    level12 = cursor112.getInt(0);
                    totalis = String.valueOf(level12);
                }
                cursor112.close();

                mChart_pie.notifyDataSetChanged();
                mChart_pie.invalidate();

                mChart_pie.setUsePercentValues(true);
                mChart_pie.getDescription().setEnabled(false);
                mChart_pie.setExtraOffsets(25, 10, 5, 5);

                mChart_pie.setDragDecelerationFrictionCoef(0.95f);

//            mChart_pie.setCenterTextTypeface(mTfLight);
//            mChart_pie.setCenterText(generateCenterSpannableText());

                mChart_pie.setDrawHoleEnabled(true);
                mChart_pie.setHoleColor(Color.WHITE);

                mChart_pie.setTransparentCircleColor(Color.WHITE);
                mChart_pie.setTransparentCircleAlpha(110);

                mChart_pie.setHoleRadius(58f);
                mChart_pie.setTransparentCircleRadius(61f);

                mChart_pie.setDrawCenterText(true);

                mChart_pie.setRotationAngle(0);
                // enable rotation of the chart by touch
                mChart_pie.setRotationEnabled(true);
                mChart_pie.setHighlightPerTapEnabled(true);

                // mChart.setUnit(" ?");
                // mChart.setDrawUnitsInChart(true);

                // add a selection listener
//            mChart_pie.setOnChartValueSelectedListener(this);

                setData(4, 100);

                mChart_pie.animateY(1400, Easing.EasingOption.EaseInOutQuad);
                // mChart.spin(2000, 0, 360);

                Legend l = mChart_pie.getLegend();
                l.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);
//            l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);
                l.setOrientation(Legend.LegendOrientation.VERTICAL);
                l.setDrawInside(false);
                l.setXEntrySpace(7f);
                l.setYEntrySpace(7f);
                l.setYOffset(0f);

                // entry label styling
                mChart_pie.setEntryLabelColor(Color.BLACK);
//            mChart_pie.setEntryLabelTypeface(mTfRegular);
                mChart_pie.setEntryLabelTextSize(12f);

            } else {

            }

//            Cursor cursor1_pro = db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
//            if (cursor1_pro.moveToFirst()) {
//                String st = cursor1_pro.getString(1);
//
//                TextView tv = new TextView(getActivity());
//                tv.setText(st);
//
//                if (tv.getText().toString().equals("Activated")) {
//                    Cursor cursor = db1.rawQuery("SELECT COUNT(itemname) FROM Items_temp_list WHERE total_price != '0' OR total_price != '0.0'", null);
//                    if (cursor.moveToFirst()) {
//                        int azz = cursor.getInt(0);
//                        cost_items_indent.setText(String.valueOf(azz));
//                    }
//                    cursor.close();
//
//                    Cursor cuursor = db1.rawQuery("SELECT COUNT(itemname) FROM Ingredients_temp_list WHERE total_price != '0' OR total_price != '0.0'", null);
//                    if (cuursor.moveToFirst()) {
//                        int azz1 = cuursor.getInt(0);
//                        cost_ingredient_indent.setText(String.valueOf(azz1));
//                    }
//                    cuursor.close();
//
//                    Cursor oones = db1.rawQuery("SELECT * FROM Vendor_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY vendor_phoneno", null);
//                    int couf = oones.getCount();
//                    String tttal1 = String.valueOf(couf);
//                    vendors_today.setText(tttal1);
//
//                    Cursor ooones = db1.rawQuery("SELECT * FROM Ingredient_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY vendor_phoneno", null);
//                    int coouf = ooones.getCount();
//                    String tottal1 = String.valueOf(coouf);
//                    ingredient_vendors_today.setText(tottal1);
//
//
//                    Cursor cursor_qw = db1.rawQuery("SELECT * FROM Items WHERE status_low = 'Low'", null);
//                    int co = cursor_qw.getCount();
//                    i_low_stock_value.setText(String.valueOf(co));
//
//                    Cursor cursor_qw1 = db1.rawQuery("SELECT * FROM Ingredients WHERE status_low = 'Low'", null);
//                    int coq = cursor_qw1.getCount();
//                    mi_low_stock_value.setText(String.valueOf(coq));
//
//                    Cursor cursorx1 = db1.rawQuery("SELECT SUM(pay) FROM Vendor_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"'", null);
//                    if (cursorx1.moveToFirst()){
//                        float cv = cursorx1.getFloat(0);
//                        paid_value.setText(String.valueOf(cv));
//                        float zx = (cv / Float.parseFloat(i_cost_value.getText().toString())) * 100;
//                        paid_percent.setText(String.format("%.1f", zx));
//
//
//                        float zx1 = Float.parseFloat(i_cost_value.getText().toString()) - cv;
//                        pending_value.setText(String.valueOf(zx1));
//                        float zx11 = (zx1/ Float.parseFloat(i_cost_value.getText().toString())) * 100;
//                        pending_percent.setText(String.format("%.1f", zx11));
//                    }
//                    cursorx1.close();
//
//                    Cursor cursorx11 = db1.rawQuery("SELECT SUM(pay) FROM Ingredient_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"'", null);
//                    if (cursorx11.moveToFirst()){
//                        float cv = cursorx11.getFloat(0);
//                        ingredient_paid_value.setText(String.valueOf(cv));
//                        float zx = (cv / Float.parseFloat(mi_cost_value.getText().toString())) * 100;
//                        ingredient_paid_percent.setText(String.format("%.1f", zx));
//
//                        float zx1 = Float.parseFloat(mi_cost_value.getText().toString()) - cv;
//                        ingredient_pending_value.setText(String.valueOf(zx1));
//                        float zx11 = (zx1/ Float.parseFloat(mi_cost_value.getText().toString())) * 100;
//                        ingredient_pending_percent.setText(String.format("%.1f", zx11));
//                    }
//                    cursorx11.close();
//
//                    TextView ic_value = new TextView(getActivity());
//
//                    float co1 = 0;
//                    Cursor cursor1 = db1.rawQuery("SELECT * FROM Vendor_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY datetimee_new_from", null);
//                    if (cursor1.moveToFirst()){
//                        do {
//                            String dateti = cursor1.getString(13);
////                                    Toast.makeText(Inventory_Indent_Items_History.this, "1 "+dateti, Toast.LENGTH_SHORT).show();
//
//                            Cursor ccursor2 = db1.rawQuery("SELECT * FROM Vendor_sold_details WHERE datetimee_new_from = '"+dateti+"'", null);
//                            if (ccursor2.moveToFirst()){
//                                String toto = ccursor2.getString(9);
////                                        Toast.makeText(Inventory_Indent_Items_History.this, "2 "+tot, Toast.LENGTH_SHORT).show();
//                                co1 = co1+Float.parseFloat(toto);
//
//                            }
//                        }while (cursor1.moveToNext());
//                    }
//                    cursor1.close();
//                    ic_value.setText(String.valueOf(co1));
//                    i_cost_value.setText(String.valueOf(co1));
//
//                    float df = (Float.parseFloat(i_cost_value.getText().toString()) / Float.parseFloat(totalsales_r.getText().toString())) * 100;
//                    i_cost_percent.setText(String.format("%.1f", df));
//
//
//
//                    TextView mic_value = new TextView(getActivity());
//
//                    float co11 = 0;
//                    Cursor ccursor1 = db1.rawQuery("SELECT * FROM Ingredient_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY datetimee_new_from", null);
//                    if (ccursor1.moveToFirst()){
//                        do {
//                            String dateti = ccursor1.getString(13);
////                                    Toast.makeText(Inventory_Indent_Items_History.this, "1 "+dateti, Toast.LENGTH_SHORT).show();
//
//                            Cursor cursor21 = db1.rawQuery("SELECT * FROM Ingredient_sold_details WHERE datetimee_new_from = '"+dateti+"'", null);
//                            if (cursor21.moveToFirst()){
//                                String toto = cursor21.getString(9);
////                                        Toast.makeText(Inventory_Indent_Items_History.this, "2 "+tot, Toast.LENGTH_SHORT).show();
//                                co11 = co11+Float.parseFloat(toto);
//
//                            }
//                        }while (ccursor1.moveToNext());
//                    }
//                    ccursor1.close();
//                    mic_value.setText(String.valueOf(co11));
//                    mi_cost_value.setText(String.valueOf(co11));
//
//                    float df1 = (Float.parseFloat(mi_cost_value.getText().toString()) / Float.parseFloat(totalsales_r.getText().toString())) * 100;
//                    mi_cost_percent.setText(String.format("%.1f", df1));
//
//                    TextView cost_value = (TextView) rootview.findViewById(R.id.cost_value);
//                    float az = Float.parseFloat(ic_value.getText().toString()) + Float.parseFloat(mic_value.getText().toString());
//                    cost_value.setText(String.valueOf(az));
//
//                    TextView amount_before_tax = new TextView(getActivity());
//                    String s1 = "0";
//                    Cursor cursorz = db.rawQuery("SELECT SUM(subtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
//                    if (cursorz.moveToFirst()){
//                        float s = cursorz.getFloat(0);
//                        s1 = String.format("%.1f", s);
//                    }
//                    cursorz.close();
//                    amount_before_tax.setText(s1);
//
//                    TextView profit_value = (TextView) rootview.findViewById(R.id.profit_value);
//                    float az1 = Float.parseFloat(amount_before_tax.getText().toString()) - az;
//                    profit_value.setText(String.valueOf(az1));
//
//                    Cursor cursor112 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' ", null);
//                    if (cursor112.moveToFirst()) {
//                        level12 = cursor112.getInt(0);
//                        totalis = String.valueOf(level12);
//                    }
//                    cursor112.close();
//
//                    mChart_pie.notifyDataSetChanged();
//                    mChart_pie.invalidate();
//
//                    mChart_pie.setUsePercentValues(true);
//                    mChart_pie.getDescription().setEnabled(false);
//                    mChart_pie.setExtraOffsets(25, 10, 5, 5);
//
//                    mChart_pie.setDragDecelerationFrictionCoef(0.95f);
//
////            mChart_pie.setCenterTextTypeface(mTfLight);
////            mChart_pie.setCenterText(generateCenterSpannableText());
//
//                    mChart_pie.setDrawHoleEnabled(true);
//                    mChart_pie.setHoleColor(Color.WHITE);
//
//                    mChart_pie.setTransparentCircleColor(Color.WHITE);
//                    mChart_pie.setTransparentCircleAlpha(110);
//
//                    mChart_pie.setHoleRadius(58f);
//                    mChart_pie.setTransparentCircleRadius(61f);
//
//                    mChart_pie.setDrawCenterText(true);
//
//                    mChart_pie.setRotationAngle(0);
//                    // enable rotation of the chart by touch
//                    mChart_pie.setRotationEnabled(true);
//                    mChart_pie.setHighlightPerTapEnabled(true);
//
//                    // mChart.setUnit(" ?");
//                    // mChart.setDrawUnitsInChart(true);
//
//                    // add a selection listener
////            mChart_pie.setOnChartValueSelectedListener(this);
//
//                    setData(4, 100);
//
//                    mChart_pie.animateY(1400, Easing.EasingOption.EaseInOutQuad);
//                    // mChart.spin(2000, 0, 360);
//
//                    Legend l = mChart_pie.getLegend();
//                    l.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);
////            l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);
//                    l.setOrientation(Legend.LegendOrientation.VERTICAL);
//                    l.setDrawInside(false);
//                    l.setXEntrySpace(7f);
//                    l.setYEntrySpace(7f);
//                    l.setYOffset(0f);
//
//                    // entry label styling
//                    mChart_pie.setEntryLabelColor(Color.BLACK);
////            mChart_pie.setEntryLabelTypeface(mTfRegular);
//                    mChart_pie.setEntryLabelTextSize(12f);
//
//                }
//            }


            final Cursor ccurrsor11 = db.rawQuery("SELECT COUNT(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
            if (ccurrsor11.moveToFirst()) {
                level = ccurrsor11.getInt(0);
                String tottaal1 = String.valueOf(level);
                discount_no_of_bills.setText(tottaal1);
            }
            ccurrsor11.close();


        }
    }



    public void email(Dialog dialog){

        sdff2 = new SimpleDateFormat("ddMMMyy",Locale.US);
        currentDateandTimee1 = sdff2.format(new Date());

        Date dt1 = new Date();
        sdff1 = new SimpleDateFormat("hhmmssaa",Locale.US);
        timee1 = sdff1.format(dt1);

        imageViewPicture = (ImageView)dialog.findViewById(R.id.imageViewPicture);
        //imageViewPicture.setOnClickListener(this);
        //getimagee = (Button)findViewById(R.id.imageViewPicture1);
//        rbPaperWidth2 = (RadioButton) dialog.findViewById(R.id.radioButton2Inch);
//        rbPaperWidth3 = (RadioButton) dialog.findViewById(R.id.radioButton3Inch);
//        rbPaperWidth4 = (RadioButton) dialog.findViewById(R.id.radioButton4Inch);
        final RelativeLayout billaa = (RelativeLayout) dialog.findViewById(R.id.billa);

        billaa.setVisibility(View.VISIBLE);

        LinearLayout include = (LinearLayout)dialog.findViewById(R.id.include);
        final LinearLayout imageview = (LinearLayout)dialog.findViewById(R.id.imageview);

        mView = dialog.findViewById(R.id.f_view);


//        db1 =   getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//        db =   getActivity().openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);


        SimpleDateFormat normal = new SimpleDateFormat("dd MMM yy",Locale.US);
        final String normal1 = normal.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa",Locale.US);
        final String time1 = sdf1.format(dt);


        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss",Locale.US);
        String time24 = sdf1t.format(dtt);


        TableLayout tableLayoutt = (TableLayout) mView.findViewById(R.id.lytpedidooo);
        tableLayoutt.removeAllViews();


        TextView bilnumb = (TextView)mView.findViewById(R.id.billnumb);
        bilnumb.setText(String.valueOf(billnumb));

        TextView datees = (TextView)mView.findViewById(R.id.date);
        datees.setText(datee);
        TextView timees = (TextView)mView.findViewById(R.id.time);
        timees.setText(timee);

        LinearLayout custadd = (LinearLayout)mView.findViewById(R.id.address);
        TextView custname = (TextView)mView.findViewById(R.id.cust_name);
        TextView custaddr = (TextView)mView.findViewById(R.id.cust_address);
        TextView custph = (TextView)mView.findViewById(R.id.cust_phno);
        TextView custema = (TextView)mView.findViewById(R.id.cust_emailid);

        LinearLayout comaddlogo = (LinearLayout)mView.findViewById(R.id.complogo);
        LinearLayout foott = (LinearLayout)mView.findViewById(R.id.foottt);

        TextView subtotoalam = (TextView)mView.findViewById(R.id.subtotal);
        TextView discpercent = (TextView)mView.findViewById(R.id.dispercent);
        TextView discval = (TextView)mView.findViewById(R.id.discount);
        TextView savingsval = (TextView)mView.findViewById(R.id.disc_savings);
        TextView taxvalue = (TextView)mView.findViewById(R.id.tax);
        TextView roundedoffvalue = (TextView)mView.findViewById(R.id.roundedoff);
        TextView total = (TextView)mView.findViewById(R.id.totalold);

        TextView compname = (TextView)mView.findViewById(R.id.compname);
        TextView compadd1 = (TextView)mView.findViewById(R.id.address1);
        TextView compadd2 = (TextView)mView.findViewById(R.id.address2);
        TextView compadd3 = (TextView)mView.findViewById(R.id.address3);
        TextView compphnoo = (TextView)mView.findViewById(R.id.phoneno);
        TextView compemail = (TextView)mView.findViewById(R.id.emailid);
        TextView compwebsite = (TextView)mView.findViewById(R.id.website);
        TextView comptaxlicen = (TextView)mView.findViewById(R.id.taxlineone);

        TextView tableidd = (TextView)mView.findViewById(R.id.tableid);
        TextView paymenttypee = (TextView)mView.findViewById(R.id.paymentmethod);
        TextView billtypee = (TextView)mView.findViewById(R.id.billtype);

        TextView foo = (TextView)mView.findViewById(R.id.footer);

        Cursor caddress = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnumb+"'", null);
        if (caddress.moveToFirst()){
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            custadd.setVisibility(View.VISIBLE);
            if (nam.length()>0){
                custname.setText(nam);
            }else {
                custname.setVisibility(View.GONE);
            }
            if (addr.length()>0){
                custaddr.setText(addr);
            }else {
                custaddr.setVisibility(View.GONE);
            }
            if (phon.length()>0){
                custph.setText(phon);
            }else {
                custph.setVisibility(View.GONE);
            }
            if (emai.length()>0){
                custema.setText(emai);
            }else {
                custema.setVisibility(View.GONE);
            }


        }else {
            custadd.setVisibility(View.GONE);
        }
        caddress.close();

//        db1 = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        Cursor compdetails = db1.rawQuery("SELECT * FROM Companydetailss", null);
        if (compdetails.moveToFirst()){
            compna = compdetails.getString(1);
            String add1 = compdetails.getString(14);
            String add2 = compdetails.getString(17);
            String add3 = compdetails.getString(18);
            String phonenum = compdetails.getString(2);
            String email = compdetails.getString(15);
            String web = compdetails.getString(16);
            String taxone = compdetails.getString(10);
            String footer = compdetails.getString(12);

            comaddlogo.setVisibility(View.VISIBLE);


            if (compna.length()>0){
                compname.setText(compna);
            }else {
                compname.setVisibility(View.GONE);
            }
            if (add1.length()>0){
                compadd1.setText(add1);
            }else {
                compadd1.setVisibility(View.GONE);

            }
            if (add2.length()>0){
                compadd2.setText(add2);
            }else {
                compadd2.setVisibility(View.GONE);

            }
            if (add3.length()>0){
                compadd3.setText(add3);
            }else {
                compadd3.setVisibility(View.GONE);

            }
            if (phonenum.length()>0){
                compphnoo.setText(phonenum);
            }else {
                compphnoo.setVisibility(View.GONE);

            }
            if (email.length()>0){
                compemail.setText(email);
            }else {
                compemail.setVisibility(View.GONE);

            }
            if (web.length()>0){
                compwebsite.setText(web);
            }else {
                compwebsite.setVisibility(View.GONE);

            }
            if (taxone.length()>0){
                comptaxlicen.setText(taxone);
            }else {
                comptaxlicen.setVisibility(View.GONE);

            }
            if (footer.length()>0){
                foott.setVisibility(View.VISIBLE);
                foo.setText(footer);
            }else {
                foott.setVisibility(View.GONE);
                foo.setVisibility(View.GONE);
            }


        }else {
            comaddlogo.setVisibility(View.GONE);
        }
        compdetails.close();

        ImageView imageButton = (ImageView)mView.findViewById(R.id.viewImagee);
        String[] col={"companylogo"};
        Cursor c=db1.query("Logo", col, null, null, null, null, null);

        if(c.moveToFirst()){
            do{
                img=c.getBlob(c.getColumnIndex("companylogo"));
                final Bitmap b1= BitmapFactory.decodeByteArray(img, 0, img.length);
                imageButton.setImageBitmap(b1);
            }while(c.moveToNext());
        }else {
            imageButton.setVisibility(View.GONE);
        }
        c.close();



        Cursor cursor3 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnumb + "'", null);
        if (cursor3.moveToFirst()){
            sub = cursor3.getString(7);
            subtotoalam.setText(sub);
        }
        cursor3.close();

        Cursor cursor4 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billnumb+"'", null);
        if (cursor4.moveToFirst()){
            String taxpe = cursor4.getString(5);
            discpercent.setText(taxpe);
        }
        cursor4.close();

        Cursor cursor5 = db.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billnumb+"'", null);
        if (cursor5.moveToFirst()){
            String dsirs = cursor5.getString(7);
            float dsirsq = Float.parseFloat(dsirs);
            String rop = String.format(Locale.US,"%.2f", dsirsq);
            discval.setText(rop);
        }
        cursor5.close();

        Cursor cursor51 = db.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '"+billnumb+"' AND disc_thereornot = 'yes'", null);
        if (cursor51.moveToFirst()){
            float dsirsq = cursor51.getFloat(0);
            String rop = String.format(Locale.US,"%.2f", dsirsq);
            savingsval.setText(rop);
        }
        cursor51.close();

        Cursor cursor6 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
        if (cursor6.moveToFirst()){
            String sub = cursor6.getString(8);
            if (sub.equals("")){
                taxvalue.setText("0.0");
            }else {
                float vv = Float.parseFloat(sub);
                taxvalue.setText(String.format(Locale.US,"%.2f", vv));
            }

        }
        cursor6.close();

        Cursor cursor7 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
        if (cursor7.moveToFirst()){
            String sub = cursor7.getString(9);
            roundedoffvalue.setText(sub);
        }
        cursor7.close();

        Cursor cursor8 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
        if (cursor8.moveToFirst()){
            String sub = cursor8.getString(2);
            total.setText(sub);

            String paymenttype = cursor8.getString(5);
            String billtype = cursor8.getString(6);

            paymenttypee.setText(paymenttype);
            billtypee.setText(billtype);
        }
        cursor8.close();

        Cursor ccursor9 = db.rawQuery("Select * from All_Sales WHERE bill_no = '"+billnumb+"'", null);
        if (ccursor9.moveToFirst()){
            String tabid = ccursor9.getString(15);
            //tableidd.setText(tabid);

            Cursor vbnm = db1.rawQuery("SELECT * FROM asd1 WHERE _id = '"+tabid+"'", null);
            if (vbnm.moveToFirst()){
                assa1 = vbnm.getString(1);
                assa2 = vbnm.getString(2);
            }
            TextView cx = new TextView(getActivity());
            cx.setText(assa1);
            if (cx.getText().toString().equals("")){
                tableidd.setText(assa2);
            }else {
                tableidd.setText(assa1);
            }
            vbnm.close();

        }
        ccursor9.close();

        Cursor ccursorr = db.rawQuery("Select * from All_Sales WHERE bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String nbg = ccursorr.getString(0);
                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);
                int padding_in_px;

                int padding_in_dp = 38;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")){
                    final TableRow row = new TableRow(getActivity());
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));



                    final TableRow row1 = new TableRow(getActivity());
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(getActivity());
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(getActivity());
                    final TableLayout tableLayout_disc = new TableLayout(getActivity());

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(getActivity());
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(getActivity());
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(getActivity());
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(getActivity());
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(getActivity());
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);



                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnumb + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()){
                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            final TableRow tableRow11 = new TableRow(getActivity());
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(getActivity());
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(getActivity());
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(getActivity());
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(getActivity());
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(getActivity());
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            //String modtotal = String.valueOf(Integer.parseInt(modiquan) * Integer.parseInt(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);

                            Cursor cursor41 = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '"+billnumb+"'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor41.moveToFirst()){
                                float sub2a = cursor41.getFloat(0);
                                String sub2a1 = String.format(Locale.US,"%.2f", sub2a);
                                ss = Float.parseFloat(sub2a1)+Float.parseFloat(tototot);
                                ss1 = String.valueOf(ss);
                                //Toast.makeText(getActivity(), "4 "+ss1, Toast.LENGTH_SHORT).show();
                            }
                            cursor41.close();

                            tv8 = new TextView(getActivity());
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(ss1);
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        }while(modcursor.moveToNext());

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnumb + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                float vtq = disc_cursor.getFloat(31);
                                if(disc_there.equals("no")){

                                }else {
                                    ///Toast.makeText(BeveragesMenuFragment.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(getActivity());
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(getActivity());
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(getActivity());
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(31));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }
                        disc_cursor.close();

                    }
                    else {
                        tv8 = new TextView(getActivity());
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnumb + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                float vtq = disc_cursor.getFloat(31);
                                if(disc_there.equals("no")){

                                }else {
                                    ///Toast.makeText(BeveragesMenuFragment.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(getActivity());
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(getActivity());
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(getActivity());
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(31));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }
                        disc_cursor.close();
                    }
                    modcursor.close();

                    tableLayoutt.addView(row);

                    tableLayoutt.addView(tableLayout1);

                    tableLayoutt.addView(tableLayout_disc);

                }



            } while (ccursorr.moveToNext());
        }
        ccursorr.close();

        TableLayout tableLayout1 = (TableLayout) mView.findViewById(R.id.lytpedidoo);
        tableLayout1.removeAllViews();


        Cursor ccursor = db.rawQuery("Select * from All_Sales where bill_no = '"+billnumb+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {

                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(4);
                String itna = ccursor.getString(1);

                if (value.equals("0") || name.equals("NONE") || name.equals("None") || value.equals("0.0")){

                }else {

//                    final TableRow row = new TableRow(getActivity());
//                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
//                            TableRow.LayoutParams.WRAP_CONTENT));
//                    row.setGravity(Gravity.CENTER);

                    final TableRow row = new TableRow(getActivity());
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TableRow.LayoutParams lp, lp1, lp2;

//                                    final TextView tv = new TextView(getActivity());
//                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                    tv.setTextSize(16);
//                                    tv.setTypeface(Typeface.MONOSPACE);
//                                    row.addView(tv);

                    TextView tvv = new TextView(getActivity());
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(getActivity());
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    float vbn = Float.parseFloat(value);
                    String bvn = String.format(Locale.US,"%.2f", vbn);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(getActivity());
//                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @@ " + bvn + "%" + "(" + itna + ")");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(Color.parseColor("#000000"));
                    row.addView(tv2);

                    TextView textView1 = new TextView(getActivity());
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(getActivity());
//                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float tota = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    String tota1 = String.format(Locale.US,"%.2f", tota);
                    //tv3.setPadding(0,0,10,0);
                    tv3.setText(String.valueOf(tota1));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }


            } while (ccursor.moveToNext());
        }
        ccursor.close();


        String phon = "0";

        Cursor caddress1 = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnumb+"'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }
        caddress1.close();

        TextView tvvs = new TextView(getActivity());
        tvvs.setText(phon);


        Cursor us_name1 = db.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()){
//            Toast.makeText(getActivity(), "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(getActivity());
            hid.setText(proc);

            if (hid.getText().toString().equals("off")){
                Cursor cursorr = null;
                if (billtypee.getText().toString().equals("  Dine-in") || billtypee.getText().toString().equals("  General") || billtypee.getText().toString().equals("  Others")){
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (billtypee.getText().toString().equals("  Takeaway") || billtypee.getText().toString().equals("  Main")){
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (billtypee.getText().toString().equals("  Home delivery")){
                    cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(getActivity());
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(getActivity());
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.MONOSPACE);
//                                row.addView(tv);

                        TextView tvv = new TextView(getActivity());
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(getActivity());
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        float vbn = Float.parseFloat(value);
                        String bvn = String.format(Locale.US,"%.2f", vbn);
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(getActivity());
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + bvn + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(getActivity());
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(getActivity());
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                        float tota = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
                        String tota1 = String.format(Locale.US,"%.2f", tota);
                        tv3.setText(String.valueOf(tota1));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);


                    } while (cursorr.moveToNext());

                }
                cursorr.close();
            }else {

                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(getActivity());
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(getActivity());
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(getActivity());
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(getActivity());
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(BeveragesMenuFragment.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(getActivity());
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(BeveragesMenuFragment.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(getActivity());
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float tota = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    String tota1 = String.format(Locale.US,"%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(getActivity(), "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);
                    }

                }
            }

        }else {
//            Toast.makeText(getActivity(), "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (billtypee.getText().toString().equals("  Dine-in") || billtypee.getText().toString().equals("  General") || billtypee.getText().toString().equals("  Others")){
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (billtypee.getText().toString().equals("  Takeaway") || billtypee.getText().toString().equals("  Main")){
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (billtypee.getText().toString().equals("  Home delivery")){
                cursorr = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//            ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(getActivity());
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(getActivity());
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.MONOSPACE);
//                                row.addView(tv);

                    TextView tvv = new TextView(getActivity());
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(getActivity());
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    float vbn = Float.parseFloat(value);
                    String bvn = String.format(Locale.US,"%.2f", vbn);
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(getActivity());
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + bvn + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(getActivity());
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(getActivity());
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float tota = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
                    String tota1 = String.format(Locale.US,"%.2f", tota);
                    tv3.setText(String.valueOf(tota1));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);


                } while (cursorr.moveToNext());
            }
            cursorr.close();
        }
        us_name1.close();

//        ccursor = db1.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
//        if (ccursor.moveToFirst()) {
//
//            do {
//
//                String name = ccursor.getString(1);
//                String value = ccursor.getString(2);
//
//                final TableRow row = new TableRow(getActivity());
//                row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
//                        TableRow.LayoutParams.WRAP_CONTENT));
//                row.setGravity(Gravity.CENTER);
//
//                TableRow.LayoutParams lp, lp1, lp2;
//
////                                final TextView tv = new TextView(getActivity());
////                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                tv.setTextSize(16);
////                                tv.setTypeface(Typeface.MONOSPACE);
////                                row.addView(tv);
//
//                TextView tvv = new TextView(getActivity());
//                tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                //tv.setBackgroundResource(R.drawable.cell_shape);
//                tvv.setGravity(Gravity.START);
//                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tvv.setText(name);
//
//                TextView tv1 = new TextView(getActivity());
//                tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                tv1.setGravity(Gravity.START);
//                tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                float vbn = Float.parseFloat(value);
//                String bvn = String.format("%.2f", vbn);
//                tv1.setText(value);
//                tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                String value1 = tv1.getText().toString();
//
//                TextView tv2 = new TextView(getActivity());
//                //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
//                //tv2.setLayoutParams(lp);
//                tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                tv2.append(name + " @ " + bvn + "%");
//                tv2.setPadding(0, 0, 20, 0);
//                tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                row.addView(tv2);
//
//                TextView textView1 = new TextView(getActivity());
//                textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                row.addView(textView1);
//
//                TextView tv3 = new TextView(getActivity());
////                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
////                tv3.setLayoutParams(lp2);
//                tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                //tv3.setPadding(0,0,10,0);
//                tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float tota = mul;
//                String tota1 = String.format("%.2f", tota);
//                tv3.setText(String.valueOf(tota1));
//                //row.addView(tv3);
//
//
//                tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                String value2 = tv3.getText().toString();
//                row.addView(tv3);
//
//                tableLayout1.addView(row);
//
//
//            } while (ccursor.moveToNext());
//        }


        mView.setDrawingCacheEnabled(true);
        mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
        mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
        mView.buildDrawingCache(true);
        include.setVisibility(View.INVISIBLE);
        imageview.setVisibility(View.INVISIBLE);

        imageview.setVisibility(View.INVISIBLE);
        Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
        mView.setDrawingCacheEnabled(false);
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

        imageViewPicture.setImageBitmap(b);

        Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                .getBitmap();

        Drawable d = new BitmapDrawable(getResources(), mBitmap);


//        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_bills");
        File exportDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), "/IVEPOS_bills");
        if (!exportDir.exists()) {
            exportDir.mkdirs();
        }


        file = new File(exportDir, "IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg");

        try {
            FileOutputStream ostream = new FileOutputStream(file);
            mBitmap.compress(Bitmap.CompressFormat.PNG, 10, ostream);
            ostream.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }

//        String query = null;
//        try {
//            query = URLEncoder.encode("apples oranges", "utf-8");
//        } catch (UnsupportedEncodingException e) {
//            e.printStackTrace();
//        }

        TextView textView = new TextView(getActivity());
        textView.setText(R.string.my_url);
        String url = "www.intuitionsoftwares.com";

        String reqUrl = "http://google.com";
        Uri.Builder builder = Uri.parse(reqUrl).buildUpon();
        builder.appendQueryParameter("mesg", "Value for mesg");
        String finalUri = builder.build().toString();

//        final String msg = "Bill from "+compna+"\n\nDear Customer, \n\nYou can view the bill in the attachment for "+"Rs. "+total.getText().toString()+".\n\nWe appreciate your business and hope to see you again soon. \n"+compna+"\n\n\n" +
//                "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                "Powered by: "+ Uri.parse(url);


        //keep html code


        Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            do {
                strcompanyname = getcom.getString(1);
                straddress1 = getcom.getString(14);
                stremailid = getcom.getString(15);
            } while (getcom.moveToNext());
        }else {
            strcompanyname = "";
            stremailid = "";
        }
        getcom.close();

        String name_mail = "";
        Cursor em = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnumb+"'", null);
        if (em.moveToFirst()){
            name_mail = em.getString(1);
        }
        em.close();

        String date_mail = "", time_mail = "";
        Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"'", null);
        if (cursor9.moveToFirst()){
            date_mail = cursor9.getString(25);
            time_mail = cursor9.getString(12);
        }
        cursor9.close();


//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

        String sub = "";
        Cursor cursor81 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
        if (cursor81.moveToFirst()){
            sub = cursor81.getString(2);
        }
        cursor81.close();

//        final String msg =
//                "<Html>" +
//                        "<Body>" +
//                        "<div>" +
//                        " <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                        "<tbody>" +
//                        "<tr>" +
//                        "<td width=\"100%\" valign=\"top\" bgcolor=\"#f8f8f8\">" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1;margin-top:50px\">" +
//                        "<tbody>" +
//                        "<tr>" +
//                        "<td width=\"460\" >" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                        "<tbody>" +
//                        "<tr>" +
//                        "<td height=\"30\">" +
//                        "</td>" +
//                        "</tr>" +
//                        "</tbody>" +
//                        "</table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                        "<tbody>" +
//                        "<tr>" +
//                        "<td width=\"40\">" +
//                        "</td>" +
//                        "<td width=\"460\" style=\"font-size:16px;color:#00929f;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
////                        "<img src=\"http://www.intuitionsoftwares.com/resources/intuition_logo_header_with_text_240.png\" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
////                        "<img src="+logo+" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
//                        "<p><h1>"+strcompanyname+"</h1></p>" +
//
//                        "</td>" +
//                        "<td width=\"40\">" +
//                        "</td>" +
//                        "</tr>" +
//                        "<tr>" +
//                        "<td width=\"40\">" +
//                        "</td>" +
//                        "<td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                        "<span style=\"text-decoration:none;color:#2f2f36;font-weight:bold;font-size:32px;line-height:32px\">Bill "+billnumb+"</span><br>" +
//                        "</td>" +
//                        "<td width=\"40\"></td>" +
//                        "</tr>" +
//                        "<tr>" +
//                        "<td width=\"40\"></td>" +
//                        "<td width=\"460\" style=\"font-size:16px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">for Customer <br> from <b>"+strcompanyname+"</b><br>" +
//                        " </td>" +
//                        "<td width=\"40\">" +
//                        "</td>" +
//                        "</tr>" +
//                        "<tr></tr>" +
//                        "<tr><td width=\"40\"></td>" +
//                        "<td width=\"512\" height=\"30\">" +
//                        "</td> <td width=\"40\"></td></tr></tbody></table></td>" +
//                        "</tr></tbody></table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" bgcolor=\"#ffffff\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                        "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                        "<tr><td width=\"460\" height=\"5\" bgcolor=\"#ffffff\"></td></tr>" +
//                        "<tr><td width=\"460\" height=\"1\" bgcolor=\"#e1e1e1\"></td></tr>" +
//                        "<tr><td width=\"460\" height=\"10\" bgcolor=\"#ffffff\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\"><tbody>" +
//                        "<tr> <td width=\"460\">" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"20\"></td></tr></tbody></table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                        "<td width=\"40\"></td><td width=\"510\" style=\"font-size:14px;color:#444;font-weight:normal;text-align:left;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">Hi "+name_mail+",<br>Your Bill amount is Rs."+sub.toString()+" <br><br>We appreciate your Business and hope to see you again soon,<br>Intuition Systems <br>" +
//                        //Correct(tic) symbol
//                        "<p align=\"center\"> <img src=\"https://http://www.intuitionsoftwares.com/resources/ic_tick_gradientgreen_48dp.png\" width=\"60\" height=\"60\"></p>" +
//
//                        "<p style=\"font-size:18px;border-top:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;padding:10px 0;background:#fefefe;text-align:center;margin:5px 0\">Paid: <span style=\"white-space:nowrap;font-weight:bold;font-size:18px\">Rs. "+sub.toString()+" </span>" +
//                        "</p><br></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                        "<tbody>" +
//                        "<tr><td width=\"\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                        "<td width=\"40\"></td>" +
//                        "<td width=\"510\" style=\"font-size:14px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                        "<div></div>" +
//                        "<p style=\"margin-top:3px;color:#444\">Dated: <span style=\"white-space:nowrap;font-weight:bold;font-size:14px\">"+date_mail+",</span> "+time_mail+" </p>" +
//                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td>" +
//                        "<td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                        "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td width=\"460\" height=\"10\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f9f9f9\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\"><tbody>" +
//                        "<tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                        "<tr><td height=\"10\" ></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                        "<tbody><tr><td width=\"40\"></td><td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td>" +
//                        "<td width=\"460\" style=\"font-size:14px;color:#959599;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:20px;text-align:center\">" +
//                        "<p>Disclaimer: This information may be confidential and is intended only for the recipient.</p>" +
//                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                        "<table width=\"462\" bgcolor=\"#f0f0f0\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\">" +
//                        "<tbody> <tr> <td width=\"462\" height=\"10\"></td></tr></tbody></table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                        "<tbody> <tr> <td width=\"460\" bgcolor=\"#f0f0f0\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                        "<tbody> <tr> <td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                        "<tr><td width=\"30\"></td><td width=\"530\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" ><tbody><tr>" +
//                        "<td height=\"0\" align=\"center\" style=\"font-size:14px;color:#b8b9c1;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:24px\">" +
//                        "<p><a style=\"text-decoration:none;color:#959599\" target=\"_blank\">If you think this mail is not for you, please delete and contact<a href=\"mailto:"+stremailid+"\" style=\"text-decoration:none;color:#008f9b;font-weight:bold\" target=\"_blank\">\n" +
//                        ""+stremailid+"</a> </a></td>" +
//                        "</tr></tbody></table><table width=\"140\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"left\">" +
//                        "<tbody><tr><td width=\"140\"></td></tr></tbody></table></td><td width=\"30\"></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                        "<td width=\"460\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;border-radius:0 0 10px 10px;background:#f0f0f0\">" +
//                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"14\"></td></tr></tbody></table></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                        "<tbody><tr><td height=\"20\"></td></tr><tr>" +
//                        "<td style=\"text-align:center\"><a href=\"http://www.intuitionsoftwares.com/\" target=\"_blank\" ><img src=\"https://http://www.intuitionsoftwares.com/resources/Powered%20by%20Intuition.png\" alt=\"Powered by Intuition\" border=\"0\" style=\"text-align:center;min-width:65px\"></a></td></tr>" +
//                        "<tr>" +
//                        "<td height=\"40\" style=\"line-height:1px\"></td></tr></tbody></table></td></tr></tbody></table><div><div>" +
//                        "</div></div><span></span><img width=\"1px\" height=\"1px\" alt=\"\" src=\"https://ci6.googleusercontent.com/proxy/v_Shs6iOLq12vwu0Xt6qngxx4kneWRfK5sqTLGcXNVHFoKVZ7lS25nHt7H1Jm2usy7rNYKDLkgiPnf-6WwR9Yr0RCUdQGIUR6UAzInSh4IrJBqQk62YtXVDscuCYMCes1p7ddQyWrPxBcb46UqOG8GZUToV8KTB0InbN_nhjjaBySA-Eqsgb7FQUv71BB8c9vjZIesQTibEyktzooZmRj0q-8JfvlIrF5j5PjutWDHROpXD5l5f1J8DthU5s3aqJVnp_My3uDAuVgualRg=s0-d-e1-ft#http://email.mg.waveapps.com/o/eJwNzDEOwyAMAMDXlA1kU8Aw8BjXBAUpgYoQ9fvNdtOVTFUSW9WyBSQIQOgfWYNgIZlIFPHl4DtH0SyytOz90IBqz4SONw8hfAQ9hhgLvD2nJLE4TraqmblzL4afoPV1t9VGv0ZdP57bZWScf2cRJRo\" ><div></div><div></div></div>" +
//                        "</Body>" +
//                        "</Html>";

        final String msg =
                "<Html>" +
                        "<Body>" +
                        "<div>" +
                        " <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"100%\" valign=\"top\" bgcolor=\"#f8f8f8\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1;margin-top:50px\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"460\" >" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td height=\"30\">" +
                        "</td>" +
                        "</tr>" +
                        "</tbody>" +
                        "</table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#00929f;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                        "<img src=\"http://www.intuitionsoftwares.com/resources/intuition_logo_header_with_text_240.png\" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
//                        "<img src="+logo+" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
                        "<p><h1>"+strcompanyname+"</h1></p>" +

                        "</td>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "</tr>" +
                        "<tr>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "<span style=\"text-decoration:none;color:#2f2f36;font-weight:bold;font-size:32px;line-height:32px\">Bill "+billnumb+"</span><br>" +
                        "</td>" +
                        "<td width=\"40\"></td>" +
                        "</tr>" +
                        "<tr>" +
                        "<td width=\"40\"></td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">for Customer <br> from <b>"+strcompanyname+"</b><br>" +
                        " </td>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "</tr>" +
                        "<tr></tr>" +
                        "<tr><td width=\"40\"></td>" +
                        "<td width=\"512\" height=\"30\">" +
                        "</td> <td width=\"40\"></td></tr></tbody></table></td>" +
                        "</tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" bgcolor=\"#ffffff\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td width=\"460\" height=\"5\" bgcolor=\"#ffffff\"></td></tr>" +
                        "<tr><td width=\"460\" height=\"1\" bgcolor=\"#e1e1e1\"></td></tr>" +
                        "<tr><td width=\"460\" height=\"10\" bgcolor=\"#ffffff\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\"><tbody>" +
                        "<tr> <td width=\"460\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"20\"></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"40\"></td><td width=\"510\" style=\"font-size:14px;color:#444;font-weight:normal;text-align:left;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">Hi "+name_mail+",<br>Your Bill amount is "+insert1_rs+""+sub.toString()+" <br><br>We appreciate your Business and hope to see you again soon,<br>"+strcompanyname+" <br>" +
                        //Correct(tic) symbol
                        "<p align=\"center\"> <img src=\"https://static.wixstatic.com/media/ff8d82_453b1bed7c174e398e9fc333af3692bf~mv2.png\" width=\"60\" height=\"60\"></p>" +

                        "<p style=\"font-size:18px;border-top:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;padding:10px 0;background:#fefefe;text-align:center;margin:5px 0\">Paid: <span style=\"white-space:nowrap;font-weight:bold;font-size:18px\">"+insert1_rs+" "+sub.toString()+" </span>" +
                        "</p><br></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody>" +
                        "<tr><td width=\"\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"40\"></td>" +
                        "<td width=\"510\" style=\"font-size:14px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "<div></div>" +
                        "<p style=\"margin-top:3px;color:#444\">Dated: <span style=\"white-space:nowrap;font-weight:bold;font-size:14px\">"+date_mail+",</span> "+time_mail+" </p>" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td>" +
                        "<td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td width=\"460\" height=\"10\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f9f9f9\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\"><tbody>" +
                        "<tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td height=\"10\" ></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody><tr><td width=\"40\"></td><td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td>" +
                        "<td width=\"460\" style=\"font-size:14px;color:#959599;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:20px;text-align:center\">" +
                        "<p>Disclaimer: This information may be confidential and is intended only for the recipient.</p>" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"462\" bgcolor=\"#f0f0f0\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\">" +
                        "<tbody> <tr> <td width=\"462\" height=\"10\"></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody> <tr> <td width=\"460\" bgcolor=\"#f0f0f0\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody> <tr> <td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td width=\"30\"></td><td width=\"530\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" ><tbody><tr>" +
                        "<td height=\"0\" align=\"center\" style=\"font-size:14px;color:#b8b9c1;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:24px\">" +
                        "<p><a style=\"text-decoration:none;color:#959599\" target=\"_blank\">If you think this mail is not for you, please delete and contact<a href=\"mailto:"+stremailid+"\" style=\"text-decoration:none;color:#008f9b;font-weight:bold\" target=\"_blank\">\n" +
                        ""+stremailid+"</a> </a></td>" +
                        "</tr></tbody></table><table width=\"140\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"left\">" +
                        "<tbody><tr><td width=\"140\"></td></tr></tbody></table></td><td width=\"30\"></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"460\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;border-radius:0 0 10px 10px;background:#f0f0f0\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"14\"></td></tr></tbody></table></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody><tr><td height=\"20\"></td></tr><tr>" +
                        "<td style=\"text-align:center\"><a href=\"http://www.intuitionsoftwares.com/\" target=\"_blank\" ><img src=\"www.intuitionsoftwares.com/resources/Powered%20by%20Intuition.png\" alt=\"Powered by Intuition\" border=\"0\" style=\"text-align:center;min-width:65px\"></a></td></tr>" +
                        "<tr>" +
                        "<td height=\"40\" style=\"line-height:1px\"></td></tr></tbody></table></td></tr></tbody></table><div><div>" +
                        "</div></div><span></span><div></div><div></div></div>" +
                        "</Body>" +
                        "</Html>";



        Uri u1  =   null;
        u1  =   Uri.fromFile(file);

//                Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);
//                emailIntent.setType("image/jpeg");
//                emailIntent.putExtra(Intent.EXTRA_EMAIL, u1);
//                startActivity(Intent.createChooser(emailIntent, "Send mail..."));

        billaa.setVisibility(View.GONE);

        Cursor getcommm = db1.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcommm.moveToFirst()) {
            strcompanyname = getcommm.getString(1);
        }else {
            strcompanyname = "";
        }
        getcommm.close();

        Cursor cursore = db1.rawQuery("SELECT * FROM Email_setup", null);
        if (cursore.moveToFirst()){
            final String un = cursore.getString(1);
            final String pwd = cursore.getString(2);
            final String client = cursore.getString(3);
            Cursor eem = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnumb+"'", null);
            if (eem.moveToFirst()){
                email_id_send = new EditText(getActivity());
                String em1 = eem.getString(3);
                if (client.equals("Gmail")) {
                    email_id_send.setText(em1);
                    getResultsFromApi();
                    new MakeRequestTask_bill(mCredential).execute();
                }else {
                    if (client.equals("Yahoo")){
//                        Toast.makeText(getActivity(), "yahoo "+un, Toast.LENGTH_LONG).show();

                        String toEmails = em1;
                        List toEmailList = Arrays.asList(toEmails
                                .split("\\s*,\\s*"));
                        new SendMailTask_Yahoo_homebill(getActivity()).execute(un,
                                pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);



                    }else {
                        if (client.equals("Hotmail")){
//                            Toast.makeText(getActivity(), "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();

                            String toEmails = em1;
                            List toEmailList = Arrays.asList(toEmails
                                    .split("\\s*,\\s*"));
                            new SendMailTask_Hotmail_Outlook_homebill(getActivity()).execute(un,
                                    pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                        }else {
                            if (client.equals("Office365")) {
//                                Toast.makeText(getActivity(), "office 365 " + un, Toast.LENGTH_LONG).show();

                                String toEmails = em1;
                                List toEmailList = Arrays.asList(toEmails
                                        .split("\\s*,\\s*"));
                                new SendMailTask_Office365_homebill(getActivity()).execute(un,
                                        pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                            }
                        }
                    }
                }
//            Toast.makeText(BeveragesMenuFragment.this, "email is "+em1, Toast.LENGTH_LONG).show();
            }else {
//            Toast.makeText(BeveragesMenuFragment.this, "show dialog", Toast.LENGTH_LONG).show();

                final Dialog dialogenteremail = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                dialogenteremail.setContentView(R.layout.dialog_payment_enter_email);
                dialogenteremail.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                dialogenteremail.setCanceledOnTouchOutside(false);
                dialogenteremail.show();

                ImageView btncancel = (ImageView) dialogenteremail.findViewById(R.id.btncancel);
                btncancel.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialogenteremail.dismiss();
                    }
                });

                final TextInputLayout email_id_send_layout = (TextInputLayout) dialogenteremail.findViewById(R.id.email_id_send_layout);

                email_id_send = (EditText) dialogenteremail.findViewById(R.id.email_id_send);

                email_id_send.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

                    }

                    @Override
                    public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                        email_id_send_layout.setError(null);
                    }

                    @Override
                    public void afterTextChanged(Editable editable) {

                    }
                });

                ImageView closetext = (ImageView) dialogenteremail.findViewById(R.id.closetext);
                closetext.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (email_id_send.getText().toString().trim().matches(emailPattern)) {
                            if (client.equals("Gmail")) {
//                                email_id_send.setText(em1);
//                                getResultsFromApi();
//                                new MakeRequestTask(mCredential).execute();
                                getResultsFromApi();
                                new MakeRequestTask_bill(mCredential).execute();
                            }else {
                                if (client.equals("Yahoo")){
//                        Toast.makeText(getActivity(), "yahoo "+un, Toast.LENGTH_LONG).show();

                                    String toEmails = email_id_send.getText().toString();
                                    List toEmailList = Arrays.asList(toEmails
                                            .split("\\s*,\\s*"));
                                    new SendMailTask_Yahoo_homebill(getActivity()).execute(un,
                                            pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);



                                }else {
                                    if (client.equals("Hotmail")){
//                            Toast.makeText(getActivity(), "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();

                                        String toEmails = email_id_send.getText().toString();
                                        List toEmailList = Arrays.asList(toEmails
                                                .split("\\s*,\\s*"));
                                        new SendMailTask_Hotmail_Outlook_homebill(getActivity()).execute(un,
                                                pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                                    }else {
                                        if (client.equals("Office365")) {
//                                Toast.makeText(getActivity(), "office 365 " + un, Toast.LENGTH_LONG).show();

                                            String toEmails = email_id_send.getText().toString();
                                            List toEmailList = Arrays.asList(toEmails
                                                    .split("\\s*,\\s*"));
                                            new SendMailTask_Office365_homebill(getActivity()).execute(un,
                                                    pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                                        }
                                    }
                                }
                            }
                            dialogenteremail.dismiss();
                        }
                        else {
                            email_id_send_layout.setError("Invalid email address");
                        }

                    }
                });
            }
            eem.close();

        }else {
            //only sender not there recipient not required
            final Dialog dialoge = new Dialog(getActivity(), R.style.timepicker_date_dialog);
            dialoge.setContentView(R.layout.email_prerequisites);
            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
            dialoge.show();

            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
            btncancel.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialoge.dismiss();
                }
            });

            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

            LinearLayout recipient_layout = (LinearLayout) dialoge.findViewById(R.id.recipient_layout);
            recipient_layout.setVisibility(View.GONE);

            sender_notset.setVisibility(View.VISIBLE);

            recipient_set.setVisibility(View.VISIBLE);

            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
            gotosettings.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(getActivity(), EmailSetup.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(intent);
//                                                                getActivity().finish();
                    dialoge.dismiss();
                }
            });

            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
            gotosettings1.setVisibility(View.GONE);
            gotosettings1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(getActivity(), EmailSetup.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(intent);
//                                                                getActivity().finish();
                    dialoge.dismiss();
                }
            });
        }
        cursore.close();

    }
    public  void printbillcopy_minireceipt(){
        Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }
        connnet.close();

        Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }
        connusb.close();

        //Toast.makeText(BeveragesMenuFragment.this, "printbillonly one ", Toast.LENGTH_SHORT).show();
        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] HT1 = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor print_ty = db1.rawQuery("SELECT * FROM Printer_type", null);
        if (print_ty.moveToFirst()){
            str_print_ty = print_ty.getString(1);
        }
        print_ty.close();

        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    if (str_print_ty.equals("Generic") || str_print_ty.equals("Epson/others")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x18, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x20, 0x29, 0x00};//4 tabs 3"
                        nPaperWidth = 576;
                        charlength = 23;
                        charlength1 = 46;
                        charlength2 = 69;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.equals("POS")) {
                            setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                            setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                            nPaperWidth = 576;
                            charlength = 23;
                            charlength1 = 46;
                            charlength2 = 69;
                            quanlentha = 4;
                            HT1 = new byte[]{0x2F};
                            str_line = "------------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------------".getBytes(), LF

                            };
                        }
                    }
                }
                else {
                    if (str_print_ty.equals("Generic")) {
//                        Toast.makeText(getActivity(), "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.equals("Epson/others")) {
//                        Toast.makeText(getActivity(), "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            nPaperWidth = 384;
                            charlength = 16;
                            charlength1 = 32;
                            charlength2 = 48;
                            quanlentha = 5;
                            HT1 = new byte[]{0x09};
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }else {
                            if (str_print_ty.equals("POS")) {
                                setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                nPaperWidth = 384;
                                charlength = 11;
                                charlength1 = 22;
                                charlength2 = 33;
                                quanlentha = 4;
                                HT1 = new byte[]{0x2F};
                                str_line = "--------------------------------";
                                allbufline = new byte[][]{
                                        left, un1, "--------------------------------".getBytes(), LF
                                };
                            }
                        }
                    }
                }
            }while(cc.moveToNext());
        }
        cc.close();


        String dd = "";
        TextView qazcvb = new TextView(getActivity());
        Cursor cvonnusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (cvonnusb.moveToFirst()) {
            addgets = cvonnusb.getString(1);
            namegets = cvonnusb.getString(2);
            statussusbs = cvonnusb.getString(3);
            dd = cvonnusb.getString(4);
        }
        cvonnusb.close();

        qazcvb.setText(dd);
        if (qazcvb.getText().toString().equals("usb") && statussusbs.equals("ok")) {
            runPrintCouponSequence();
        }else {

            allbuf1 = new byte[][]{
                    bold, un, "Sales Overview".getBytes(), LF

            };
            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(bold);    //
                BluetoothPrintDriver.BT_Write(un);    //
                BT_Write("Sales Overview");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(bold);    //
                    wifiSocket2.WIFI_Write(un);    //
                    wifiSocket2.WIFI_Write("Sales Overview");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(bold);    //
                        wifiSocket.WIFI_Write(un);    //
                        wifiSocket.WIFI_Write("Sales Overview");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    straddress2 = getcom.getString(17);
                    straddress3 = getcom.getString(18);
                    strphone = getcom.getString(2);
                    stremailid = getcom.getString(15);
                    strwebsite = getcom.getString(16);
                    strtaxone = getcom.getString(10);
                    strbillone = getcom.getString(12);
                } while (getcom.moveToNext());
            }
            getcom.close();


            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, un1, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(bold);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(strcompanyname);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(strcompanyname);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(strcompanyname);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

/////////
            tvkot.setText(straddress1);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf2 = new byte[][]{
                        normal, un1, cen, straddress1.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(straddress1);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(straddress1);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(straddress1);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot.setText(straddress2);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf3 = new byte[][]{
                        normal, un1, cen, straddress2.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(straddress2);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(straddress2);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(straddress2);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot.setText(straddress3);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf4 = new byte[][]{
                        normal, un1, cen, straddress3.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(straddress3);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(straddress3);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(straddress3);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strphone);
            String pp = "Ph. " + strphone;
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf5 = new byte[][]{
                        normal, un1, cen, pp.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(pp);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(pp);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(pp);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(stremailid);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf6 = new byte[][]{
                        normal, un1, cen, stremailid.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(stremailid);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(stremailid);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(stremailid);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strwebsite);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, un1, cen, strwebsite.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(strwebsite);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(strwebsite);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(strwebsite);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strtaxone);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf8 = new byte[][]{
                        normal, un1, cen, strtaxone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(strtaxone);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(strtaxone);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(strtaxone);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuf10 = new byte[][]{
                    setHT321, left, editText11.getText().toString().getBytes(), HT, "  ".getBytes(), editText22.getText().toString().getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(editText11.getText().toString());
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(editText22.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(editText11.getText().toString());
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(editText22.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(editText11.getText().toString());
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(editText22.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuftax = new byte[][]{
                    setHT321, left, editText_from_day_visible.getText().toString().getBytes(), HT, "  ".getBytes(), editText_to_day_visible.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(editText_from_day_visible.getText().toString());
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(editText_to_day_visible.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(editText_from_day_visible.getText().toString());
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(editText_to_day_visible.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(editText_from_day_visible.getText().toString());
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(editText_to_day_visible.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            ////include gross sales view


            TextView refunds = new TextView(getActivity());
            TextView discount = new TextView(getActivity());
            TextView tax = new TextView(getActivity());
            TextView gross_sale = new TextView(getActivity());
            TextView amount_before_tax = new TextView(getActivity());
            TextView amount_after_tax = new TextView(getActivity());
            TextView tax_amount = new TextView(getActivity());

            Cursor cursor = db.rawQuery("SELECT SUM(subtotal) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor.moveToFirst()) {
                float s = cursor.getFloat(0);
                sub_total = String.format(Locale.US,"%.1f", s);
            }
            cursor.close();


            Cursor summ = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems", null);
            float sum1 = 0;
            if (summ.moveToFirst()) {
                do {
                    float sumlevel = summ.getFloat(0);
                    refund_total = String.valueOf(sumlevel);
                    //Toast.makeText(getActivity(), " total is "+max, Toast.LENGTH_SHORT).show();
                } while (summ.moveToNext());

            }
            summ.close();
            refunds.setText(refund_total);


            Cursor ccursor11 = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "'", null);
            if (ccursor11.moveToFirst()) {
                level = ccursor11.getInt(0);
                disc_total = String.valueOf(level);
                discount.setText(disc_total);
            }
            ccursor11.close();

            float taxtot = 0, tot1 = 0;
            Cursor cursor2 = db.rawQuery("SELECT SUM(taxtotal) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"'", null);
            if (cursor2.moveToFirst()){
                taxtot = cursor2.getFloat(0);
                tax_total = String.format(Locale.US,"%.0f", taxtot);
//                    Toast.makeText(getActivity(), "itemtax "+tot, Toast.LENGTH_LONG).show();
            }
            cursor2.close();
            tax_amount.setText(tax_total);

            float five = 0;
            Cursor cursor3 = db.rawQuery("SELECT * FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "'", null);
            if (cursor3.moveToFirst()) {
                do {
                    String two = cursor3.getString(9);

                    if (two.contains("+")) {
                        if (two.contains("+")) {
                            two = two.replace("+ ", "");
                            five = five + Float.parseFloat(two);
//                                Toast.makeText(getActivity(), "+ "+five, Toast.LENGTH_LONG).show();
                        }

                    } else {
                        if (two.contains("-")) {
                            two = two.replace("- ", "");
                            five = five - Float.parseFloat(two);
//                                Toast.makeText(getActivity(), "- "+five, Toast.LENGTH_LONG).show();
                        }
                    }

                } while (cursor3.moveToNext());
            }
            cursor3.close();
//        Toast.makeText(getActivity(), "five "+five, Toast.LENGTH_LONG).show();

            Cursor cursor4 = db.rawQuery("SELECT SUM(globaltaxtotal) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "'", null);
            if (cursor4.moveToFirst()) {
                tot1 = cursor4.getFloat(0);
//            Toast.makeText(getActivity(), "taxtotal "+tot1, Toast.LENGTH_LONG).show();
            }
            cursor4.close();

            float fi = taxtot + five;
//        Toast.makeText(getActivity(), "fi "+fi, Toast.LENGTH_LONG).show();

            tax.setText(String.valueOf(fi));

            float nm = Float.parseFloat(total) + Float.parseFloat(refund_total) + Float.parseFloat(disc_total);
            gross_total = String.format(Locale.US,"%.0f", nm);
            gross_sale.setText(gross_total);


            Cursor cursor11a = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor11a.moveToFirst()) {
                level = cursor11a.getInt(0);
                total = String.valueOf(level);
                amount_after_tax.setText(total);
            }
            cursor11a.close();

            Float amout_notax = Float.parseFloat(total) - Float.parseFloat(tax_total);
            String amount_notax = String.format(Locale.US,"%.0f", amout_notax);
            amount_before_tax.setText(amount_notax);


            allbuf10 = new byte[][]{
                    setHT321, left, "Gross sales".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), gross_sale.getText().toString().getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Gross sales");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(insert1_rs);
                BT_Write(gross_sale.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Gross sales");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(gross_sale.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Gross sales");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(gross_sale.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuf10 = new byte[][]{
                    setHT321, left, "(-)Refunds".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), refunds.getText().toString().getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("(-)Refunds");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(insert1_rs);
                BT_Write(refunds.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("(-)Refunds");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(refunds.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("(-)Refunds");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(refunds.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuf10 = new byte[][]{
                    setHT321, left, "(-)Discount".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), discount.getText().toString().getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("(-)Discount");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(insert1_rs);
                BT_Write(discount.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("(-)Discount");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(discount.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("(-)Discount");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(discount.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Sales(net)".getBytes(), HT, "| ".getBytes(), "No. of bills".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Sales(net)");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write("No. of bills");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Sales(net)");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write("No. of bills");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Sales(net)");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write("No. of bills");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor11.moveToFirst()) {
                level = cursor11.getInt(0);
                total = String.valueOf(level);
            }
            cursor11.close();

            Cursor count = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (count.moveToFirst()) {
                level = count.getInt(0);
                total1 = String.valueOf(level);
            }
            avgbill = String.valueOf(Integer.parseInt(total) / Integer.parseInt(total1));

            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), total.getBytes(), HT, "| ".getBytes(), noofbills.getText().toString().getBytes(), LF
            };
            count.close();

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(insert1_rs + total);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write(noofbills.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(insert1_rs + total);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write(noofbills.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(insert1_rs + total);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write(noofbills.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuf10 = new byte[][]{
                    setHT321, left, "(-)Tax".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), tax_total.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("(-)Tax");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(insert1_rs);
                BT_Write(tax_total);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("(-)Tax");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(tax_total);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("(-)Tax");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(tax_total);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuf10 = new byte[][]{
                    setHT321, left, "Net sales".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), amount_notax.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Net sales");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write(insert1_rs);
                BT_Write(amount_notax);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Net sales");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(amount_notax);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Net sales");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(amount_notax);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuf10 = new byte[][]{
                    setHT321, left, "(after tax)".getBytes(), HT, "  ".getBytes(), "".getBytes(), "".getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("(after tax)");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  ");
                BT_Write("");
                BT_Write("");
                BT_Write(amount_before_tax.getText().toString());
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("(after tax)");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  ");
                    wifiSocket2.WIFI_Write("");
                    wifiSocket2.WIFI_Write("");
                    wifiSocket2.WIFI_Write(amount_before_tax.getText().toString());
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("(after tax)");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  ");
                        wifiSocket.WIFI_Write("");
                        wifiSocket.WIFI_Write("");
                        wifiSocket.WIFI_Write(amount_before_tax.getText().toString());
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Avg. Sales".getBytes(), HT, "| ".getBytes(), "Cash Sales".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Avg. Sales");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write("Cash Sales");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Avg. Sales");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write("Cash Sales");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Avg. Sales");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write("Cash Sales");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            Cursor cashcardcash = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND paymentmethod = '  Cash' ", null);
            if (cashcardcash.moveToFirst()) {
                level111 = cashcardcash.getInt(0);
                total111 = String.valueOf(level111);
            }
            cashcardcash.close();

            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), avgbill.getBytes(), HT, "| ".getBytes(), "Rs.".getBytes(), total111.getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(insert1_rs+"" + avgbill);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write(insert1_rs+"" + total111);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(insert1_rs+"" + avgbill);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write(insert1_rs+"" + total111);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(insert1_rs+"" + avgbill);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write(insert1_rs+"" + total111);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //z
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //z
                    }
                }
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Card Sales".getBytes(), HT, "| ".getBytes(), "General".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Card Sales");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write("General");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Card Sales");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write("General");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Card Sales");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write("General");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            Cursor cashcardcard = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND paymentmethod = '  Card' ", null);
            if (cashcardcard.moveToFirst()) {
                level111card = cashcardcard.getInt(0);
                total111card = String.valueOf(level111card);
            }
            cashcardcard.close();

            final Cursor paytm= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Paytm' ", null);
            if (paytm.moveToFirst()) {
                level111paytm = paytm.getInt(0);
                total111paytm = String.valueOf(level111paytm);
            }
            paytm.close();
            final Cursor mobikwik= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Mobikwik' ", null);
            if (mobikwik.moveToFirst()) {
                level111mobi = mobikwik.getInt(0);
                total111mobi = String.valueOf(level111mobi);
            }
            mobikwik.close();
            final Cursor freecharge= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Freecharge' ", null);
            if (freecharge.moveToFirst()) {
                level111free = freecharge.getInt(0);
                total111free = String.valueOf(level111free);
            }
            freecharge.close();
            final Cursor sodexo= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Sodexo' ", null);
            if (sodexo.moveToFirst()) {
                level111sodexo = sodexo.getInt(0);
                total111sodexo = String.valueOf(level111sodexo);
            }
            sodexo.close();
            final Cursor zeta= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Zeta' ", null);
            if (zeta.moveToFirst()) {
                level111zeta = zeta.getInt(0);
                total111zeta = String.valueOf(level111zeta);
            }
            zeta.close();
            final Cursor ticket= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Ticket' ", null);
            if (ticket.moveToFirst()) {
                level111ticket = ticket.getInt(0);
                total111ticket = String.valueOf(level111ticket);
            }
            ticket.close();
            final Cursor cheque= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Cheque' ", null);
            if (cheque.moveToFirst()) {
                level111cheq = cheque.getInt(0);
                total111cheq = String.valueOf(level111cheq);
            }
            cheque.close();

            final Cursor credit= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Pay Later' ", null);
            if (credit.moveToFirst()) {
                level111cred = credit.getInt(0);
                total111credit = String.valueOf(level111cred);
            }
            credit.close();
            //Cheque above

            Cursor dinein = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND billtype = '  General' ", null);
            if (dinein.moveToFirst()) {
                dineinsales = dinein.getInt(0);
                dineinsalesstr = String.valueOf(dineinsales);
            }
            dinein.close();


            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), total111card.getBytes(), HT, "| ".getBytes(), "Rs.".getBytes(), dineinsalesstr.getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(insert1_rs+"" + total111card);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write(insert1_rs+"" + dineinsalesstr);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(insert1_rs+"" + total111card);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write(insert1_rs+"" + dineinsalesstr);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(insert1_rs+"" + total111card);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write(insert1_rs+"" + dineinsalesstr);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuftax = new byte[][]{
                    setHT321, left, "Take away".getBytes(), HT, "| ".getBytes(), "Home delivery".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Take away");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write("Home delivery");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Take away");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write("Home delivery");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Take away");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write("Home delivery");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            Cursor takeaway = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND billtype = '  Takeaway' ", null);
            if (takeaway.moveToFirst()) {
                takeawaysales = takeaway.getInt(0);
                takeawaysalesstr = String.valueOf(takeawaysales);
            }
            takeaway.close();

            Cursor homedelivery = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND billtype = '  Home delivery' ", null);
            if (homedelivery.moveToFirst()) {
                homedeliverysales = homedelivery.getInt(0);
                homedeliverysalesstr = String.valueOf(homedeliverysales);
            }
            homedelivery.close();


            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), takeawaysalesstr.getBytes(), HT, "| ".getBytes(), "Rs.".getBytes(), homedeliverysalesstr.getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(insert1_rs+"" + takeawaysalesstr);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("| ");
                BT_Write(insert1_rs+"" + homedeliverysalesstr);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(insert1_rs+"" + takeawaysalesstr);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("| ");
                    wifiSocket2.WIFI_Write(insert1_rs+"" + homedeliverysalesstr);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(insert1_rs+"" + takeawaysalesstr);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("| ");
                        wifiSocket.WIFI_Write(insert1_rs+"" + homedeliverysalesstr);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Pay Later".getBytes(), HT, " ".getBytes(), "".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Pay Later");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("");
                BT_Write("");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Pay Later");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("");
                    wifiSocket2.WIFI_Write("");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Pay Later");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("");
                        wifiSocket.WIFI_Write("");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            TextView refundamount11 = new TextView(getActivity());
            Cursor refundam = db.rawQuery("Select DISTINCT * from All_Sales_Cancelled WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' GROUP BY time, date ", null);
            if (refundam.moveToFirst()) {
                refundedstr = refundam.getString(17);
                refundamount11.setText(refundedstr);
            } else {
                refundamount11.setText("0");
            }
            refundam.close();

            Cursor discountcashcard = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (discountcashcard.moveToFirst()) {
                level1 = discountcashcard.getInt(0);
                total11 = String.valueOf(level1);
            }
            discountcashcard.close();

            String hi = "0";
            Cursor creditsales = db.rawQuery("SELECT SUM(credit) FROM Customerdetails WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND credit != ''", null);
            if (creditsales.moveToFirst()) {
                int homedeliverysales = creditsales.getInt(0);
                hi = String.valueOf(homedeliverysales);
            }
            creditsales.close();

            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), hi.getBytes(), HT, " ".getBytes(), "".getBytes(), "".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(insert1_rs+"" + hi);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write(" ");
                BT_Write("");
                BT_Write("");
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(insert1_rs+"" + hi);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(" ");
                    wifiSocket2.WIFI_Write("");
                    wifiSocket2.WIFI_Write("");
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(insert1_rs+"" + hi);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(" ");
                        wifiSocket.WIFI_Write("");
                        wifiSocket.WIFI_Write("");
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Top 3 customers".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("Top 3 customers");
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("Top 3 customers");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("Top 3 customers");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            String pho1 = null, string_top1 = null;
            Cursor top1 = db.rawQuery("SELECT MAX(total_amount) FROM Cusotmer_activity_temp_top3", null);
            if (top1.moveToFirst()) {
                pho1 = top1.getString(0);
            }
            top1.close();

            Cursor name1 = db.rawQuery("SELECT * FROM Cusotmer_activity_temp_top3 WHERE total_amount = '" + pho1 + "'", null);
            if (name1.moveToFirst()) {
                string_top1 = name1.getString(1);
            }
            name1.close();

            String pho2 = null, string_top2 = null;
            Cursor top2 = db.rawQuery("SELECT MAX(total_amount) FROM Cusotmer_activity_temp_top3 WHERE total_amount < '" + pho1 + "'", null);
            if (top2.moveToFirst()) {
                pho2 = top2.getString(0);
            }
            top2.close();

            Cursor name2 = db.rawQuery("SELECT * FROM Cusotmer_activity_temp_top3 WHERE total_amount = '" + pho2 + "'", null);
            if (name2.moveToFirst()) {
                string_top2 = name2.getString(1);
            }
            name2.close();

            String pho3 = null, string_top3 = null;
            Cursor top3 = db.rawQuery("SELECT MAX(total_amount) FROM Cusotmer_activity_temp_top3 WHERE total_amount < '" + pho1 + "' AND total_amount < '" + pho2 + "'", null);
            if (top3.moveToFirst()) {
                pho3 = top3.getString(0);
            }
            top3.close();

            Cursor name3 = db.rawQuery("SELECT * FROM Cusotmer_activity_temp_top3 WHERE total_amount = '" + pho3 + "'", null);
            if (name3.moveToFirst()) {
                string_top3 = name3.getString(1);
            }
            name3.close();

//        Toast.makeText(getActivity(), "top1 "+pho1+" "+string_top1, Toast.LENGTH_LONG).show();
//        Toast.makeText(getActivity(), "top2 "+pho2+" "+string_top2, Toast.LENGTH_LONG).show();
//        Toast.makeText(getActivity(), "top3 "+pho3+" "+string_top3, Toast.LENGTH_LONG).show();

//        for (int i = 1; i < 4; i++){

            TextView tvkot5 = new TextView(getActivity());
            tvkot5.setText(string_top1);
            if (tvkot5.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "1.".getBytes(), string_top1.getBytes(), " - ".getBytes(), "Rs.".getBytes(), pho1.getBytes(), HT, LF
                };

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write("1." + string_top1 + " - " + insert1_rs+"" + pho1);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write("1." + string_top1 + " - " + insert1_rs+"" + pho1);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write("1." + string_top1 + " - " + insert1_rs+"" + pho1);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot5.setText(string_top2);
            if (tvkot5.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "2.".getBytes(), string_top2.getBytes(), " - ".getBytes(), "Rs.".getBytes(), pho2.getBytes(), HT, LF
                };

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write("2." + string_top2 + " - " + insert1_rs+"" + pho2);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write("2." + string_top2 + " - " + insert1_rs+"" + pho2);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write("2." + string_top2 + " - " + insert1_rs+"" + pho2);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot5.setText(string_top3);
            if (tvkot5.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "3.".getBytes(), string_top3.getBytes(), " - ".getBytes(), "Rs.".getBytes(), pho3.getBytes(), HT, LF
                };
                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write("3." + string_top3 + " - " + insert1_rs+"" + pho3);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write("3." + string_top3 + " - " + insert1_rs+"" + pho3);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write("3." + string_top3 + " - " + insert1_rs+"" + pho3);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }
//        }


            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Top seller".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("Top Seller");
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("Top Seller");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("Top Seller");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            Cursor one = db.rawQuery("SELECT MAX(total) FROM userdata ", null);
            if (one.moveToFirst()) {
                int one11 = one.getInt(0);
                one = db.rawQuery("SELECT * FROM userdata WHERE total = '" + one11 + "' ", null);
                if (one.moveToFirst()) {
                    one1 = one.getString(1);
                    pone = one.getString(1);
                    max = one.getString(2);
                    topone.setText(one1);

                    float perc = Float.parseFloat(max) * 100 / Float.parseFloat(total);
                    String percen = String.format(Locale.US,"%.1f", perc);

                    topuser1percent.setText(percen);
                    topuser1percent.append("%");

                } else {
                    topone.setText("NA");
                    topuser1percent.setText("0%");
                }
            }
            one.close();


            allbuftaxestype1 = new byte[][]{
                    left, normal, topone.getText().toString().getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write(topone.getText().toString());
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write(topone.getText().toString());
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write(topone.getText().toString());
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Top 3 products".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("Top 3 products");
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("Top 3 products");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("Top 3 products");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            TextView topone = new TextView(getActivity());
            TextView toptwo = new TextView(getActivity());
            TextView topthree = new TextView(getActivity());

            String one1, two2, three3, pone;

            Cursor qone = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems ", null);
            if (qone.moveToFirst()) {
                int one11 = qone.getInt(0);
                qone = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + one11 + "' ", null);
                if (qone.moveToFirst()) {
                    String idw = qone.getString(0);
                    one1 = qone.getString(2);
                    //salesee1 = one.getString(3);
                    pone = qone.getString(4);
                    topone.setText(one1);
                    Cursor two = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems WHERE sales <= '" + one11 + "' AND itemname != '"+one1+"' ORDER BY itemname ASC ", null);
                    if (two.moveToFirst()) {
                        int two111 = two.getInt(0);
                        two = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + two111 + "' AND itemname != '"+one1+"' ", null);
                        if (two.moveToFirst()) {
                            String idw1 = two.getString(0);
                            two2 = two.getString(2);
                            toptwo.setText(two2);

                            Cursor three = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems WHERE sales <= '" + two111 + "' AND itemname != '"+two2+"' AND itemname != '"+one1+"' ORDER BY itemname ASC ", null);
                            if (three.moveToFirst()) {
                                int three11 = three.getInt(0);
                                three = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + three11 + "' AND itemname != '"+two2+"' AND itemname != '"+one1+"' ", null);
                                if (three.moveToFirst()) {
                                    three3 = three.getString(2);
                                    topthree.setText(three3);
                                } else {
//                                topthree.setText("NA");
                                }
                            }
                            three.close();
                        } else {
//                        toptwo.setText("NA");
                        }
                    }
                    two.close();
                } else {
//                topone.setText("NA");
                }
            }
            qone.close();

            String price1 = "0", price2 = "0", price3 = "0";
            Cursor getprice1 = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE itemname = '" + topone.getText().toString() + "'", null);
            if (getprice1.moveToFirst()) {
                price1 = getprice1.getString(3);
            }
            getprice1.close();

            Cursor getprice2 = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE itemname = '" + toptwo.getText().toString() + "'", null);
            if (getprice2.moveToFirst()) {
                price2 = getprice2.getString(3);
            }
            getprice2.close();

            Cursor getprice3 = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE itemname = '" + topthree.getText().toString() + "'", null);
            if (getprice3.moveToFirst()) {
                price3 = getprice3.getString(3);
            }
            getprice3.close();

            allbuftaxestype1 = new byte[][]{
                    left, normal, "1.".getBytes(), topone.getText().toString().getBytes(), " - ".getBytes(), "Rs.".getBytes(), price1.getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("1." + topone.getText().toString() + " - " + insert1_rs+"" + price1);
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("1." + topone.getText().toString() + " - " + insert1_rs+"" + price1);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("1." + topone.getText().toString() + " - " + insert1_rs+"" + price1);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (toptwo.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "2.".getBytes(), toptwo.getText().toString().getBytes(), " - ".getBytes(), "Rs.".getBytes(), price2.getBytes(), HT, LF
                };

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write("2." + toptwo.getText().toString() + " - " + insert1_rs+"" + price2);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write("2." + toptwo.getText().toString() + " - " + insert1_rs+"" + price2);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write("2." + toptwo.getText().toString() + " - " + insert1_rs+"" + price2);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            if (topthree.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "3.".getBytes(), topthree.getText().toString().getBytes(), " - ".getBytes(), "Rs.".getBytes(), price3.getBytes(), HT, LF
                };

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write("3." + topthree.getText().toString() + " - " + insert1_rs+"" + price3);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write("3." + topthree.getText().toString() + " - " + insert1_rs+"" + price3);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write("3." + topthree.getText().toString() + " - " + insert1_rs+"" + price3);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Outstanding till today".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("Outstanding till today");
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("Outstanding till today");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("Outstanding till today");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            String sumnew1 = "0";
            Cursor curCSV1 = db.rawQuery("SELECT SUM(balance) FROM Cusotmer_activity_temp", null);
            if (curCSV1.moveToFirst()) {
                do {
                    float aq = curCSV1.getFloat(0);
                    sumnew1 = String.valueOf(aq);
                }
                while (curCSV1.moveToNext());
            }
            curCSV1.close();

            allbuftaxestype1 = new byte[][]{
                    left, normal, "Rs.".getBytes(), sumnew1.getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write(insert1_rs+"" + sumnew1);
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write(insert1_rs+"" + sumnew1);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write(insert1_rs+"" + sumnew1);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Outstanding customers".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("Outstanding customers");
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("Outstanding customers");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("Outstanding customers");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            String sumnew11 = "0";
            Cursor curCSV11 = db.rawQuery("SELECT count(_id) FROM Cusotmer_activity_temp WHERE balance > '0.0'", null);
            if (curCSV11.moveToFirst()) {
                do {
                    float aq = curCSV11.getFloat(0);
                    sumnew11 = String.valueOf(aq);
                }
                while (curCSV11.moveToNext());
            }
            curCSV11.close();

            allbuftaxestype1 = new byte[][]{
                    left, normal, sumnew11.getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write(sumnew11);
                BluetoothPrintDriver.BT_Write(HT);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write(sumnew11);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write(sumnew11);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            feedcut();
        }

    }
    public void footer(){

        Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }
        connnet.close();

        Cursor connnet_counter = db1.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }
        connusb.close();

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x27, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x08,0x17,0x27,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    allbufline = new byte[][]{
                            left, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    setHT32 = new byte[]{0x1b,0x44,0x19,0x00};//2 tabs 2"
                    setHT321 = new byte[]{0x1b,0x44,0x13,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x15,0x00};//2 tabs 3"
                    setHT33 = new byte[] {0x1b,0x44,0x09,0x19,0x00};//3 tabs 2"
                    setHT34 = new byte[]{0x1b,0x44,0x04,0x12,0x19,0x00};//4 tabs 2"
                    nPaperWidth = 384;
                    allbufline = new byte[][]{
                            left, "--------------------------------".getBytes(), LF

                    };
                }
            }while(cc.moveToNext());
        }
        cc.close();

//        allbuf2 = new byte[][]{
//                normal, "Thank you! visit again.".getBytes(), LF, LF
//
//        };
//        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//        if (statussusbs.equals("ok")) {
//            BluetoothPrintDriver.BT_Write(normal);	//
//            BT_Write("Thank you! visit again.");
//            BluetoothPrintDriver.BT_Write(LF);	//
//            BluetoothPrintDriver.BT_Write(LF);	//
//        } else {
//            if (statusnets_counter.equals("ok")) {
//                wifiSocket2.WIFI_Write(normal);	//
//                wifiSocket2.WIFI_Write("Thank you! visit again.");
//                wifiSocket2.WIFI_Write(LF);	//
//                wifiSocket2.WIFI_Write(LF);	//
//            }else {
//                if (statusnets.equals("ok")) {
//                    wifiSocket.WIFI_Write(normal);	//
//                    wifiSocket.WIFI_Write("Thank you! visit again.");
//                    wifiSocket.WIFI_Write(LF);	//
//                    wifiSocket.WIFI_Write(LF);	//
//                }
//            }
//        }

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")){

        }else {
            allbuf2 = new byte[][]{
                    normal, strbillone.getBytes(), LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(normal);	//
                BT_Write(strbillone);
                BluetoothPrintDriver.BT_Write(LF);	//
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(normal);	//
                    wifiSocket2.WIFI_Write(strbillone);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(normal);	//
                        wifiSocket.WIFI_Write(strbillone);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }
        }

        feedcut();

    }

    public void feedcut(){
        Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                }
                else {
                    feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                }
            }while(cc.moveToNext());
        }
        cc.close();

        byte[][] allbuf = new byte[][]{
                feedcut2
        };
        if (statussusbs.equals("ok")) {
            BluetoothPrintDriver.BT_Write(feedcut2);	//
        }else {
            if (statusnets_counter.equals("ok")) {
                wifiSocket2.WIFI_Write(feedcut2);	//
            }else {
                if (statusnets.equals("ok")) {
                    wifiSocket.WIFI_Write(feedcut2);	//
                }
            }
        }

        if (str_print_ty.equals("POS")) {
            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(feedcut2);	//
            }else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(feedcut2);	//
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(feedcut2);	//
                    }
                }
            }
        }
    }
    private android.app.TimePickerDialog.OnTimeSetListener timePickerListener_open_dialogue = new android.app.TimePickerDialog.OnTimeSetListener() {


        @Override
        public void onTimeSet(TimePicker view, int hourOfDay, int minutes) {
            // TODO Auto-generated method stub
            hour = hourOfDay;
            minute = minutes;

            updateTime_open_dialog(hour, minute);

            Calendar calNow = Calendar.getInstance();
            Calendar calSet = (Calendar) calNow.clone();

            calSet.set(Calendar.HOUR_OF_DAY, hourOfDay);
            calSet.set(Calendar.MINUTE, minutes);
            calSet.set(Calendar.SECOND, 0);
            calSet.set(Calendar.MILLISECOND, 0);


            String hour1 = "";
            if (hour < 10)
                hour1 = "0" + hour;
            else
                hour1 = String.valueOf(hour);

            String minutes1 = "";
            if (minute < 10)
                minutes1 = "0" + minute;
            else
                minutes1 = String.valueOf(minute);

            // editText_from_day_hide.setText(hour1 + "" + minutes1);
            editText_from_day_hide_dialog.setText(hour1 + "" + minutes1);


        }
    };


    private android.app.TimePickerDialog.OnTimeSetListener timePickerListener_close_dialogue = new android.app.TimePickerDialog.OnTimeSetListener() {


        @Override
        public void onTimeSet(TimePicker view, int hourOfDay, int minutes) {
            // TODO Auto-generated method stub
            hour = hourOfDay;
            minute = minutes;

            updateTime_close_dialog(hour, minute);

            Calendar calNow = Calendar.getInstance();
            Calendar calSet = (Calendar) calNow.clone();

            calSet.set(Calendar.HOUR_OF_DAY, hourOfDay);
            calSet.set(Calendar.MINUTE, minutes);
            calSet.set(Calendar.SECOND, 0);
            calSet.set(Calendar.MILLISECOND, 0);

            String hour1 = "";
            if (hour < 10)
                hour1 = "0" + hour;
            else
                hour1 = String.valueOf(hour);

            String minutes1 = "";
            if (minute < 10)
                minutes1 = "0" + minute;
            else
                minutes1 = String.valueOf(minute);

            //editText_to_day_hide.setText(hour1 + "" + minutes1);
            editText_to_day_hide_dialog.setText(hour1 + "" + minutes1);
        }
    };

    private android.app.TimePickerDialog.OnTimeSetListener timePickerListener_open = new android.app.TimePickerDialog.OnTimeSetListener() {


        @Override
        public void onTimeSet(TimePicker view, int hourOfDay, int minutes) {
            // TODO Auto-generated method stub
            hour = hourOfDay;
            minute = minutes;

            updateTime_open(hour, minute);

            Calendar calNow = Calendar.getInstance();
            Calendar calSet = (Calendar) calNow.clone();

            calSet.set(Calendar.HOUR_OF_DAY, hourOfDay);
            calSet.set(Calendar.MINUTE, minutes);
            calSet.set(Calendar.SECOND, 0);
            calSet.set(Calendar.MILLISECOND, 0);


            String hour1 = "";
            if (hour < 10)
                hour1 = "0" + hour;
            else
                hour1 = String.valueOf(hour);

            String minutes1 = "";
            if (minute < 10)
                minutes1 = "0" + minute;
            else
                minutes1 = String.valueOf(minute);

            editText_from_day_hide.setText(hour1 + "" + minutes1);


        }
    };

    private android.app.TimePickerDialog.OnTimeSetListener timePickerListener_close = new android.app.TimePickerDialog.OnTimeSetListener() {


        @Override
        public void onTimeSet(TimePicker view, int hourOfDay, int minutes) {
            // TODO Auto-generated method stub
            hour = hourOfDay;
            minute = minutes;

            updateTime_close(hour, minute);

            Calendar calNow = Calendar.getInstance();
            Calendar calSet = (Calendar) calNow.clone();

            calSet.set(Calendar.HOUR_OF_DAY, hourOfDay);
            calSet.set(Calendar.MINUTE, minutes);
            calSet.set(Calendar.SECOND, 0);
            calSet.set(Calendar.MILLISECOND, 0);

            String hour1 = "";
            if (hour < 10)
                hour1 = "0" + hour;
            else
                hour1 = String.valueOf(hour);

            String minutes1 = "";
            if (minute < 10)
                minutes1 = "0" + minute;
            else
                minutes1 = String.valueOf(minute);

            editText_to_day_hide.setText(hour1 + "" + minutes1);
        }
    };

    private void updateTime_open(int hours, int mins) {

        String timeSet = "";
        if (hours > 12) {
            hours -= 12;
            timeSet = "PM";
        } else if (hours == 0) {
            hours += 12;
            timeSet = "AM";
        } else if (hours == 12)
            timeSet = "PM";
        else
            timeSet = "AM";


        String minutes = "";
        if (mins < 10)
            minutes = "0" + mins;
        else
            minutes = String.valueOf(mins);

        // Append in a StringBuilder
        String aTime = new StringBuilder().append(hours).append(':')
                .append(minutes).append(" ").append(timeSet).toString();

        editText_from_day_visible.setText(aTime);
    }

    private void updateTime_close(int hours, int mins) {

        String timeSet = "";
        if (hours > 12) {
            hours -= 12;
            timeSet = "PM";
        } else if (hours == 0) {
            hours += 12;
            timeSet = "AM";
        } else if (hours == 12)
            timeSet = "PM";
        else
            timeSet = "AM";


        String minutes = "";
        if (mins < 10)
            minutes = "0" + mins;
        else
            minutes = String.valueOf(mins);

        // Append in a StringBuilder
        String aTime = new StringBuilder().append(hours).append(':')
                .append(minutes).append(" ").append(timeSet).toString();

        editText_to_day_visible.setText(aTime);
    }


    private class MakeRequestTask extends AsyncTask<Void, Void, String> {
        private com.google.api.services.gmail.Gmail mService = null;
        private Exception mLastError = null;
//        private View view = sendFabButton;

        public MakeRequestTask(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
            mService = new com.google.api.services.gmail.Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName(getResources().getString(R.string.app_name))
                    .build();
        }

        @Override
        protected String doInBackground(Void... params) {
            try {
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                return null;
            }
        }

        private String getDataFromApi() throws IOException {
            // getting Values for to Address, from Address, Subject and Body

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }
            getcom.close();

            String url = "www.intuitionsoftwares.com";

//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

            TextView textView = new TextView(getActivity());
            textView.setText(R.string.underline);

            float value22 = Float.parseFloat(total11) * 100 / Float.parseFloat(total);
            String ruppercent22 = String.format(Locale.US,"%.1f", value22);


            float value1 = Float.parseFloat(total111) * 100 / Float.parseFloat(total);
            String ruppercent1 = String.format(Locale.US,"%.1f", value1);
            //cashcardcashsalespercent.setText(String.valueOf(ruppercent1));

            float value2 = Float.parseFloat(total111card) * 100 / Float.parseFloat(total);
            //String ruppercent = String.format("%.1f", value);
            String ruppercent2 = String.format(Locale.US,"%.1f", value2);
            //cashcardcardsalespercent.setText(String.valueOf(ruppercent2));

            float value = Float.parseFloat(dineinsalesstr) * 100 / Float.parseFloat(total);
            String ruppercent = String.format(Locale.US,"%.1f", value);

            float value11 = Float.parseFloat(takeawaysalesstr) * 100 / Float.parseFloat(total);
            String ruppercent11 = String.format(Locale.US,"%.1f", value11);

            float value21 = Float.parseFloat(homedeliverysalesstr) * 100 / Float.parseFloat(total);
            String ruppercent21 = String.format(Locale.US,"%.1f", value21);

            String msg = "Sales report (" + editText11.getText().toString() + "," + editText_from_day_visible.getText().toString()+" to " + editText22.getText().toString() +","+editText_to_day_visible.getText().toString()+ ")\n\n" + textView.getText().toString() + " (Detailed report attached)" +
                    "\n\nTotal sales: "+insert1_rs+" " + totalsales_r.getText().toString() + "\n\nCash sales: "+insert1_rs+" " + total111 + "(" + ruppercent1 + "%)\n\nCard sales: "+insert1_rs+" " + total111card + "(" + ruppercent2 + "%)\n\n" +
                    "General sales: "+insert1_rs+" " + dineinsalesstr + "(" + ruppercent + "%)\n\n" +
                    "Home-delivery sales: "+insert1_rs+" " + homedeliverysalesstr + "(" + ruppercent21 + "%)\n\nNo. of bills: " + totalbillis + "\n\n" +
                    "Avg. sales/bill: "+insert1_rs+" " + avgsales_r.getText().toString() + "\n\nTop selling product:\n" + one1 + " - "+insert1_rs+" " + max + "(" + topitem1percent.getText().toString() + ")\n\nTop seller:\n" + oone1 + " - "+insert1_rs+" " + mmax + "(" + topuser1percent.getText().toString() + ")\n\n" +
                    "Discounts: "+insert1_rs+" " + total11 + "(" + ruppercent22 + "%)\n\nRefunds: "+insert1_rs+" " + refundedstr + "(" + rupper1 + "%)\n\n" +
                    "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
                    "Powered by: " + Uri.parse(url);

            Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
            if (cursor1.moveToFirst()) {
                do {
                    String unn = cursor1.getString(3);
                    TextView edtToAddress = new TextView(getActivity());
                    edtToAddress.setText(unn);

                    TextView edtSubject = new TextView(getActivity());
                    edtSubject.setText(strcompanyname);

                    TextView edtMessage = new TextView(getActivity());
                    edtMessage.setText(msg);

                    String user = "me";
                    String to = Utils.getString(edtToAddress);
                    String from = mCredential.getSelectedAccountName();
                    Log.v("sender email", from);
                    String subject = Utils.getString(edtSubject);
                    String body = Utils.getString(edtMessage);
                    MimeMessage mimeMessage;
                    response = "";
                    try {

//                        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_customer_list");
//                        if (!exportDir.exists()) {
//                            exportDir.mkdirs();
//                        }
//
//                        file = new File(exportDir, "IvePOS_customer_list" + currentDateandTimee1 + "_" + timee1 + ".csv");

//                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+currentDateandTimee1+"_"+timee1+".csv";
                        String filename = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_product_report/IvePOS_product_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_customer_list/IvePOS_customer_list"+currentDateandTimee1+"_"+timee1+".csv";

//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+"12May17"+"_"+"013048PM"+".csv";
//                String path = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_backup/";


                        File f = new File(filename);
//
                        mimeMessage = createEmailWithAttachment(to, from, subject, body, f);



//                        mimeMessage = createEmail(to, from, subject, body);
                        response = sendMessage(mService, user, mimeMessage);
                    } catch (MessagingException e) {
                        e.printStackTrace();
                    }

                } while (cursor1.moveToNext());
            }
            cursor1.close();
            return response;
        }

        // Method to send email
        private String sendMessage(Gmail service,
                                   String userId,
                                   MimeMessage email)
                throws MessagingException, IOException {
            com.google.api.services.gmail.model.Message message = createMessageWithEmail(email);
            // GMail's official method to send email with oauth2.0
            message = service.users().messages().send(userId, message).execute();

            System.out.println("user ID " + userId);

            System.out.println("Message id: " + message.getId());
            System.out.println(message.toPrettyString());
            return message.getId();
        }

        public MimeMessage createEmailWithAttachment(String to,
                                                     String from,
                                                     String subject,
                                                     String bodyText,
                                                     File file)
                throws MessagingException, IOException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);

            email.setFrom(new InternetAddress(from));
            email.addRecipient(javax.mail.Message.RecipientType.TO,
                    new InternetAddress(to));
            email.setSubject(subject);

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(bodyText, "text/plain");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            mimeBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);

            mimeBodyPart.setDataHandler(new DataHandler(source));
            mimeBodyPart.setFileName(file.getName());

            multipart.addBodyPart(mimeBodyPart);
            email.setContent(multipart);

            return email;
        }

        // Method to create email Params
        private MimeMessage createEmail(String to,
                                        String from,
                                        String subject,
                                        String bodyText) throws MessagingException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);
            InternetAddress tAddress = new InternetAddress(to);
            InternetAddress fAddress = new InternetAddress(from);


            System.out.println("From  " + from);
            System.out.println("To  " + to);


            email.setFrom(fAddress);
            email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);
            email.setSubject(subject);
            email.setText(bodyText);
            return email;
        }

        private com.google.api.services.gmail.model.Message createMessageWithEmail(MimeMessage email)
                throws MessagingException, IOException {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            email.writeTo(bytes);
            String encodedEmail = Base64.encodeBase64URLSafeString(bytes.toByteArray());
            com.google.api.services.gmail.model.Message message = new com.google.api.services.gmail.model.Message();
            message.setRaw(encodedEmail);
            return message;
        }

        @Override
        protected void onPreExecute() {
            mProgress.show();
        }

        @Override
        protected void onPostExecute(String output) {
            Log.d("post execute", "error");
            mProgress.hide();
            if (output == null || output.length() == 0) {
                Toast.makeText(getActivity(), "not success", Toast.LENGTH_SHORT).show();
//                showMessage(view, "No results returned.");
            } else {
                Toast.makeText(getActivity(), "success", Toast.LENGTH_SHORT).show();
//                showMessage(view, output);
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
//                Log.v("Errors3", mLastError.getMessage());
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
//                    Log.v("Errors1", mLastError.getMessage());
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
//                    Log.v("Errors2", mLastError.getMessage());
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            Utils.REQUEST_AUTHORIZATION);
                } else {
//                    showMessage(view, "The following error occurred:\n" + mLastError.getMessage());
//                    Log.v("Errors", mLastError.getMessage());
                }
            } else {
//                showMessage(view, "Request Cancelled.");
            }
        }
    }


    private class MakeRequestTask2 extends AsyncTask<Void, Void, String> {
        private com.google.api.services.gmail.Gmail mService = null;
        private Exception mLastError = null;
//        private View view = sendFabButton;

        public MakeRequestTask2(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
            mService = new com.google.api.services.gmail.Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName(getResources().getString(R.string.app_name))
                    .build();
        }

        @Override
        protected String doInBackground(Void... params) {
            try {
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                return null;
            }
        }

        private String getDataFromApi() throws IOException {
            // getting Values for to Address, from Address, Subject and Body

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }
            getcom.close();

            String url = "www.intuitionsoftwares.com";

//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

            TextView textView = new TextView(getActivity());
            textView.setText(R.string.underline);

            float value22 = Float.parseFloat(total11) * 100 / Float.parseFloat(total);
            String ruppercent22 = String.format(Locale.US,"%.1f", value22);


            float value1 = Float.parseFloat(total111) * 100 / Float.parseFloat(total);
            String ruppercent1 = String.format(Locale.US,"%.1f", value1);
            //cashcardcashsalespercent.setText(String.valueOf(ruppercent1));

            float value2 = Float.parseFloat(total111card) * 100 / Float.parseFloat(total);
            //String ruppercent = String.format("%.1f", value);
            String ruppercent2 = String.format(Locale.US,"%.1f", value2);
            //cashcardcardsalespercent.setText(String.valueOf(ruppercent2));

            float value = Float.parseFloat(dineinsalesstr) * 100 / Float.parseFloat(total);
            String ruppercent = String.format(Locale.US,"%.1f", value);

            float value11 = Float.parseFloat(takeawaysalesstr) * 100 / Float.parseFloat(total);
            String ruppercent11 = String.format(Locale.US,"%.1f", value11);

            float value21 = Float.parseFloat(homedeliverysalesstr) * 100 / Float.parseFloat(total);
            String ruppercent21 = String.format(Locale.US,"%.1f", value21);

            String msg = "Sales report (" + editText11.getText().toString() + "," + editText_from_day_visible.getText().toString()+" to " + editText22.getText().toString() +","+editText_to_day_visible.getText().toString()+ ")\n\n" + textView.getText().toString() + " (Detailed report attached)" +
                    "\n\nTotal sales: "+insert1_rs+" " + totalsales_r.getText().toString() + "\n\nCash sales: "+insert1_rs+" " + total111 + "(" + ruppercent1 + "%)\n\nCard sales: "+insert1_rs+" " + total111card + "(" + ruppercent2 + "%)\n\n" +
                    "General sales: "+insert1_rs+" " + dineinsalesstr + "(" + ruppercent + "%)\n\n" +
                    "Home-delivery sales: "+insert1_rs+" " + homedeliverysalesstr + "(" + ruppercent21 + "%)\n\nNo. of bills: " + totalbillis + "\n\n" +
                    "Avg. sales/bill: "+insert1_rs+" " + avgsales_r.getText().toString() + "\n\nTop selling product:\n" + one1 + " - "+insert1_rs+" " + max + "(" + topitem1percent.getText().toString() + ")\n\nTop seller:\n" + oone1 + " - "+insert1_rs+" " + mmax + "(" + topuser1percent.getText().toString() + ")\n\n" +
                    "Discounts: "+insert1_rs+" " + total11 + "(" + ruppercent22 + "%)\n\nRefunds: "+insert1_rs+" " + refundedstr + "(" + rupper1 + "%)\n\n" +
                    "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
                    "Powered by: " + Uri.parse(url);

            Cursor cursor1 = db1.rawQuery("SELECT * FROM Email_recipient", null);
            if (cursor1.moveToFirst()) {
                do {
                    String unn = cursor1.getString(3);
                    TextView edtToAddress = new TextView(getActivity());
                    edtToAddress.setText(unn);

                    TextView edtSubject = new TextView(getActivity());
                    edtSubject.setText(strcompanyname);

                    TextView edtMessage = new TextView(getActivity());
                    edtMessage.setText(msg);

                    String user = "me";
                    String to = Utils.getString(edtToAddress);
                    String from = mCredential.getSelectedAccountName();
                    Log.v("sender email", from);
                    String subject = Utils.getString(edtSubject);
                    String body = Utils.getString(edtMessage);
                    MimeMessage mimeMessage;
                    response = "";
                    try {

//                        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_customer_list");
//                        if (!exportDir.exists()) {
//                            exportDir.mkdirs();
//                        }
//
//                        file = new File(exportDir, "IvePOS_customer_list" + currentDateandTimee1 + "_" + timee1 + ".csv");

//                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_Billwise_items_report/IvePOS_Billwise_items_report"+currentDateandTimee1+"_"+timee1+".csv";
                        String filename = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)+"/IVEPOS_reports/IVEPOS_Billwise_items_report/IvePOS_Billwise_items_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_product_report/IvePOS_product_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_customer_list/IvePOS_customer_list"+currentDateandTimee1+"_"+timee1+".csv";

//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+"12May17"+"_"+"013048PM"+".csv";
//                String path = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_backup/";


                        File f = new File(filename);
//
                        mimeMessage = createEmailWithAttachment(to, from, subject, body, f);



//                        mimeMessage = createEmail(to, from, subject, body);
                        response = sendMessage(mService, user, mimeMessage);
                    } catch (MessagingException e) {
                        e.printStackTrace();
                    }

                } while (cursor1.moveToNext());
            }
            cursor1.close();
            return response;
        }

        // Method to send email
        private String sendMessage(Gmail service,
                                   String userId,
                                   MimeMessage email)
                throws MessagingException, IOException {
            com.google.api.services.gmail.model.Message message = createMessageWithEmail(email);
            // GMail's official method to send email with oauth2.0
            message = service.users().messages().send(userId, message).execute();

            System.out.println("user ID " + userId);

            System.out.println("Message id: " + message.getId());
            System.out.println(message.toPrettyString());
            return message.getId();
        }

        public MimeMessage createEmailWithAttachment(String to,
                                                     String from,
                                                     String subject,
                                                     String bodyText,
                                                     File file)
                throws MessagingException, IOException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);

            email.setFrom(new InternetAddress(from));
            email.addRecipient(javax.mail.Message.RecipientType.TO,
                    new InternetAddress(to));
            email.setSubject(subject);

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(bodyText, "text/plain");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            mimeBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);

            mimeBodyPart.setDataHandler(new DataHandler(source));
            mimeBodyPart.setFileName(file.getName());

            multipart.addBodyPart(mimeBodyPart);
            email.setContent(multipart);

            return email;
        }

        // Method to create email Params
        private MimeMessage createEmail(String to,
                                        String from,
                                        String subject,
                                        String bodyText) throws MessagingException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);
            InternetAddress tAddress = new InternetAddress(to);
            InternetAddress fAddress = new InternetAddress(from);


            System.out.println("From  " + from);
            System.out.println("To  " + to);


            email.setFrom(fAddress);
            email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);
            email.setSubject(subject);
            email.setText(bodyText);
            return email;
        }

        private com.google.api.services.gmail.model.Message createMessageWithEmail(MimeMessage email)
                throws MessagingException, IOException {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            email.writeTo(bytes);
            String encodedEmail = Base64.encodeBase64URLSafeString(bytes.toByteArray());
            com.google.api.services.gmail.model.Message message = new com.google.api.services.gmail.model.Message();
            message.setRaw(encodedEmail);
            return message;
        }

        @Override
        protected void onPreExecute() {
            mProgress.show();
        }

        @Override
        protected void onPostExecute(String output) {
            Log.d("post execute", "error");
            mProgress.hide();
            if (output == null || output.length() == 0) {
                Toast.makeText(getActivity(), "not success", Toast.LENGTH_SHORT).show();
//                showMessage(view, "No results returned.");
            } else {
                Toast.makeText(getActivity(), "success", Toast.LENGTH_SHORT).show();
//                showMessage(view, output);
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
//                Log.v("Errors3", mLastError.getMessage());
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
//                    Log.v("Errors1", mLastError.getMessage());
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
//                    Log.v("Errors2", mLastError.getMessage());
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            Utils.REQUEST_AUTHORIZATION);
                } else {
//                    showMessage(view, "The following error occurred:\n" + mLastError.getMessage());
//                    Log.v("Errors", mLastError.getMessage());
                }
            } else {
//                showMessage(view, "Request Cancelled.");
            }
        }
    }


    void showGooglePlayServicesAvailabilityErrorDialog(
            final int connectionStatusCode) {
        GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
        Dialog dialog = apiAvailability.getErrorDialog(
                getActivity(),
                connectionStatusCode,
                REQUEST_GOOGLE_PLAY_SERVICES);
        dialog.show();
    }

    private void getResultsFromApi() {

        Cursor cursorr = db1.rawQuery("SELECT * FROM Email_setup", null);
        if (cursorr.moveToFirst()) {
            String unn = cursorr.getString(1);
//            Toast.makeText(getActivity(), "a4 " + unn, Toast.LENGTH_SHORT).show();

            TextView tvv = new TextView(getActivity());
            tvv.setText(unn);

            if (tvv.getText().toString().equals("")) {

            }else {
                mCredential.setSelectedAccountName(tvv.getText().toString());
            }
        }
        cursorr.close();

        if (! isGooglePlayServicesAvailable()) {
//            Toast.makeText(getActivity(), "1", Toast.LENGTH_SHORT).show();
            acquireGooglePlayServices();
        } else if (mCredential.getSelectedAccountName() == null) {
//            Toast.makeText(getActivity(), "2", Toast.LENGTH_SHORT).show();
//            chooseAccount();
        } else if (! isDeviceOnline()) {
//            Toast.makeText(getActivity(), "3", Toast.LENGTH_SHORT).show();
//            mOutputText.setText("No network connection available.");
        } else {
//            Toast.makeText(getActivity(), "4", Toast.LENGTH_SHORT).show();
            new MakeRequestTask1(mCredential).execute();
        }
    }

    /**
     * Checks whether the device currently has a network connection.
     * @return true if the device has a network connection, false otherwise.
     */
    private boolean isDeviceOnline() {
        ConnectivityManager connMgr =
                (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
        return (networkInfo != null && networkInfo.isConnected());
    }

    /**
     * Check that Google Play services APK is installed and up to date.
     * @return true if Google Play Services is available and up to
     *     date on this device; false otherwise.
     */
    private boolean isGooglePlayServicesAvailable() {
        GoogleApiAvailability apiAvailability =
                GoogleApiAvailability.getInstance();
        final int connectionStatusCode =
                apiAvailability.isGooglePlayServicesAvailable(getActivity());
        return connectionStatusCode == ConnectionResult.SUCCESS;
    }

    /**
     * Attempt to resolve a missing, out-of-date, invalid or disabled Google
     * Play Services installation via a user dialog, if possible.
     */
    private void acquireGooglePlayServices() {
        GoogleApiAvailability apiAvailability =
                GoogleApiAvailability.getInstance();
        final int connectionStatusCode =
                apiAvailability.isGooglePlayServicesAvailable(getActivity());
        if (apiAvailability.isUserResolvableError(connectionStatusCode)) {
            showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);
        }
    }


    /**
     * Attempts to set the account used with the API credentials. If an account
     * name was previously saved it will use that one; otherwise an account
     * picker dialog will be shown to the user. Note that the setting the
     * account to use with the credentials object requires the app to have the
     * GET_ACCOUNTS permission, which is requested here if it is not already
     * present. The AfterPermissionGranted annotation indicates that this
     * function will be rerun automatically whenever the GET_ACCOUNTS permission
     * is granted.
     */
    @AfterPermissionGranted(REQUEST_PERMISSION_GET_ACCOUNTS)
    private void chooseAccount() {
//        Toast.makeText(getActivity(), "s1", Toast.LENGTH_SHORT).show();
        if (EasyPermissions.hasPermissions(
                getActivity(), Manifest.permission.GET_ACCOUNTS)) {
            String accountName = getActivity().getPreferences(Context.MODE_PRIVATE)
                    .getString(PREF_ACCOUNT_NAME, null);
//            Toast.makeText(getActivity(), "s2", Toast.LENGTH_SHORT).show();
//            if (accountName != null) {
//                mCredential.setSelectedAccountName(accountName);
//                Toast.makeText(getActivity(), "s3", Toast.LENGTH_SHORT).show();
//                getResultsFromApi();
//            } else {
            // Start a dialog from which the user can choose an account
            startActivityForResult(
                    mCredential.newChooseAccountIntent(),
                    REQUEST_ACCOUNT_PICKER);
//            Toast.makeText(getActivity(), "s4", Toast.LENGTH_SHORT).show();
//            }
        } else {
            // Request the GET_ACCOUNTS permission via a user dialog
//            Toast.makeText(getActivity(), "s5", Toast.LENGTH_SHORT).show();
            EasyPermissions.requestPermissions(
                    this,
                    "This app needs to access your Google account (via Contacts).",
                    REQUEST_PERMISSION_GET_ACCOUNTS,
                    Manifest.permission.GET_ACCOUNTS);
        }
    }

    private class MakeRequestTask1 extends AsyncTask<Void, Void, List<String>> {
        private com.google.api.services.gmail.Gmail mService = null;
        private Exception mLastError = null;

        MakeRequestTask1(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

            System.out.println("labels mservice11 " + mService);

            mService = new com.google.api.services.gmail.Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName("Gmail API Android Quickstart")
                    .build();
            Log.d("labels credential", String.valueOf(credential));

            System.out.println("labels mservice " + mService);
        }

        /**
         * Background task to call Gmail API.
         * @param params no parameters needed for this task.
         */
        @Override
        protected List<String> doInBackground(Void... params) {
            Log.d("hiiiiii11", "error");

            try {
                Log.d("hiiiiii111", "error");
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                Log.d("hiiiiii1111", "error");
                return null;
            }
        }

        /**
         * Fetch a list of Gmail labels attached to the specified account.
         * @return List of Strings labels.
         * @throws IOException
         */
        private List<String> getDataFromApi() throws IOException {
            // Get the labels in the user's account.
            String user = "me";
            List<String> labels = new ArrayList<String>();
            ListLabelsResponse listResponse =
                    mService.users().labels().list(user).execute();
            System.out.println("ListLabelsResponse " + listResponse);
            for (Label label : listResponse.getLabels()) {
                labels.add(label.getName());

//                Log.d("labels", String.valueOf(labels));//will be displaying all the folders one by one by looping

//                System.out.println("user ID " + labels.add(label.getName()));
            }
            return labels;
        }


        @Override
        protected void onPreExecute() {
//            mOutputText.setText("");
            mProgress.show();
        }

        @Override
        protected void onPostExecute(List<String> output) {
//            System.out.println("labelsss " + output);//will be displaying details and folders in mail like inbox, sent, outbox, junk, etc
            mProgress.hide();
            if (output == null || output.size() == 0) {
//                mOutputText.setText("No results returned.");
            } else {
                output.add(0, "Data retrieved using the Gmail API:");
//                mOutputText.setText(TextUtils.join("\n", output));
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            EmailSetup_Google.REQUEST_AUTHORIZATION);
                } else {
//                    mOutputText.setText("The following error occurred:\n"
//                            + mLastError.getMessage());
                }
            } else {
//                mOutputText.setText("Request cancelled.");
            }
        }
    }

    private class MakeRequestTask_bill extends AsyncTask<Void, Void, String> {
        private com.google.api.services.gmail.Gmail mService = null;
        private Exception mLastError = null;
//        private View view = sendFabButton;

        public MakeRequestTask_bill(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
            mService = new com.google.api.services.gmail.Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName(getResources().getString(R.string.app_name))
                    .build();
        }

        @Override
        protected String doInBackground(Void... params) {
            try {
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                return null;
            }
        }

        private String getDataFromApi() throws IOException {
            // getting Values for to Address, from Address, Subject and Body

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    stremailid = getcom.getString(15);
                } while (getcom.moveToNext());
            }else {
                strcompanyname = "";
                stremailid = "";
            }
            getcom.close();

            String name_mail = "";
            Cursor em = db.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnumb+"'", null);
            if (em.moveToFirst()){
                name_mail = em.getString(1);
            }
            em.close();

            String date_mail = "", time_mail = "";
            Cursor cursor9 = db.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnumb+"'", null);
            if (cursor9.moveToFirst()){
                date_mail = cursor9.getString(25);
                time_mail = cursor9.getString(12);
            }
            cursor9.close();

            String url = "www.intuitionsoftwares.com";

//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

            String sub = "";
            Cursor cursor8 = db.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnumb+"'", null);
            if (cursor8.moveToFirst()){
                sub = cursor8.getString(2);
            }
            cursor8.close();


            final String msg =
                    "<Html>" +
                            "<Body>" +
                            "<div>" +
                            " <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                            "<tbody>" +
                            "<tr>" +
                            "<td width=\"100%\" valign=\"top\" bgcolor=\"#f8f8f8\">" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1;margin-top:50px\">" +
                            "<tbody>" +
                            "<tr>" +
                            "<td width=\"460\" >" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                            "<tbody>" +
                            "<tr>" +
                            "<td height=\"30\">" +
                            "</td>" +
                            "</tr>" +
                            "</tbody>" +
                            "</table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                            "<tbody>" +
                            "<tr>" +
                            "<td width=\"40\">" +
                            "</td>" +
                            "<td width=\"460\" style=\"font-size:16px;color:#00929f;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                        "<img src=\"http://www.intuitionsoftwares.com/resources/intuition_logo_header_with_text_240.png\" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
//                        "<img src="+logo+" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
                            "<p><h1>"+strcompanyname+"</h1></p>" +

                            "</td>" +
                            "<td width=\"40\">" +
                            "</td>" +
                            "</tr>" +
                            "<tr>" +
                            "<td width=\"40\">" +
                            "</td>" +
                            "<td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                            "<span style=\"text-decoration:none;color:#2f2f36;font-weight:bold;font-size:32px;line-height:32px\">Bill "+billnumb+"</span><br>" +
                            "</td>" +
                            "<td width=\"40\"></td>" +
                            "</tr>" +
                            "<tr>" +
                            "<td width=\"40\"></td>" +
                            "<td width=\"460\" style=\"font-size:16px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">for Customer <br> from <b>"+strcompanyname+"</b><br>" +
                            " </td>" +
                            "<td width=\"40\">" +
                            "</td>" +
                            "</tr>" +
                            "<tr></tr>" +
                            "<tr><td width=\"40\"></td>" +
                            "<td width=\"512\" height=\"30\">" +
                            "</td> <td width=\"40\"></td></tr></tbody></table></td>" +
                            "</tr></tbody></table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" bgcolor=\"#ffffff\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                            "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                            "<tr><td width=\"460\" height=\"5\" bgcolor=\"#ffffff\"></td></tr>" +
                            "<tr><td width=\"460\" height=\"1\" bgcolor=\"#e1e1e1\"></td></tr>" +
                            "<tr><td width=\"460\" height=\"10\" bgcolor=\"#ffffff\"></td></tr></tbody></table></td></tr></tbody></table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\"><tbody>" +
                            "<tr> <td width=\"460\">" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"20\"></td></tr></tbody></table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                            "<td width=\"40\"></td><td width=\"510\" style=\"font-size:14px;color:#444;font-weight:normal;text-align:left;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">Hi "+name_mail+",<br>Your Bill amount is "+insert1_rs+""+sub.toString()+" <br><br>We appreciate your Business and hope to see you again soon,<br>"+strcompanyname+" <br>" +
                            //Correct(tic) symbol
                            "<p align=\"center\"> <img src=\"https://static.wixstatic.com/media/ff8d82_453b1bed7c174e398e9fc333af3692bf~mv2.png\" width=\"60\" height=\"60\"></p>" +

                            "<p style=\"font-size:18px;border-top:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;padding:10px 0;background:#fefefe;text-align:center;margin:5px 0\">Paid: <span style=\"white-space:nowrap;font-weight:bold;font-size:18px\">"+insert1_rs+" "+sub.toString()+" </span>" +
                            "</p><br></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                            "<tbody>" +
                            "<tr><td width=\"\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                            "<td width=\"40\"></td>" +
                            "<td width=\"510\" style=\"font-size:14px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                            "<div></div>" +
                            "<p style=\"margin-top:3px;color:#444\">Dated: <span style=\"white-space:nowrap;font-weight:bold;font-size:14px\">"+date_mail+",</span> "+time_mail+" </p>" +
                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td>" +
                            "<td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                            "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td width=\"460\" height=\"10\"></td></tr></tbody></table></td></tr></tbody></table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f9f9f9\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\"><tbody>" +
                            "<tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                            "<tr><td height=\"10\" ></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                            "<tbody><tr><td width=\"40\"></td><td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td>" +
                            "<td width=\"460\" style=\"font-size:14px;color:#959599;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:20px;text-align:center\">" +
                            "<p>Disclaimer: This information may be confidential and is intended only for the recipient.</p>" +
                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                            "<table width=\"462\" bgcolor=\"#f0f0f0\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\">" +
                            "<tbody> <tr> <td width=\"462\" height=\"10\"></td></tr></tbody></table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                            "<tbody> <tr> <td width=\"460\" bgcolor=\"#f0f0f0\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                            "<tbody> <tr> <td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                            "<tr><td width=\"30\"></td><td width=\"530\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" ><tbody><tr>" +
                            "<td height=\"0\" align=\"center\" style=\"font-size:14px;color:#b8b9c1;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:24px\">" +
                            "<p><a style=\"text-decoration:none;color:#959599\" target=\"_blank\">If you think this mail is not for you, please delete and contact<a href=\"mailto:"+stremailid+"\" style=\"text-decoration:none;color:#008f9b;font-weight:bold\" target=\"_blank\">\n" +
                            ""+stremailid+"</a> </a></td>" +
                            "</tr></tbody></table><table width=\"140\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"left\">" +
                            "<tbody><tr><td width=\"140\"></td></tr></tbody></table></td><td width=\"30\"></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                            "<td width=\"460\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;border-radius:0 0 10px 10px;background:#f0f0f0\">" +
                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"14\"></td></tr></tbody></table></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                            "<tbody><tr><td height=\"20\"></td></tr><tr>" +
                            "<td style=\"text-align:center\"><a href=\"http://www.intuitionsoftwares.com/\" target=\"_blank\" ><img src=\"www.intuitionsoftwares.com/resources/Powered%20by%20Intuition.png\" alt=\"Powered by Intuition\" border=\"0\" style=\"text-align:center;min-width:65px\"></a></td></tr>" +
                            "<tr>" +
                            "<td height=\"40\" style=\"line-height:1px\"></td></tr></tbody></table></td></tr></tbody></table><div><div>" +
                            "</div></div><span></span><div></div><div></div></div>" +
                            "</Body>" +
                            "</Html>";


//            Cursor cursor1 = db.rawQuery("SELECT * FROM Email_recipient", null);
//            if (cursor1.moveToFirst()) {
//                do {
//                    String unn = cursor1.getString(3);
            TextView edtToAddress = new TextView(getActivity());
            edtToAddress.setText(email_id_send.getText().toString());

            TextView edtSubject = new TextView(getActivity());
            edtSubject.setText(strcompanyname);

            TextView edtMessage = new TextView(getActivity());
            edtMessage.setText(msg);

            String user = "me";
            String to = Utils.getString(edtToAddress);
            String from = mCredential.getSelectedAccountName();
            Log.v("sender email", from);
            String subject = Utils.getString(edtSubject);
            String body = Utils.getString(edtMessage);
            MimeMessage mimeMessage;
            response = "";
            try {

//                        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_customer_list");
//                        if (!exportDir.exists()) {
//                            exportDir.mkdirs();
//                        }
//
//                        file = new File(exportDir, "IvePOS_customer_list" + currentDateandTimee1 + "_" + timee1 + ".csv");

//                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_Bills/IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg";
                String filename = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)+"/IVEPOS_Bills/IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_product_report/IvePOS_product_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_customer_list/IvePOS_customer_list"+currentDateandTimee1+"_"+timee1+".csv";

//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+"12May17"+"_"+"013048PM"+".csv";
//                String path = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_backup/";


                File f = new File(filename);
//
                mimeMessage = createEmailWithAttachment(to, from, subject, body, f);



//                        mimeMessage = createEmail(to, from, subject, body);
                response = sendMessage(mService, user, mimeMessage);
            } catch (MessagingException e) {
                e.printStackTrace();
            }

//                } while (cursor1.moveToNext());
//            }
            return response;
        }

        // Method to send email
        private String sendMessage(Gmail service,
                                   String userId,
                                   MimeMessage email)
                throws MessagingException, IOException {
            com.google.api.services.gmail.model.Message message = createMessageWithEmail(email);
            // GMail's official method to send email with oauth2.0
            message = service.users().messages().send(userId, message).execute();

            System.out.println("user ID " + userId);

            System.out.println("Message id: " + message.getId());
            System.out.println(message.toPrettyString());
            return message.getId();
        }

        public MimeMessage createEmailWithAttachment(String to,
                                                     String from,
                                                     String subject,
                                                     String bodyText,
                                                     File file)
                throws MessagingException, IOException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);

            email.setFrom(new InternetAddress(from));
            email.addRecipient(javax.mail.Message.RecipientType.TO,
                    new InternetAddress(to));
            email.setSubject(subject);

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(bodyText, "text/html");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            mimeBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);

            mimeBodyPart.setDataHandler(new DataHandler(source));
            mimeBodyPart.setFileName(file.getName());

            multipart.addBodyPart(mimeBodyPart);
            email.setContent(multipart);

            return email;
        }

        // Method to create email Params
        private MimeMessage createEmail(String to,
                                        String from,
                                        String subject,
                                        String bodyText) throws MessagingException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);
            InternetAddress tAddress = new InternetAddress(to);
            InternetAddress fAddress = new InternetAddress(from);


            System.out.println("From  " + from);
            System.out.println("To  " + to);


            email.setFrom(fAddress);
            email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);
            email.setSubject(subject);
            email.setText(bodyText);
            return email;
        }

        private com.google.api.services.gmail.model.Message createMessageWithEmail(MimeMessage email)
                throws MessagingException, IOException {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            email.writeTo(bytes);
            String encodedEmail = Base64.encodeBase64URLSafeString(bytes.toByteArray());
            com.google.api.services.gmail.model.Message message = new com.google.api.services.gmail.model.Message();
            message.setRaw(encodedEmail);
            return message;
        }

        @Override
        protected void onPreExecute() {
            mProgress.show();
        }

        @Override
        protected void onPostExecute(String output) {
            Log.d("post execute", "error");
            mProgress.hide();
            if (output == null || output.length() == 0) {
                Toast.makeText(getActivity(), "not success", Toast.LENGTH_SHORT).show();
//                showMessage(view, "No results returned.");
            } else {
                Toast.makeText(getActivity(), "success", Toast.LENGTH_SHORT).show();
//                showMessage(view, output);
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
//                Log.v("Errors3", mLastError.getMessage());
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
//                    Log.v("Errors1", mLastError.getMessage());
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
//                    Log.v("Errors2", mLastError.getMessage());
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            Utils.REQUEST_AUTHORIZATION);
                } else {
//                    showMessage(view, "The following error occurred:\n" + mLastError.getMessage());
//                    Log.v("Errors", mLastError.getMessage());
                }
            } else {
//                showMessage(view, "Request Cancelled.");
            }
        }
    }

    public  void hideKeyboard(Context ctx) {
        InputMethodManager inputManager = (InputMethodManager) ctx
                .getSystemService(Context.INPUT_METHOD_SERVICE);

        // check if no view has focus:
        View v = ((Activity) ctx).getCurrentFocus();
        if (v == null)
            return;

        inputManager.hideSoftInputFromWindow(v.getWindowToken(), 0);
    }

    private void setData_year(int count, float range) {
        float start = 1f;

        ArrayList<BarEntry> yVals1 = new ArrayList<BarEntry>();

//        for (int i = 0; i < count; i++) {
////            float mult = (range + 1);
        float val = 0;


//            Cursor cursor = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE datetimee_new >= '"+date1+"' AND datetimee_new <='"+date2+"' GROUP BY itemname ", null);
//            if (cursor.moveToFirst()){
//                val = cursor.getFloat(0);
//                Toast.makeText(getActivity(), "1 "+val, Toast.LENGTH_LONG).show();
//            }

        String date1_filter = date1.substring(0, 6);

        String date1_filter_month = date1.substring(0, 2);

        date1_end = date1.substring(8, 10);
        date2_end = date2.substring(8, 10);

        date1_end1 = date1.substring(10, 12);
        date2_end1 = date2.substring(10, 12);

        date1_filter_2 = date1.substring(4, 12);
        date2_filter_2 = date2.substring(4, 12);

        date1_filter_month_2 = date1.substring(2, 4);
        date2_filter_month_2 = date2.substring(2, 4);

        int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

        for (int k = Integer.parseInt(date1_filter_month_2); k<=Integer.parseInt(date2_filter_month_2); k++){
//            Toast.makeText(getActivity(), "k is "+k, Toast.LENGTH_LONG).show();

            if (k == 9) {
                if (k == Integer.parseInt(date1_filter_month_2)){
                    Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter_month+"0"+k+date1_filter_2 + "' ", null);
                    if (cursor1.moveToFirst()) {
                        val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                        yVals1.add(new BarEntry(k, val));
//                        Toast.makeText(getActivity(), "a1 " + k + " val " + val, Toast.LENGTH_LONG).show();
                    } else {
                        yVals1.add(new BarEntry(k, 0));
                    }
                    cursor1.close();
                }else {
                    if (k != Integer.parseInt(date2_filter_2)){
                        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+"0"+k+"0101"+"0001" + "' AND datetimee_new <='" + date1_filter_month+"0"+k+date2_filter_2 + "' ", null);
                        if (cursor11.moveToFirst()) {
                            val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a2 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor11.close();
                    }else {
                        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+"0"+k+"0101"+"0001" + "' AND datetimee_new <='" + date2 + "' ", null);
                        if (cursor11.moveToFirst()) {
                            val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a3 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor11.close();
                    }
                }
            } else {
                if (k >= 10) {
                    if (k == Integer.parseInt(date1_filter_month_2)){
                        Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter_month+k+"12312359" + "' ", null);
                        if (cursor1.moveToFirst()) {
                            val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a1 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor1.close();
                    }else {
                        if (k != Integer.parseInt(date2_filter_month_2)){
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+k+"0101"+"0001" + "' AND datetimee_new <='" + date1_filter_month+k+"12312359" + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a2 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }else {
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+k+"0101"+"0001" + "' AND datetimee_new <='" + date2 + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a3 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }
                    }
                }else {
                    if (k == Integer.parseInt(date1_filter_month_2)){
                        Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter_month+"0"+k+date1_filter_2 + "' ", null);
                        if (cursor1.moveToFirst()) {
                            val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a1 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor1.close();
                    }else {
                        if (k != Integer.parseInt(date2_filter_month_2)){
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+"0"+k+"0101"+"0001" + "' AND datetimee_new <='" + date1_filter_month+"0"+k+date2_filter_2 + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a2 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }else {
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+"0"+k+"0101"+"0001" + "' AND datetimee_new <='" + date2 + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a3 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }
                    }
                }
            }



        }


        BarDataSet set1;

        if (mChart.getData() != null &&
                mChart.getData().getDataSetCount() > 0) {
            set1 = (BarDataSet) mChart.getData().getDataSetByIndex(0);
            set1.setValues(yVals1);
            mChart.getData().notifyDataChanged();
            mChart.notifyDataSetChanged();
        } else {
            set1 = new BarDataSet(yVals1, "Sales");
            set1.setColor(Color.rgb(46, 204, 113));

            ArrayList<IBarDataSet> dataSets = new ArrayList<IBarDataSet>();
            dataSets.add(set1);

            BarData data = new BarData(dataSets);
            data.setValueTextSize(10f);
//            data.setValueTypeface(mTfLight);
            data.setBarWidth(0.2f);

            mChart.setData(data);
            mChart.invalidate();
        }
    }

    private void setData_month(int count, float range) {
        float start = 1f;

        ArrayList<BarEntry> yVals1 = new ArrayList<BarEntry>();

//        for (int i = 0; i < count; i++) {
////            float mult = (range + 1);
        float val = 0;


//            Cursor cursor = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE datetimee_new >= '"+date1+"' AND datetimee_new <='"+date2+"' GROUP BY itemname ", null);
//            if (cursor.moveToFirst()){
//                val = cursor.getFloat(0);
//                Toast.makeText(getActivity(), "1 "+val, Toast.LENGTH_LONG).show();
//            }

        String date1_filter = date1.substring(0, 6);

        String date1_filter_month = date1.substring(0, 4);

        date1_end = date1.substring(8, 10);
        date2_end = date2.substring(8, 10);

        date1_end1 = date1.substring(10, 12);
        date2_end1 = date2.substring(10, 12);

        date1_filter_2 = date1.substring(6, 8);
        date2_filter_2 = date2.substring(6, 8);

        date1_filter_month_2 = date1.substring(4, 6);
        date2_filter_month_2 = date2.substring(4, 6);

        int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

        for (int k = Integer.parseInt(date1_filter_month_2); k<=Integer.parseInt(date2_filter_month_2); k++){
//            Toast.makeText(getActivity(), "k is "+k, Toast.LENGTH_LONG).show();


            if (k == 9) {
                if (k == Integer.parseInt(date1_filter_month_2)) {
                    Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter_month + "0"+k + "31" + "2359" + "' ", null);
                    if (cursor1.moveToFirst()) {
                        val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                        yVals1.add(new BarEntry(k, val));
//                        Toast.makeText(getActivity(), "a1 " + k + " val " + val, Toast.LENGTH_LONG).show();
                    } else {
                        yVals1.add(new BarEntry(k, 0));
                    }
                    cursor1.close();
                } else {
                    if (k != Integer.parseInt(date2_filter_month_2)) {
                        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month +"0"+ k + "01" + "0000" + "' AND datetimee_new <='" + date1_filter_month + "0"+k + "" + "2359" + "' ", null);
                        if (cursor11.moveToFirst()) {
                            val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a2 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor11.close();
                    } else {
                        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month + "0"+k + "01" + "0000" + "' AND datetimee_new <='" + date2 + "' ", null);
                        if (cursor11.moveToFirst()) {
                            val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a3 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor11.close();
                    }
                }
            }else {
                if (k >= 10) {
                    if (k == Integer.parseInt(date1_filter_month_2)){
                        Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter_month+k+"31"+"2359" + "' ", null);
                        if (cursor1.moveToFirst()) {
                            val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a4 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor1.close();
                    }else {
                        if (k != Integer.parseInt(date2_filter_month_2)){
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+k+"01"+"0000" + "' AND datetimee_new <='" + date1_filter_month+k+"31"+"2359" + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a5 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }else {
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+k+"01"+"0000" + "' AND datetimee_new <='" + date2 + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a6 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }
                    }
                }else {
                    if (k == Integer.parseInt(date1_filter_month_2)){
                        Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter_month+"0"+k+"31"+"2359" + "' ", null);
                        if (cursor1.moveToFirst()) {
                            val = cursor1.getFloat(0);
//                            Toast.makeText(getActivity(), "a71 "+date1, Toast.LENGTH_LONG).show();
//                            Toast.makeText(getActivity(), "a71 "+date1_filter_month+"0"+k+"31"+"2359", Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a7 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor1.close();
                    }else {
                        if (k != Integer.parseInt(date2_filter_month_2)){
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+"0"+k+"01"+"0000" + "' AND datetimee_new <='" + date1_filter_month+"0"+k+"31"+"2359" + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a8 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }else {
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter_month+"0"+k+"01"+"0000" + "' AND datetimee_new <='" + date2 + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                                Toast.makeText(getActivity(), "a91 "+date1_filter_month+"0"+k+"01"+"0000", Toast.LENGTH_LONG).show();
//                                Toast.makeText(getActivity(), "a91 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a9 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }
                    }
                }
            }
        }


        BarDataSet set1;

        if (mChart.getData() != null &&
                mChart.getData().getDataSetCount() > 0) {
            set1 = (BarDataSet) mChart.getData().getDataSetByIndex(0);
            set1.setValues(yVals1);
            mChart.getData().notifyDataChanged();
            mChart.notifyDataSetChanged();
        } else {
            set1 = new BarDataSet(yVals1, getString(R.string.time_vs_sale));
            set1.setColor(Color.rgb(46, 204, 113));

            ArrayList<IBarDataSet> dataSets = new ArrayList<IBarDataSet>();
            dataSets.add(set1);

            BarData data = new BarData(dataSets);
            data.setValueTextSize(10f);
//            data.setValueTypeface(mTfLight);
            data.setBarWidth(0.2f);

            mChart.setData(data);
            mChart.invalidate();
        }
    }

    private void setData_date(int count, float range) {
        float start = 1f;

        ArrayList<BarEntry> yVals1 = new ArrayList<BarEntry>();

//        for (int i = 0; i < count; i++) {
////            float mult = (range + 1);
        float val = 0;


//            Cursor cursor = db.rawQuery("SELECT SUM(total) FROM All_Sales WHERE datetimee_new >= '"+date1+"' AND datetimee_new <='"+date2+"' GROUP BY itemname ", null);
//            if (cursor.moveToFirst()){
//                val = cursor.getFloat(0);
//                Toast.makeText(getActivity(), "1 "+val, Toast.LENGTH_LONG).show();
//            }

        String date1_filter = date1.substring(0, 6);


        date1_end = date1.substring(8, 10);
        date2_end = date2.substring(8, 10);

        date1_end1 = date1.substring(10, 12);
        date2_end1 = date2.substring(10, 12);

        date1_filter_2 = date1.substring(6, 8);
        date2_filter_2 = date2.substring(6, 8);

        int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

        for (int k = Integer.parseInt(date1_filter_2); k<=Integer.parseInt(date2_filter_2); k++){
//            Toast.makeText(getActivity(), "k is "+k, Toast.LENGTH_LONG).show();

            if (k == 9){
                if (k == Integer.parseInt(date1_filter_2)){
                    Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter+"0"+k+"2359" + "' ", null);
                    if (cursor1.moveToFirst()) {
                        val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                        yVals1.add(new BarEntry(k, val));
//                        Toast.makeText(getActivity(), "a1 " + k + " val " + val, Toast.LENGTH_LONG).show();
                    } else {
                        yVals1.add(new BarEntry(k, 0));
                    }
                    cursor1.close();
                }else {
                    if (k != Integer.parseInt(date2_filter_2)){
                        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter+"0"+k+"0000" + "' AND datetimee_new <='" + date1_filter+"0"+k+"2359" + "' ", null);
                        if (cursor11.moveToFirst()) {
                            val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a2 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor11.close();
                    }else {
                        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter+"0"+k+"0000" + "' AND datetimee_new <='" + date2 + "' ", null);
                        if (cursor11.moveToFirst()) {
                            val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a3 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor11.close();
                    }
                }
            }else {
                if (k >= 10) {
                    if (k == Integer.parseInt(date1_filter_2)){
                        Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter+k+"2359" + "' ", null);
                        if (cursor1.moveToFirst()) {
                            val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a4 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor1.close();
                    }else {
                        if (k != Integer.parseInt(date2_filter_2)){
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter+k+"0000" + "' AND datetimee_new <='" + date1_filter+k+"2359" + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a5 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }else {
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter+k+"0000" + "' AND datetimee_new <='" + date2 + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a6 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }
                    }
                }else {
                    if (k == Integer.parseInt(date1_filter_2)){
                        Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date1_filter+"0"+k+"2359" + "' ", null);
                        if (cursor1.moveToFirst()) {
                            val = cursor1.getFloat(0);
//                            Toast.makeText(getActivity(), "a71 "+date1, Toast.LENGTH_LONG).show();
//                            Toast.makeText(getActivity(), "a71 "+date1_filter+"0"+k+"2359", Toast.LENGTH_LONG).show();
//
                            yVals1.add(new BarEntry(k, val));
//                            Toast.makeText(getActivity(), "a7 " + k + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(k, 0));
                        }
                        cursor1.close();
                    }else {
                        if (k != Integer.parseInt(date2_filter_2)){
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter+"0"+k+"0000" + "' AND datetimee_new <='" + date1_filter+"0"+k+"2359" + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a8 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }else {
                            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1_filter+"0"+k+"0000" + "' AND datetimee_new <='" + date2 + "' ", null);
                            if (cursor11.moveToFirst()) {
                                val = cursor11.getFloat(0);
//                                Toast.makeText(getActivity(), "a91 "+date1_filter+"0"+k+"0000", Toast.LENGTH_LONG).show();
//                                Toast.makeText(getActivity(), "a91 "+date2, Toast.LENGTH_LONG).show();
//
                                yVals1.add(new BarEntry(k, val));
//                                Toast.makeText(getActivity(), "a9 " + k + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(k, 0));
                            }
                            cursor11.close();
                        }
                    }
                }
            }

        }


        BarDataSet set1;

        if (mChart.getData() != null &&
                mChart.getData().getDataSetCount() > 0) {
            set1 = (BarDataSet) mChart.getData().getDataSetByIndex(0);
            set1.setValues(yVals1);
            mChart.getData().notifyDataChanged();
            mChart.notifyDataSetChanged();
        } else {
            set1 = new BarDataSet(yVals1, getString(R.string.time_vs_sale));
            set1.setColor(Color.rgb(46, 204, 113));

            ArrayList<IBarDataSet> dataSets = new ArrayList<IBarDataSet>();
            dataSets.add(set1);

            BarData data = new BarData(dataSets);
            data.setValueTextSize(10f);
//            data.setValueTypeface(mTfLight);
            data.setBarWidth(0.2f);

            mChart.setData(data);
            mChart.invalidate();
        }
    }

    private void setData_day(int count, float range) {
        float start = 1f;

        yVals1 = new ArrayList<BarEntry>();


//        DownloadMusicfromInternet_g downloadMusicfromInternet = new DownloadMusicfromInternet_g();
//        downloadMusicfromInternet.execute(editText1.getText().toString() + editText2.getText().toString());

        String date1_filter = date1.substring(0, 8);


        date1_end = date1.substring(8, 10);
        date2_end = date2.substring(8, 10);

        date1_end1 = date1.substring(10, 12);
        date2_end1 = date2.substring(10, 12);

        int diff = Integer.parseInt(date2_end) - Integer.parseInt(date1_end);

        for (int j = Integer.parseInt(date1_end); j <= Integer.parseInt(date2_end); j++) {
            date1_end = String.valueOf(j);
//            Toast.makeText(getActivity(), "j " +j, Toast.LENGTH_LONG).show();
//                Toast.makeText(getActivity(), "date1_end " +date1_end, Toast.LENGTH_LONG).show();

            if (date1_end.equals("00") || date1_end.equals("0")) {
                i1 = 1;
            }
            if (date1_end.equals("01") || date1_end.equals("1")) {
                i1 = 2;
            }
            if (date1_end.equals("02") || date1_end.equals("2")) {
                i1 = 3;
            }
            if (date1_end.equals("03") || date1_end.equals("3")) {
                i1 = 4;
            }
            if (date1_end.equals("04") || date1_end.equals("4")) {
                i1 = 5;
            }
            if (date1_end.equals("05") || date1_end.equals("5")) {
                i1 = 6;
            }
            if (date1_end.equals("06") || date1_end.equals("6")) {
                i1 = 7;
            }
            if (date1_end.equals("07") || date1_end.equals("7")) {
                i1 = 8;
            }
            if (date1_end.equals("08") || date1_end.equals("8")) {
                i1 = 9;
            }
            if (date1_end.equals("09") || date1_end.equals("9")) {
                i1 = 10;
            }
            if (date1_end.equals("10")) {
                i1 = 11;
            }
            if (date1_end.equals("11")) {
                i1 = 12;
            }
            if (date1_end.equals("12")) {
                i1 = 13;
            }
            if (date1_end.equals("13")) {
                i1 = 14;
            }
            if (date1_end.equals("14")) {
                i1 = 15;
            }
            if (date1_end.equals("15")) {
                i1 = 16;
            }
            if (date1_end.equals("16")) {
                i1 = 17;
            }
            if (date1_end.equals("17")) {
                i1 = 18;
            }
            if (date1_end.equals("18")) {
                i1 = 19;
            }
            if (date1_end.equals("19")) {
                i1 = 21;
            }
            if (date1_end.equals("20")) {
                i1 = 21;
            }
            if (date1_end.equals("21")) {
                i1 = 22;
            }
            if (date1_end.equals("22")) {
                i1 = 23;
            }
            if (date1_end.equals("23")) {
                i1 = 24;
            }

            if (j == 9) {
                if ((j + 1) > Integer.parseInt(date2_end)) {
                    String date1 = date1_filter + "0" + j + date1_end1;
                    String date2 = date1_filter + (j) + date2_end1;

                    Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date2 + "' ", null);
                    if (cursor1.moveToFirst()) {
                        val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
                        if (j <= i1) {
                            yVals1.add(new BarEntry(j, val));
//                                Toast.makeText(getActivity(), "a1 " + j + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(j, 0));
                        }
                    } else {
                        yVals1.add(new BarEntry(j, 0));
                    }
                    cursor1.close();
                } else {
                    String date1 = date1_filter + "0" + j + date1_end1;
                    String date2 = date1_filter + (j + 1) + "00";

//                    Toast.makeText(getActivity(), "date11 " + date1_filter, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "date11 " + date1_filter, Toast.LENGTH_LONG).show();
//
//                    Toast.makeText(getActivity(), "datea " + j, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "datea " + j, Toast.LENGTH_LONG).show();
//
//                    Toast.makeText(getActivity(), "dateb " + date1_end1, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "dateb " + date1_end1, Toast.LENGTH_LONG).show();
//
//                    Toast.makeText(getActivity(), "date11 " + date1_filter, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "date11 " + date1_filter, Toast.LENGTH_LONG).show();
//
//                    Toast.makeText(getActivity(), "datea " + j+1, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "datea " + j+1, Toast.LENGTH_LONG).show();
//
//                    Toast.makeText(getActivity(), "dateb " + date1_end1, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "dateb " + date1_end1, Toast.LENGTH_LONG).show();
//
//                    Toast.makeText(getActivity(), "datec " + date1, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "datec " + date1, Toast.LENGTH_LONG).show();
//
//                    Toast.makeText(getActivity(), "dated " + date2, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "dated " + date2, Toast.LENGTH_LONG).show();

                    Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date2 + "' ", null);
                    if (cursor1.moveToFirst()) {
                        val = cursor1.getFloat(0);
//                        Toast.makeText(getActivity(), "a1 "+i, Toast.LENGTH_LONG).show();
//                    Toast.makeText(getActivity(), "2 "+date2, Toast.LENGTH_LONG).show();
                        if (j <= i1) {
                            yVals1.add(new BarEntry(j, val));
//                                Toast.makeText(getActivity(), "a1 " + j + " val " + val, Toast.LENGTH_LONG).show();
                        } else {
                            yVals1.add(new BarEntry(j, 0));
                        }
                    } else {
                        yVals1.add(new BarEntry(j, 0));
                    }
                    cursor1.close();
                }

            } else {
                if (j >= 10) {
                    if ((j + 1) > Integer.parseInt(date2_end)) {
                        String date1 = date1_filter + j + date1_end1;
                        String date2 = date1_filter + (j) + date2_end1;
//                            Toast.makeText(getActivity(), "datea1 " + date1, Toast.LENGTH_LONG).show();
//                            Toast.makeText(getActivity(), "datea2 " + date2, Toast.LENGTH_LONG).show();
                        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date2 + "' ", null);
                        if (cursor11.moveToFirst()) {
                            val = cursor11.getFloat(0);
//                            Toast.makeText(getActivity(), "a2 " + j+" "+val, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "2 " + date2, Toast.LENGTH_LONG).show();
                            if (j <= i1) {
                                yVals1.add(new BarEntry(j, val));
//                                    Toast.makeText(getActivity(), "a2 " + j + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(j, 0));
                            }
                        } else {
                            yVals1.add(new BarEntry(j, 0));
                        }
                        cursor11.close();
                    } else {
                        String date1 = date1_filter + j + date1_end1;
                        String date2 = date1_filter + (j + 1) + "00";
//                            Toast.makeText(getActivity(), "date1 " + date1, Toast.LENGTH_LONG).show();
//                            Toast.makeText(getActivity(), "date2 " + date2, Toast.LENGTH_LONG).show();
                        Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date2 + "' ", null);
                        if (cursor11.moveToFirst()) {
                            val = cursor11.getFloat(0);
//                            Toast.makeText(getActivity(), "a2 " + j+" "+val, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "2 " + date2, Toast.LENGTH_LONG).show();
                            if (j <= i1) {
                                yVals1.add(new BarEntry(j, val));
//                                    Toast.makeText(getActivity(), "a2 " + j + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(j, 0));
                            }
                        } else {
                            yVals1.add(new BarEntry(j, 0));
                        }
                        cursor11.close();
                    }
                } else {
                    if ((j + 1) > Integer.parseInt(date2_end)) {
                        String date1 = date1_filter + "0" + j + date1_end1;
                        String date2 = date1_filter + "0" + (j) + date2_end1;
//                            Toast.makeText(getActivity(), "date111 " + date1, Toast.LENGTH_LONG).show();
//                            Toast.makeText(getActivity(), "date222 " + date2, Toast.LENGTH_LONG).show();
                        Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date2 + "' ", null);
                        if (cursor1.moveToFirst()) {
                            val = cursor1.getFloat(0);
//                            Toast.makeText(getActivity(), "a3 " + i, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "2 " + date2, Toast.LENGTH_LONG).show();
//                                if (j <= i1) {
                            yVals1.add(new BarEntry(j, val));
//                                Toast.makeText(getActivity(), "a3 " + j + " val " + val, Toast.LENGTH_LONG).show();
//                                } else {
//                                    yVals1.add(new BarEntry(j, 0));
//                                }
                        } else {
                            yVals1.add(new BarEntry(j, 0));
                        }
                        cursor1.close();
                    } else {
                        String date1 = date1_filter + "0" + j + date1_end1;
                        String date2 = date1_filter + "0" + (j + 1) + "00";

//                            Toast.makeText(getActivity(), "date11 " + date1_filter, Toast.LENGTH_LONG).show();
//                            Toast.makeText(getActivity(), "date11 " + date1_filter, Toast.LENGTH_LONG).show();
//
//                        Toast.makeText(getActivity(), "datea " + j, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "datea " + j, Toast.LENGTH_LONG).show();
//
//                        Toast.makeText(getActivity(), "dateb " + date1_end1, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "dateb " + date1_end1, Toast.LENGTH_LONG).show();
//
//                        Toast.makeText(getActivity(), "date11 " + date1_filter, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "date11 " + date1_filter, Toast.LENGTH_LONG).show();
//
//                        Toast.makeText(getActivity(), "datea " + j+1, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "datea " + j+1, Toast.LENGTH_LONG).show();
//
//                        Toast.makeText(getActivity(), "dateb " + date1_end1, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "dateb " + date1_end1, Toast.LENGTH_LONG).show();
//
//                        Toast.makeText(getActivity(), "datec " + date1, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "datec " + date1, Toast.LENGTH_LONG).show();
//
//                        Toast.makeText(getActivity(), "dated " + date2, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "dated " + date2, Toast.LENGTH_LONG).show();

                        Cursor cursor1 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + date1 + "' AND datetimee_new <='" + date2 + "' ", null);
                        if (cursor1.moveToFirst()) {
                            val = cursor1.getFloat(0);
//                            Toast.makeText(getActivity(), "a3 " + i, Toast.LENGTH_LONG).show();
//                        Toast.makeText(getActivity(), "2 " + date2, Toast.LENGTH_LONG).show();
                            if (j <= i1) {
                                yVals1.add(new BarEntry(j, val));
//                                    Toast.makeText(getActivity(), "a3 " + j + " val " + val, Toast.LENGTH_LONG).show();
                            } else {
                                yVals1.add(new BarEntry(j, 0));
                            }
                        } else {
                            yVals1.add(new BarEntry(j, 0));
                        }
                        cursor1.close();
                    }

                }
            }

        }


        BarDataSet set1;

        if (mChart.getData() != null &&
                mChart.getData().getDataSetCount() > 0) {
            set1 = (BarDataSet) mChart.getData().getDataSetByIndex(0);
            set1.setValues(yVals1);
            mChart.getData().notifyDataChanged();
            mChart.notifyDataSetChanged();
        } else {
            set1 = new BarDataSet(yVals1, getString(R.string.time_vs_sale));
            set1.setColor(Color.rgb(46, 204, 113));

            ArrayList<IBarDataSet> dataSets = new ArrayList<IBarDataSet>();
            dataSets.add(set1);

            BarData data = new BarData(dataSets);
            data.setValueTextSize(10f);
//                data.setValueTypeface(mTfLight);
            data.setBarWidth(0.2f);

            mChart.setData(data);
            mChart.invalidate();
        }
    }


    protected RectF mOnValueSelectedRectF = new RectF();


    @Override
    public void onValueSelected(Entry e, Highlight h) {

        if (e == null)
            return;

        RectF bounds = mOnValueSelectedRectF;
        mChart.getBarBounds((BarEntry) e, bounds);
        MPPointF position = mChart.getPosition(e, YAxis.AxisDependency.LEFT);

        Log.i("bounds", bounds.toString());
        Log.i("position", position.toString());

        Log.i("x-index",
                "low: " + mChart.getLowestVisibleX() + ", high: "
                        + mChart.getHighestVisibleX());

        MPPointF.recycleInstance(position);
    }

    @Override
    public void onNothingSelected() { }


    private boolean runPrintCouponSequence() {
        if (!initializeObject()) {
            return false;
        }

        if (!createCouponData()) {
            finalizeObject();
            return false;
        }

        if (!printData()) {
            finalizeObject();
            return false;
        }

        return true;
    }

    private boolean initializeObject() {
        try {
            mPrinter = new com.epson.epos2.printer.Printer(((SpnModelsItem) mSpnSeries.getSelectedItem()).getModelConstant(),
                    ((SpnModelsItem) mSpnLang.getSelectedItem()).getModelConstant(),
                    mContext);
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here3", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "Printer", mContext);
            return false;
        }

        mPrinter.setReceiveEventListener(this);

        return true;
    }

    private void finalizeObject() {
        if (mPrinter == null) {
            return;
        }

        mPrinter.clearCommandBuffer();

        mPrinter.setReceiveEventListener(null);

        mPrinter = null;
    }

    @Override
    public void onPtrReceive(final com.epson.epos2.printer.Printer printerObj, final int code, final PrinterStatusInfo status, final String printJobId) {
        getActivity().runOnUiThread(new Runnable() {
            @Override
            public synchronized void run() {
                ShowMsg.showResult(code, makeErrorMessage(status), mContext);

                dispPrinterWarnings(status);

//                updateButtonState(true);

                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        disconnectPrinter();
                    }
                }).start();
            }
        });
    }

    private String makeErrorMessage(PrinterStatusInfo status) {
        String msg = "";

        if (status.getOnline() == com.epson.epos2.printer.Printer.FALSE) {
            msg += getString(R.string.handlingmsg_err_offline);
        }
        if (status.getConnection() == com.epson.epos2.printer.Printer.FALSE) {
            msg += getString(R.string.handlingmsg_err_no_response);
        }
        if (status.getCoverOpen() == com.epson.epos2.printer.Printer.TRUE) {
            msg += getString(R.string.handlingmsg_err_cover_open);
        }
        if (status.getPaper() == com.epson.epos2.printer.Printer.PAPER_EMPTY) {
            msg += getString(R.string.handlingmsg_err_receipt_end);
        }
        if (status.getPaperFeed() == com.epson.epos2.printer.Printer.TRUE || status.getPanelSwitch() == com.epson.epos2.printer.Printer.SWITCH_ON) {
            msg += getString(R.string.handlingmsg_err_paper_feed);
        }
        if (status.getErrorStatus() == com.epson.epos2.printer.Printer.MECHANICAL_ERR || status.getErrorStatus() == com.epson.epos2.printer.Printer.AUTOCUTTER_ERR) {
            msg += getString(R.string.handlingmsg_err_autocutter);
            msg += getString(R.string.handlingmsg_err_need_recover);
        }
        if (status.getErrorStatus() == com.epson.epos2.printer.Printer.UNRECOVER_ERR) {
            msg += getString(R.string.handlingmsg_err_unrecover);
        }
        if (status.getErrorStatus() == com.epson.epos2.printer.Printer.AUTORECOVER_ERR) {
            if (status.getAutoRecoverError() == com.epson.epos2.printer.Printer.HEAD_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_head);
            }
            if (status.getAutoRecoverError() == com.epson.epos2.printer.Printer.MOTOR_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_motor);
            }
            if (status.getAutoRecoverError() == com.epson.epos2.printer.Printer.BATTERY_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_battery);
            }
            if (status.getAutoRecoverError() == com.epson.epos2.printer.Printer.WRONG_PAPER) {
                msg += getString(R.string.handlingmsg_err_wrong_paper);
            }
        }
        if (status.getBatteryLevel() == com.epson.epos2.printer.Printer.BATTERY_LEVEL_0) {
            msg += getString(R.string.handlingmsg_err_battery_real_end);
        }

        return msg;
    }

    private void dispPrinterWarnings(PrinterStatusInfo status) {
//        EditText edtWarnings = (EditText) findViewById(R.id.edtWarnings);
        String warningsMsg = "";

        if (status == null) {
            return;
        }

        if (status.getPaper() == com.epson.epos2.printer.Printer.PAPER_NEAR_END) {
            warningsMsg += getString(R.string.handlingmsg_warn_receipt_near_end);
        }

        if (status.getBatteryLevel() == com.epson.epos2.printer.Printer.BATTERY_LEVEL_1) {
            warningsMsg += getString(R.string.handlingmsg_warn_battery_near_end);
        }

//        edtWarnings.setText(warningsMsg);
    }

    private void disconnectPrinter() {
        if (mPrinter == null) {
            return;
        }

        try {
            mPrinter.endTransaction();
        } catch (final Exception e) {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public synchronized void run() {
//                    Toast.makeText(getActivity(), "Here6", Toast.LENGTH_SHORT).show();
                    ShowMsg.showException(e, "endTransaction", mContext);
                }
            });
        }

        try {
            mPrinter.disconnect();
        } catch (final Exception e) {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public synchronized void run() {
//                    Toast.makeText(getActivity(), "Here7", Toast.LENGTH_SHORT).show();
                    ShowMsg.showException(e, "disconnect", mContext);
                }
            });
        }

        finalizeObject();
    }

    private boolean printData() {
        if (mPrinter == null) {
            return false;
        }

        if (!connectPrinter()) {
            return false;
        }

        PrinterStatusInfo status = mPrinter.getStatus();

        dispPrinterWarnings(status);

        if (!isPrintable(status)) {
            ShowMsg.showMsg(makeErrorMessage(status), mContext);
            try {
                mPrinter.disconnect();
            } catch (Exception ex) {
//                Toast.makeText(getActivity(), "Here9", Toast.LENGTH_SHORT).show();
                // Do nothing
            }
            return false;
        }

        try {
            mPrinter.sendData(com.epson.epos2.printer.Printer.PARAM_DEFAULT);
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here10", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "sendData", mContext);
            try {
                mPrinter.disconnect();
            } catch (Exception ex) {
//                Toast.makeText(getActivity(), "Here11", Toast.LENGTH_SHORT).show();
                // Do nothing
            }
            return false;
        }

        return true;
    }

    private boolean isPrintable(PrinterStatusInfo status) {
        if (status == null) {
            return false;
        }

        if (status.getConnection() == com.epson.epos2.printer.Printer.FALSE) {
            return false;
        } else if (status.getOnline() == com.epson.epos2.printer.Printer.FALSE) {
            return false;
        } else {
            ;//print available
        }

        return true;
    }

    private boolean connectPrinter() {
        boolean isBeginTransaction = false;

        if (mPrinter == null) {
            return false;
        }

        try {
            mPrinter.connect(mEditTarget.getText().toString(), com.epson.epos2.printer.Printer.PARAM_DEFAULT);
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here4", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "connect", mContext);
            return false;
        }

        try {
            mPrinter.beginTransaction();
            isBeginTransaction = true;
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here12", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "beginTransaction", mContext);
        }

        if (isBeginTransaction == false) {
            try {
                mPrinter.disconnect();
            } catch (Epos2Exception e) {
//                Toast.makeText(getActivity(), "Here5", Toast.LENGTH_SHORT).show();
                // Do nothing
                return false;
            }
        }

        return true;
    }

    private boolean createCouponData() {

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor getprint_type = db1.rawQuery("SELECT * FROM Printer_text_size", null);
        if (getprint_type.moveToFirst()) {
            String type = getprint_type.getString(1);

            Cursor cc = db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

            if (cc.moveToFirst()) {
                cc.moveToFirst();
                do {
                    NAME = cc.getString(1);
                    if (NAME.equals("3 inch")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x08, 0x20, 0x29, 0x00};//4 tabs 3"
                        setHTKOT = new byte[]{0x1b, 0x44, 0x06, 0x00};//2 tabs 3"
                        feedcut2 = new byte[]{0x1b, 0x64, 0x05, 0x1d, 0x56, 0x00};
                        nPaperWidth = 576;
                        charlength = 41;
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    } else {

                        Cursor print_ty = db1.rawQuery("SELECT * FROM Printer_type", null);
                        if (print_ty.moveToFirst()){
                            str_print_ty = print_ty.getString(1);
                        }
                        if (str_print_ty.equals("Generic")) {
//                            Toast.makeText(getActivity(), "phi", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x04, 0x12, 0x19, 0x00};//4 tabs 2"
                            setHTKOT = new byte[]{0x1b, 0x44, 0x06, 0x00};//2 tabs 2"
                            feedcut2 = new byte[]{0x1b, 0x64, 0x03, 0x1d, 0x56, 0x00};
                            nPaperWidth = 384;
                            charlength = 25;
                            str_line = "--------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "--------------------------------".getBytes(), LF
                            };
                        }else {
//                            Toast.makeText(getActivity(), "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            setHTKOT = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                            feedcut2 = new byte[]{0x1b, 0x64, 0x03, 0x1d, 0x56, 0x00};
                            nPaperWidth = 384;
                            charlength = 28;
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }
                        print_ty.close();
                    }
                } while (cc.moveToNext());
            }
            cc.close();

        }
        getprint_type.close();

//        final int barcodeWidth = 2;
//        final int barcodeHeight = 64;
        final int pageAreaHeight = 384;
        final int pageAreaWidth = 384;
//        final int fontAHeight = 24;
//        final int fontAWidth = 12;
//        final int barcodeWidthPos = 110;
//        final int barcodeHeightPos = 70;

        ArrayList<byte[]> list = new ArrayList<byte[]>();
        String method = "";
        String[] col = {"companylogo"};
        Cursor c = db1.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
//            logoData = BitmapFactory.decodeByteArray(img, 0, img.length);
        }
        c.close();

//        String method = "";
//        Bitmap coffeeData = BitmapFactory.decodeResource(getResources(), R.drawable.coffee);
//        Bitmap wmarkData = BitmapFactory.decodeResource(getResources(), R.drawable.wmark);

        if (mPrinter == null) {
            return false;
        }
        try {
//            method = "addPageBegin";
//            mPrinter.addPageBegin();

            method = "addPageArea";
            mPrinter.addPageArea(0, 0, nPaperWidth, pageAreaHeight);

            method = "addPageDirection";
            mPrinter.addPageDirection(Printer.DIRECTION_TOP_TO_BOTTOM);


//            method = "addPagePosition";
//            mPrinter.addPagePosition(0, wmarkData.getHeight());
//            mPrinter.addPagePosition(0, logoData.getScaledHeight(0));

//            method = "addImage";
//            mPrinter.addImage(wmarkData, 0, 0, wmarkData.getWidth(), wmarkData.getHeight(),
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT,
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
//Free coffee text

//            method = "addTextSize";
//            mPrinter.addTextSize(3, 3);
//            method = "addTextStyle";
//            mPrinter.addTextStyle(Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.TRUE, Printer.PARAM_DEFAULT);
//            method = "addTextSmooth";
//            mPrinter.addTextSmooth(Printer.TRUE);
//            method = "addText";
//            mPrinter.addText("FREE Coffee\n");


            method = "addPagePosition";
            mPrinter.addTextAlign(Printer.ALIGN_LEFT);
            //method = "addImage";

            Cursor connnet = db1.rawQuery("SELECT * FROM IPConn", null);
            if (connnet.moveToFirst()) {
                ipnamegets = connnet.getString(1);
                portgets = connnet.getString(2);
                statusnets = connnet.getString(3);
            }
            connnet.close();
            Cursor connusb = db1.rawQuery("SELECT * FROM BTConn", null);
            if (connusb.moveToFirst()) {
                addgets = connusb.getString(1);
                namegets = connusb.getString(2);
                statussusbs = connusb.getString(3);
            }
            connusb.close();

//            textViewstatusnets.setText(statusnet);
//            textViewstatussusbs.setText(statussusbs);

//            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
//            if (getcom.moveToFirst()) {
//                do {
//                    strcompanyname = getcom.getString(1);
//                } while (getcom.moveToNext());
//            }


            allbuf1 = new byte[][]{
                    bold, un, "Sales Overview".getBytes(), LF

            };
            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(bold);
                mPrinter.addCommand(un);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Sales Overview");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor getcom = db1.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    straddress2 = getcom.getString(17);
                    straddress3 = getcom.getString(18);
                    strphone = getcom.getString(2);
                    stremailid = getcom.getString(15);
                    strwebsite = getcom.getString(16);
                    strtaxone = getcom.getString(10);
                    strbillone = getcom.getString(12);
                } while (getcom.moveToNext());
            }
            getcom.close();


            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, un1, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(bold);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strcompanyname);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

/////////
            tvkot.setText(straddress1);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf2 = new byte[][]{
                        normal, un1, cen, straddress1.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress1);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot.setText(straddress2);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf3 = new byte[][]{
                        normal, un1, cen, straddress2.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress2);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot.setText(straddress3);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf4 = new byte[][]{
                        normal, un1, cen, straddress3.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress3);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strphone);
            String pp = "Ph. " + strphone;
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf5 = new byte[][]{
                        normal, un1, cen, pp.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(pp);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(stremailid);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf6 = new byte[][]{
                        normal, un1, cen, stremailid.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(stremailid);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strwebsite);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, un1, cen, strwebsite.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strwebsite);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strtaxone);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf8 = new byte[][]{
                        normal, un1, cen, strtaxone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strtaxone);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuf10 = new byte[][]{
                    setHT321, left, editText11.getText().toString().getBytes(), HT, "  ".getBytes(), editText22.getText().toString().getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(editText11.getText().toString());
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+editText22.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuftax = new byte[][]{
                    setHT321, left, editText_from_day_visible.getText().toString().getBytes(), HT, "  ".getBytes(), editText_to_day_visible.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(editText_from_day_visible.getText().toString());
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+editText_to_day_visible.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }


            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            ////include gross sales view


            TextView refunds = new TextView(getActivity());
            TextView discount = new TextView(getActivity());
            TextView tax = new TextView(getActivity());
            TextView gross_sale = new TextView(getActivity());
            TextView amount_before_tax = new TextView(getActivity());
            TextView amount_after_tax = new TextView(getActivity());
            TextView tax_amount = new TextView(getActivity());

            Cursor cursor = db.rawQuery("SELECT SUM(subtotal) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor.moveToFirst()) {
                float s = cursor.getFloat(0);
                sub_total = String.format(Locale.US,"%.1f", s);
            }
            cursor.close();

            Cursor summ = db.rawQuery("SELECT SUM(refund) FROM Cancelwiseorderlistitems", null);
            float sum1 = 0;
            if (summ.moveToFirst()) {
                do {
                    float sumlevel = summ.getFloat(0);
                    refund_total = String.valueOf(sumlevel);
                    //Toast.makeText(getActivity(), " total is "+max, Toast.LENGTH_SHORT).show();
                } while (summ.moveToNext());

            }
            summ.close();
            refunds.setText(refund_total);


            Cursor ccursor11 = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "'", null);
            if (ccursor11.moveToFirst()) {
                level = ccursor11.getInt(0);
                disc_total = String.valueOf(level);
                discount.setText(disc_total);
            }
            ccursor11.close();


            float taxtot = 0, tot1 = 0;
            Cursor cursor2 = db.rawQuery("SELECT SUM(taxtotal) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "'", null);
            if (cursor2.moveToFirst()) {
                taxtot = cursor2.getFloat(0);
                tax_total = String.format(Locale.US,"%.0f",taxtot);
//            Toast.makeText(getActivity(), "taxtotal "+tot, Toast.LENGTH_LONG).show();
            }
            cursor2.close();
            tax_amount.setText(tax_total);

            float five = 0;
            Cursor cursor3 = db.rawQuery("SELECT * FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "'", null);
            if (cursor3.moveToFirst()) {
                do {
                    String two = cursor3.getString(9);

                    if (two.contains("+")) {
                        if (two.contains("+")) {
                            two = two.replace("+ ", "");
                            five = five + Float.parseFloat(two);
//                                Toast.makeText(getActivity(), "+ "+five, Toast.LENGTH_LONG).show();
                        }

                    } else {
                        if (two.contains("-")) {
                            two = two.replace("- ", "");
                            five = five - Float.parseFloat(two);
//                                Toast.makeText(getActivity(), "- "+five, Toast.LENGTH_LONG).show();
                        }
                    }

                } while (cursor3.moveToNext());
            }
            cursor3.close();
//        Toast.makeText(getActivity(), "five "+five, Toast.LENGTH_LONG).show();

            Cursor cursor4 = db.rawQuery("SELECT SUM(globaltaxtotal) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "'", null);
            if (cursor4.moveToFirst()) {
                tot1 = cursor4.getFloat(0);
//            Toast.makeText(getActivity(), "taxtotal "+tot1, Toast.LENGTH_LONG).show();
            }
            cursor4.close();

            float fi = taxtot + five;
//        Toast.makeText(getActivity(), "fi "+fi, Toast.LENGTH_LONG).show();

            tax.setText(String.valueOf(fi));

            float nm = Float.parseFloat(total) + Float.parseFloat(refund_total) + Float.parseFloat(disc_total);
            gross_total = String.format(Locale.US,"%.0f", nm);
            gross_sale.setText(gross_total);

            Float amout_notax = Float.parseFloat(total) - Float.parseFloat(tax_total);
            String amount_notax = String.format(Locale.US,"%.0f", amout_notax);
            amount_before_tax.setText(amount_notax);

            Cursor cursor11a = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor11a.moveToFirst()) {
                level = cursor11a.getInt(0);
                total = String.valueOf(level);
                amount_after_tax.setText(total);
            }
            cursor11a.close();


            allbuf10 = new byte[][]{
                    setHT321, left, "Gross sales".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), gross_total.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Gross sales");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+insert1_rs+""+gross_sale.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuf10 = new byte[][]{
                    setHT321, left, "(-)Refunds".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), refund_total.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("(-)Refunds");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+insert1_rs+""+refunds.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuf10 = new byte[][]{
                    setHT321, left, "(-)Discount".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), disc_total.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("(-)Discount");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+insert1_rs+""+discount.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Sales(net)".getBytes(), HT, "| ".getBytes(), "No. of bills".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Sales(net)");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+"No. of bills");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor cursor11 = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (cursor11.moveToFirst()) {
                level = cursor11.getInt(0);
                total = String.valueOf(level);
            }
            cursor11.close();

            Cursor count = db.rawQuery("SELECT COUNT(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (count.moveToFirst()) {
                level = count.getInt(0);
                total1 = String.valueOf(level);
            }
            count.close();
            avgbill = String.valueOf(Integer.parseInt(total) / Integer.parseInt(total1));

            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), total.getBytes(), HT, "| ".getBytes(), noofbills.getText().toString().getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(insert1_rs+""+total);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+noofbills.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuf10 = new byte[][]{
                    setHT321, left, "(-)Tax".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), tax_total.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("(-)Tax");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+insert1_rs+""+tax_amount.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuf10 = new byte[][]{
                    setHT321, left, "Net sales".getBytes(), HT, "  ".getBytes(), "Rs.".getBytes(), amount_before_tax.getText().toString().getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Net sales");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+insert1_rs+""+amount_before_tax.getText().toString());
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuf10 = new byte[][]{
                    setHT321, left, "(after tax)".getBytes(), HT, "  ".getBytes(), "".getBytes(), "".getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("(after tax)");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+""+"");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Avg. Sales".getBytes(), HT, "| ".getBytes(), "Cash Sales".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Avg. Sales");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+"Cash Sales");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }


            Cursor cashcardcash = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND paymentmethod = '  Cash' ", null);
            if (cashcardcash.moveToFirst()) {
                level111 = cashcardcash.getInt(0);
                total111 = String.valueOf(level111);
            }
            cashcardcash.close();

            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), avgbill.getBytes(), HT, "| ".getBytes(), "Rs.".getBytes(), total111.getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(insert1_rs+""+avgbill);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+insert1_rs+""+total111);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Card Sales".getBytes(), HT, "| ".getBytes(), "General".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Avg. Sales");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+"General");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }


            Cursor cashcardcard = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND paymentmethod = '  Card' ", null);
            if (cashcardcard.moveToFirst()) {
                level111card = cashcardcard.getInt(0);
                total111card = String.valueOf(level111card);
            }
            cashcardcard.close();

            final Cursor paytm= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Paytm' ", null);
            if (paytm.moveToFirst()) {
                level111paytm = paytm.getInt(0);
                total111paytm = String.valueOf(level111paytm);
            }
            paytm.close();
            final Cursor mobikwik= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Mobikwik' ", null);
            if (mobikwik.moveToFirst()) {
                level111mobi = mobikwik.getInt(0);
                total111mobi = String.valueOf(level111mobi);
            }
            mobikwik.close();
            final Cursor freecharge= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Freecharge' ", null);
            if (freecharge.moveToFirst()) {
                level111free = freecharge.getInt(0);
                total111free = String.valueOf(level111free);
            }
            freecharge.close();
            final Cursor sodexo= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Sodexo' ", null);
            if (sodexo.moveToFirst()) {
                level111sodexo = sodexo.getInt(0);
                total111sodexo = String.valueOf(level111sodexo);
            }
            sodexo.close();
            final Cursor zeta= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Zeta' ", null);
            if (zeta.moveToFirst()) {
                level111zeta = zeta.getInt(0);
                total111zeta = String.valueOf(level111zeta);
            }
            zeta.close();
            final Cursor ticket= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Ticket' ", null);
            if (ticket.moveToFirst()) {
                level111ticket = ticket.getInt(0);
                total111ticket = String.valueOf(level111ticket);
            }
            ticket.close();
            final Cursor cheque= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Cheque' ", null);
            if (cheque.moveToFirst()) {
                level111cheq = cheque.getInt(0);
                total111cheq = String.valueOf(level111cheq);
            }
            cheque.close();

            final Cursor credit= db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '"+editText1_filter.getText().toString()+"' AND datetimee_new <='"+editText2_filter.getText().toString()+"' AND paymentmethod = '  Pay Later' ", null);
            if (credit.moveToFirst()) {
                level111cred = credit.getInt(0);
                total111credit = String.valueOf(level111cred);
            }
            credit.close();
            //Cheque above

            Cursor dinein = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND billtype = '  General' ", null);
            if (dinein.moveToFirst()) {
                dineinsales = dinein.getInt(0);
                dineinsalesstr = String.valueOf(dineinsales);
            }
            dinein.close();


            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), total111card.getBytes(), HT, "| ".getBytes(), "Rs.".getBytes(), dineinsalesstr.getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(insert1_rs+""+total111card);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+insert1_rs+""+dineinsalesstr);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuftax = new byte[][]{
                    setHT321, left, "Take away".getBytes(), HT, "| ".getBytes(), "Home delivery".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Take away");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+"Home delivery");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }


            Cursor takeaway = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND billtype = '  Takeaway' ", null);
            if (takeaway.moveToFirst()) {
                takeawaysales = takeaway.getInt(0);
                takeawaysalesstr = String.valueOf(takeawaysales);
            }
            takeaway.close();

            Cursor homedelivery = db.rawQuery("SELECT SUM(total) FROM Billnumber WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND billtype = '  Home delivery' ", null);
            if (homedelivery.moveToFirst()) {
                homedeliverysales = homedelivery.getInt(0);
                homedeliverysalesstr = String.valueOf(homedeliverysales);
            }
            homedelivery.close();


            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), takeawaysalesstr.getBytes(), HT, "| ".getBytes(), "Rs.".getBytes(), homedeliverysalesstr.getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(insert1_rs+""+takeawaysalesstr);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("| "+insert1_rs+""+homedeliverysalesstr);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            allbuftax = new byte[][]{
                    setHT321, left, "Pay Later".getBytes(), HT, " ".getBytes(), "".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Pay Later");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+"");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }


            TextView refundamount11 = new TextView(getActivity());
            Cursor refundam = db.rawQuery("Select DISTINCT * from All_Sales_Cancelled WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <= '" + editText2_filter.getText().toString() + "' GROUP BY time, date ", null);
            if (refundam.moveToFirst()) {
                refundedstr = refundam.getString(17);
                refundamount11.setText(refundedstr);
            } else {
                refundamount11.setText("0");
            }
            refundam.close();

            Cursor discountcashcard = db.rawQuery("SELECT SUM(Discount_rupees) FROM Discountdetails WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' ", null);
            if (discountcashcard.moveToFirst()) {
                level1 = discountcashcard.getInt(0);
                total11 = String.valueOf(level1);
            }
            discountcashcard.close();

            String hi = "0";
            Cursor creditsales = db.rawQuery("SELECT SUM(credit) FROM Customerdetails WHERE datetimee_new >= '" + editText1_filter.getText().toString() + "' AND datetimee_new <='" + editText2_filter.getText().toString() + "' AND credit != ''", null);
            if (creditsales.moveToFirst()) {
                int homedeliverysales = creditsales.getInt(0);
                hi = String.valueOf(homedeliverysales);
            }
            creditsales.close();

            allbuftax = new byte[][]{
                    setHT321, left, "Rs.".getBytes(), hi.getBytes(), HT, " ".getBytes(), "".getBytes(), "".getBytes(), LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(insert1_rs+""+hi);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+""+"");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Top 3 customers".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Top 3 customers");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }

            String pho1 = null, string_top1 = null;
            Cursor top1 = db.rawQuery("SELECT MAX(total_amount) FROM Cusotmer_activity_temp_top3", null);
            if (top1.moveToFirst()) {
                pho1 = top1.getString(0);
            }
            top1.close();

            Cursor name1 = db.rawQuery("SELECT * FROM Cusotmer_activity_temp_top3 WHERE total_amount = '" + pho1 + "'", null);
            if (name1.moveToFirst()) {
                string_top1 = name1.getString(1);
            }
            name1.close();

            String pho2 = null, string_top2 = null;
            Cursor top2 = db.rawQuery("SELECT MAX(total_amount) FROM Cusotmer_activity_temp_top3 WHERE total_amount < '" + pho1 + "'", null);
            if (top2.moveToFirst()) {
                pho2 = top2.getString(0);
            }
            top2.close();

            Cursor name2 = db.rawQuery("SELECT * FROM Cusotmer_activity_temp_top3 WHERE total_amount = '" + pho2 + "'", null);
            if (name2.moveToFirst()) {
                string_top2 = name2.getString(1);
            }
            name2.close();

            String pho3 = null, string_top3 = null;
            Cursor top3 = db.rawQuery("SELECT MAX(total_amount) FROM Cusotmer_activity_temp_top3 WHERE total_amount < '" + pho1 + "' AND total_amount < '" + pho2 + "'", null);
            if (top3.moveToFirst()) {
                pho3 = top3.getString(0);
            }
            top3.close();

            Cursor name3 = db.rawQuery("SELECT * FROM Cusotmer_activity_temp_top3 WHERE total_amount = '" + pho3 + "'", null);
            if (name3.moveToFirst()) {
                string_top3 = name3.getString(1);
            }
            name3.close();

//        Toast.makeText(getActivity(), "top1 "+pho1+" "+string_top1, Toast.LENGTH_LONG).show();
//        Toast.makeText(getActivity(), "top2 "+pho2+" "+string_top2, Toast.LENGTH_LONG).show();
//        Toast.makeText(getActivity(), "top3 "+pho3+" "+string_top3, Toast.LENGTH_LONG).show();

//        for (int i = 1; i < 4; i++){

            TextView tvkot5 = new TextView(getActivity());
            tvkot5.setText(string_top1);
            if (tvkot5.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "1.".getBytes(), string_top1.getBytes(), " - ".getBytes(), "Rs.".getBytes(), pho1.getBytes(), HT, LF
                };

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(normal);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("1."+string_top1+" - "+insert1_rs+""+pho1);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot5.setText(string_top2);
            if (tvkot5.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "2.".getBytes(), string_top2.getBytes(), " - ".getBytes(), "Rs.".getBytes(), pho2.getBytes(), HT, LF
                };

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(normal);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("2."+string_top2+" - "+insert1_rs+""+pho2);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot5.setText(string_top3);
            if (tvkot5.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "3.".getBytes(), string_top3.getBytes(), " - ".getBytes(), "Rs.".getBytes(), pho3.getBytes(), HT, LF
                };
                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(normal);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("3."+string_top3+" - "+insert1_rs+""+pho3);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    mPrinter.addCommand(LF); //LF
                }
            }


            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Top seller".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Top seller");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }


            Cursor one = db.rawQuery("SELECT MAX(total) FROM userdata ", null);
            if (one.moveToFirst()) {
                int one11 = one.getInt(0);
                one = db.rawQuery("SELECT * FROM userdata WHERE total = '" + one11 + "' ", null);
                if (one.moveToFirst()) {
                    one1 = one.getString(1);
                    pone = one.getString(1);
                    max = one.getString(2);
                    topone.setText(one1);

                    float perc = Float.parseFloat(max) * 100 / Float.parseFloat(total);
                    String percen = String.format(Locale.US,"%.1f", perc);

                    topuser1percent.setText(percen);
                    topuser1percent.append("%");

                } else {
                    topone.setText("NA");
                    topuser1percent.setText("0%");
                }
            }
            one.close();


            allbuftaxestype1 = new byte[][]{
                    left, normal, topone.getText().toString().getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(topone.getText().toString());
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }


            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Top 3 products".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Top 3 products");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }


            TextView topone = new TextView(getActivity());
            TextView toptwo = new TextView(getActivity());
            TextView topthree = new TextView(getActivity());

            String one1, two2, three3, pone;

            Cursor qone = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems ", null);
            if (qone.moveToFirst()) {
                int one11 = qone.getInt(0);
                qone = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + one11 + "' ", null);
                if (qone.moveToFirst()) {
                    String idw = qone.getString(0);
                    one1 = qone.getString(2);
                    //salesee1 = one.getString(3);
                    pone = qone.getString(4);
                    topone.setText(one1);
                    Cursor two = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems WHERE sales <= '" + one11 + "' AND itemname != '"+one1+"' ORDER BY itemname ASC ", null);
                    if (two.moveToFirst()) {
                        int two111 = two.getInt(0);
                        two = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + two111 + "' AND itemname != '"+one1+"' ", null);
                        if (two.moveToFirst()) {
                            String idw1 = two.getString(0);
                            two2 = two.getString(2);
                            toptwo.setText(two2);

                            Cursor three = db.rawQuery("SELECT MAX(sales) FROM Itemwiseorderlistitems WHERE sales <= '" + two111 + "' AND itemname != '"+two2+"' AND itemname != '"+one1+"' ORDER BY itemname ASC ", null);
                            if (three.moveToFirst()) {
                                int three11 = three.getInt(0);
                                three = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE sales = '" + three11 + "' AND itemname != '"+two2+"' AND itemname != '"+one1+"' ", null);
                                if (three.moveToFirst()) {
                                    three3 = three.getString(2);
                                    topthree.setText(three3);
                                } else {
//                                topthree.setText("NA");
                                }
                            }
                            three.close();
                        } else {
//                        toptwo.setText("NA");
                        }
                    }
                    two.close();
                } else {
//                topone.setText("NA");
                }
            }
            qone.close();

            String price1 = "0", price2 = "0", price3 = "0";
            Cursor getprice1 = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE itemname = '" + topone.getText().toString() + "'", null);
            if (getprice1.moveToFirst()) {
                price1 = getprice1.getString(3);
            }
            getprice1.close();

            Cursor getprice2 = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE itemname = '" + toptwo.getText().toString() + "'", null);
            if (getprice2.moveToFirst()) {
                price2 = getprice2.getString(3);
            }
            getprice2.close();

            Cursor getprice3 = db.rawQuery("SELECT * FROM Itemwiseorderlistitems WHERE itemname = '" + topthree.getText().toString() + "'", null);
            if (getprice3.moveToFirst()) {
                price3 = getprice3.getString(3);
            }
            getprice3.close();

            allbuftaxestype1 = new byte[][]{
                    left, normal, "1.".getBytes(), topone.getText().toString().getBytes(), " - ".getBytes(), "Rs.".getBytes(), price1.getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("1."+topone.getText().toString()+" - "+insert1_rs+""+price1);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }

            if (toptwo.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "2.".getBytes(), toptwo.getText().toString().getBytes(), " - ".getBytes(), "Rs.".getBytes(), price2.getBytes(), HT, LF
                };

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(normal);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("2."+toptwo.getText().toString()+" - "+insert1_rs+""+price2);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    mPrinter.addCommand(LF); //LF
                }
            }

            if (topthree.getText().toString().equals("")) {

            } else {
                allbuftaxestype1 = new byte[][]{
                        left, normal, "3.".getBytes(), topthree.getText().toString().getBytes(), " - ".getBytes(), "Rs.".getBytes(), price3.getBytes(), HT, LF
                };

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(normal);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("3."+topthree.getText().toString()+" - "+insert1_rs+""+price3);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    mPrinter.addCommand(LF); //LF
                }
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Outstanding till today".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Outstanding till today");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }


            String sumnew1 = "0";
            Cursor curCSV1 = db.rawQuery("SELECT SUM(balance) FROM Cusotmer_activity_temp", null);
            if (curCSV1.moveToFirst()) {
                do {
                    float aq = curCSV1.getFloat(0);
                    sumnew1 = String.valueOf(aq);
                }
                while (curCSV1.moveToNext());
            }
            curCSV1.close();

            allbuftaxestype1 = new byte[][]{
                    left, normal, "Rs.".getBytes(), sumnew1.getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(insert1_rs+""+sumnew1);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            allbuftaxestype1 = new byte[][]{
                    left, normal, "Outstanding customers".getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Outstanding customers");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }


            String sumnew11 = "0";
            Cursor curCSV11 = db.rawQuery("SELECT count(_id) FROM Cusotmer_activity_temp WHERE balance > '0.0'", null);
            if (curCSV11.moveToFirst()) {
                do {
                    float aq = curCSV11.getFloat(0);
                    sumnew11 = String.valueOf(aq);
                }
                while (curCSV11.moveToNext());
            }
            curCSV11.close();

            allbuftaxestype1 = new byte[][]{
                    left, normal, sumnew11.getBytes(), HT, LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(sumnew11);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

//            method = "addPagePosition";
//            mPrinter.addPagePosition((pageAreaWidth / barcodeWidth) - barcodeWidthPos, logoData.getHeight() + barcodeHeightPos);
//
//            method = "addBarcode";
//            mPrinter.addBarcode("01234567890", Printer.BARCODE_UPC_A, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, barcodeWidth, barcodeHeight);

            method = "addPageEnd";
            mPrinter.addPageEnd();


            Cursor cc=db1.rawQuery("SELECT * FROM Printerreceiptsize", null);

            if(cc.moveToFirst()){
                cc.moveToFirst();
                do{
                    NAME = cc.getString(1);
                    if (NAME.equals("3 inch")) {
                        feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                    }
                    else {
                        feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                    }
                }while(cc.moveToNext());
            }
            cc.close();

            byte[][] allbuf = new byte[][]{
                    feedcut2
            };
            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(feedcut2);
            }



//            method = "addCut";
//            mPrinter.addCut(Printer.CUT_FEED);
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here2", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, method, mContext);
            return false;
        }

        return true;
    }

    private void updateTime_open_dialog(int hours, int mins) {

        String timeSet = "";
        if (hours > 12) {
            hours -= 12;
            timeSet = "PM";
        } else if (hours == 0) {
            hours += 12;
            timeSet = "AM";
        } else if (hours == 12)
            timeSet = "PM";
        else
            timeSet = "AM";


        String minutes = "";
        if (mins < 10)
            minutes = "0" + mins;
        else
            minutes = String.valueOf(mins);

        String hour1 = "";
        if (hours < 10)
            hour1 = "0" + hours;
        else
            hour1 = String.valueOf(hours);


        // Append in a StringBuilder
        String aTime = new StringBuilder().append(hour1).append(':')
                .append(minutes).append(" ").append(timeSet).toString();

        editText_from_day_visible_dialog.setText(aTime);
        editText_from_day_hide_dialog.setText(aTime);
        //  editText_from_day_visible.setText(aTime);
    }

    private void updateTime_close_dialog(int hours, int mins) {

        String timeSet = "";
        if (hours > 12) {
            hours -= 12;
            timeSet = "PM";
        } else if (hours == 0) {
            hours += 12;
            timeSet = "AM";
        } else if (hours == 12)
            timeSet = "PM";
        else
            timeSet = "AM";


        String minutes = "";
        if (mins < 10)
            minutes = "0" + mins;
        else
            minutes = String.valueOf(mins);

        String hour1 = "";
        if (hours < 10)
            hour1 = "0" + hours;
        else
            hour1 = String.valueOf(hours);

        // Append in a StringBuilder
        String aTime = new StringBuilder().append(hour1).append(':')
                .append(minutes).append(" ").append(timeSet).toString();

        editText_to_day_visible_dialog.setText(aTime);
        editText_to_day_hide_dialog.setText(aTime);
        // editText_to_day_visible.setText(aTime);
    }

    class AllTimeTask extends AsyncTask<String, String, String>{
        String mon="";
        int dow;
        int day;
        int month;
        int year;
        int min;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();


            Cursor time_get = db.rawQuery("SELECT * FROM All_Sales", null);
            if (time_get.moveToFirst()) {
                String date[]=time_get.getString(13).split(" ");
                year=Integer.parseInt(date[0]);
                month=Integer.parseInt(date[1]);
                day=Integer.parseInt(date[2]);
            }
            time_get.close();

            populateSetDate(year,month,day);
            Calendar cal = Calendar.getInstance();
            day = cal.get(Calendar.DATE);
            month = cal.get(Calendar.MONTH) + 1;
            year = cal.get(Calendar.YEAR);

            populateSetDate_2(year,month,day);
            updateTime_open(0, 1);
            updateTime_close(23, 59);
        }

        @Override
        protected String doInBackground(String... strings) {


            if(month==1){
                mon="Jan";
            }else if(month==2){
                mon="Feb";
            }else if(month==3){
                mon="Mar";
            }else if(month==4){
                mon="Apr";
            }else if(month==5){
                mon="May";
            }else if(month==6){
                mon="Jun";
            }else if(month==7){
                mon="Jul";
            }else if(month==8){
                mon="Aug";
            }else if(month==9){
                mon="Sep";
            }else if(month==10){
                mon="Oct";
            }else if(month==11){
                mon="Nov";
            }else if(month==12){
                mon="Dec";
            }


            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            Cursor time_get = db.rawQuery("SELECT * FROM All_Sales", null);
            if (time_get.moveToFirst()) {
                String date=time_get.getString(25);
                SimpleDateFormat sdf3 = new SimpleDateFormat("dd MMM yyyy");
                final String currentDateandTime2 = sdf3.format(new Date());
                tv_dateselecter.setText(date+" - "+currentDateandTime2);
            }
            time_get.close();


            btnok.callOnClick();

        }




        public void populateSetDate(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText1);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText11);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }



        }



        public void populateSetDate_2(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText2);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText22);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }

        }

    }



    class WeekTask extends AsyncTask<String, String, String>{
        String mon="";
        String mon1="";
        //  int dow;
        int day1,day2;
        int month1,month2;
        int year1;
        // int min;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            Calendar myDate = Calendar.getInstance(); // set this up however you need it.

            //first day of week
            myDate.set(Calendar.DAY_OF_WEEK, 1);

            year1 = myDate.get(Calendar.YEAR);
            month1 = myDate.get(Calendar.MONTH)+1;
            day1 = myDate.get(Calendar.DAY_OF_MONTH);

          /*  //last day of week
            myDate.set(Calendar.DAY_OF_WEEK, 7);


             month2 = myDate.get(Calendar.MONTH)+1;
             day2 = myDate.get(Calendar.DAY_OF_MONTH);*/

            //dow = myDate.get (Calendar.DAY_OF_WEEK);

            Calendar cal = Calendar.getInstance();
            day2 = cal.get(Calendar.DATE);
            month2 = cal.get(Calendar.MONTH) + 1;
            //year = cal.get(Calendar.YEAR);
            // min=day-dow;

            populateSetDate(year1,month1,day1);
            populateSetDate_2(year1,month2,day2);
            updateTime_open(0, 1);
            updateTime_close(23, 59);
        }

        @Override
        protected String doInBackground(String... strings) {


            if(month1==1){
                mon="Jan";
            }else if(month1==2){
                mon="Feb";
            }else if(month1==3){
                mon="Mar";
            }else if(month1==4){
                mon="Apr";
            }else if(month1==5){
                mon="May";
            }else if(month1==6){
                mon="Jun";
            }else if(month1==7){
                mon="Jul";
            }else if(month1==8){
                mon="Aug";
            }else if(month1==9){
                mon="Sep";
            }else if(month1==10){
                mon="Oct";
            }else if(month1==11){
                mon="Nov";
            }else if(month1==12){
                mon="Dec";
            }


            if(month2==1){
                mon1="Jan";
            }else if(month2==2){
                mon1="Feb";
            }else if(month2==3){
                mon1="Mar";
            }else if(month2==4){
                mon1="Apr";
            }else if(month2==5){
                mon1="May";
            }else if(month2==6){
                mon1="Jun";
            }else if(month2==7){
                mon1="Jul";
            }else if(month2==8){
                mon1="Aug";
            }else if(month2==9){
                mon1="Sep";
            }else if(month2==10){
                mon1="Oct";
            }else if(month2==11){
                mon1="Nov";
            }else if(month2==12){
                mon1="Dec";
            }


            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);


            tv_dateselecter.setText((day1)+" "+mon+" - "+day2+" "+mon1);
            btnok.callOnClick();

        }




        public void populateSetDate(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText1);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText11);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }



        }



        public void populateSetDate_2(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText2);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText22);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }

        }

    }




    class TodayTask extends AsyncTask<String, String, String>{

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            SimpleDateFormat sdf3 = new SimpleDateFormat("dd MMM yyyy");
            final String currentDateandTime2 = sdf3.format(new Date());
            tv_dateselecter.setText(currentDateandTime2);

            Calendar cal = Calendar.getInstance();
            int day = cal.get(Calendar.DATE);
            int month = cal.get(Calendar.MONTH) + 1;
            int year = cal.get(Calendar.YEAR);
            populateSetDate(year,month,day);
            populateSetDate_2(year,month,day);
            updateTime_open(0, 1);
            updateTime_close(23, 59);
        }

        @Override
        protected String doInBackground(String... strings) {

            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            btnok.callOnClick();
        }

        public void populateSetDate(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText1);
            TextView mEdit1  = (TextView) getActivity().findViewById(R.id.editText11);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }



        }



        public void populateSetDate_2(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText2);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText22);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }

        }

    }


    class MonthTask extends AsyncTask<String, String, String>{

        int year,month,day;
        String mon="";
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            Calendar cal = Calendar.getInstance();
            day = cal.get(Calendar.DATE);
            month = cal.get(Calendar.MONTH) + 1;
            year = cal.get(Calendar.YEAR);
            populateSetDate(year,month,01);
            populateSetDate_2(year,month,31);
            updateTime_open(0, 1);
            updateTime_close(23, 59);
        }

        @Override
        protected String doInBackground(String... strings) {


            if(month==1){
                mon="Jan";
            }else if(month==2){
                mon="Feb";
            }else if(month==3){
                mon="Mar";
            }else if(month==4){
                mon="Apr";
            }else if(month==5){
                mon="May";
            }else if(month==6){
                mon="Jun";
            }else if(month==7){
                mon="Jul";
            }else if(month==8){
                mon="Aug";
            }else if(month==9){
                mon="Sep";
            }else if(month==10){
                mon="Oct";
            }else if(month==11){
                mon="Nov";
            }else if(month==12){
                mon="Dec";
            }


            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            tv_dateselecter.setText(1+" "+mon+" - "+day+" "+mon);
            btnok.callOnClick();
        }

        public void populateSetDate(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText1);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText11);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }



        }

        public void populateSetDate_2(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText2);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText22);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }

        }


    }

    class YearTask extends AsyncTask<String, String, String>{
        String mon="";
        int day,month,year;
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            Calendar cal = Calendar.getInstance();
            day = cal.get(Calendar.DATE);
            month = cal.get(Calendar.MONTH) + 1;
            year = cal.get(Calendar.YEAR);
            populateSetDate(year,01,01);
            populateSetDate_2(year,month,day);
            updateTime_open(0, 1);
            updateTime_close(23, 59);
        }

        @Override
        protected String doInBackground(String... strings) {

            if(month==1){
                mon="Jan";
            }else if(month==2){
                mon="Feb";
            }else if(month==3){
                mon="Mar";
            }else if(month==4){
                mon="Apr";
            }else if(month==5){
                mon="May";
            }else if(month==6){
                mon="Jun";
            }else if(month==7){
                mon="Jul";
            }else if(month==8){
                mon="Aug";
            }else if(month==9){
                mon="Sep";
            }else if(month==10){
                mon="Oct";
            }else if(month==11){
                mon="Nov";
            }else if(month==12){
                mon="Dec";
            }


            return null;
        }


        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            tv_dateselecter.setText(1+"Jan - "+day+" "+mon);

            btnok.callOnClick();
        }

        public void populateSetDate(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText1);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText11);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }



        }

        public void populateSetDate_2(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText2);
            TextView mEdit1  = (TextView) getActivity().findViewById(R.id.editText22);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }

        }

    }


    class WorkingTask extends AsyncTask<String, String, String>{

        @Override
        protected void onPreExecute() {
            super.onPreExecute();


            Calendar cal = Calendar.getInstance();
            int day = cal.get(Calendar.DATE);
            int month = cal.get(Calendar.MONTH) + 1;
            int year = cal.get(Calendar.YEAR);
            populateSetDate(year,month,day);
            populateSetDate_2(year,month,day);



            Cursor time_get = db1.rawQuery("SELECT * FROM Working_hours", null);
            if (time_get.moveToFirst()) {

                String five = time_get.getString(5);
                String six = time_get.getString(6);

                String two= time_get.getString(2);
                String four=time_get.getString(4);

                String[] h=five.split(":");
                String[] m=six.split(":");

                updateTime_open(Integer.parseInt(h[0]), Integer.parseInt(h[1]));
                updateTime_close(Integer.parseInt(m[0]), Integer.parseInt(m[1]));

                SimpleDateFormat sdf3 = new SimpleDateFormat("dd MMM yyyy");
                final String currentDateandTime2 = sdf3.format(new Date());
                tv_dateselecter.setText(currentDateandTime2+","+two+" - "+currentDateandTime2+","+four);

            }
            time_get.close();

        }

        @Override
        protected String doInBackground(String... strings) {

            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            btnok.callOnClick();
        }

        public void populateSetDate(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText1);
            TextView mEdit1  = (TextView) getActivity().findViewById(R.id.editText11);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }



        }



        public void populateSetDate_2(int year, int month, int day) {
            TextView mEdit = (TextView) getActivity().findViewById(R.id.editText2);
            TextView mEdit1  = (TextView)getActivity().findViewById(R.id.editText22);
            if (month == 1 && day < 10) {
                mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                onee1 = "0" + day + " " + "Jan" + " " + year;
                mEdit1.setText(onee1);
            } else {
                if (month == 1) {
                    mEdit.setText(year + " " + "0" + 1 + " " + day);
                    onee = day + " " + "Jan" + " " + year;
                    mEdit1.setText(onee);
                }
            }

            if (month == 2 && day < 10) {
                mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                two1 = "0" + day + " " + "Feb" + " " + year;
                mEdit1.setText(two1);
            } else {
                if (month == 2) {
                    mEdit.setText(year + " " + "0" + 2 + " " + day);
                    two = day + " " + "Feb" + " " + year;
                    mEdit1.setText(two);
                }
            }

            if (month == 3 && day < 10) {
                mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                three1 = "0" + day + " " + "Mar" + " " + year;
                mEdit1.setText(three1);
            } else {
                if (month == 3) {
                    mEdit.setText(year + " " + "0" + 3 + " " + day);
                    three = day + " " + "Mar" + " " + year;
                    mEdit1.setText(three);
                }
            }

            if (month == 4 && day < 10) {
                mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                four1 = "0" + day + " " + "Apr" + " " + year;
                mEdit1.setText(four1);
            } else {
                if (month == 4) {
                    mEdit.setText(year + " " + "0" + 4 + " " + day);
                    four = day + " " + "Apr" + " " + year;
                    mEdit1.setText(four);
                }
            }

            if (month == 5 && day < 10) {
                mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                five1 = "0" + day + " " + "May" + " " + year;
                mEdit1.setText(five1);
            } else {
                if (month == 5) {
                    mEdit.setText(year + " " + "0" + 5 + " " + day);
                    five = day + " " + "May" + " " + year;
                    mEdit1.setText(five);
                }
            }

            if (month == 6 && day < 10) {
                mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                six1 = "0" + day + " " + "Jun" + " " + year;
                mEdit1.setText(six1);
            } else {
                if (month == 6) {
                    mEdit.setText(year + " " + "0" + 6 + " " + day);
                    six = day + " " + "Jun" + " " + year;
                    mEdit1.setText(six);
                }
            }

            if (month == 7 && day < 10) {
                mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                seven1 = "0" + day + " " + "Jul" + " " + year;
                mEdit1.setText(seven1);
            } else {
                if (month == 7) {
                    mEdit.setText(year + " " + "0" + 7 + " " + day);
                    seven = day + " " + "Jul" + " " + year;
                    mEdit1.setText(seven);
                }
            }

            if (month == 8 && day < 10) {
                mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                eight1 = "0" + day + " " + "Aug" + " " + year;
                mEdit1.setText(eight1);
            } else {
                if (month == 8) {
                    mEdit.setText(year + " " + "0" + 8 + " " + day);
                    eight = day + " " + "Aug" + " " + year;
                    mEdit1.setText(eight);
                }
            }

            if (month == 9 && day < 10) {
                mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                nine1 = "0" + day + " " + "Sep" + " " + year;
                mEdit1.setText(nine1);
            } else {
                if (month == 9) {
                    mEdit.setText(year + " " + "0" + 9 + " " + day);
                    nine = day + " " + "Sep" + " " + year;
                    mEdit1.setText(nine);
                }
            }

            if (month == 10 && day < 10) {
                mEdit.setText(year + " " + 10 + " " + "0" + day);
                ten1 = "0" + day + " " + "Oct" + " " + year;
                mEdit1.setText(ten1);
            } else {
                if (month == 10) {
                    mEdit.setText(year + " " + 10 + " " + day);
                    ten = day + " " + "Oct" + " " + year;
                    mEdit1.setText(ten);
                }
            }

            if (month == 11 && day < 10) {
                mEdit.setText(year + " " + 11 + " " + "0" + day);
                eleven1 = "0" + day + " " + "Nov" + " " + year;
                mEdit1.setText(eleven1);
            } else {
                if (month == 11) {
                    mEdit.setText(year + " " + 11 + " " + day);
                    eleven = day + " " + "Nov" + " " + year;
                    mEdit1.setText(eleven);
                }
            }

            if (month == 12 && day < 10) {
                mEdit.setText(year + " " + 12 + " " + "0" + day);
                twelve1 = "0" + day + " " + "Dec" + " " + year;
                mEdit1.setText(twelve1);
            } else {
                if (month == 12) {
                    mEdit.setText(year + " " + 12 + " " + day);
                    twelve = day + " " + "Dec" + " " + year;
                    mEdit1.setText(twelve);
                }
            }

        }

    }


    private void initCustom(final Dialog dialoge1) {

        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
        final String currentDateandTime1 = sdf2.format(new Date());

        SimpleDateFormat sdf3 = new SimpleDateFormat("dd MMM yyyy");
        final String currentDateandTime2 = sdf3.format(new Date());


        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String time_hide = sdf.format(new Date());

        SimpleDateFormat sdf1 = new SimpleDateFormat("HH:mm aa");
        String time_visible = sdf1.format(new Date());

        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        Date tomorrow = calendar.getTime();

        Calendar calendar11 = Calendar.getInstance();
        calendar11.add(Calendar.DAY_OF_YEAR, -1);
        Date yesterday = calendar11.getTime();

        editText1_dialog = (TextView) dialoge1.findViewById(R.id.editText1_dialog);
        editText1_dialog.setText(currentDateandTime1);
    /*    editText1 = (TextView) findViewById(R.id.editText1);
        editText1.setText(currentDateandTime1);*/


        editText2_dialog = (TextView) dialoge1.findViewById(R.id.editText2_dialog);
        editText2_dialog.setText(currentDateandTime1);
/*        editText2 = (TextView) findViewById(R.id.editText2);
        editText2.setText(currentDateandTime1);*/

        editText11_dialog = (TextView) dialoge1.findViewById(R.id.editText11_dialog);
        editText11_dialog.setText(currentDateandTime2);
/*        editText11 = (TextView) findViewById(R.id.editText11);
        editText11.setText(currentDateandTime2);*/

        editText22_dialog = (TextView) dialoge1.findViewById(R.id.editText22_dialog);
        editText22_dialog.setText(currentDateandTime2);
  /*      editText22 = (TextView) findViewById(R.id.editText22);
        editText22.setText(currentDateandTime2);*/


        editText_from_day_hide_dialog = (TextView) dialoge1.findViewById(R.id.editText_from_day_hide_dialog);
        editText_from_day_visible_dialog = (TextView) dialoge1.findViewById(R.id.editText_from_day_visible_dialog);
        editText_to_day_hide_dialog = (TextView) dialoge1.findViewById(R.id.editText_to_day_hide_dialog);
        editText_to_day_visible_dialog = (TextView) dialoge1.findViewById(R.id.editText_to_day_visible_dialog);


/*
        editText_from_day_hide = (TextView) findViewById(R.id.editText_from_day_hide);
        editText_from_day_visible = (TextView) findViewById(R.id.editText_from_day_visible);
        editText_to_day_hide = (TextView) findViewById(R.id.editText_to_day_hide);
        editText_to_day_visible = (TextView) findViewById(R.id.editText_to_day_visible);
*/


        updateTime_open_dialog(0, 1);
        updateTime_close_dialog(23, 59);

        editText11_dialog.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
//                Calendar now = Calendar.getInstance();
//                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
//                        datePickerListener,
//                        now.get(Calendar.YEAR),
//                        now.get(Calendar.MONTH),
//                        now.get(Calendar.DAY_OF_MONTH)
//
//
//                );
//
//                dpd.show(HomeActivity.this.getFragmentManager(), "Datepickerdialog");

                Calendar now = Calendar.getInstance();
                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
                        datePickerListener,now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH)
                );
                dpd.setMaxDate(Calendar.getInstance());
                dpd.show(getActivity().getFragmentManager(), "Datepickerdialog");
                //clickcounts++;




            }

            com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener datePickerListener
                    = new com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener() {

                @Override
                public void onDateSet(com.wdullaer.materialdatetimepicker.date.DatePickerDialog datePickerDialog, int selectedYear1, int selectedMonth1, int selectedDay1) {
                    year1 = selectedYear1;
                    month1 = selectedMonth1;
                    day1 = selectedDay1;

                    // set selected date into textview
                    populateSetDate(year1, month1 + 1, day1);
                }
            };





            public void populateSetDate(int year, int month, int day) {
        /*        TextView mEdit = (TextView) dialoge1.findViewById(R.id.editText1);
                TextView mEdit1  = (TextView)dialoge1.findViewById(R.id.editText11);*/
                TextView mEdit_dialog = (TextView) dialoge1.findViewById(R.id.editText1_dialog);
                TextView mEdit1_dialog  = (TextView)dialoge1.findViewById(R.id.editText11_dialog);

                if (month == 1 && day < 10) {
                    //   mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 1 + " " + "0" + day);
                    onee1 = "0" + day + " " + "Jan" + " " + year;
                    //   mEdit1.setText(onee1);
                    mEdit1_dialog.setText(onee1);
                } else {
                    if (month == 1) {
                        mEdit_dialog.setText(year + " " + "0" + 1 + " " + day);
                        //     mEdit.setText(year + " " + "0" + 1 + " " + day);
                        onee = day + " " + "Jan" + " " + year;
                        //   mEdit1.setText(onee);
                        mEdit1_dialog.setText(onee);
                    }
                }

                if (month == 2 && day < 10) {
                    mEdit_dialog.setText(year + " " + "0" + 2 + " " + "0" + day);
                    //  mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                    two1 = "0" + day + " " + "Feb" + " " + year;
                    //  mEdit1.setText(two1);
                    mEdit1_dialog.setText(two1);
                } else {
                    if (month == 2) {
                        mEdit_dialog.setText(year + " " + "0" + 2 + " " + day);
                        //    mEdit.setText(year + " " + "0" + 2 + " " + day);
                        two = day + " " + "Feb" + " " + year;
                        //     mEdit1.setText(two);
                        mEdit1_dialog.setText(two);
                    }
                }

                if (month == 3 && day < 10) {
                    mEdit_dialog.setText(year + " " + "0" + 3 + " " + "0" + day);
                    //      mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                    three1 = "0" + day + " " + "Mar" + " " + year;
                    //    mEdit1.setText(three1);
                    mEdit1_dialog.setText(three1);
                } else {
                    if (month == 3) {
                        mEdit_dialog.setText(year + " " + "0" + 3 + " " + day);
                        //      mEdit.setText(year + " " + "0" + 3 + " " + day);
                        three = day + " " + "Mar" + " " + year;
                        //      mEdit1.setText(three);
                        mEdit1_dialog.setText(three);
                    }
                }

                if (month == 4 && day < 10) {
                    mEdit_dialog.setText(year + " " + "0" + 4 + " " + "0" + day);
                    //       mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                    four1 = "0" + day + " " + "Apr" + " " + year;
                    //     mEdit1.setText(four1);
                    mEdit1_dialog.setText(four1);
                } else {
                    if (month == 4) {
                        mEdit_dialog.setText(year + " " + "0" + 4 + " " + day);
                        //       mEdit.setText(year + " " + "0" + 4 + " " + day);
                        four = day + " " + "Apr" + " " + year;
                        //      mEdit1.setText(four);
                        mEdit1_dialog.setText(four);
                    }
                }

                if (month == 5 && day < 10) {
                    mEdit_dialog.setText(year + " " + "0" + 5 + " " + "0" + day);
                    //     mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                    five1 = "0" + day + " " + "May" + " " + year;
                    //     mEdit1.setText(five1);
                    mEdit1_dialog.setText(five1);
                } else {
                    if (month == 5) {
                        mEdit_dialog.setText(year + " " + "0" + 5 + " " + day);
                        //      mEdit.setText(year + " " + "0" + 5 + " " + day);
                        five = day + " " + "May" + " " + year;
                        //       mEdit1.setText(five);
                        mEdit1_dialog.setText(five);
                    }
                }

                if (month == 6 && day < 10) {
                    mEdit_dialog.setText(year + " " + "0" + 6 + " " + "0" + day);
                    //    mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                    six1 = "0" + day + " " + "Jun" + " " + year;
                    //      mEdit1.setText(six1);
                    mEdit1_dialog.setText(six1);
                } else {
                    if (month == 6) {
                        mEdit_dialog.setText(year + " " + "0" + 6 + " " + day);
                        //        mEdit.setText(year + " " + "0" + 6 + " " + day);
                        six = day + " " + "Jun" + " " + year;
                        //        mEdit1.setText(six);
                        mEdit1_dialog.setText(six);
                    }
                }

                if (month == 7 && day < 10) {
                    mEdit_dialog.setText(year + " " + "0" + 7 + " " + "0" + day);
                    //       mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                    seven1 = "0" + day + " " + "Jul" + " " + year;
                    //     mEdit1.setText(seven1);
                    mEdit1_dialog.setText(seven1);
                } else {
                    if (month == 7) {
                        mEdit_dialog.setText(year + " " + "0" + 7 + " " + day);
                        //         mEdit.setText(year + " " + "0" + 7 + " " + day);
                        seven = day + " " + "Jul" + " " + year;
                        //        mEdit1.setText(seven);
                        mEdit1_dialog.setText(seven);
                    }
                }

                if (month == 8 && day < 10) {
                    mEdit_dialog.setText(year + " " + "0" + 8 + " " + "0" + day);
                    //      mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                    eight1 = "0" + day + " " + "Aug" + " " + year;
                    //     mEdit1.setText(eight1);
                    mEdit1_dialog.setText(eight1);
                } else {
                    if (month == 8) {
                        mEdit_dialog.setText(year + " " + "0" + 8 + " " + day);
                        //         mEdit.setText(year + " " + "0" + 8 + " " + day);
                        eight = day + " " + "Aug" + " " + year;
                        //          mEdit1.setText(eight);
                        mEdit1_dialog.setText(eight);
                    }
                }

                if (month == 9 && day < 10) {
                    mEdit_dialog.setText(year + " " + "0" + 9 + " " + "0" + day);
                    //      mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                    nine1 = "0" + day + " " + "Sep" + " " + year;
                    //       mEdit1.setText(nine1);
                    mEdit1_dialog.setText(nine1);
                } else {
                    if (month == 9) {
                        mEdit_dialog.setText(year + " " + "0" + 9 + " " + day);
                        //          mEdit.setText(year + " " + "0" + 9 + " " + day);
                        nine = day + " " + "Sep" + " " + year;
                        //          mEdit1.setText(nine);
                        mEdit1_dialog.setText(nine);
                    }
                }

                if (month == 10 && day < 10) {
                    mEdit_dialog.setText(year + " " + 10 + " " + "0" + day);
                    //       mEdit.setText(year + " " + 10 + " " + "0" + day);
                    ten1 = "0" + day + " " + "Oct" + " " + year;
                    //       mEdit1.setText(ten1);
                    mEdit1_dialog.setText(ten1);
                } else {
                    if (month == 10) {
                        mEdit_dialog.setText(year + " " + 10 + " " + day);
                        ten = day + " " + "Oct" + " " + year;
                        //          mEdit1.setText(ten);
                        mEdit1_dialog.setText(ten);
                    }
                }

                if (month == 11 && day < 10) {
                    mEdit_dialog.setText(year + " " + 11 + " " + "0" + day);
                    //        mEdit.setText(year + " " + 11 + " " + "0" + day);
                    eleven1 = "0" + day + " " + "Nov" + " " + year;
                    //        mEdit1.setText(eleven1);
                    mEdit1_dialog.setText(eleven1);
                } else {
                    if (month == 11) {
                        mEdit_dialog.setText(year + " " + 11 + " " + day);
                        //          mEdit.setText(year + " " + 11 + " " + day);
                        eleven = day + " " + "Nov" + " " + year;
                        //        mEdit1.setText(eleven);
                        mEdit1_dialog.setText(eleven);
                    }
                }

                if (month == 12 && day < 10) {
                    mEdit_dialog.setText(year + " " + 12 + " " + "0" + day);
                    //       mEdit.setText(year + " " + 12 + " " + "0" + day);
                    twelve1 = "0" + day + " " + "Dec" + " " + year;
                    //    mEdit1.setText(twelve1);
                    mEdit1_dialog.setText(twelve1);
                } else {
                    if (month == 12) {
                        mEdit_dialog.setText(year + " " + 12 + " " + day);
                        //         mEdit.setText(year + " " + 12 + " " + day);
                        twelve = day + " " + "Dec" + " " + year;
                        //        mEdit1.setText(twelve);
                        mEdit1_dialog.setText(twelve);
                    }
                }

            }

        });


        editText22_dialog.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
//                Calendar now = Calendar.getInstance();
//                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
//                        datePickerListener,
//                        now.get(Calendar.YEAR),
//                        now.get(Calendar.MONTH),
//                        now.get(Calendar.DAY_OF_MONTH)
//
//
//                );
//
//                dpd.show(HomeActivity.this.getFragmentManager(), "Datepickerdialog");
                //if (clickcount == 1){
                Calendar now = Calendar.getInstance();
                com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
                        datePickerListener,now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH)
                );
                dpd.setMaxDate(Calendar.getInstance());
                dpd.show(getActivity().getFragmentManager(), "Datepickerdialog");
                clickcount++;
//                }else {
//                    Calendar now = Calendar.getInstance();
//                    com.wdullaer.materialdatetimepicker.date.DatePickerDialog dpd = com.wdullaer.materialdatetimepicker.date.DatePickerDialog.newInstance(
//                            datePickerListener, year, month, day
//                    );
//
//                    dpd.show(HomeActivity.this.getFragmentManager(), "Datepickerdialog");
//                }

            }

            com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener datePickerListener
                    = new com.wdullaer.materialdatetimepicker.date.DatePickerDialog.OnDateSetListener() {

                @Override
                public void onDateSet(com.wdullaer.materialdatetimepicker.date.DatePickerDialog datePickerDialog, int selectedYear, int selectedMonth, int selectedDay) {
                    year = selectedYear;
                    month = selectedMonth;
                    day = selectedDay;

                    // set selected date into textview
                    populateSetDate(year, month + 1, day);
                }
            };

//                // when dialog box is closed, below method will be called.
//                public void onDateSet(DatePicker view, int selectedYear,
//                                      int selectedMonth, int selectedDay) {
//
//
//
//
//                }
//            };


            public void populateSetDate(int year, int month, int day) {
            /*    TextView mEdit = (TextView) dialoge1.findViewById(R.id.editText2);
                TextView mEdit1  = (TextView) dialoge1.findViewById(R.id.editText22);*/
                TextView mEdit_dialog = (TextView) dialoge1.findViewById(R.id.editText2_dialog);
                TextView mEdit1_dialog  = (TextView) dialoge1.findViewById(R.id.editText22_dialog);
                if (month == 1 && day < 10) {
                    //    mEdit.setText(year + " " + "0" + 1 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 1 + " " + "0" + day);
                    onee1 = "0" + day + " " + "Jan" + " " + year;
                    //    mEdit1.setText(onee1);
                    mEdit1_dialog.setText(onee1);
                } else {
                    if (month == 1) {
                        //       mEdit.setText(year + " " + "0" + 1 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 1 + " " + day);
                        onee = day + " " + "Jan" + " " + year;
                        //      mEdit1.setText(onee);
                        mEdit1_dialog.setText(onee);
                    }
                }

                if (month == 2 && day < 10) {
                    //    mEdit.setText(year + " " + "0" + 2 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 2 + " " + "0" + day);
                    two1 = "0" + day + " " + "Feb" + " " + year;
                    mEdit1_dialog.setText(two1);
                } else {
                    if (month == 2) {
                        //       mEdit.setText(year + " " + "0" + 2 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 2 + " " + day);
                        two = day + " " + "Feb" + " " + year;
                        ///      mEdit1.setText(two);
                        mEdit1_dialog.setText(two);
                    }
                }

                if (month == 3 && day < 10) {
                    //    mEdit.setText(year + " " + "0" + 3 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 3 + " " + "0" + day);
                    three1 = "0" + day + " " + "Mar" + " " + year;
                    //    mEdit1.setText(three1);
                    mEdit1_dialog.setText(three1);
                } else {
                    if (month == 3) {
                        //        mEdit.setText(year + " " + "0" + 3 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 3 + " " + day);
                        three = day + " " + "Mar" + " " + year;
                        //      mEdit1.setText(three);
                        mEdit1_dialog.setText(three);
                    }
                }

                if (month == 4 && day < 10) {
                    //    mEdit.setText(year + " " + "0" + 4 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 4 + " " + "0" + day);
                    four1 = "0" + day + " " + "Apr" + " " + year;
                    //     mEdit1.setText(four1);
                    mEdit1_dialog.setText(four1);
                } else {
                    if (month == 4) {
                        //       mEdit.setText(year + " " + "0" + 4 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 4 + " " + day);
                        four = day + " " + "Apr" + " " + year;
                        //       mEdit1.setText(four);
                        mEdit1_dialog.setText(four);
                    }
                }

                if (month == 5 && day < 10) {
                    //     mEdit.setText(year + " " + "0" + 5 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 5 + " " + "0" + day);
                    five1 = "0" + day + " " + "May" + " " + year;
                    //     mEdit1.setText(five1);
                    mEdit1_dialog.setText(five1);
                } else {
                    if (month == 5) {
                        //         mEdit.setText(year + " " + "0" + 5 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 5 + " " + day);
                        five = day + " " + "May" + " " + year;
                        //       mEdit1.setText(five);
                        mEdit1_dialog.setText(five);
                    }
                }

                if (month == 6 && day < 10) {
                    //     mEdit.setText(year + " " + "0" + 6 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 6 + " " + "0" + day);
                    six1 = "0" + day + " " + "Jun" + " " + year;
                    //      mEdit1.setText(six1);
                    mEdit1_dialog.setText(six1);
                } else {
                    if (month == 6) {
                        //          mEdit.setText(year + " " + "0" + 6 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 6 + " " + day);
                        six = day + " " + "Jun" + " " + year;
                        //        mEdit1.setText(six);
                        mEdit1_dialog.setText(six);
                    }
                }

                if (month == 7 && day < 10) {
                    //        mEdit.setText(year + " " + "0" + 7 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 7 + " " + "0" + day);
                    seven1 = "0" + day + " " + "Jul" + " " + year;
                    //          mEdit1.setText(seven1);
                    mEdit1_dialog.setText(seven1);
                } else {
                    if (month == 7) {
                        //            mEdit.setText(year + " " + "0" + 7 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 7 + " " + day);
                        seven = day + " " + "Jul" + " " + year;
                        //           mEdit1.setText(seven);
                        mEdit1_dialog.setText(seven);
                    }
                }

                if (month == 8 && day < 10) {
                    //       mEdit.setText(year + " " + "0" + 8 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 8 + " " + "0" + day);
                    eight1 = "0" + day + " " + "Aug" + " " + year;
                    //        mEdit1.setText(eight1);
                    mEdit1_dialog.setText(eight1);
                } else {
                    if (month == 8) {
                        //             mEdit.setText(year + " " + "0" + 8 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 8 + " " + day);
                        eight = day + " " + "Aug" + " " + year;
                        //           mEdit1.setText(eight);
                        mEdit1_dialog.setText(eight);
                    }
                }

                if (month == 9 && day < 10) {
                    //         mEdit.setText(year + " " + "0" + 9 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + "0" + 9 + " " + "0" + day);
                    nine1 = "0" + day + " " + "Sep" + " " + year;
                    //        mEdit1.setText(nine1);
                    mEdit1_dialog.setText(nine1);
                } else {
                    if (month == 9) {
                        //          mEdit.setText(year + " " + "0" + 9 + " " + day);
                        mEdit_dialog.setText(year + " " + "0" + 9 + " " + day);
                        nine = day + " " + "Sep" + " " + year;
                        //         mEdit1.setText(nine);
                        mEdit1_dialog.setText(nine);
                    }
                }

                if (month == 10 && day < 10) {
                    //        mEdit.setText(year + " " + 10 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + 10 + " " + "0" + day);
                    ten1 = "0" + day + " " + "Oct" + " " + year;
                    //       mEdit1.setText(ten1);
                    mEdit1_dialog.setText(ten1);
                } else {
                    if (month == 10) {
                        //            mEdit.setText(year + " " + 10 + " " + day);
                        mEdit_dialog.setText(year + " " + 10 + " " + day);
                        ten = day + " " + "Oct" + " " + year;
                        //           mEdit1.setText(ten);
                        mEdit1_dialog.setText(ten);
                    }
                }

                if (month == 11 && day < 10) {
                    //        mEdit.setText(year + " " + 11 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + 11 + " " + "0" + day);
                    eleven1 = "0" + day + " " + "Nov" + " " + year;
                    //       mEdit1.setText(eleven1);
                    mEdit1_dialog.setText(eleven1);
                } else {
                    if (month == 11) {
                        //          mEdit.setText(year + " " + 11 + " " + day);
                        mEdit_dialog.setText(year + " " + 11 + " " + day);
                        eleven = day + " " + "Nov" + " " + year;
                        //          mEdit1.setText(eleven);
                        mEdit1_dialog.setText(eleven);
                    }
                }

                if (month == 12 && day < 10) {
                    //      mEdit.setText(year + " " + 12 + " " + "0" + day);
                    mEdit_dialog.setText(year + " " + 12 + " " + "0" + day);
                    twelve1 = "0" + day + " " + "Dec" + " " + year;
                    //      mEdit1.setText(twelve1);
                    mEdit1_dialog.setText(twelve1);
                } else {
                    if (month == 12) {
                        //         mEdit.setText(year + " " + 12 + " " + day);
                        mEdit_dialog.setText(year + " " + 12 + " " + day);
                        twelve = day + " " + "Dec" + " " + year;
                        //       mEdit1.setText(twelve);
                        mEdit1_dialog.setText(twelve);
                    }
                }

            }

//            class SelectDateFragment extends DialogFragment implements DatePickerDialog.OnDateSetListener {
//                @Override
//                public Dialog onCreateDialog(Bundle savedInstanceState) {
//                    final Calendar calendar = Calendar.getInstance();
//                    int yy = calendar.get(Calendar.YEAR);
//                    int mm = calendar.get(Calendar.MONTH);
//                    int dd = calendar.get(Calendar.DAY_OF_MONTH);
//                    return new DatePickerDialog(HomeActivity.this, this, yy, mm, dd);
//                }
//
//
//                @Override
//                public void onDateSet(DatePicker view, int yy, int mm, int dd) {
//                    populateSetDate(yy, mm + 1, dd);
//                }
//            }

        });

        editText_from_day_visible_dialog.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                android.app.TimePickerDialog timePickerDialog = new android.app.TimePickerDialog(getActivity(), R.style.timepicker_date_dialog, timePickerListener_open_dialogue, hour, minute,
                        false);

                timePickerDialog.show();
            }
        });

        editText_to_day_visible_dialog.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                android.app.TimePickerDialog timePickerDialog = new android.app.TimePickerDialog(getActivity(), R.style.timepicker_date_dialog, timePickerListener_close_dialogue, hour, minute,
                        false);

                timePickerDialog.show();
            }
        });

    }

    private void setData(int count, float range) {

        float mult = range;

        ArrayList<PieEntry> entries = new ArrayList<PieEntry>();
        float val = 2;

        // NOTE: The order of the entries when being added to the entries array determines their position around the center of
        // the chart.
//        for (int i = 0; i < count; i++) {
//            entries.add(new PieEntry((float) (Math.random() * mult) + mult / 5, mParties[i % mParties.length]));

//        Cursor cursor = db1.rawQuery("SELECT * FROM Ingredient_sold_details WHERE datetimee_new_from >= '"+editText1_filter.getText().toString()+"' AND datetimee_new_from <='"+editText2_filter.getText().toString()+"' GROUP BY datetimee_new_from", null);
        Cursor cursor = db1.rawQuery("SELECT * FROM Ingredients_temp_list WHERE total_price != '0' OR total_price != '0.0' LIMIT 10", null);
        if (cursor.moveToFirst()) {
            do {
                String am = cursor.getString(6);
                String na = cursor.getString(1);
                if (na.length()>10){
                    String na1 = na.substring(0, 10);
                    entries.add(new PieEntry((float) ((Float.parseFloat(am))), na1+"..."));
                }else {
                    entries.add(new PieEntry((float) ((Float.parseFloat(am))), na));
//                entries.add(new PieEntry((float) ((Float.parseFloat("50"))), "20"));
//                entries.add(new PieEntry((float) ((Float.parseFloat("30"))), "30"));
//                entries.add(new PieEntry((float) ((Float.parseFloat("15"))), "40"));
                }
            }while (cursor.moveToNext());
        }
        cursor.close();

//        }

        ArrayList<PieEntry> entries1 = new ArrayList<PieEntry>();
        PieDataSet dataSet = new PieDataSet(entries, "");
//        dataSet.setSliceSpace(3f);
//        dataSet.setSelectionShift(5f);

        // add a lot of colors

        ArrayList<Integer> colors = new ArrayList<Integer>();

        for (int c : ColorTemplate.VORDIPLOM_COLORS)
            colors.add(c);

        for (int c : ColorTemplate.JOYFUL_COLORS)
            colors.add(c);

        for (int c : ColorTemplate.COLORFUL_COLORS)
            colors.add(c);

        for (int c : ColorTemplate.LIBERTY_COLORS)
            colors.add(c);

        for (int c : ColorTemplate.PASTEL_COLORS)
            colors.add(c);

        colors.add(ColorTemplate.getHoloBlue());

        dataSet.setColors(colors);
        //dataSet.setSelectionShift(0f);

        PieData data = new PieData(dataSet);
        data.setValueFormatter(new PercentFormatter());
        data.setValueTextSize(11f);
        data.setValueTextColor(Color.BLACK);
//        data.setValueTypeface(mTfLight);
        mChart_pie.setData(data);

        // undo all highlights
        mChart_pie.highlightValues(null);

        mChart_pie.invalidate();
    }

    @Override
    public void onResume() {
        LocalBroadcastManager.getInstance(getActivity()).registerReceiver(mMessageReceiver,
                new IntentFilter("myFunction"));

        super.onResume();
    }

    @Override
    public void onPause() {
        LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(mMessageReceiver);

        super.onPause();
    }

    private BroadcastReceiver mMessageReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {

            if(intent.getExtras().getString("items")!=null){
                alertDialogItems = new AlertDialog.Builder(getActivity()).create();
                alertDialogItems.setTitle("Items Updating");
                alertDialogItems.setMessage(getString(R.string.setmessage12));
                alertDialogItems.show();

                db.execSQL("delete from Items_Virtual");

            }else if(intent.getExtras().getString("stop")!=null){
                alertDialogItems.dismiss();
            }


        }
    };


}
