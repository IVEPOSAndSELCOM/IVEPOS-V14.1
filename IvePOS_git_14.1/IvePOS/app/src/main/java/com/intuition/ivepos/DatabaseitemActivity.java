/////////////databaseitemactivity.java with 2 sec to load. So not allow to click two times///////////


package com.intuition.ivepos;

/**
 * Created by Rohithkumar on 1/6/2015.
 */

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.net.ConnectivityManager;
import android.net.NetworkCapabilities;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.provider.MediaStore;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.util.SparseBooleanArray;
import android.view.ActionMode;
import android.view.ContextThemeWrapper;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.Filter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.SimpleCursorAdapter;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.amazonaws.auth.CognitoCachingCredentialsProvider;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.epson.epos2.Epos2Exception;
import com.epson.epos2.printer.Printer;
import com.epson.epos2.printer.PrinterStatusInfo;
import com.epson.epos2.printer.ReceiveListener;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textfield.TextInputLayout;
import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
import com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException;
import com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.repackaged.org.apache.commons.codec.binary.Base64;
import com.google.api.client.util.ExponentialBackOff;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.GmailScopes;
import com.google.api.services.gmail.model.Label;
import com.google.api.services.gmail.model.ListLabelsResponse;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.intuition.ivepos.csv.RequestSingleton;
import com.intuition.ivepos.deleteitems.MyWorker;
import com.intuition.ivepos.deleteitems.SparseBooleanArrayParcelable;
import com.intuition.ivepos.syncapp.StubProviderApp;
import com.intuition.ivepos.syncdb.MyServiceApp_swiperefresh;
import com.intuition.ivepos.syncdb.SyncDatabase;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import androidx.lifecycle.Observer;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.work.OneTimeWorkRequest;
import androidx.work.WorkInfo;
import androidx.work.WorkManager;
import au.com.bytecode.opencsv.CSVWriter;
import it.sephiroth.android.library.widget.HListView;
import pub.devrel.easypermissions.AfterPermissionGranted;
import pub.devrel.easypermissions.EasyPermissions;

import static com.amazonaws.mobile.auth.core.internal.util.ThreadUtils.runOnUiThread;
import static com.intuition.ivepos.BluetoothPrintDriver.BT_Write;
import static com.intuition.ivepos.Constants_Inventory.SKU_DELAROY_PRO_UPGRADE;
import static com.intuition.ivepos.Constants_Inventory.SKU_DELAROY_PRO_UPGRADE_DEMO;
import static com.intuition.ivepos.SplashScreenActivity.getDefaultSharedPreferencesMultiProcess;
import static com.intuition.ivepos.sync.SyncHelper.mAccount;
import static com.intuition.ivepos.syncapp.SyncHelperApp.AUTHORITY;

/**
 * Created by Rohithkumar on 1/6/2015.
 */
public class DatabaseitemActivity extends Fragment implements DialogInterface.OnClickListener,ReceiveListener, MyServiceApp_swiperefresh.OnProgressUpdateListener {

    Fragment frag;
    FragmentTransaction fragTransaction;

    public SQLiteDatabase db = null; int count;

    public Cursor cursor, cursor1;
    MyCustomAdapter dataAdapter, dataadapter;
    SimpleCursorAdapter dataAdapterr, cursorAdapter;
    HListView gridView;
    ListView listview;
    protected static TextView textView;
    protected static ImageView image1, image2;
    private static final int SELECT_PICTURE = 1;
    private String selectedImagePath;
    ImageButton dialogC6_id;
    de.hdodenhof.circleimageview.CircleImageView get_image;
    RelativeLayout imageclick;
    Spinner dialogC5_id, spinner;
    RelativeLayout progressbar;


    ProgressBar circle;
    TextView progress_text;
    EditText dialogC1_id, dialogC2_id, dialogC3_id, dialogC3_dis, dialogC3_barcode;
    Spinner dialogC3_dis_spin; ImageButton printbarcode_tv, printbarcode;
    TextInputLayout layoutitemname_dialog, layoutprice_dialog, layoutbarcode_dialog, layoutitemname, layoutprice, layout_barcode;
    String ItemID, itemname, NAme1, iddd;
    TextView dialogC4_id, dialogC4_id1;
    Dialog dialog, dialog_print; TextView dialog_no_of_items;
    Uri selectedImageUri;
    private int selectedImagewidth, selectedImageheight;
    Bundle extras;
    final int PIC_CROP = 2;
    EditText myFilter;
    ListView popupSpinner;
    List<String> myList;

    RadioButton unit_sav, weight_sav, unit_sav_dialog, weight_sav_dialog;

    String[] DayOfWeek = {"Spl. tax  6.55%"," None "};

    EditText text, textprice, textquan, editText, myFilter1, disedittext; Spinner disctypee; String columnvalue, dialog_columnvalue;
    EditText barcode_no; ImageButton printbarcoderootview;
    TextView spinnercat, spinneritem, spinnervariants, spinnervariants_dialog;
    RelativeLayout linearLayout;
    FloatingActionButton additem;
    ArrayList<Country_items> countryList;
    View ColoredView;
    ListView listView1;
    EditText search;
    CheckBox mySwitch;
    CheckBox dialogC3_myswitch;
    Uri contentUri,resultUri;


    ActionMode mode,mode1;
    RelativeLayout item,category,modifier,tax1, discount1;
    ListView listView;

    String ipnameget, portget, statusnet;
    String ipnameget_counter, portget_counter, statusnet_counter;
    String addget, nameget, statussusb, deviceget;
    private static final String TAG = "WorkThread";
    ProgressDialog dialogp;
    private static Handler mHandler = null;
    byte[] setHT32, setHT321, setHT33, setHT34, setHT3212, setHTKOT, feedcut2;
    int nPaperWidth;
    int charlength, charlength1, charlength2, quanlentha;
    byte[][] allbufline, allbuf1, allbuf2, allbufrounded, allbufline5, allbuftaxestype1, allbufflinec, allbufflinet;
    String NAME;
    String ipnamegets, portgets, statusnets, addgets, namegets, statussusbs;
    String ipnamegets_counter, portgets_counter, statusnets_counter;
    String strcompanyname, straddress1,stritemname,strbarcodeno,strprice;
    TextView tvkot;
    private static int nBarcodetype, nStartOrgx, nBarcodeWidth = 1,
            nBarcodeHeight = 1, nBarcodeFontType, nBarcodeFontPosition = 2;
    private Button buttonBarcodetype, buttonStartOrgx, buttonBarcodeWidth,
            buttonBarcodeHeight, buttonBarcodeFontType,
            buttonBarcodeFontPosition;


    String selected, NAME3, NAME4;


    SimpleDateFormat sdff2, sdff1;
    String currentDateandTimee1;
    String timee1;

    File file=null, file1=null;

    public static final int requestcode = 1;
    int requestCode_i;
    String image = "1";



    String response;
    GoogleAccountCredential mCredential;
    ProgressDialog mProgress;

    static final int REQUEST_ACCOUNT_PICKER = 1000;
    static final int REQUEST_AUTHORIZATION = 1001;
    static final int REQUEST_GOOGLE_PLAY_SERVICES = 1002;
    static final int REQUEST_PERMISSION_GET_ACCOUNTS = 1003;

    private static final String BUTTON_TEXT = "Call Gmail API";
    private static final String PREF_ACCOUNT_NAME = "accountName";
    private static final String[] SCOPES = { GmailScopes.GMAIL_SEND };



    List toEmailList;


    String filepath;

    String str_print_ty;

    private Context mContext = null;

    private Printer mPrinter = null;
    int barcodeWidth, barcodeHeight, pageAreaHeight, pageAreaWidth;

    private EditText mEditTarget = null;
    private Spinner mSpnSeries = null;
    private Spinner mSpnLang = null;
    Bitmap logoData, yourBitmap;

    private WifiPrintDriver wifiSocket = null;
    private WifiPrintDriver2 wifiSocket2 = null;

    ArrayAdapter<Country_tax> adapter_tax;
    ArrayList<Country_tax> list_tax;


    IabHelper mHelperPro;
    String mSelectedProSubscription="";
    String company,store, device,email;
    private static int REQ_CODE = 1000;
    AmazonS3 s3client;
    TransferUtility transferUtility;

    String checking;
    String payload, bucketName;
    int state;
    int i;
    public SQLiteDatabase db_inapp = null;
    public static final String PACKAGE_NAME = "com.intuition.ivepos";
    ProgressBar bar;

    String insert1_cc = "", insert1_rs = "", str_country;
    RequestQueue requestQueue;

    ArrayList<CSVExportCV> csvExportCVArrayList = new ArrayList<CSVExportCV>();
    private String webserviceQuery="";
    private String webserviceValues="";

    private String webserviceQuery1="";
    private String webserviceValues1="";

    String currentDateandTime1_pro;
    int i_pro_sel;
    Dialog dialog_pro;

    AlertDialog alertDialogItems;
    boolean reachable;
    ProgressBar updateBar;
    CardView progressBar_license;
    TextView tv_perc;
    SwipeRefreshLayout pullToRefresh;
    RelativeLayout action;
    LinearLayout action1;
    RequestQueue queue;

    ArrayList<String> my_array_id;
    ArrayList<String> my_array_itemname;
    ArrayList<String> my_array_comma;
    ArrayList<String> my_array_spec_char;
    ArrayList<String> my_array_exponen;
    int i_csv, i_csv_id_empty, i_csv_itemname_empty, i_csv_id_comma, i_csv_id_spec_char, i_csv_id_spec_char1, i_csv_id_exponen;
    int i_corre_forma;

    View rootview;

    String ID, NAme, PRice, QUan, CAte, ITemTax, switchstate;
    RelativeLayout progressbar_dialog, header_dialog;
    LinearLayout content_dialog;

    String WebserviceUrl;

    String date;
    int intdate;
    String da;

    public DatabaseitemActivity(){

    }

    BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {


        @Override
        public void onReceive(Context context, Intent intent){

            postDelete();
        }


    };

    private void postDelete() {

        mode1.finish();
        listView.invalidateViews();
        progressbar.setVisibility(View.GONE);
        Toast.makeText(getActivity(), "Deleted", Toast.LENGTH_SHORT).show();

        if (spinner.getSelectedItem().toString().equals("All")){
            countryList = new ArrayList<Country_items>();
            try {
                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                System.out.println("COUNT : " + allrows.getCount());


                //Country_items country = new Country_items(name, name, name, name);

                if (allrows.moveToFirst()) {
                    do {
                        String ID = allrows.getString(0);
                        String NAme = allrows.getString(1);
                        String BAr = allrows.getString(16);
                        String PRiCe = allrows.getString(2);
                        String QtY = allrows.getString(3);
                        String PlaCe = allrows.getString(2);
                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                        countryList.add(NAME);
                        //countryList.add(PLACE);
                    } while (allrows.moveToNext());
                }
                allrows.close();
//                                                db.close();
            } catch (Exception e) {
                Toast.makeText(getActivity(), "Error encountered.",
                        Toast.LENGTH_LONG);
            }
        }else {
            if (!spinner.getSelectedItem().toString().equals("All")){
                countryList = new ArrayList<Country_items>();
                try {
                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '"+selected+"' ", null);
                    System.out.println("COUNT : " + allrows.getCount());

                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            String PlaCe = allrows.getString(2);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                                                    db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            }
        }

        dataAdapter = new MyCustomAdapter(getActivity(),
                R.layout.items_list_details, countryList);
        final ListView listView = (ListView) getActivity().findViewById(R.id.listView);
        // Assign adapter to ListView
        listView.setAdapter(dataAdapter);


    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        setHasOptionsMenu(true);
        rootview = inflater.inflate(R.layout.fragment_multi_item1, null);
        listView = (ListView) rootview.findViewById(R.id.listView);

        SharedPreferences sharedpreferences_select =  SplashScreenActivity_Selection.getDefaultSharedPreferencesMultiProcess(getActivity());
        String account_selection= sharedpreferences_select.getString("account_selection", null);

        if (account_selection.toString().equals("Dine")) {
            WebserviceUrl = "https://theandroidpos.com/IVEPOS_NEW/";
        }else {
            if (account_selection.toString().equals("Qsr")) {
                WebserviceUrl = "https://theandroidpos.com/IVEPOS_NEW/";
            }else {
                WebserviceUrl = "https://theandroidpos.com/IVEPOSRETAIL_NEW/";
            }
        }

        MyServiceApp_swiperefresh.setOnProgressChangedListener(this);

        action = (RelativeLayout) rootview.findViewById(R.id.action);
        action1 = (LinearLayout) rootview.findViewById(R.id.action1);

        updateBar= rootview.findViewById(R.id.updatebar);
        updateBar.setMax(426);
        progressBar_license = (CardView) rootview.findViewById(R.id.progressbar1);
        tv_perc=rootview.findViewById(R.id.tv_perc);

        //        pullToRefresh = rootview.findViewById(R.id.pullToRefresh);
//        pullToRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
//            @Override
//            public void onRefresh() {
//
//                Toast.makeText(getActivity(), "Here8", Toast.LENGTH_SHORT).show();
////                refreshData(); // your code
////                pullToRefresh.setRefreshing(false);
//
//                final ConnectivityManager cm = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
//
//                if (cm != null) {
//                    if (Build.VERSION.SDK_INT < 23) {
//                        try {
//                            Process p1 = java.lang.Runtime.getRuntime().exec("ping -c 1 www.google.com");
//                            int returnVal = p1.waitFor();
//                            reachable = (returnVal==0);
//                            System.out.println(""+reachable);
//                        } catch (Exception e) {
//                            // TODO Auto-generated catch block
//                            e.printStackTrace();
//                        }
////                            return result;
//                    } else {
//                        boolean isOnline = false;
//                        try {
//                            ConnectivityManager manager = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
//                            NetworkCapabilities capabilities = manager.getNetworkCapabilities(manager.getActiveNetwork());  // need ACCESS_NETWORK_STATE permission
//                            isOnline = capabilities != null && capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED);
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }
//
//                        if (isOnline){
//                            System.out.println("internet");
//                            reachable = true;
//                        }else {
//                            System.out.println("no internet");
//                            reachable = false;
//                        }
//
//                        if(reachable){
//
//
//                            action.setVisibility(View.GONE);
//
//                            action1.setVisibility(View.GONE);
//
//                            progressBar_license.setVisibility(View.VISIBLE);
//
//                            new DeleteData().execute();
//
//                        }else {
//                            AlertDialog alertDialog = new AlertDialog.Builder(getActivity()).create();
//
//                            alertDialog.setTitle(getString(R.string.title10));
//                            alertDialog.setMessage(getString(R.string.setmessage19));
//                            alertDialog.setIcon(android.R.drawable.ic_dialog_alert);
//                            alertDialog.setButton(DialogInterface.BUTTON_POSITIVE, "OK", new DialogInterface.OnClickListener() {
//                                @Override
//                                public void onClick(DialogInterface dialog, int which) {
//                                    // finish();
//                                }
//                            });
//
//                            alertDialog.show();
//
//                            pullToRefresh.setRefreshing(false);
//
//                        }
//
////                    return isOnline;
//                    }
//                }
//
//            }
//        });

        mContext = getActivity();

        mSpnSeries = (Spinner) rootview.findViewById(R.id.spnModel);
        ArrayAdapter<SpnModelsItem> seriesAdapter = new ArrayAdapter<SpnModelsItem>(getActivity(), android.R.layout.simple_spinner_item);
        seriesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        seriesAdapter.add(new SpnModelsItem(getString(R.string.printerseries_t82), Printer.TM_T82));
        mSpnSeries.setAdapter(seriesAdapter);
        mSpnSeries.setSelection(0);

        mSpnLang = (Spinner) rootview.findViewById(R.id.spnLang);
        ArrayAdapter<SpnModelsItem> langAdapter = new ArrayAdapter<SpnModelsItem>(getActivity(), android.R.layout.simple_spinner_item);
        langAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        langAdapter.add(new SpnModelsItem(getString(R.string.lang_ank), Printer.MODEL_ANK));
        mSpnLang.setAdapter(langAdapter);
        mSpnLang.setSelection(0);


//        try {
//            com.epson.epos2.Log.setLogSettings(mContext, com.epson.epos2.Log.PERIOD_TEMPORARY, com.epson.epos2.Log.OUTPUT_STORAGE, null, 0, 1, com.epson.epos2.Log.LOGLEVEL_LOW);
//        } catch (Exception e) {
////            Toast.makeText(getActivity(), "Here8", Toast.LENGTH_SHORT).show();
//            ShowMsg.showException(e, "setLogSettings", mContext);
//        }
        mEditTarget = (EditText) rootview.findViewById(R.id.edtTarget);

//        getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);

        if (getActivity() instanceof AppCompatActivity){
            androidx.appcompat.app.ActionBar actionbar = ((AppCompatActivity) getActivity()).getSupportActionBar();
            actionbar.setSubtitle("Item");
        }


//        alertDialogItems1 = new AlertDialog.Builder(getActivity()).create();
//        alertDialogItems1.setMessage(getString(R.string.setmessage12));
//        alertDialogItems1.show();
//
//        final Handler handler = new Handler();
//        handler.postDelayed(new Runnable() {
//            @Override
//            public void run() {
//                alertDialogItems1.dismiss();
//            }
//        }, 4000); //3000 L = 3 detik

        dialogp = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);

        dialog_no_of_items = new TextView(getActivity());

        progressbar = rootview.findViewById(R.id.progressbar);
        bar=rootview.findViewById(R.id.proceed_button);

        circle = rootview.findViewById(R.id.circle);
        progress_text = rootview.findViewById(R.id.progress_text);
//        circle.getIndeterminateDrawable().setColorFilter(0xFF5D5D5D, android.graphics.PorterDuff.Mode.MULTIPLY);

        mCredential = GoogleAccountCredential.usingOAuth2(
                        getActivity().getApplicationContext(), Arrays.asList(SCOPES))
                .setBackOff(new ExponentialBackOff());

        mProgress = new ProgressDialog(getActivity());
        mProgress.setMessage("Sending mail ...");

        SimpleDateFormat sdf2_pro = new SimpleDateFormat("yyyyMMdd");
        currentDateandTime1_pro = sdf2_pro.format(new Date());

        item = (RelativeLayout) rootview.findViewById(R.id.item);
        item.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (v.getId()){
                    case R.id.item:

                        Fragment i = new DatabaseitemActivity();
                        FragmentTransaction ft = getFragmentManager().beginTransaction();
                        ft.replace(R.id.container, i);
                        getFragmentManager().popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                        ft.commit();
                        break;
                }
            }
        });

        category = (RelativeLayout) rootview.findViewById(R.id.category);
        category.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (v.getId()){
                    case R.id.category:
                        Fragment i = new DatabasecategoryActivity();
                        FragmentTransaction ft = getFragmentManager().beginTransaction();
                        ft.replace(R.id.container, i);
                        getFragmentManager().popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                        ft.commit();
                        break;
                }
            }
        });

        modifier = (RelativeLayout) rootview.findViewById(R.id.modifier);
        modifier.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (v.getId()){
                    case R.id.modifier:
                        Fragment i = new DatabaseModifiersActivity();
                        FragmentTransaction ft = getFragmentManager().beginTransaction();
                        ft.replace(R.id.container, i);
                        getFragmentManager().popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                        ft.commit();
                        break;
                }
            }
        });

        tax1 = (RelativeLayout) rootview.findViewById(R.id.tax1);
        tax1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (v.getId()){
                    case R.id.tax1:
                        if (account_selection.toString().equals("Dine")) {
                            Fragment i = new DatabasetaxesActivity();
                            FragmentTransaction ft = getFragmentManager().beginTransaction();
                            ft.replace(R.id.container, i);
                            getFragmentManager().popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                            ft.commit();
                        }else {
                            if (account_selection.toString().equals("Qsr")) {
                                Fragment i = new DatabasetaxesActivity_Qsr();
                                FragmentTransaction ft = getFragmentManager().beginTransaction();
                                ft.replace(R.id.container, i);
                                getFragmentManager().popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                                ft.commit();
                            }else {
                                Fragment i = new DatabasetaxesActivity_Retail();
                                FragmentTransaction ft = getFragmentManager().beginTransaction();
                                ft.replace(R.id.container, i);
                                getFragmentManager().popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                                ft.commit();
                            }
                        }
                        break;
                }
            }
        });

        discount1 = (RelativeLayout) rootview.findViewById(R.id.discount1);
        discount1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (v.getId()){
                    case R.id.discount1:
                        Fragment i = new DatabaseDiscountActivity();
                        FragmentTransaction ft = getFragmentManager().beginTransaction();
                        ft.replace(R.id.container, i);
                        getFragmentManager().popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                        ft.commit();
                        break;
                }
            }
        });


        get_image = (de.hdodenhof.circleimageview.CircleImageView)rootview.findViewById(R.id.get_image);

        hideKeyboard(getContext());
        donotshowKeyboard(getActivity());

        search = (EditText)rootview.findViewById(R.id.searchView);

        linearLayout = (RelativeLayout)rootview.findViewById(R.id.add_item);
        additem = (FloatingActionButton)rootview.findViewById(R.id.add_button);

        LinearLayout closeadd = (LinearLayout)rootview.findViewById(R.id.closeadd);
        closeadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //Toast.makeText(getActivity(), "hii", Toast.LENGTH_SHORT).show();
                linearLayout.setVisibility(View.GONE);
                additem.setVisibility(View.VISIBLE);
                hideKeyboard(getContext());
                search.setEnabled(true);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                    InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                    imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                }
            }
        });
        final EditText one = (EditText)rootview.findViewById(R.id.editText1);
        layoutitemname = (TextInputLayout) rootview.findViewById(R.id.layout_itemname);

        InputMethodManager imm = (InputMethodManager)getActivity().getSystemService(getActivity().INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(search.getWindowToken(), 0);
        //one.setText("");
        one.addTextChangedListener(new TextWatcher() {

            public void afterTextChanged(Editable s) {
            }

            public void beforeTextChanged(CharSequence s, int start,
                                          int count, int after) {
            }

            public void onTextChanged(CharSequence s, int start,
                                      int before, int count) {
                layoutitemname.setError(null);
            }
        });

        final EditText two = (EditText)rootview.findViewById(R.id.editText2);
        final TextInputLayout layoutprice = (TextInputLayout) rootview.findViewById(R.id.layout_price);
        layout_barcode = (TextInputLayout) rootview.findViewById(R.id.layout_barcode);

        two.addTextChangedListener(new TextWatcher() {

            public void afterTextChanged(Editable s) {
            }

            public void beforeTextChanged(CharSequence s, int start,
                                          int count, int after) {
            }

            public void onTextChanged(CharSequence s, int start,
                                      int before, int count) {
                layoutprice.setError(null);
            }
        });

        mySwitch = (CheckBox)rootview.findViewById(R.id.mySwitch);

        mySwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {

                }else {

                }
            }
        });


        try {

            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE,null);
            db_inapp = getActivity().openOrCreateDatabase("amazoninapp", Context.MODE_PRIVATE, null);
            //displayListView(rootview);//Generate ListView from SQLite Database

        }catch (SQLiteException e){
            alertas("Error inesperado: " + e.getMessage());
        }


        Cursor cursor_country = db.rawQuery("SELECT * FROM Country_Selection", null);
        if (cursor_country.moveToFirst()){
            str_country = cursor_country.getString(1);
        }
        cursor_country.close();

        if (str_country.toString().equals("Rupee") || str_country.toString().equals("India")) {
            insert1_cc = "\u20B9";
            insert1_rs = "Rs.";
        }else {
            if (str_country.toString().equals("Pound") || str_country.toString().equals("UK Pound")) {
                insert1_cc = "\u00a3";
                insert1_rs = "BP.";
            }else {
                if (str_country.toString().equals("Euro") || str_country.toString().equals("UK Euro")) {
                    insert1_cc = "\u20ac";
                    insert1_rs = "EU.";
                }else {
                    if (str_country.toString().equals("Dollar")) {
                        insert1_cc = "\u0024";
                        insert1_rs = "\u0024";
                    }else {
                        if (str_country.toString().equals("Dinar")) {
                            insert1_cc = "D";
                            insert1_rs = "KD.";
                        }else {
                            if (str_country.toString().equals("Shilling")) {
                                insert1_cc = "S";
                                insert1_rs = "S.";
                            }else {
                                if (str_country.toString().equals("Ringitt")) {
                                    insert1_cc = "R";
                                    insert1_rs = "RM.";
                                }else {
                                    if (str_country.toString().equals("Rial")) {
                                        insert1_cc = "R";
                                        insert1_rs = "OR.";
                                    }else {
                                        if (str_country.toString().equals("Yen")) {
                                            insert1_cc = "\u00a5";
                                            insert1_rs = "\u00a5";
                                        }else {
                                            if (str_country.toString().equals("Papua New Guinean")) {
                                                insert1_cc = "K";
                                                insert1_rs = "K.";
                                            }else {
                                                if (str_country.toString().equals("UAE")) {
                                                    insert1_cc = "D";
                                                    insert1_rs = "DH.";
                                                }else {
                                                    if (str_country.toString().equals("South African Rand")) {
                                                        insert1_cc = "R";
                                                        insert1_rs = "R.";
                                                    }else {
                                                        if (str_country.toString().equals("Congolese Franc")) {
                                                            insert1_cc = "F";
                                                            insert1_rs = "FC.";
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }


        db.execSQL("UPDATE Taxes SET checked = ''");

//        Cursor cursor1_1 = db.rawQuery("SELECT * FROM Taxes", null);
//        if (cursor1_1.moveToFirst()){
//            do {
//                String id = cursor1_1.getString(0);
//                ContentValues contentValues = new ContentValues();
//                contentValues.put("checked", "");
//                String where1 = "_id = '"+id+"' ";
//
//                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
//                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
//                resultUri = new Uri.Builder()
//                        .scheme("content")
//                        .authority(StubProviderApp.AUTHORITY)
//                        .path("Taxes")
//                        .appendQueryParameter("operation", "update")
//                        .appendQueryParameter("_id", id)
//                        .build();
//                getActivity().getContentResolver().notifyChange(resultUri, null);
//
////                db.update("Taxes", contentValues, where1, new String[]{});
//            }while (cursor1_1.moveToNext());
//        }
//        cursor1_1.close();

        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
        final String currentDateandTime1 = sdf2.format(new Date());

        Cursor cursor1 = db_inapp.rawQuery("SELECT * FROM credentialstime", null);
        if (cursor1.moveToFirst()) {
            date = cursor1.getString(9);//22mar2018   }
        }
        cursor1.close();

        da = date; //yyyymmdd
        intdate = Integer.parseInt(currentDateandTime1);

        Cursor ccornn = db.rawQuery("SELECT * FROM BTConn", null);
        if (ccornn.moveToFirst()) {
            nameget = ccornn.getString(1);
            addget = ccornn.getString(2);
            statussusb = ccornn.getString(3);
            mEditTarget.setText(addget);
        }
        ccornn.close();

        buttonBarcodetype = new Button(getActivity());
        buttonStartOrgx = new Button(getActivity());
        buttonBarcodeWidth = new Button(getActivity());
        buttonBarcodeHeight = new Button(getActivity());
        buttonBarcodeFontType = new Button(getActivity());
        buttonBarcodeFontPosition = new Button(getActivity());


        Cursor callrowss = db.rawQuery("SELECT * FROM Auto_generate_barcode WHERE _id = '1'", null);
        if (callrowss.moveToFirst()) {
            do {
                NAME3 = callrowss.getString(1);
            } while (callrowss.moveToNext());
        }
        callrowss.close();

        spinner = (Spinner)rootview.findViewById(R.id.chocolate_category);
        ArrayList<String> my_arrayy = getTableValues2();
        final ArrayAdapter my_Adapterr = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                my_arrayy);
        spinner.setAdapter(my_Adapterr);

        listView = (ListView) rootview.findViewById(R.id.listView);


//        if (spinner.getSelectedItem().toString().equals("All")){
//            countryList = new ArrayList<Country_items>();
//            try {
//                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//                Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
//                System.out.println("COUNT : " + allrows.getCount());
//
//                //Country_items country = new Country_items(name, name, name, name);
//
//                if (allrows.moveToFirst()) {
//                    do {
//                        String ID = allrows.getString(0);
//                        String NAme = allrows.getString(1);
//                        String BAr = allrows.getString(16);
//                        String PRiCe = allrows.getString(2);
//                        String QtY = allrows.getString(3);
//                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
//                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
//                        countryList.add(NAME);
//                        //countryList.add(PLACE);
//                    } while (allrows.moveToNext());
//                }
//                allrows.close();
////                db.close();
//            } catch (Exception e) {
//                Toast.makeText(getActivity(), "Error encountered.",
//                        Toast.LENGTH_LONG);
//            }
//        }

        //countryList = new ArrayList<Country_items>();

        //Toast.makeText(getActivity(), "111", Toast.LENGTH_SHORT).show();

        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, final int position, long id) {
                selected = parent.getItemAtPosition(position).toString();


                DownloadMusicfromInternet1_display downloadMusicfromInternet1_display = new DownloadMusicfromInternet1_display();
                downloadMusicfromInternet1_display.execute();

//
//                //countryList = new ArrayList<Country_items>();
//
//                //Toast.makeText(getActivity(), "222", Toast.LENGTH_SHORT).show();
//
//
//
////                DownloadMusicfromInternet1 downloadMusicfromInternet = new DownloadMusicfromInternet1();
////                downloadMusicfromInternet.execute();
//
//                countryList = new ArrayList<Country_items>();
//
//                //enables filtering for the contents of the given ListView
//                listView.setTextFilterEnabled(true);


            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

//        dataAdapter = new MyCustomAdapter(getActivity(),
//                R.layout.items_list_details, countryList);
//        listView = (ListView) rootview.findViewById(R.id.listView);
//        // Assign adapter to ListView
//        listView.setAdapter(dataAdapter);

        //enables filtering for the contents of the given ListView
        listView.setTextFilterEnabled(true);

        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view,
                                    final int position, long id) {

            }
        });

        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
        listView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {

            @Override
            public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
                // TODO  Auto-generated method stub
                return false;
            }

            @Override
            public void onDestroyActionMode(ActionMode mode) {
                mode.invalidate();
                // TODO  Auto-generated method stub
            }

            @Override
            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
                // TODO  Auto-generated method stub
                mode.getMenuInflater().inflate(R.menu.multiple_delete, menu);
                return true;

            }

            @Override
            public boolean onActionItemClicked(final ActionMode mode,
                                               MenuItem item) {
                mode1=mode;
                // TODO  Auto-generated method stub
                switch (item.getItemId()) {
                    case R.id.selectAll:
                        //
                        final int checkedCount = countryList.size();
                        // If item  is already selected or checked then remove or
                        // unchecked  and again select all
                        //adapter.removeSelection();
                        for (int i = 0; i < checkedCount; i++) {
                            listView.setItemChecked(i, true);
                            //  listviewadapter.toggleSelection(i);
                        }
                        // Set the  CAB title according to total checked items

                        // Calls  toggleSelection method from ListViewAdapter Class

                        // Count no.  of selected item and print it
                        mode.setTitle(checkedCount + " Selected items ");
                        return true;
                    case R.id.move:
                        final Dialog dialog = new Dialog(getActivity(), R.style.notitle);
                        dialog.setContentView(R.layout.move1);
                        dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

//                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//                        listView1 = (ListView) dialog.findViewById(R.id.listView);
//                        String selectQuery = "SELECT * FROM Hotel";
//                        cursor = db.rawQuery(selectQuery, null);//replace to cursor = dbHelper.fetchAllHotels();
//                        // The desired columns to be bound
//                        String[] fromFieldNames = {"name"};
//                        // the XML defined views which the data will be bound to
//                        int[] toViewsID = {R.id.tv};
//                        Log.e("Checamos que hay id", String.valueOf(R.id.name));
//                        final SimpleCursorAdapter ddataAdapter = new SimpleCursorAdapter(getActivity(), R.layout.list_checkbox, cursor, fromFieldNames, toViewsID, 0);
//                        listView1.setAdapter(ddataAdapter);


                        listView1 = (ListView) dialog.findViewById(R.id.listView);
                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);

                        final ArrayList<String> my_array = new ArrayList<String>();
                        my_array.add("None");
                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                        Cursor allrows = db.rawQuery("SELECT * FROM Hotel", null);
                        if (allrows.moveToFirst()) {
                            do {

                                String ID = allrows.getString(0);
                                String NAME = allrows.getString(1);
                                String PLACE = allrows.getString(2);
                                if (NAME.equals("All") || NAME.equals("Favourites")) {

                                } else {
                                    my_array.add(NAME);
                                }

                            } while (allrows.moveToNext());
                        }
                        allrows.close();
                        final ArrayAdapter my_Adapter = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                                my_array);
                        listView1.setAdapter(my_Adapter);


                        EditText myFilter = (EditText) dialog.findViewById(R.id.editText1);
                        myFilter.addTextChangedListener(new TextWatcher() {

                            public void afterTextChanged(Editable s) {
                            }

                            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                            }

                            public void onTextChanged(CharSequence s, int start, int before, int count) {
                                my_Adapter.getFilter().filter(s.toString());
                                my_Adapter.notifyDataSetChanged();
                            }
                        });

//                        ddataAdapter.setFilterQueryProvider(new FilterQueryProvider() {
//                            public Cursor runQuery(CharSequence constraint) {
//                                return fetchCountriesByName1(constraint.toString());
//                            }
//                        });
                        final int[] save = {-1};
                        listView1.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                            @Override
                            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
//                                final Cursor cursor = (Cursor) parent.getItemAtPosition(position);
//                                final String ItemIDDD = cursor.getString(cursor.getColumnIndex("name"));

                                final String ItemIDDD = parent.getItemAtPosition(position).toString();

                                final Dialog dialog1 = new Dialog(getActivity(), R.style.notitle);
                                dialog1.setContentView(R.layout.moveto_confirm_dialog);

                                TextView can = (TextView) dialog1.findViewById(R.id.cat_name);
                                can.setText(ItemIDDD);

                                Button cana = (Button) dialog1.findViewById(R.id.cancel);
                                cana.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        dialog1.dismiss();
                                    }
                                });

                                ImageView closetext = (ImageView) dialog1.findViewById(R.id.closetext);
                                closetext.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        dialog1.dismiss();
                                    }
                                });

                                class DownloadMusicfromInternet1 extends AsyncTask<String, Void, Integer> {

                                    @Override
                                    protected Integer doInBackground(String... params) {
                                        try {

                                            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                            int len = listView.getCount();
                                            SparseBooleanArray checked = listView.getCheckedItemPositions();
                                            for (int i = 0; i < len; i++) {
                                                if (checked.get(i)) {

                                                    Country_items country = countryList.get(i);
                                                    String an = country.getCode();
                                                    String an_name = country.getName();

                                                    /* do whatever you want with the checked item */
                                                    Cursor qqq = db.rawQuery("SELECT * from Items WHERE _id = '" + an + "' ", null);
                                                    while (qqq.moveToNext()) {

                                                        ContentValues contentValues1 = new ContentValues();
                                                        contentValues1.put("category", String.valueOf(ItemIDDD));

//                                                            String qqqq = qqq.getString(7);
                                                        String where = "_id = '" + an + "' ";

                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues1,where,new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", an)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                                        String where1_v1 = "itemname = '" + an_name + "'";
                                                        //   db.update("Items", contentValues1, where, new String[]{});
                                                        db.update("Items_Virtual", contentValues1, where1_v1, new String[]{});

//                                                        db.update("Items", contentValues1, where, new String[]{});


                                                    }
//                                                    qqq.requery();
                                                    qqq.close();
//                                                    my_Adapter.notifyDataSetChanged();

                                                }
                                            }


                                        } catch (NumberFormatException e) {
                                            e.printStackTrace();
                                        } catch (SQLException e) {
                                            e.printStackTrace();
                                        } catch(Exception e){
                                            e.printStackTrace();
                                        }

                                        return null;
                                    }

                                    // Show Progress bar before downloading Music
                                    @Override
                                    protected void onPreExecute() {
                                        super.onPreExecute();
                                        dialog1.dismiss();

                                        dialog.dismiss();

                                        progressbar.setVisibility(View.VISIBLE);
                                        progress_text.setText("Moving...");


                                    }


                                    @Override
                                    protected void onPostExecute(Integer file_url) {

                                        mode.finish();
                                        progressbar.setVisibility(View.GONE);
                                        listView.invalidateViews();
                                        Toast.makeText(getActivity(), "moved to " + ItemIDDD, Toast.LENGTH_SHORT).show();

                                        if (!spinner.getSelectedItem().toString().equals("All")) {
//                                                //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                                            Cursor fr = db.rawQuery("SELECT * FROM Items", null);
                                            int numberOfRows = fr.getCount();
                                            countryList = new ArrayList<Country_items>();
                                            try {
                                                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                int limit = 0;
                                                if (numberOfRows > 100){
                                                    while (limit + 100 < numberOfRows) {
                                                        Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "' LIMIT '"+ limit+"', 100", null);
                                                        System.out.println("COUNT : " + allrows.getCount());

                                                        if (allrows.moveToFirst()) {
                                                            do {
                                                                String ID = allrows.getString(0);
                                                                String NAme = allrows.getString(1);
                                                                String BAr = allrows.getString(16);
                                                                String PRiCe = allrows.getString(2);
                                                                String QtY = allrows.getString(3);
                                                                String PlaCe = allrows.getString(2);
                                                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                                countryList.add(NAME);
                                                                //countryList.add(PLACE);
                                                            } while (allrows.moveToNext());
                                                        }
                                                        allrows.close();
                                                        limit += 100;
                                                    }
                                                    int news = numberOfRows - limit;
                                                    if (news == 0){
                                                        //Toast.makeText(getActivity(), "limit is b " + limit, Toast.LENGTH_SHORT).show();
                                                    }else {
                                                        Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "' LIMIT '"+ news+"' OFFSET '"+limit+"'", null);
                                                        System.out.println("COUNT : " + allrows.getCount());

                                                        if (allrows.moveToFirst()) {
                                                            do {
                                                                String ID = allrows.getString(0);
                                                                String NAme = allrows.getString(1);
                                                                String BAr = allrows.getString(16);
                                                                String PRiCe = allrows.getString(2);
                                                                String QtY = allrows.getString(3);
                                                                String PlaCe = allrows.getString(2);
                                                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                                countryList.add(NAME);
                                                                //countryList.add(PLACE);
                                                            } while (allrows.moveToNext());
                                                        }
                                                        allrows.close();
                                                    }
                                                }else {
                                                    Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "'", null);
                                                    System.out.println("COUNT : " + allrows.getCount());

                                                    if (allrows.moveToFirst()) {
                                                        do {
                                                            String ID = allrows.getString(0);
                                                            String NAme = allrows.getString(1);
                                                            String BAr = allrows.getString(16);
                                                            String PRiCe = allrows.getString(2);
                                                            String QtY = allrows.getString(3);
                                                            String PlaCe = allrows.getString(2);
                                                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                            countryList.add(NAME);
                                                            //countryList.add(PLACE);
                                                        } while (allrows.moveToNext());
                                                    }
                                                    allrows.close();
                                                }

                                                fr.close();
                                                //db.close();
                                            } catch (Exception e) {
                                                Toast.makeText(getActivity(), "Error encountered.",
                                                        Toast.LENGTH_LONG);
                                            }
                                        }
                                        if (spinner.getSelectedItem().toString().equals("All")) {
                                            //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                                            Cursor fr = db.rawQuery("SELECT * FROM Items", null);
                                            int numberOfRows = fr.getCount();
                                            countryList = new ArrayList<Country_items>();
                                            try {
                                                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                int limit = 0;
                                                if (numberOfRows > 100){
                                                    while (limit + 100 < numberOfRows) {
                                                        Cursor allrows = db.rawQuery("SELECT * FROM Items LIMIT '"+ limit+"', 100", null);
                                                        System.out.println("COUNT : " + allrows.getCount());

                                                        if (allrows.moveToFirst()) {
                                                            do {
                                                                String ID = allrows.getString(0);
                                                                String NAme = allrows.getString(1);
                                                                String BAr = allrows.getString(16);
                                                                String PRiCe = allrows.getString(2);
                                                                String QtY = allrows.getString(3);
                                                                String PlaCe = allrows.getString(2);
                                                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                                countryList.add(NAME);
                                                                //countryList.add(PLACE);
                                                            } while (allrows.moveToNext());
                                                        }
                                                        allrows.close();
                                                        limit += 100;
                                                    }
                                                    int news = numberOfRows - limit;
                                                    if (news == 0){
                                                        //Toast.makeText(getActivity(), "limit is b " + limit, Toast.LENGTH_SHORT).show();
                                                    }else {
                                                        Cursor allrows = db.rawQuery("SELECT * FROM Items  LIMIT '"+ news+"' OFFSET '"+limit+"'", null);
                                                        System.out.println("COUNT : " + allrows.getCount());

                                                        if (allrows.moveToFirst()) {
                                                            do {
                                                                String ID = allrows.getString(0);
                                                                String NAme = allrows.getString(1);
                                                                String BAr = allrows.getString(16);
                                                                String PRiCe = allrows.getString(2);
                                                                String QtY = allrows.getString(3);
                                                                String PlaCe = allrows.getString(2);
                                                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                                countryList.add(NAME);
                                                                //countryList.add(PLACE);
                                                            } while (allrows.moveToNext());
                                                        }
                                                        allrows.close();
                                                    }
                                                }else {
                                                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                                                    System.out.println("COUNT : " + allrows.getCount());

                                                    if (allrows.moveToFirst()) {
                                                        do {
                                                            String ID = allrows.getString(0);
                                                            String NAme = allrows.getString(1);
                                                            String BAr = allrows.getString(16);
                                                            String PRiCe = allrows.getString(2);
                                                            String QtY = allrows.getString(3);
                                                            String PlaCe = allrows.getString(2);
                                                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                            countryList.add(NAME);
                                                            //countryList.add(PLACE);
                                                        } while (allrows.moveToNext());
                                                    }
                                                    allrows.close();
                                                }

                                                fr.close();
                                                //db.close();
                                            } catch (Exception e) {
                                                Toast.makeText(getActivity(), "Error encountered.",
                                                        Toast.LENGTH_LONG);
                                            }

                                        }

                                        dataAdapter = new MyCustomAdapter(getActivity(),
                                                R.layout.items_list_details, countryList);
                                        final ListView listView = (ListView) rootview.findViewById(R.id.listView);
                                        // Assign adapter to ListView
                                        listView.setAdapter(dataAdapter);

                                    }
                                }


                                Button button1 = (Button) dialog1.findViewById(R.id.ok);
                                button1.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
//                                        Toast.makeText(getActivity(), "moved to " + ItemIDDD, Toast.LENGTH_SHORT).show();

                                        DownloadMusicfromInternet1 downloadMusicfromInternet1 = new DownloadMusicfromInternet1();
                                        downloadMusicfromInternet1.execute();

                                    }
                                });
                                dialog1.show();


                            }
                        });

                        ImageView imageView = (ImageView) dialog.findViewById(R.id.closetext);
                        imageView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                dialog.dismiss();
                            }
                        });

                        dialog.show();
                        return true;
                    case R.id.delete:
                        // Add  dialog for confirmation to delete selected item
                        // record.

                        final Dialog dialogq = new Dialog(getActivity(), R.style.notitle);
                        dialogq.setContentView(R.layout.delete_item_selected);

                        ImageView imageVieww = (ImageView) dialogq.findViewById(R.id.closetext);
                        imageVieww.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                dialogq.dismiss();
                            }
                        });

                        Button buttonn = (Button) dialogq.findViewById(R.id.cancel);
                        buttonn.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                dialogq.dismiss();
                            }
                        });

                        class DownloadMusicfromInternetdel1 extends AsyncTask<String, Void, Integer> {

                            @Override
                            protected Integer doInBackground(String... params) {
                                try {

                                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                    int len = listView.getCount();
                                    SparseBooleanArray checked = listView.getCheckedItemPositions();
                                    for (int i = 0; i < len; i++) {
                                        if (checked.get(i)) {

                                            Country_items country = countryList.get(i);
                                            String an = country.getCode();
                                            String an_name = country.getName();

                                            /* do whatever you want with the checked item */
                                            String where = "_id = '" + an + "' ";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().delete(contentUri, where, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "delete")
                                                    .appendQueryParameter("_id", an)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            db.delete("Items", where, new String[]{});

                                            String where1_v1 = "itemname = '" + an_name + "' ";
                                            db.delete("Items_Virtual", where, new String[]{});

                                        }
                                    }

                                } catch (NumberFormatException e) {
                                    e.printStackTrace();
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                } catch(Exception e){
                                    e.printStackTrace();
                                }

                                return null;
                            }

                            // Show Progress bar before downloading Music
                            @Override
                            protected void onPreExecute() {
                                super.onPreExecute();

                                dialogq.dismiss();
                                progressbar.setVisibility(View.VISIBLE);
                                progress_text.setText("Deleting...");

                            }


                            @Override
                            protected void onPostExecute(Integer file_url) {

                                mode.finish();
                                listView.invalidateViews();
                                progressbar.setVisibility(View.GONE);
                                Toast.makeText(getActivity(), "Deleted", Toast.LENGTH_SHORT).show();

                                if (!spinner.getSelectedItem().toString().equals("All")) {
                                    //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                                    Cursor fr = db.rawQuery("SELECT * FROM Items", null);
                                    int numberOfRows = fr.getCount();
                                    countryList = new ArrayList<Country_items>();
                                    try {
                                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                        int limit = 0;
                                        if (numberOfRows > 100){
                                            while (limit + 100 < numberOfRows) {
                                                Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "' LIMIT '"+ limit+"', 100", null);
                                                System.out.println("COUNT : " + allrows.getCount());

                                                if (allrows.moveToFirst()) {
                                                    do {
                                                        String ID = allrows.getString(0);
                                                        String NAme = allrows.getString(1);
                                                        String BAr = allrows.getString(16);
                                                        String PRiCe = allrows.getString(2);
                                                        String QtY = allrows.getString(3);
                                                        String PlaCe = allrows.getString(2);
                                                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                        countryList.add(NAME);
                                                        //countryList.add(PLACE);
                                                    } while (allrows.moveToNext());
                                                }
                                                allrows.close();
                                                limit += 100;
                                            }
                                            int news = numberOfRows - limit;
                                            if (news == 0){
                                                //Toast.makeText(getActivity(), "limit is b " + limit, Toast.LENGTH_SHORT).show();
                                            }else {
                                                Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "' LIMIT '"+ news+"' OFFSET '"+limit+"'", null);
                                                System.out.println("COUNT : " + allrows.getCount());

                                                if (allrows.moveToFirst()) {
                                                    do {
                                                        String ID = allrows.getString(0);
                                                        String NAme = allrows.getString(1);
                                                        String BAr = allrows.getString(16);
                                                        String PRiCe = allrows.getString(2);
                                                        String QtY = allrows.getString(3);
                                                        String PlaCe = allrows.getString(2);
                                                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                        countryList.add(NAME);
                                                        //countryList.add(PLACE);
                                                    } while (allrows.moveToNext());
                                                }
                                                allrows.close();
                                            }
                                        }else {
                                            Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "'", null);
                                            System.out.println("COUNT : " + allrows.getCount());

                                            if (allrows.moveToFirst()) {
                                                do {
                                                    String ID = allrows.getString(0);
                                                    String NAme = allrows.getString(1);
                                                    String BAr = allrows.getString(16);
                                                    String PRiCe = allrows.getString(2);
                                                    String QtY = allrows.getString(3);
                                                    String PlaCe = allrows.getString(2);
                                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                    countryList.add(NAME);
                                                    //countryList.add(PLACE);
                                                } while (allrows.moveToNext());
                                            }
                                            allrows.close();
                                        }

                                        fr.close();
                                        //db.close();
                                    } catch (Exception e) {
                                        Toast.makeText(getActivity(), "Error encountered.",
                                                Toast.LENGTH_LONG);
                                    }
                                }
                                if (spinner.getSelectedItem().toString().equals("All")) {
                                    //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                                    Cursor fr = db.rawQuery("SELECT * FROM Items", null);
                                    int numberOfRows = fr.getCount();
                                    countryList = new ArrayList<Country_items>();
                                    try {
                                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                        int limit = 0;
                                        if (numberOfRows > 100){
                                            while (limit + 100 < numberOfRows) {
                                                Cursor allrows = db.rawQuery("SELECT * FROM Items LIMIT '"+ limit+"', 100", null);
                                                System.out.println("COUNT : " + allrows.getCount());

                                                if (allrows.moveToFirst()) {
                                                    do {
                                                        String ID = allrows.getString(0);
                                                        String NAme = allrows.getString(1);
                                                        String BAr = allrows.getString(16);
                                                        String PRiCe = allrows.getString(2);
                                                        String QtY = allrows.getString(3);
                                                        String PlaCe = allrows.getString(2);
                                                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                        countryList.add(NAME);
                                                        //countryList.add(PLACE);
                                                    } while (allrows.moveToNext());
                                                }
                                                allrows.close();
                                                limit += 100;
                                            }
                                            int news = numberOfRows - limit;
                                            if (news == 0){
                                                //Toast.makeText(getActivity(), "limit is b " + limit, Toast.LENGTH_SHORT).show();
                                            }else {
                                                Cursor allrows = db.rawQuery("SELECT * FROM Items  LIMIT '"+ news+"' OFFSET '"+limit+"'", null);
                                                System.out.println("COUNT : " + allrows.getCount());

                                                if (allrows.moveToFirst()) {
                                                    do {
                                                        String ID = allrows.getString(0);
                                                        String NAme = allrows.getString(1);
                                                        String BAr = allrows.getString(16);
                                                        String PRiCe = allrows.getString(2);
                                                        String QtY = allrows.getString(3);
                                                        String PlaCe = allrows.getString(2);
                                                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                        countryList.add(NAME);
                                                        //countryList.add(PLACE);
                                                    } while (allrows.moveToNext());
                                                }
                                                allrows.close();
                                            }
                                        }else {
                                            Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                                            System.out.println("COUNT : " + allrows.getCount());

                                            if (allrows.moveToFirst()) {
                                                do {
                                                    String ID = allrows.getString(0);
                                                    String NAme = allrows.getString(1);
                                                    String BAr = allrows.getString(16);
                                                    String PRiCe = allrows.getString(2);
                                                    String QtY = allrows.getString(3);
                                                    String PlaCe = allrows.getString(2);
                                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                    countryList.add(NAME);
                                                    //countryList.add(PLACE);
                                                } while (allrows.moveToNext());
                                            }
                                            allrows.close();
                                        }

                                        fr.close();
                                        //db.close();
                                    } catch (Exception e) {
                                        Toast.makeText(getActivity(), "Error encountered.",
                                                Toast.LENGTH_LONG);
                                    }
                                }


                                dataAdapter = new MyCustomAdapter(getActivity(),
                                        R.layout.items_list_details, countryList);
                                final ListView listView = (ListView) rootview.findViewById(R.id.listView);
                                // Assign adapter to ListView
                                listView.setAdapter(dataAdapter);

                            }
                        }

                        Button buttonnn = (Button) dialogq.findViewById(R.id.ok);
                        buttonnn.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

//                                DownloadMusicfromInternetdel1 DownloadMusicfromInternetdel1 = new DownloadMusicfromInternetdel1();
//                                DownloadMusicfromInternetdel1.execute();

                                dialogq.dismiss();
                                progressbar.setVisibility(View.VISIBLE);
                                progress_text.setText("Deleting...");

                                SparseBooleanArray checked = listView.getCheckedItemPositions();


                                MyWorker.sbarray = new SparseBooleanArrayParcelable(checked);
                                MyWorker.countryList =countryList;
                                MyWorker.count= listView.getCount();


                                final OneTimeWorkRequest workRequest = new OneTimeWorkRequest.Builder(MyWorker.class).build();
                                WorkManager.getInstance().enqueue(workRequest);

                                WorkManager.getInstance().getWorkInfoByIdLiveData(workRequest.getId())
                                        .observe(getActivity(), new Observer<WorkInfo>() {
                                            @Override
                                            public void onChanged(@Nullable WorkInfo workInfo) {

                                                if(workInfo.getState() == WorkInfo.State.SUCCEEDED){
                                                    postDelete();
                                                }

                                            }
                                        });

//                                Intent serviceIntent = new Intent(getActivity(), ForegroundService.class);
//                                serviceIntent.putExtra("inputExtra", "items delete service");
//                                serviceIntent.putExtra("count",listView.getCount());
//                                serviceIntent.putExtra("checked",new SparseBooleanArrayParcelable(checked));
//                                serviceIntent.putExtra("country",countryList);
//                                ContextCompat.startForegroundService(getActivity(), serviceIntent);

                            }
                        });

                        dialogq.show();


                        return true;
                    default:
                        return false;
                }

            }

            @Override
            public void onItemCheckedStateChanged(ActionMode mode,
                                                  int position, long id, boolean checked) {
                // TODO  Auto-generated method stub
                final int checkedCount = listView.getCheckedItemCount();
                String st = dataAdapter.toString();
                // Set the  CAB title according to total checked items
                //Toast.makeText(getActivity(), "  Selected4", Toast.LENGTH_SHORT).show();
                if (listView.isItemChecked(position)) {

                }
                mode.setTitle(checkedCount + " Selected items ");
                // Calls  toggleSelection method from ListViewAdapter Class
                //adapter.toggleSelection(position);
            }
        });






        ImageView deleteicon = (ImageView)rootview.findViewById(R.id.delete_icon);
        deleteicon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                myFilter.setText("");
            }
        });

        get_image.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                image = "1";
                hideKeyboard(getContext());
                Intent galleryIntent1 = new Intent(Intent.ACTION_PICK,
                        MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                // Start the Intent
                startActivityForResult(galleryIntent1, SELECT_PICTURE);
//                        Intent intent = new Intent();
//                        intent.setType("image/*");
//                        intent.setAction(Intent.ACTION_GET_CONTENT);
//                        startActivityForResult(
//                                Intent.createChooser(intent, "Select Picture"),
//                                SELECT_PICTURE);

            }
        });

        additem = (FloatingActionButton) rootview.findViewById(R.id.add_button);
        additem.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                getActivity().getContentResolver().delete(contentUri, null, null);
                resultUri = new Uri.Builder()
                        .scheme("content")
                        .authority(StubProviderApp.AUTHORITY)
                        .path("variants_temp")
                        .appendQueryParameter("operation", "delete")
                        .appendQueryParameter("1", "1")
                        .build();
                getActivity().getContentResolver().notifyChange(resultUri, null);
//                db.delete("variants_temp", null, null);

//                FragmentManager fragmentManager = getFragmentManager();
//                FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
//                CreateItemActivity hello = new CreateItemActivity();
//                fragmentTransaction.add(R.id.add_item, hello, "HELLO");
//                fragmentTransaction.commit();
                linearLayout = (RelativeLayout) rootview.findViewById(R.id.add_item);
                linearLayout.setVisibility(View.VISIBLE);
                additem.setVisibility(View.GONE);
                search.setEnabled(false);


                Cursor cursor1_1 = db.rawQuery("SELECT * FROM Taxes", null);
                if (cursor1_1.moveToFirst()){
                    do {
                        String id = cursor1_1.getString(0);
                        ContentValues contentValues = new ContentValues();
                        contentValues.put("checked", "");
                        String where1 = "_id = '"+id+"' ";

                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                        getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Taxes")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", id)
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                        db.update("Taxes", contentValues, where1, new String[]{});
                    }while (cursor1_1.moveToNext());
                }
                cursor1_1.close();

                //linearLayout.setVisibility(View.GONE);

                final EditText one = (EditText) rootview.findViewById(R.id.editText1);
                final TextInputLayout layoutitemname = (TextInputLayout) rootview.findViewById(R.id.layout_itemname);
                one.setText("");
                layoutitemname.setError(null);
                final EditText two = (EditText) rootview.findViewById(R.id.editText2);
                final TextInputLayout layoutprice = (TextInputLayout) rootview.findViewById(R.id.layout_price);
                two.setText("");
                layoutprice.setError(null);
                final EditText three = (EditText) rootview.findViewById(R.id.editText3);
                three.setText("");
                get_image = (de.hdodenhof.circleimageview.CircleImageView)rootview.findViewById(R.id.get_image);
                get_image.setImageResource(R.drawable.ic_add_image_48dp);
                selectedImagePath = null;
                selectedImageUri = null;
                //hideKeyboard(getContext());
                one.requestFocus();
                //showKeyboard(getActivity());
                //displayKeyboard();

                InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.showSoftInput(one, InputMethodManager.SHOW_IMPLICIT);

//                getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
                mySwitch = (CheckBox) rootview.findViewById(R.id.mySwitch);

                mySwitch.setChecked(false);

                RelativeLayout barr = (RelativeLayout) rootview.findViewById(R.id.barr);

                barcode_no = (EditText) rootview.findViewById(R.id.barcodenum);
                barcode_no.addTextChangedListener(new TextWatcher() {

                    public void afterTextChanged(Editable s) {
                    }

                    public void beforeTextChanged(CharSequence s, int start,
                                                  int count, int after) {
                    }

                    public void onTextChanged(CharSequence s, int start,
                                              int before, int count) {
                        layout_barcode.setError(null);
                    }
                });

                Cursor callrowss = db.rawQuery("SELECT * FROM Auto_generate_barcode WHERE _id = '1'", null);
                if (callrowss.moveToFirst()) {
                    do {
                        NAME3 = callrowss.getString(1);
                    } while (callrowss.moveToNext());
                }
                callrowss.close();

                if (NAME3.equals("On")) {
                    barr.setVisibility(View.VISIBLE);
                    Cursor cursor = db.rawQuery("SELECT * FROM Items", null);
                    if (cursor.moveToFirst()){
                        int cnt = cursor.getCount();
                        int cnt1 = cnt+1;
                        barcode_no.setText(String.valueOf(cnt1));
                    }
                    cursor.close();
                    //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                } else {
                    barr.setVisibility(View.VISIBLE);
                    //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                }


                text = (EditText) rootview.findViewById(R.id.editText1);

                columnvalue  = text.getText().toString();
                if (text.getText().toString().contains("'")) {
                    columnvalue  = text.getText().toString().replaceAll("'", " ");
                }

                editText = (EditText) rootview.findViewById(R.id.editText2);
                textquan = (EditText) rootview.findViewById(R.id.editText3);
                disedittext = (EditText) rootview.findViewById(R.id.discountvalue1);
                disctypee = (Spinner) rootview.findViewById(R.id.rspercent1);

                ArrayList<String> my_array = new ArrayList<String>();
                my_array.add("%");
                my_array.add(insert1_cc);
                final ArrayAdapter my_Adapterr1 = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                        my_array);
                disctypee.setAdapter(my_Adapterr1);

                printbarcoderootview = (ImageButton) rootview.findViewById(R.id.barcode_print);
                printbarcoderootview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        if (barcode_no.getText().toString().equals("") || text.getText().toString().equals("")){

                        }else {
                            printbarcode_bill();
                        }
                    }
                });

                InputMethodManager imm1 = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                imm1.showSoftInput(text, InputMethodManager.SHOW_IMPLICIT);

                //get_image = (ImageButton)rootview.findViewById(R.id.get_image);
                get_image.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        image = "1";
                        hideKeyboard(getContext());
                        Intent galleryIntent = new Intent(Intent.ACTION_PICK,
                                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                        // Start the Intent
                        startActivityForResult(galleryIntent, SELECT_PICTURE);
//                        Intent intent = new Intent();
//                        intent.setType("image/*");
//                        intent.setAction(Intent.ACTION_GET_CONTENT);
//                        startActivityForResult(
//                                Intent.createChooser(intent, "Select Picture"),
//                                SELECT_PICTURE);

                    }
                });

                spinnercat = (TextView) rootview.findViewById(R.id.chocolate_spinner);
                spinnercat.setText("None");
                LinearLayout linearLayout1 = (LinearLayout) rootview.findViewById(R.id.click);
                spinnercat.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        hideKeyboard(getContext());
                        final Dialog dialog1 = new Dialog(getActivity(), R.style.notitle);
                        dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                        dialog1.setContentView(R.layout.spinnerlist);

                        popupSpinner = (ListView) dialog1.findViewById(R.id.listView5);
                        ArrayList<String> my_arrayy = getTableValuesall();
                        final ArrayAdapter my_Adapterr = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                                my_arrayy);
                        popupSpinner.setAdapter(my_Adapterr);

                        myFilter1 = (EditText) dialog1.findViewById(R.id.searchView);
                        myFilter1.addTextChangedListener(new TextWatcher() {

                            public void afterTextChanged(Editable s) {
                            }

                            public void beforeTextChanged(CharSequence s, int start,
                                                          int count, int after) {
                            }

                            public void onTextChanged(CharSequence s, int start,
                                                      int before, int count) {
                                my_Adapterr.getFilter().filter(s.toString());
                            }
                        });

                        LinearLayout cancelletter = (LinearLayout) dialog1.findViewById(R.id.custombar_del_wrapper);
                        cancelletter.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
//                                if (one.hasFocus() || two.hasFocus() || three.hasFocus() || text.hasFocus() || editText.hasFocus() || textquan.hasFocus() ||
//                                        one.hasFocus() || two.hasFocus() || three.hasFocus() || text.hasFocus() || editText.hasFocus() || textquan.hasFocus()){
//                                    hideKeyboard(getContext());
//
//                                }
                                one.clearFocus();
                                two.clearFocus();
                                three.clearFocus();
                                dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                myFilter1.setText("");
                                hideKeyboard(getContext());
                                donotshowKeyboard(getActivity());
                            }
                        });

                        LinearLayout cancelletter1 = (LinearLayout) dialog1.findViewById(R.id.custombar_return_wrapper);
                        cancelletter1.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                one.clearFocus();
                                two.clearFocus();
                                three.clearFocus();
                                dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                dialog1.dismiss();
                                hideKeyboard(getContext());
                                donotshowKeyboard(getActivity());
                            }
                        });


                        //selectionCurrent = String.valueOf(popupSpinner.getSelectedItemPosition());

                        popupSpinner.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                            @Override
                            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                                String selectedSweet = popupSpinner.getItemAtPosition(position).toString();

                                one.clearFocus();
                                two.clearFocus();
                                three.clearFocus();
                                spinnercat.setText(selectedSweet);
                                hideKeyboard(getContext());
                                dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                dialog1.dismiss();
                                donotshowKeyboard(getActivity());
                                //String text = dialogC4_id.getText().toString();
                                //Toast.makeText(getActivity(), "Selected item: " + selectedSweet + " - " + position, Toast.LENGTH_SHORT).show();
                            }
                        });

                        dialog1.show();

                    }
                });

                spinneritem = (TextView) rootview.findViewById(R.id.tax);
                spinneritem.setText("None");
                LinearLayout linearLayout2 = (LinearLayout) rootview.findViewById(R.id.clicktax);
                spinneritem.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        final Dialog dialog1 = new Dialog(getActivity(), R.style.notitle);
                        dialog1.setContentView(R.layout.dialog_tax_multiselection);
                        dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

                        ImageButton btncancel = (ImageButton) dialog1.findViewById(R.id.btncancel);
                        btncancel.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                dialog1.dismiss();
                            }
                        });

                        popupSpinner = (ListView) dialog1.findViewById(R.id.listView5);

                        list_tax = new ArrayList<Country_tax>();
                        String statement = "SELECT * FROM Taxes WHERE taxtype = 'Itemtax'";
                        //Execute the query
                        Cursor aallrows = db.rawQuery(statement, null);
                        System.out.println("COUNT : " + aallrows.getCount());
                        ////Toast.makeText(getActivity(), "limit is a " + limit, Toast.LENGTH_SHORT).show();
                        if (aallrows.moveToFirst()) {
                            do {
                                String ID = aallrows.getString(0);
                                String NAme = aallrows.getString(1);

                                Country_tax NAME = new Country_tax(NAme);
                                list_tax.add(NAME);

                            } while (aallrows.moveToNext());
                        }
                        aallrows.close();

                        adapter_tax = new MyAdapter_tax(getActivity() ,list_tax);
                        popupSpinner.setAdapter(adapter_tax);


                        Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                        if (cursor.moveToFirst()){
                            do {
                                String tax_na = cursor.getString(1);

                                for(int i=0; i < popupSpinner.getCount(); i++) {
                                    v = popupSpinner.getAdapter().getView(i, null, null);
                                    TextView cb = (TextView) v.findViewById(R.id.label);
                                    CheckBox cb1 = (CheckBox) v.findViewById(R.id.check);
                                    if (cb.getText().toString().equals(tax_na)) {
                                        cb1.setChecked(true);
                                    }
                                }
                            }while (cursor.moveToNext());
                        }
                        cursor.close();

                        final EditText myFilter = (EditText) dialog1.findViewById(R.id.search_selecteditem);
                        myFilter.addTextChangedListener(new TextWatcher() {

                            public void afterTextChanged(Editable s) {
                            }

                            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                            }

                            public void onTextChanged(CharSequence s, int start, int before, int count) {
                                adapter_tax.getFilter().filter(s.toString());
                            }
                        });

                        final CheckBox chkAll =  (CheckBox) dialog1.findViewById(R.id.chkAll);

                        chkAll.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
//                                Toast.makeText(Customer_Info_Activity.this, "clicked", Toast.LENGTH_SHORT).show();
                                View v;
                                CheckBox chBox;

                                if (chkAll.isChecked()){
//                                    Toast.makeText(Customer_Info_Activity.this, "checked", Toast.LENGTH_SHORT).show();
                                    for(int i=0; i < popupSpinner.getCount(); i++){
                                        v = popupSpinner.getAdapter().getView(i, null, null);

                                        CheckBox cb = (CheckBox)v.findViewById(R.id.check);
                                        cb.setChecked(true);
                                        adapter_tax.notifyDataSetChanged();
                                    }
                                    Cursor del = db.rawQuery("SELECT * FROM Taxes WHERE taxtype = 'Itemtax'", null);
                                    if (del.moveToFirst()){
                                        do {
                                            String na = del.getString(1);
                                            String id = del.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "checked");
                                            String wherecu = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues,wherecu,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//
//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }while (del.moveToNext());
                                    }
                                    del.close();
                                }else {
//                                    Toast.makeText(Customer_Info_Activity.this, "not checked", Toast.LENGTH_SHORT).show();
                                    for(int i=0; i < popupSpinner.getCount(); i++){
                                        v = popupSpinner.getAdapter().getView(i, null, null);

                                        CheckBox cb = (CheckBox)v.findViewById(R.id.check);
                                        cb.setChecked(false);
                                        adapter_tax.notifyDataSetChanged();
                                    }
                                    Cursor del = db.rawQuery("SELECT * FROM Taxes WHERE taxtype = 'Itemtax'", null);
                                    if (del.moveToFirst()){
                                        do {
                                            String na = del.getString(1);
                                            String id = del.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "");
                                            String wherecu = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues,wherecu,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }while (del.moveToNext());
                                    }
                                    del.close();
                                }

                                int count = 0;
                                int size = list_tax.size();
                                for (int i1=0; i1<size; i1++){
                                    if (list_tax.get(i1).isSelected()){
                                        count++;
                                    }
                                }

                                if(popupSpinner.getCount()==count)
                                    chkAll.setChecked(true);
                                else
                                    chkAll.setChecked(false);
                            }
                        });

                        popupSpinner.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                            @Override
                            public void onItemClick(final AdapterView<?> adapterView, View view, final int position, long l) {
                                TextView txtview = (TextView) view.findViewById(R.id.label);
                                final String item = txtview.getText().toString();

                                final CheckBox checkbox = (CheckBox) view.getTag(R.id.check);

                                if (checkbox.isChecked()){
                                    checkbox.setChecked(false);
                                    Cursor del = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '"+txtview.getText().toString()+"'", null);
                                    if (del.moveToFirst()){
                                        do {
                                            String na = del.getString(1);
                                            String id = del.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "");
                                            String wherecu = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues,wherecu,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }while (del.moveToNext());
                                    }
                                    del.close();
                                }else {
                                    checkbox.setChecked(true);
                                    Cursor del = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '"+txtview.getText().toString()+"'", null);
                                    if (del.moveToFirst()){
                                        do {
                                            String na = del.getString(1);
                                            String id = del.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "checked");
                                            String wherecu = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues,wherecu,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }while (del.moveToNext());
                                    }
                                    del.close();
                                }

                                int count = 0;
                                int size = list_tax.size();
                                for (int i1=0; i1<size; i1++){
                                    if (list_tax.get(i1).isSelected()){
                                        count++;
                                    }
                                }

                                if(popupSpinner.getCount()==count)
                                    chkAll.setChecked(true);
                                else
                                    chkAll.setChecked(false);

                                adapter_tax.notifyDataSetChanged();
                            }
                        });

                        int count = 0;
                        int size = list_tax.size();
                        for (int i1=0; i1<size; i1++){
                            if (list_tax.get(i1).isSelected()){
                                count++;
                            }
                        }

                        if(popupSpinner.getCount()==count)
                            chkAll.setChecked(true);
                        else
                            chkAll.setChecked(false);

                        adapter_tax.notifyDataSetChanged();


                        Button save = (Button) dialog1.findViewById(R.id.btnsave);
                        save.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                int i = 0;
                                Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                if (cursor.moveToFirst()){
                                    do {
                                        String na = cursor.getString(1);
                                        i++;
                                    }while (cursor.moveToNext());

                                    if (i > 5){
                                        Toast.makeText(getActivity(), "Max 5 taxes can be applied", Toast.LENGTH_LONG).show();
                                    }else {
                                        dialog1.dismiss();
//                                        Toast.makeText(getActivity(), "selected "+i, Toast.LENGTH_LONG).show();
                                        spinneritem.setText(i+" taxes selected");
                                    }
                                }else {
                                    dialog1.dismiss();
                                    spinneritem.setText("0 taxes selected");
                                }
                                cursor.close();
                            }
                        });


                        dialog1.show();
                    }
                });

//                ImageView into = (ImageView)rootview.findViewById(R.id.closetext);
//                into.setOnClickListener(new View.OnClickListener() {
//                    @Override
//                    public void onClick(View v) {
//                        linearLayout.setVisibility(View.GONE);
//                        EditText one = (EditText)rootview.findViewById(R.id.editText1);
//                        one.setText("");
//                        EditText two = (EditText)rootview.findViewById(R.id.editText2);
//                        two.setText("");
//                        EditText three = (EditText)rootview.findViewById(R.id.editText3);
//                        three.setText("");
//                        get_image = (ImageButton)rootview.findViewById(R.id.get_image);
//                        get_image.setImageResource(R.drawable.ic_add_image_48dp);
//                        hideKeyboard(getContext());
//                    }
//                });


                spinnervariants = (TextView) rootview.findViewById(R.id.variants);
                spinnervariants.setText("0 types");
                spinnervariants.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        final Dialog dialog1 = new Dialog(getActivity(), R.style.notitle);
                        dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                        dialog1.setContentView(R.layout.spinnerlist_variants);
                        dialog1.show();

                        ImageButton btncancel = (ImageButton) dialog1.findViewById(R.id.btncancel);
                        btncancel.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                dialog1.dismiss();
                            }
                        });

                        TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                        final ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                        final String selectQuery = "SELECT * FROM variants_temp";

                        Cursor cursor = db.rawQuery(selectQuery, null);
                        final String[] fromFieldNames = {"vari1", "varprice1"};
                        final int[] toViewsID = {R.id.var_name, R.id.var_price};
                        BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                        listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                        if (listView5.getAdapter().getCount() == 0){
                            variants_null.setVisibility(View.VISIBLE);
                            listView5.setVisibility(View.GONE);
                        }else {
                            variants_null.setVisibility(View.GONE);
                            listView5.setVisibility(View.VISIBLE);
                        }


                        listView5.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                            @Override
                            public void onItemClick(AdapterView<?> parent, View view, int position, long l) {
                                final Cursor cursor = (Cursor) parent.getItemAtPosition(position);
                                final String _id = cursor.getString(cursor.getColumnIndex("_id"));
                                final String item_content1 = cursor.getString(cursor.getColumnIndex("vari1"));
                                final String item_content2 = cursor.getString(cursor.getColumnIndex("varprice1"));

                                if (item_content1.toString().equals("Regular")) {
                                    Toast.makeText(getActivity(), "Cannot edit", Toast.LENGTH_LONG).show();
                                }else {
                                    final Dialog dialog_add = new Dialog(getActivity(), R.style.notitle);
                                    dialog_add.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                    dialog_add.setContentView(R.layout.variants_add_modify);
                                    dialog_add.show();

                                    ImageButton btncancel = (ImageButton) dialog_add.findViewById(R.id.btncancel);
                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View view) {
                                            dialog_add.dismiss();
                                        }
                                    });


                                    final EditText v_n = (EditText) dialog_add.findViewById(R.id.var_name);
                                    final EditText v_p = (EditText) dialog_add.findViewById(R.id.var_price);

                                    v_n.setText(item_content1);
                                    v_p.setText(item_content2);

                                    Button btndelete = (Button) dialog_add.findViewById(R.id.btndelete);
                                    btndelete.setVisibility(View.VISIBLE);

                                    btndelete.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View view) {
                                            String where = "_id = '" + _id + "' ";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                            getActivity().getContentResolver().delete(contentUri, where, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("variants_temp")
                                                    .appendQueryParameter("operation", "delete")
                                                    .appendQueryParameter("_id",_id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            db.delete("variants_temp", where, new String[]{});

                                            listView5.setAdapter(null);


                                            TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                            ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                            final String selectQuery = "SELECT * FROM variants_temp";

                                            Cursor cursor = db.rawQuery(selectQuery, null);
                                            final String[] fromFieldNames = {"vari1", "varprice1"};
                                            final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                            BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                            listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                            if (listView5.getAdapter().getCount() == 0) {
                                                variants_null.setVisibility(View.VISIBLE);
                                                listView5.setVisibility(View.GONE);
                                            } else {
                                                variants_null.setVisibility(View.GONE);
                                                listView5.setVisibility(View.VISIBLE);
                                            }
                                            dialog_add.dismiss();
                                        }
                                    });


                                    Button btnsave = (Button) dialog_add.findViewById(R.id.btnsave);
                                    btnsave.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View view) {
                                            final EditText v_n = (EditText) dialog_add.findViewById(R.id.var_name);
                                            final EditText v_p = (EditText) dialog_add.findViewById(R.id.var_price);
                                            if (v_n.getText().toString().equals("") || v_p.getText().toString().equals("") ||
                                                    v_n.getText().toString().equals("Regular") || v_n.getText().toString().equals("regular")) {
                                                if (v_n.getText().toString().equals("")) {
                                                    v_n.setError("Enter variant name");
                                                }
                                                if (v_p.getText().toString().equals("")) {
                                                    v_p.setError("Enter variant price");
                                                }
                                                if (v_n.getText().toString().equals("Regular") || v_n.getText().toString().equals("regular")) {
                                                    v_n.setError("Enter another variant name");
                                                }
                                            } else {
//                                            Cursor cursor21 = db.rawQuery("SELECT * FROM variants_temp WHERE vari1 = '"+item_content1+"'", null);
                                                if (v_n.getText().toString().equals(item_content1)) {
                                                    ContentValues contentValues1 = new ContentValues();
                                                    contentValues1.put("vari1", v_n.getText().toString());
                                                    contentValues1.put("varprice1", v_p.getText().toString());
                                                    String where = "_id = '" + _id + "' ";

                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                    getActivity().getContentResolver().update(contentUri, contentValues1,where,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("variants_temp")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", _id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                    db.update("variants_temp", contentValues1, where, new String[]{});

                                                    listView5.setAdapter(null);


                                                    TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                                    ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                                    final String selectQuery = "SELECT * FROM variants_temp";

                                                    Cursor cursor = db.rawQuery(selectQuery, null);
                                                    final String[] fromFieldNames = {"vari1", "varprice1"};
                                                    final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                                    BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                                    listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                                    if (listView5.getAdapter().getCount() == 0) {
                                                        variants_null.setVisibility(View.VISIBLE);
                                                        listView5.setVisibility(View.GONE);
                                                    } else {
                                                        variants_null.setVisibility(View.GONE);
                                                        listView5.setVisibility(View.VISIBLE);
                                                    }
                                                    dialog_add.dismiss();
                                                } else {
                                                    Cursor cursor2 = db.rawQuery("SELECT * FROM variants_temp WHERE vari1 = '" + v_n.getText().toString() + "'", null);
                                                    if (cursor2.moveToFirst()) {
                                                        v_n.setError("Variant name already used");
                                                    } else {
                                                        ContentValues contentValues1 = new ContentValues();
                                                        contentValues1.put("vari1", v_n.getText().toString());
                                                        contentValues1.put("varprice1", v_p.getText().toString());
                                                        String where = "_id = '" + _id + "' ";

                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                        getActivity().getContentResolver().update(contentUri, contentValues1,where,new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("variants_temp")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", _id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                        db.update("variants_temp", contentValues1, where, new String[]{});

                                                        listView5.setAdapter(null);


                                                        TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                                        ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                                        final String selectQuery = "SELECT * FROM variants_temp";

                                                        Cursor cursor = db.rawQuery(selectQuery, null);
                                                        final String[] fromFieldNames = {"vari1", "varprice1"};
                                                        final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                                        BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                                        listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                                        if (listView5.getAdapter().getCount() == 0) {
                                                            variants_null.setVisibility(View.VISIBLE);
                                                            listView5.setVisibility(View.GONE);
                                                        } else {
                                                            variants_null.setVisibility(View.GONE);
                                                            listView5.setVisibility(View.VISIBLE);
                                                        }
                                                        dialog_add.dismiss();
                                                    }
                                                    cursor2.close();
                                                }
                                            }

                                        }
                                    });
                                }

                            }
                        });


                        ImageView btnadd = (ImageView) dialog1.findViewById(R.id.btnadd);
                        btnadd.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                int i = 0;
                                Cursor allrows1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                if (allrows1.moveToFirst()) {
                                    do {
                                        final String var1 = allrows1.getString(1);
                                        final TextView tv_var1 = new TextView(getActivity());
                                        tv_var1.setText(var1);

                                        if (!tv_var1.getText().toString().equals("")) {
                                            i++;
                                        }
                                    }while (allrows1.moveToNext());
                                }
                                allrows1.close();

                                if (i >= 5){
                                    Toast.makeText(getActivity(), "5 variants added", Toast.LENGTH_LONG).show();
                                }else {
                                    final Dialog dialog_add = new Dialog(getActivity(), R.style.notitle);
                                    dialog_add.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                    dialog_add.setContentView(R.layout.variants_add_modify);
                                    dialog_add.show();

                                    ImageButton btncancel = (ImageButton) dialog_add.findViewById(R.id.btncancel);
                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View view) {
                                            dialog_add.dismiss();
                                        }
                                    });

                                    final EditText v_n = (EditText) dialog_add.findViewById(R.id.var_name);
                                    final EditText v_p = (EditText) dialog_add.findViewById(R.id.var_price);

                                    Button btndelete = (Button) dialog_add.findViewById(R.id.btndelete);
                                    btndelete.setVisibility(View.GONE);

                                    Button btnsave = (Button) dialog_add.findViewById(R.id.btnsave);
                                    btnsave.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View view) {
                                            final EditText v_n = (EditText) dialog_add.findViewById(R.id.var_name);
                                            final EditText v_p = (EditText) dialog_add.findViewById(R.id.var_price);

                                            Cursor cursor22 = db.rawQuery("SELECT * FROM variants_temp", null);
                                            if (cursor22.moveToFirst()) {

                                            } else {
                                                ContentValues contentValues1 = new ContentValues();
                                                contentValues1.put("vari1", "Regular");
                                                contentValues1.put("varprice1", two.getText().toString());

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                resultUri = getActivity().getContentResolver().insert(contentUri, contentValues1);
                                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                                    db.insert("variants_temp", null, contentValues1);
                                            }
                                            cursor22.close();

                                            if (v_n.getText().toString().equals("") || v_p.getText().toString().equals("") ||
                                                    v_n.getText().toString().equals("Regular") || v_n.getText().toString().equals("regular")){
                                                if (v_n.getText().toString().equals("")){
                                                    v_n.setError("Enter variant name");
                                                }
                                                if (v_p.getText().toString().equals("")){
                                                    v_p.setError("Enter variant price");
                                                }
                                                if (v_n.getText().toString().equals("Regular") || v_n.getText().toString().equals("regular")){
                                                    v_n.setError("Enter another variant name");
                                                }
                                            }else {
                                                Cursor cursor2 = db.rawQuery("SELECT * FROM variants_temp WHERE vari1 = '"+v_n.getText().toString()+"'", null);
                                                if (cursor2.moveToFirst()){
                                                    v_n.setError("Variant name already used");
                                                }else {
                                                    ContentValues contentValues1 = new ContentValues();
                                                    contentValues1.put("vari1", v_n.getText().toString());
                                                    contentValues1.put("varprice1", v_p.getText().toString());

                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                    resultUri = getActivity().getContentResolver().insert(contentUri, contentValues1);
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                    db.insert("variants_temp", null, contentValues1);


                                                    TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                                    ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                                    final String selectQuery = "SELECT * FROM variants_temp";

                                                    Cursor cursor = db.rawQuery(selectQuery, null);
                                                    final String[] fromFieldNames = {"vari1", "varprice1"};
                                                    final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                                    BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                                    listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                                    if (listView5.getAdapter().getCount() == 0) {
                                                        variants_null.setVisibility(View.VISIBLE);
                                                        listView5.setVisibility(View.GONE);
                                                    } else {
                                                        variants_null.setVisibility(View.GONE);
                                                        listView5.setVisibility(View.VISIBLE);
                                                    }
                                                    dialog_add.dismiss();
                                                }
                                                cursor2.close();
                                            }

                                        }
                                    });
                                }


                            }
                        });

                        Button btnsave = (Button) dialog1.findViewById(R.id.btnsave);
                        btnsave.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                int i = 0;
                                Cursor allrows1 = db.rawQuery("SELECT * FROM variants_temp ", null);
                                if (allrows1.moveToFirst()) {
                                    do {
                                        final String var1 = allrows1.getString(1);
                                        final TextView tv_var1 = new TextView(getActivity());
                                        tv_var1.setText(var1);

                                        if (!tv_var1.getText().toString().equals("")) {
                                            i++;
                                        }
                                    }while (allrows1.moveToNext());

                                    spinnervariants.setText(i + " types");
                                }
                                allrows1.close();
                                dialog1.dismiss();
                            }
                        });
                    }
                });


                Button btn = (Button) rootview.findViewById(R.id.btndelete);
                btn.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        linearLayout.setVisibility(View.GONE);
                        additem.setVisibility(View.VISIBLE);
                        EditText one = (EditText) rootview.findViewById(R.id.editText1);
                        one.setText("");
                        EditText two = (EditText) rootview.findViewById(R.id.editText2);
                        two.setText("");
                        EditText three = (EditText) rootview.findViewById(R.id.editText3);
                        three.setText("");
                        //get_image = (ImageButton)rootview.findViewById(R.id.get_image);
                        get_image.setImageResource(R.drawable.ic_add_image_48dp);
                        search.setEnabled(true);
                        hideKeyboard(getContext());


                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                            donotshowKeyboard(getActivity());

                            InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                            imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                        }
                    }
                });

                unit_sav = (RadioButton) rootview.findViewById(R.id.unit_sav);
                weight_sav = (RadioButton) rootview.findViewById(R.id.weight_sav);

                unit_sav.setSelected(true);

                Button save = (Button) rootview.findViewById(R.id.btnsave);
                save.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        saveInDB();
                        search.setEnabled(true);
                        if (mySwitch.isChecked()) {
                            //Toast.makeText(getActivity(), " myswitch is selected ", Toast.LENGTH_SHORT).show();
                        } else {
                            //Toast.makeText(getActivity(), " myswitch is not selected ", Toast.LENGTH_SHORT).show();
                        }

                        //linearLayout.setVisibility(View.GONE);

                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                            donotshowKeyboard(getActivity());

                            InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                            imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                        }


                        if (!spinner.getSelectedItem().toString().equals("All")) {
                            //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                            countryList = new ArrayList<Country_items>();
                            try {
                                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "'", null);
                                System.out.println("COUNT : " + allrows.getCount());


                                //Country_items country = new Country_items(name, name, name, name);

                                if (allrows.moveToFirst()) {
                                    do {
                                        String ID = allrows.getString(0);
                                        String NAme = allrows.getString(1);
                                        String BAr = allrows.getString(16);
                                        String PRiCe = allrows.getString(2);
                                        String QtY = allrows.getString(3);
                                        String PlaCe = allrows.getString(2);
                                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                        countryList.add(NAME);
                                        //countryList.add(PLACE);
                                    } while (allrows.moveToNext());
                                }
                                allrows.close();
//                                db.close();
                            } catch (Exception e) {
                                Toast.makeText(getActivity(), "Error encountered.",
                                        Toast.LENGTH_LONG);
                            }
                        }
                        if (spinner.getSelectedItem().toString().equals("All")) {
                            //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                            countryList = new ArrayList<Country_items>();
                            try {
                                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                                System.out.println("COUNT : " + allrows.getCount());


                                //Country_items country = new Country_items(name, name, name, name);

                                if (allrows.moveToFirst()) {
                                    do {
                                        String ID = allrows.getString(0);
                                        String NAme = allrows.getString(1);
                                        String BAr = allrows.getString(16);
                                        String PRiCe = allrows.getString(2);
                                        String QtY = allrows.getString(3);
                                        String PlaCe = allrows.getString(2);
                                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                        countryList.add(NAME);
                                        //countryList.add(PLACE);
                                    } while (allrows.moveToNext());
                                }
                                allrows.close();
//                                db.close();
                            } catch (Exception e) {
                                Toast.makeText(getActivity(), "Error encountered.",
                                        Toast.LENGTH_LONG);
                            }
                        }


                        dataAdapter = new MyCustomAdapter(getActivity(),
                                R.layout.items_list_details, countryList);
                        final ListView listView = (ListView) rootview.findViewById(R.id.listView);
                        // Assign adapter to ListView
                        listView.setAdapter(dataAdapter);


                    }
                });

            }
        });

        mHelperPro = new IabHelper(getActivity(),  Constants.base64EncodedPublicKey);
        mHelperPro.startSetup(new IabHelper.OnIabSetupFinishedListener() {
            public void onIabSetupFinished(IabResult result)
            {
                if (!result.isSuccess()) {
                    Log.d(TAG, "In-app Billing setup failed: " +
                            result);
                } else {
                    Log.d(TAG, "In-app Billing is set up OK");
                    try {
                        mHelperPro.queryInventoryAsync(mReceivedInventoryListenerPro);
                    } catch (IabHelper.IabAsyncInProgressException e) {
                        e.printStackTrace();
                    }
                }

            }
        });

        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        credentialsProvider();
        setTransferUtility();

        return rootview;
    }



    private void startDownload() {



        SharedPreferences sharedpreferences=getDefaultSharedPreferencesMultiProcess(getActivity());
        String company= sharedpreferences.getString("companyname", null);
        String store= sharedpreferences.getString("storename", null);
        String device= sharedpreferences.getString("devicename", null);

        JSONObject params = new JSONObject();

        try {
            params.put("device",device);
            params.put("store",store);
            params.put("company",company);

        } catch (JSONException e) {
            e.printStackTrace();
        }

        //  if(queue==null){
        queue = Volley.newRequestQueue(getActivity());
        // }

        JsonObjectRequest sr = new JsonObjectRequest(
                com.android.volley.Request.Method.POST,
                WebserviceUrl+"countrows_manual_sync.php",params,
                new com.android.volley.Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject responseString) {
                        Log.e("myserviceapp","2");
                        String response= "";
                        JSONObject jsonObject=null;
                        try {
                            jsonObject=responseString;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            response = jsonObject.getString("status");
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if(response.equalsIgnoreCase("success")){

                            try {
                                db.execSQL("delete from Items_Virtual");
                                int total= jsonObject.getInt("total");
                                int maxcount=(total/20);
                                updateBar.setMax(maxcount+4);
                                Intent intent = new Intent(getActivity(), MyServiceApp_swiperefresh.class);
                                ContextCompat.startForegroundService(getActivity(), intent);
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }

                        }else{
                            Toast.makeText(getActivity(), "download failed", Toast.LENGTH_SHORT).show();
                        }

                    }
                },
                new com.android.volley.Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.d("Signup confirm", "Error: " + error.getMessage());
                    }
                })  {

        };
/*    sr.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
            DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));*/
        sr.setRetryPolicy(new DefaultRetryPolicy(0,-1,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(sr);

    }



    public void setAmazonS3Client(CognitoCachingCredentialsProvider credentialsProvider) {

        // Create an S3 client
        s3client = new AmazonS3Client(credentialsProvider);

        // Set the region of your S3 bucket
        s3client.setRegion(Region.getRegion(Regions.AP_SOUTH_1));

    }

    public void setTransferUtility() {

        transferUtility = new TransferUtility(s3client,  getActivity());
    }

    public void credentialsProvider() {

//        // Initialize the Amazon Cognito credentials provider
//        CognitoCachingCredentialsProvider credentialsProvider = new CognitoCachingCredentialsProvider(
//                getActivity(),
//                "ap-south-1:c2b96ff9-4cfc-49cc-867c-c630022abba2", // Identity pool ID
//                Regions.AP_SOUTH_1 // Region
//        );
        // Initialize the Amazon Cognito credentials provider
        CognitoCachingCredentialsProvider credentialsProvider1 = new CognitoCachingCredentialsProvider(
                getActivity(),
                "ap-south-1:210cc88c-9644-44cc-bbe3-6d7219ae6c20", // Identity pool ID
                Regions.AP_SOUTH_1 // Region
        );


        setAmazonS3Client(credentialsProvider1);
    }

    IabHelper.QueryInventoryFinishedListener mReceivedInventoryListenerPro
            = new IabHelper.QueryInventoryFinishedListener() {
        public void onQueryInventoryFinished(IabResult result,
                                             Inventory inventory) {


            if (result.isFailure()) {
                // Handle failure
            } else {

                if(mSelectedProSubscription.equalsIgnoreCase("")){

                    List<Purchase> list=inventory.getAllPurchases();

                    for(int k=0;k<list.size();k++){
                        Purchase mPurchase = list.get(k);
                        if (mPurchase != null && verifyDeveloperPayload(mPurchase)) {
                            Log.d(TAG, "We have gas. Consuming it.");
                            String token=mPurchase.getSku();
                            if((token.equalsIgnoreCase(SKU_DELAROY_PRO_UPGRADE))){

                                try {
                                    mHelperPro.consumeAsync(mPurchase,
                                            mConsumeFinishedListenerPro);
                                } catch (IabHelper.IabAsyncInProgressException e) {
                                    e.printStackTrace();
                                }

                            }

                            return;
                        }

                    }


                }else{
                    Purchase purchase = inventory.getPurchase(mSelectedProSubscription);

                    try {
                        mHelperPro.consumeAsync(inventory.getPurchase(mSelectedProSubscription),
                                mConsumeFinishedListenerPro);
                    } catch (IabHelper.IabAsyncInProgressException e) {
                        e.printStackTrace();
                    }
                }


            }
        }
    };
    IabHelper.OnConsumeFinishedListener mConsumeFinishedListenerPro =
            new IabHelper.OnConsumeFinishedListener() {
                public void onConsumeFinished(Purchase purchase,
                                              IabResult result) {

                    if (result.isSuccess()) {

                        if(mSelectedProSubscription.equalsIgnoreCase("")){

                        }else{
                            String orderid=purchase.getOrderId();
                            updateProCloud(orderid);
                        }


                    } else {
                        // handle error
                    }
                }
            };


    private void updateProCloud(String orderid) {

        db_inapp = getActivity().openOrCreateDatabase("amazoninapp", Context.MODE_PRIVATE, null);
        Cursor cursor_pro=db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
        if(cursor_pro.moveToFirst()){

            int id=cursor_pro.getInt(0);
            String status=cursor_pro.getString(1);
            if(!status.equalsIgnoreCase("Activated")){
                ContentValues contentValues =new ContentValues();
                contentValues.put("status","Activated");
                contentValues.put("orderid",orderid);
                if (i_pro_sel == 1){
                    checking="123";
                    mSelectedProSubscription = SKU_DELAROY_PRO_UPGRADE_DEMO;
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                    Calendar currentCal = Calendar.getInstance();
                    String currentdate = dateFormat.format(currentCal.getTime());
                    currentCal.add(Calendar.DATE, 7);
                    String toDate = dateFormat.format(currentCal.getTime());
                    contentValues.put("pro_expiry",toDate);
                }else {
                    if (i_pro_sel == 2){
                        checking="123";
                        mSelectedProSubscription = SKU_DELAROY_PRO_UPGRADE;
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                        Calendar currentCal = Calendar.getInstance();
                        String currentdate = dateFormat.format(currentCal.getTime());
                        currentCal.add(Calendar.DATE, 365);
                        String toDate = dateFormat.format(currentCal.getTime());
                        contentValues.put("pro_expiry",toDate);
                    }else {
                        checking=orderid;
                        mSelectedProSubscription = SKU_DELAROY_PRO_UPGRADE;
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                        Calendar currentCal = Calendar.getInstance();
                        String currentdate = dateFormat.format(currentCal.getTime());
                        currentCal.add(Calendar.DATE, 365);
                        String toDate = dateFormat.format(currentCal.getTime());
                        contentValues.put("pro_expiry",toDate);
                    }
                }
                String where = "_id = '" + id + "'";
                db_inapp.update("Pro_upgrade", contentValues, where, new String[]{});
            }

        }else{

            ContentValues contentValues =new ContentValues();
            contentValues.put("status","Activated");
            contentValues.put("orderid",orderid);
            if (i_pro_sel == 1){
                checking="123";
                mSelectedProSubscription = SKU_DELAROY_PRO_UPGRADE_DEMO;
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                Calendar currentCal = Calendar.getInstance();
                String currentdate = dateFormat.format(currentCal.getTime());
                currentCal.add(Calendar.DATE, 7);
                String toDate = dateFormat.format(currentCal.getTime());
                contentValues.put("pro_expiry",toDate);
            }else {
                if (i_pro_sel == 2){
                    checking="123";
                    mSelectedProSubscription = SKU_DELAROY_PRO_UPGRADE;
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                    Calendar currentCal = Calendar.getInstance();
                    String currentdate = dateFormat.format(currentCal.getTime());
                    currentCal.add(Calendar.DATE, 365);
                    String toDate = dateFormat.format(currentCal.getTime());
                    contentValues.put("pro_expiry",toDate);
                }else {
                    checking=orderid;
                    mSelectedProSubscription = SKU_DELAROY_PRO_UPGRADE;
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                    Calendar currentCal = Calendar.getInstance();
                    String currentdate = dateFormat.format(currentCal.getTime());
                    currentCal.add(Calendar.DATE, 365);
                    String toDate = dateFormat.format(currentCal.getTime());
                    contentValues.put("pro_expiry",toDate);
                }
            }
            db_inapp.insert("Pro_upgrade", null, contentValues);
        }

        uploadPro();
    }

    private void uploadPro() {
        if (i_pro_sel == 3){
            RequestQueue requestQueue;
            requestQueue = Volley.newRequestQueue(getActivity());
            StringRequest sr = new StringRequest(
                    Request.Method.POST,
                    WebserviceUrl+"coupon_pr.php",
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String response) {
                            if(response.equalsIgnoreCase("success")) {
                                prolicense(checking);

                            }
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            Log.d("Signup confirm", "Error: " + error.getMessage());
                        }
                    }) {
                @Override
                protected Map<String, String> getParams()
                {
                    Map<String,String> params = new HashMap<String, String>();
                    params.put("coupon", checking+ "");
                    return params;
                }
            };
            sr.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
                    DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                    DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
            requestQueue.add(sr);
        }else {
            prolicense(checking);
        }
    }

    public void prolicense(final String orderid){

        SharedPreferences sharedpreferences =  getDefaultSharedPreferencesMultiProcess(getActivity());
        final String company= sharedpreferences.getString("companyname", null);
        final String store= sharedpreferences.getString("storename", null);
        final String device= sharedpreferences.getString("devicename", null);

        bar.setVisibility(View.VISIBLE);
        requestQueue = Volley.newRequestQueue(getActivity());
        StringRequest sr = new StringRequest(
                Request.Method.POST,
                WebserviceUrl+"propurchase.php",
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        if(response.equalsIgnoreCase("success")){

                            bar.setVisibility(View.GONE);
                            updateUi();

                            dialog_pro.dismiss();

                        }else{

                            bar.setVisibility(View.GONE);
                            updateUi();

                            dialog_pro.dismiss();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.d("Signup confirm", "Error: " + error.getMessage());
                    }
                }) {
            @Override
            protected Map<String, String> getParams()
            {
                Map<String,String> params = new HashMap<String, String>();
                params.put("company", company+ "");
                params.put("store", store+ "");
                params.put("device", device);
                params.put("orderid",orderid);
                params.put("subscription",mSelectedProSubscription);
                return params;
            }
        };
        sr.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        requestQueue.add(sr);

    }

    @Override
    public void onClick(DialogInterface dialog, int id) {
        Log.d(TAG, "Launching purchase flow for gas1.");
        if (id == 0 /* First choice item */) {

            Log.d(TAG, "Launching purchase flow for gas2.");
        } else if (id == DialogInterface.BUTTON_POSITIVE /* continue button */) {

            Log.d(TAG, "Launching purchase flow for gas3.");
            /* TODO: for security, generate your payload here for verification. See the comments on
             *        verifyDeveloperPayload() for more info. Since this is a SAMPLE, we just use
             *        an empty string, but on a production app you should carefully generate
             *        this. */

            i = 0;
            String payload = "";


            mSelectedProSubscription=SKU_DELAROY_PRO_UPGRADE;


            try {
                mHelperPro.launchPurchaseFlow(getActivity(), mSelectedProSubscription, REQ_CODE,
                        mPurchaseFinishedListenerPro, mSelectedProSubscription);
            } catch (IabHelper.IabAsyncInProgressException e) {
                //  complain("Error launching purchase flow. Another async operation in progress.");
                // setWaitScreen(false);
            }


        } else if (id != DialogInterface.BUTTON_NEGATIVE) {



/*
            Cursor cursor = db_inapp.rawQuery("SELECT * FROM pro_upgrade", null);
            if (cursor.moveToFirst()) {
                do {
                    String idss = cursor.getString(0);
                    String countval = cursor.getString(1);

                    Cursor cursor1 = db_inapp.rawQuery("SELECT * FROM pro_upgrade WHERE status = '" + countval + "'", null);
                    if (cursor1.moveToFirst()) {
                        String id1 = cursor1.getString(0);
                        String limit = cursor1.getString(1);
                        ContentValues contentValues = new ContentValues();

                        contentValues.put("status", "Activated");

                        String where = "_id = '" + id1 + "'";
                        db_inapp.update("pro_upgrade", contentValues, where, new String[]{});
                    }

                } while (cursor.moveToNext());
            }*/



        }
    }



    IabHelper.OnIabPurchaseFinishedListener mPurchaseFinishedListenerPro
            = new IabHelper.OnIabPurchaseFinishedListener() {
        public void onIabPurchaseFinished(IabResult result,
                                          Purchase purchase)
        {
            if (result.isFailure()) {
                // Handle error
                return;
            }
            else if (purchase.getSku().equals(mSelectedProSubscription)) {
                consumeItemPro();

            }

        }
    };

    public void consumeItemPro() {
        try {
            mHelperPro.queryInventoryAsync(mReceivedInventoryListenerPro);
        } catch (IabHelper.IabAsyncInProgressException e) {
            e.printStackTrace();
        }
    }
    /**
     * Verifies the developer payload of a purchase.
     */
    boolean verifyDeveloperPayload(final Purchase p) {
        payload = p.getDeveloperPayload();
        checking = p.getOrderId();
        state = p.getPurchaseState();


        return true;

    }



    public void updateUi() {
        Intent intent = new Intent(getActivity(), Inventory_Indent.class);
        startActivity(intent);

    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        // Inflate the menu; this adds items to the action bar if it is present.

        SimpleDateFormat sdf2_pro = new SimpleDateFormat("yyyyMMdd");
        String currentDateandTime1_pro = sdf2_pro.format(new Date());

        inflater.inflate(R.menu.item_menu, menu);
        db_inapp = getActivity().openOrCreateDatabase("amazoninapp", Context.MODE_PRIVATE, null);
        Cursor cursor1 = db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
        if (cursor1.moveToFirst()) {
            String st = cursor1.getString(1);
            String st_da = cursor1.getString(3);

            TextView tv = new TextView(getActivity());
            tv.setText(st);
            TextView tv_da = new TextView(getActivity());
            tv_da.setText(st_da);

            if (tv.getText().toString().equals("Activated")) {
                if (Integer.parseInt(tv_da.getText().toString()) > Integer.parseInt(currentDateandTime1_pro)) {
                    MenuItem item = menu.findItem(R.id.action_barcode_printing);
                    item.setVisible(true);
                }
            }else {
                MenuItem item = menu.findItem(R.id.action_barcode_printing);
                item.setVisible(false);
            }
        }else {
            MenuItem item = menu.findItem(R.id.action_barcode_printing);
            item.setVisible(false);
        }
        cursor1.close();

        super.onCreateOptionsMenu(menu, inflater);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        switch (item.getItemId()) {
//            case R.id.action_category:
//                frag = new DatabasecategoryActivity();
//                fragTransaction = getFragmentManager().beginTransaction().replace(R.id.container, frag);
//                fragTransaction.commit();
//                hideKeyboard(getContext());
//                break;
//
//            case R.id.action_modifier:
//                frag = new DatabaseModifiersActivity();
//                fragTransaction = getFragmentManager().beginTransaction().replace(R.id.container, frag);
//                fragTransaction.commit();
//                hideKeyboard(getContext());
//                break;
//
//
//            case R.id.action_tax:
//                frag = new DatabasetaxesActivity();
//                fragTransaction = getFragmentManager().beginTransaction().replace(R.id.container, frag);
//                fragTransaction.commit();
//                hideKeyboard(getContext());
//                break;


            case R.id.action_barcode_printing:
//                Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE barcode_value IS NOT NULL", null);
//                int count = cursor.getCount();
//                if (count >= 1) {
                final Cursor cursor5 = db.rawQuery("SELECT * FROM Items WHERE barcode_value != ''", null);
                count = cursor5.getCount();
                if (count >= 1) {
                    Intent intent = new Intent(getActivity(), BarcodeBulkPrinting.class);
                    startActivity(intent);
                }else {
                    Toast.makeText(getActivity(), "no barcode to print", Toast.LENGTH_SHORT).show();
                }
//                DownloadMusicfromInternet3 downloadMusicfromInternet = new DownloadMusicfromInternet3();
//                downloadMusicfromInternet.execute();


                break;

            case R.id.action_item_printing:

                byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
                byte[] dotfeed = {0x1b,0x4a,0x10};
                byte[] HTRight = {0x1b,0x61, 0x02,0x09};
                byte[] HT = {0x09};
                byte[] HT1 = {0x09};
                byte[] LF = {0x0d,0x0a};

                byte[] left = {0x1b,0x61, 0x00};
                byte[] cen = {0x1b,0x61, 0x01};
                byte[] right = {0x1b,0x61, 0x02};
                byte[] bold = {0x1B,0x21,0x10};
                byte[] normal = {0x1d, 0x21, 0x00};
                byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
                byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

                byte[] un = {0x1b, 0x2d, 0x02};
                byte[] un1 = {0x1b, 0x2d, 0x00};
                String str_line = "";

                Cursor cc1 = db.rawQuery("SELECT * FROM Printerreceiptsize", null);
                if (cc1.moveToFirst()) {
                    cc1.moveToFirst();
                    do {
                        String NAME1 = cc1.getString(1);
                        if (NAME1.equals("3 inch")) {
                            Cursor getprint_type = db.rawQuery("SELECT * FROM Printer_text_size", null);
                            if (getprint_type.moveToFirst()) {
                                String type = getprint_type.getString(1);

                                Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);

                                if (cc.moveToFirst()) {
                                    cc.moveToFirst();
                                    do {
                                        NAME = cc.getString(1);
                                        if (NAME.equals("3 inch")) {
                                            if (str_print_ty.equals("Generic") || str_print_ty.equals("Epson/others")) {
                                                setHT32 = new byte[]{0x1b, 0x44, 0x33, 0x00};//2 tabs 3"
                                                setHT321 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                                                setHT3212 = new byte[]{0x1b, 0x44, 0x31, 0x00};//2 tabs 3"
                                                setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                                                setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x25, 0x31, 0x00};//4 tabs 3"
                                                nPaperWidth = 576;
                                                charlength = 29;
                                                charlength1 = 58;
                                                charlength2 = 87;
                                                quanlentha = 5;
                                                str_line = "----------------------------------------------------------";
                                                allbufline = new byte[][]{
                                                        left, un1, "----------------------------------------------------------".getBytes(), LF
                                                };
                                            }else {
                                                if (str_print_ty.equals("POS")) {
                                                    setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                                                    setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                                                    setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                                                    setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                                                    setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                                                    nPaperWidth = 576;
                                                    charlength = 23;
                                                    charlength1 = 46;
                                                    charlength2 = 69;
                                                    quanlentha = 4;
                                                    HT1 = new byte[]{0x2F};
                                                    str_line = "------------------------------------------------";
                                                    allbufline = new byte[][]{
                                                            left, un1, "------------------------------------------------".getBytes(), LF

                                                    };
                                                }
                                            }
                                        } else {
                                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                                            nPaperWidth = 384;
                                            charlength = 16;
                                            charlength1 = 32;
                                            charlength2 = 48;
                                            quanlentha = 5;
                                            str_line = "------------------------------------------";
                                            allbufline = new byte[][]{
                                                    left, un1, "------------------------------------------".getBytes(), LF
                                            };

//                                            Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
//                                            if (print_ty.moveToFirst()){
//                                                str_print_ty = print_ty.getString(1);
//                                            }
//                                            if (str_print_ty.toString().equals("Phi")) {
//                                                Toast.makeText(getActivity(), "phi", Toast.LENGTH_SHORT).show();
//                                                setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
//                                                setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
//                                                setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
//                                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                                setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
//                                                nPaperWidth = 384;
//                                                charlength = 16;
//                                                charlength1 = 32;
//                                                charlength2 = 48;
//                                                quanlentha = 5;
//                                                str_line = "------------------------------------------";
//                                                allbufline = new byte[][]{
//                                                        left, un1, "------------------------------------------".getBytes(), LF
//                                                };
//                                            }else {
//                                                Toast.makeText(Dinein_Takeawa_Homedeli_Sales.this, "epson", Toast.LENGTH_SHORT).show();
//                                                setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
//                                                setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
//                                                setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
//                                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                                setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
//                                                nPaperWidth = 384;
//                                                charlength = 16;
//                                                charlength1 = 32;
//                                                charlength2 = 48;
//                                                quanlentha = 5;
//                                                str_line = "------------------------------------------";
//                                                allbufline = new byte[][]{
//                                                        left, un1, "------------------------------------------".getBytes(), LF
//                                                };
//                                            }
                                        }
                                    } while (cc.moveToNext());
                                }
                                cc.close();
//                    }
                            }
                            getprint_type.close();


                            Cursor connnett = db.rawQuery("SELECT * FROM IPConn", null);
                            if (connnett.moveToFirst()) {
                                ipnamegets = connnett.getString(1);
                                portgets = connnett.getString(2);
                                statusnets = connnett.getString(3);
                            }
                            connnett.close();

                            Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
                            if (connnet_counter.moveToFirst()) {
                                ipnamegets_counter = connnet_counter.getString(1);
                                portgets_counter = connnet_counter.getString(2);
                                statusnets_counter = connnet_counter.getString(3);
                            }
                            connnet_counter.close();

                            Cursor connusbb = db.rawQuery("SELECT * FROM BTConn", null);
                            if (connusbb.moveToFirst()) {
                                addgets = connusbb.getString(1);
                                namegets = connusbb.getString(2);
                                statussusbs = connusbb.getString(3);
                            }
                            connusbb.close();

                            if (statussusbs.equals("ok") || statusnets.equals("ok") || statusnets_counter.equals("ok")) {

                                String dd = "";
                                TextView qazcvb = new TextView(getActivity());
                                Cursor cvonnusb = db.rawQuery("SELECT * FROM BTConn", null);
                                if (cvonnusb.moveToFirst()) {
                                    addgets = cvonnusb.getString(1);
                                    namegets = cvonnusb.getString(2);
                                    statussusbs = cvonnusb.getString(3);
                                    dd = cvonnusb.getString(4);
                                }
                                cvonnusb.close();
                                qazcvb.setText(dd);
                                if (qazcvb.getText().toString().equals("usb")) {
                                    runPrintCouponSequence(dialog);
                                }else {
                                    allbufrounded = new byte[][]{
                                            left, bold, un1, "Items list".getBytes(), LF

                                    };
                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(bold);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write("Items list");
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(bold);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write("Items list");
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(bold);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write("Items list");
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
                                    if (getcom.moveToFirst()) {
                                        do {
                                            strcompanyname = getcom.getString(1);
                                            straddress1 = getcom.getString(14);
                                        } while (getcom.moveToNext());
                                    }
                                    getcom.close();

                                    tvkot = new TextView(getActivity());

                                    tvkot.setText(strcompanyname);
                                    if (tvkot.getText().toString().equals("")) {

                                    } else {
                                        allbufflinec = new byte[][]{
                                                left, bold, un1, strcompanyname.getBytes(), LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(bold);    //
                                            BluetoothPrintDriver.BT_Write(un1);    //
                                            BT_Write(strcompanyname);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(bold);    //
                                                wifiSocket2.WIFI_Write(un1);    //
                                                wifiSocket2.WIFI_Write(strcompanyname);
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(bold);    //
                                                    wifiSocket.WIFI_Write(un1);    //
                                                    wifiSocket.WIFI_Write(strcompanyname);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }

                                    SimpleDateFormat normal11 = new SimpleDateFormat("dd MMM yyyy", Locale.US);
                                    final String normal1 = normal11.format(new Date());

                                    Date dt = new Date();
                                    SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa", Locale.US);
                                    final String time1 = sdf1.format(dt);

                                    allbufflinet = new byte[][]{
                                            left, bold, un1, normal1.getBytes(), ",".getBytes(), time1.getBytes(), LF

                                    };
                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(bold);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(normal1 + "," + time1);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(bold);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(normal1 + "," + time1);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(bold);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(normal1 + "," + time1);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }


                                    Cursor cursor_a = db.rawQuery("SELECT * FROM Hotel", null);
                                    int cdv1 = cursor_a.getCount();
                                    String inttostring = String.valueOf(cdv1);
                                    allbuf1 = new byte[][]{
                                            setHT32, left, un1, "No. of Categories".getBytes(), HT, inttostring.getBytes(), LF

                                    };
                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT32);    //
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write("No. of Categories");    //
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(inttostring);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT32);    //
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write("No. of Categories");    //
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(inttostring);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT32);    //
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write("No. of Categories");    //
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(inttostring);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                    cursor_a.close();

                                    Cursor cursor_b = db.rawQuery("SELECT * FROM Items", null);
                                    int cdv11 = cursor_b.getCount();
                                    String inttostring11 = String.valueOf(cdv11);

                                    allbufrounded = new byte[][]{
                                            setHT32, left, "No. of Items".getBytes(), HT, inttostring11.getBytes(), LF
                                    };

                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT32);    //
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BT_Write("No. of Items");    //
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(inttostring11);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT32);    //
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write("No. of Items");    //
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(inttostring11);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT32);    //
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write("No. of Items");    //
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(inttostring11);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(str_line);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(str_line);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(str_line);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                    cursor_b.close();



                                    allbufrounded = new byte[][]{
//                                        setHT32,left,"00000X".getBytes(),"Item nameeeeeeeeeeeeee".getBytes(),HT,"Rs.".getBytes(),"999999".getBytes(),LF
                                            setHT32, left, "Qty X ".getBytes(), "Item name".getBytes(), HT, "Price".getBytes(), LF
                                    };

                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT32);    //
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BT_Write("Qty X ");    //
                                        BT_Write("Item name");    //
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write("Price");    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT32);    //
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write("Qty X ");    //
                                            wifiSocket2.WIFI_Write("Item name");    //
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write("Price");    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT32);    //
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write("Qty X ");    //
                                                wifiSocket.WIFI_Write("Item name");    //
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write("Price");    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(str_line);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(str_line);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(str_line);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor cursor = db.rawQuery("SELECT * FROM Hotel", null);
                                    if (cursor.moveToFirst()) {
                                        do {
                                            String name = cursor.getString(1);

                                            TextView tv = new TextView(getActivity());
                                            tv.setText(name);

                                            if (tv.getText().toString().equals("All") || tv.getText().toString().equals("Favourites")) {

                                            } else {
                                                allbuf1 = new byte[][]{
                                                        left, bold, tv.getText().toString().getBytes(), LF

                                                };
                                                if (statussusbs.equals("ok")) {
                                                    BluetoothPrintDriver.BT_Write(left);    //
                                                    BluetoothPrintDriver.BT_Write(bold);    //
                                                    BT_Write(tv.getText().toString());
                                                    BluetoothPrintDriver.BT_Write(LF);    //
                                                } else {
                                                    if (statusnets_counter.equals("ok")) {
                                                        wifiSocket2.WIFI_Write(left);    //
                                                        wifiSocket2.WIFI_Write(bold);    //
                                                        wifiSocket2.WIFI_Write(tv.getText().toString());
                                                        wifiSocket2.WIFI_Write(LF);    //
                                                    }else {
                                                        if (statusnets.equals("ok")) {
                                                            wifiSocket.WIFI_Write(left);    //
                                                            wifiSocket.WIFI_Write(bold);    //
                                                            wifiSocket.WIFI_Write(tv.getText().toString());
                                                            wifiSocket.WIFI_Write(LF);    //
                                                        }
                                                    }
                                                }
                                                Cursor cursor2 = db.rawQuery("SELECT * FROM Items WHERE category = '" + tv.getText().toString() + "'", null);
                                                if (cursor2.moveToFirst()) {
                                                    do {
                                                        String name1 = cursor2.getString(1);
                                                        String id = cursor2.getString(0);
                                                        String quan = cursor2.getString(3);
                                                        String price = cursor2.getString(2);
                                                        String barcode = cursor2.getString(16);

                                                        TextView tv1 = new TextView(getActivity());
                                                        tv1.setText(quan);

                                                        if (name1.length() > 44) {
                                                            String string1 = name1.substring(0, 44);
                                                            String string3 = name1.substring(44);
                                                            allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                                                    setHT32, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), string1.getBytes(), HT, "Rs.".getBytes(), price.getBytes(), LF, "     ".getBytes(), string3.getBytes(), LF
                                                            };
                                                            if (statussusbs.equals("ok")) {
                                                                BluetoothPrintDriver.BT_Write(setHT32);    //
                                                                BluetoothPrintDriver.BT_Write(left);    //
                                                                BluetoothPrintDriver.BT_Write(un1);    //
                                                                BT_Write(tv1.getText().toString() + " X " + string1);    //
                                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                                BT_Write(insert1_rs);    //
                                                                BT_Write(price);    //
                                                                BluetoothPrintDriver.BT_Write(LF);    //
                                                                BT_Write("     ");    //
                                                                BT_Write(string3);    //
                                                                BluetoothPrintDriver.BT_Write(LF);    //
                                                            } else {
                                                                if (statusnets_counter.equals("ok")) {
                                                                    wifiSocket2.WIFI_Write(setHT32);    //
                                                                    wifiSocket2.WIFI_Write(left);    //
                                                                    wifiSocket2.WIFI_Write(un1);    //
                                                                    wifiSocket2.WIFI_Write(tv1.getText().toString() + " X " + string1);    //
                                                                    wifiSocket2.WIFI_Write(HT);    //
                                                                    wifiSocket2.WIFI_Write(insert1_rs);    //
                                                                    wifiSocket2.WIFI_Write(price);    //
                                                                    wifiSocket2.WIFI_Write(LF);    //
                                                                    wifiSocket2.WIFI_Write("     ");    //
                                                                    wifiSocket2.WIFI_Write(string3);    //
                                                                    wifiSocket2.WIFI_Write(LF);    //
                                                                }else {
                                                                    if (statusnets.equals("ok")) {
                                                                        wifiSocket.WIFI_Write(setHT32);    //
                                                                        wifiSocket.WIFI_Write(left);    //
                                                                        wifiSocket.WIFI_Write(un1);    //
                                                                        wifiSocket.WIFI_Write(tv1.getText().toString() + " X " + string1);    //
                                                                        wifiSocket.WIFI_Write(HT);    //
                                                                        wifiSocket.WIFI_Write(insert1_rs);    //
                                                                        wifiSocket.WIFI_Write(price);    //
                                                                        wifiSocket.WIFI_Write(LF);    //
                                                                        wifiSocket.WIFI_Write("     ");    //
                                                                        wifiSocket.WIFI_Write(string3);    //
                                                                        wifiSocket.WIFI_Write(LF);    //
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                                                    setHT32, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), name1.getBytes(), HT, "Rs.".getBytes(), price.getBytes(), LF
                                                            };
                                                            if (statussusbs.equals("ok")) {
                                                                BluetoothPrintDriver.BT_Write(setHT32);    //
                                                                BluetoothPrintDriver.BT_Write(left);    //
                                                                BluetoothPrintDriver.BT_Write(un1);    //
                                                                BT_Write(tv1.getText().toString() + " X " + name1);    //
                                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                                BT_Write(insert1_rs);    //
                                                                BT_Write(price);    //
                                                                BluetoothPrintDriver.BT_Write(LF);    //
                                                            } else {
                                                                if (statusnets_counter.equals("ok")) {
                                                                    wifiSocket2.WIFI_Write(setHT32);    //
                                                                    wifiSocket2.WIFI_Write(left);    //
                                                                    wifiSocket2.WIFI_Write(un1);    //
                                                                    wifiSocket2.WIFI_Write(tv1.getText().toString() + " X " + name1);    //
                                                                    wifiSocket2.WIFI_Write(HT);    //
                                                                    wifiSocket2.WIFI_Write(insert1_rs);    //
                                                                    wifiSocket2.WIFI_Write(price);    //
                                                                    wifiSocket2.WIFI_Write(LF);    //
                                                                }else {
                                                                    if (statusnets.equals("ok")) {
                                                                        wifiSocket.WIFI_Write(setHT32);    //
                                                                        wifiSocket.WIFI_Write(left);    //
                                                                        wifiSocket.WIFI_Write(un1);    //
                                                                        wifiSocket.WIFI_Write(tv1.getText().toString() + " X " + name1);    //
                                                                        wifiSocket.WIFI_Write(HT);    //
                                                                        wifiSocket.WIFI_Write(insert1_rs);    //
                                                                        wifiSocket.WIFI_Write(price);    //
                                                                        wifiSocket.WIFI_Write(LF);    //
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (statussusbs.equals("ok")) {
                                                            BluetoothPrintDriver.BT_Write(left);    //
                                                            BluetoothPrintDriver.BT_Write(un1);    //
                                                            BT_Write(str_line);
                                                            BluetoothPrintDriver.BT_Write(LF);    //
                                                        } else {
                                                            if (statusnets_counter.equals("ok")) {
                                                                wifiSocket2.WIFI_Write(left);    //
                                                                wifiSocket2.WIFI_Write(un1);    //
                                                                wifiSocket2.WIFI_Write(str_line);
                                                                wifiSocket2.WIFI_Write(LF);    //
                                                            }else {
                                                                if (statusnets.equals("ok")) {
                                                                    wifiSocket.WIFI_Write(left);    //
                                                                    wifiSocket.WIFI_Write(un1);    //
                                                                    wifiSocket.WIFI_Write(str_line);
                                                                    wifiSocket.WIFI_Write(LF);    //
                                                                }
                                                            }
                                                        }

                                                    } while (cursor2.moveToNext());
                                                }
                                                cursor2.close();
                                            }
                                        } while (cursor.moveToNext());
                                    }
                                    cursor.close();

                                    Cursor cursor3 = db.rawQuery("SELECT * FROM Items", null);
                                    if (cursor3.moveToFirst()) {
                                        do {
                                            String cate = cursor3.getString(4);
                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setText(cate);
                                            if (tv3.getText().toString().equals("") || tv3.getText().toString().equals("None") || tv3.getText().toString().equals("NONE")) {
                                                allbuf1 = new byte[][]{
                                                        left, bold, "non categorized items".getBytes(), LF

                                                };
                                                if (statussusbs.equals("ok")) {
                                                    BluetoothPrintDriver.BT_Write(left);    //
                                                    BluetoothPrintDriver.BT_Write(bold);    //
                                                    BT_Write("non categorized items");
                                                    BluetoothPrintDriver.BT_Write(LF);    //
                                                } else {
                                                    if (statusnets_counter.equals("ok")) {
                                                        wifiSocket2.WIFI_Write(left);    //
                                                        wifiSocket2.WIFI_Write(bold);    //
                                                        wifiSocket2.WIFI_Write("non categorized items");
                                                        wifiSocket2.WIFI_Write(LF);    //
                                                    }else {
                                                        if (statusnets.equals("ok")) {
                                                            wifiSocket.WIFI_Write(left);    //
                                                            wifiSocket.WIFI_Write(bold);    //
                                                            wifiSocket.WIFI_Write("non categorized items");
                                                            wifiSocket.WIFI_Write(LF);    //
                                                        }
                                                    }
                                                }
                                                break;
                                            }
                                        } while (cursor3.moveToNext());
                                    }
                                    cursor3.close();

                                    Cursor cursor2 = db.rawQuery("SELECT * FROM Items", null);
                                    if (cursor2.moveToFirst()) {
                                        do {
                                            String cate = cursor2.getString(4);
                                            String name1 = cursor2.getString(1);
                                            String id = cursor2.getString(0);
                                            String quan = cursor2.getString(3);
                                            String price = cursor2.getString(2);
                                            String barcode = cursor2.getString(16);

                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setText(cate);

                                            if (tv3.getText().toString().equals("") || tv3.getText().toString().equals("None") || tv3.getText().toString().equals("NONE")) {


                                                TextView tv1 = new TextView(getActivity());
                                                tv1.setText(quan);

                                                if (name1.length() > 44) {
                                                    String string1 = name1.substring(0, 44);
                                                    String string3 = name1.substring(44);
                                                    allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                                            setHT32, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), string1.getBytes(), HT, "Rs.".getBytes(), price.getBytes(), LF, "     ".getBytes(), string3.getBytes(), LF
                                                    };
                                                    if (statussusbs.equals("ok")) {
                                                        BluetoothPrintDriver.BT_Write(setHT32);    //
                                                        BluetoothPrintDriver.BT_Write(left);    //
                                                        BluetoothPrintDriver.BT_Write(un1);    //
                                                        BT_Write(tv1.getText().toString() + " X " + string1);    //
                                                        BluetoothPrintDriver.BT_Write(HT);    //
                                                        BT_Write(insert1_rs);    //
                                                        BT_Write(price);    //
                                                        BluetoothPrintDriver.BT_Write(LF);    //
                                                        BT_Write("     ");    //
                                                        BT_Write(string3);    //
                                                        BluetoothPrintDriver.BT_Write(LF);    //
                                                    } else {
                                                        if (statusnets_counter.equals("ok")) {
                                                            wifiSocket2.WIFI_Write(setHT32);    //
                                                            wifiSocket2.WIFI_Write(left);    //
                                                            wifiSocket2.WIFI_Write(un1);    //
                                                            wifiSocket2.WIFI_Write(tv1.getText().toString() + " X " + string1);    //
                                                            wifiSocket2.WIFI_Write(HT);    //
                                                            wifiSocket2.WIFI_Write(insert1_rs);    //
                                                            wifiSocket2.WIFI_Write(price);    //
                                                            wifiSocket2.WIFI_Write(LF);    //
                                                            wifiSocket2.WIFI_Write("     ");    //
                                                            wifiSocket2.WIFI_Write(string3);    //
                                                            wifiSocket2.WIFI_Write(LF);    //
                                                        }else {
                                                            if (statusnets.equals("ok")) {
                                                                wifiSocket.WIFI_Write(setHT32);    //
                                                                wifiSocket.WIFI_Write(left);    //
                                                                wifiSocket.WIFI_Write(un1);    //
                                                                wifiSocket.WIFI_Write(tv1.getText().toString() + " X " + string1);    //
                                                                wifiSocket.WIFI_Write(HT);    //
                                                                wifiSocket.WIFI_Write(insert1_rs);    //
                                                                wifiSocket.WIFI_Write(price);    //
                                                                wifiSocket.WIFI_Write(LF);    //
                                                                wifiSocket.WIFI_Write("     ");    //
                                                                wifiSocket.WIFI_Write(string3);    //
                                                                wifiSocket.WIFI_Write(LF);    //
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    allbuf1 = new byte[][]{
//                                                    setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                                            setHT32, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), name1.getBytes(), HT, "Rs.".getBytes(), price.getBytes(), LF
                                                    };
                                                    if (statussusbs.equals("ok")) {
                                                        BluetoothPrintDriver.BT_Write(setHT32);    //
                                                        BluetoothPrintDriver.BT_Write(left);    //
                                                        BluetoothPrintDriver.BT_Write(un1);    //
                                                        BT_Write(tv1.getText().toString() + " X " + name1);    //
                                                        BluetoothPrintDriver.BT_Write(HT);    //
                                                        BT_Write(insert1_rs);    //
                                                        BT_Write(price);    //
                                                        BluetoothPrintDriver.BT_Write(LF);    //
                                                    } else {
                                                        if (statusnets_counter.equals("ok")) {
                                                            wifiSocket2.WIFI_Write(setHT32);    //
                                                            wifiSocket2.WIFI_Write(left);    //
                                                            wifiSocket2.WIFI_Write(un1);    //
                                                            wifiSocket2.WIFI_Write(tv1.getText().toString() + " X " + name1);    //
                                                            wifiSocket2.WIFI_Write(HT);    //
                                                            wifiSocket2.WIFI_Write(insert1_rs);    //
                                                            wifiSocket2.WIFI_Write(price);    //
                                                            wifiSocket2.WIFI_Write(LF);    //
                                                        }else {
                                                            if (statusnets.equals("ok")) {
                                                                wifiSocket.WIFI_Write(setHT32);    //
                                                                wifiSocket.WIFI_Write(left);    //
                                                                wifiSocket.WIFI_Write(un1);    //
                                                                wifiSocket.WIFI_Write(tv1.getText().toString() + " X " + name1);    //
                                                                wifiSocket.WIFI_Write(HT);    //
                                                                wifiSocket.WIFI_Write(insert1_rs);    //
                                                                wifiSocket.WIFI_Write(price);    //
                                                                wifiSocket.WIFI_Write(LF);    //
                                                            }
                                                        }
                                                    }
                                                }

                                                if (statussusbs.equals("ok")) {
                                                    BluetoothPrintDriver.BT_Write(left);    //
                                                    BluetoothPrintDriver.BT_Write(un1);    //
                                                    BT_Write(str_line);
                                                    BluetoothPrintDriver.BT_Write(LF);    //
                                                } else {
                                                    if (statusnets_counter.equals("ok")) {
                                                        wifiSocket2.WIFI_Write(left);    //
                                                        wifiSocket2.WIFI_Write(un1);    //
                                                        wifiSocket2.WIFI_Write(str_line);
                                                        wifiSocket2.WIFI_Write(LF);    //
                                                    }else {
                                                        if (statusnets.equals("ok")) {
                                                            wifiSocket.WIFI_Write(left);    //
                                                            wifiSocket.WIFI_Write(un1);    //
                                                            wifiSocket.WIFI_Write(str_line);
                                                            wifiSocket.WIFI_Write(LF);    //
                                                        }
                                                    }
                                                }
                                            }

                                        } while (cursor2.moveToNext());
                                    }
                                    cursor2.close();

                                    feedcut();
                                }

                            }else {
                                Toast.makeText(getActivity(), "printer not connected", Toast.LENGTH_SHORT).show();
                            }
                        }else {
                            Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
                            if (print_ty.moveToFirst()){
                                str_print_ty = print_ty.getString(1);
                            }
                            print_ty.close();

                            Cursor getprint_type = db.rawQuery("SELECT * FROM Printer_text_size", null);
                            if (getprint_type.moveToFirst()) {
                                String type = getprint_type.getString(1);
                                Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);

                                if (cc.moveToFirst()) {
                                    cc.moveToFirst();
                                    do {
                                        NAME = cc.getString(1);
                                        if (NAME.equals("3 inch")) {
                                            if (str_print_ty.equals("Generic") || str_print_ty.equals("Epson/others")) {
                                                setHT32 = new byte[]{0x1b, 0x44, 0x33, 0x00};//2 tabs 3"
                                                setHT321 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                                                setHT3212 = new byte[]{0x1b, 0x44, 0x31, 0x00};//2 tabs 3"
                                                setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                                                setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x25, 0x31, 0x00};//4 tabs 3"
                                                nPaperWidth = 576;
                                                charlength = 29;
                                                charlength1 = 58;
                                                charlength2 = 87;
                                                quanlentha = 5;
                                                HT1 = new byte[]{0x09};
                                                str_line = "----------------------------------------------------------";
                                                allbufline = new byte[][]{
                                                        left, un1, "----------------------------------------------------------".getBytes(), LF
                                                };
                                            }else {
                                                if (str_print_ty.equals("POS")) {
                                                    setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                                                    setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                                                    setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                                                    setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                                                    setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                                                    nPaperWidth = 576;
                                                    charlength = 23;
                                                    charlength1 = 46;
                                                    charlength2 = 69;
                                                    quanlentha = 4;
                                                    HT1 = new byte[]{0x2F};
                                                    str_line = "------------------------------------------------";
                                                    allbufline = new byte[][]{
                                                            left, un1, "------------------------------------------------".getBytes(), LF

                                                    };
                                                }
                                            }
                                        } else {
                                            if (str_print_ty.equals("Generic")) {
//                                                Toast.makeText(getActivity(), "phi", Toast.LENGTH_SHORT).show();
                                                setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                                                setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                                                setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                                                setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                                                nPaperWidth = 384;
                                                charlength = 10;
                                                charlength1 = 20;
                                                charlength2 = 30;
                                                quanlentha = 5;
                                                HT1 = new byte[]{0x09};
                                                str_line = "--------------------------------";
                                                allbufline = new byte[][]{
                                                        left, un1, "--------------------------------".getBytes(), LF

                                                };
                                            }else {
                                                if (str_print_ty.equals("Epson/others")) {
//                                                Toast.makeText(getActivity(), "epson", Toast.LENGTH_SHORT).show();
                                                    setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                                                    setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                                                    setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                                                    setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                                                    setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                                                    nPaperWidth = 384;
                                                    charlength = 16;
                                                    charlength1 = 32;
                                                    charlength2 = 48;
                                                    quanlentha = 5;
                                                    HT1 = new byte[]{0x09};
                                                    str_line = "------------------------------------------";
                                                    allbufline = new byte[][]{
                                                            left, un1, "------------------------------------------".getBytes(), LF
                                                    };
                                                }else {
                                                    if (str_print_ty.equals("POS")) {
                                                        setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                                        setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                                        setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                                        setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                                        nPaperWidth = 384;
                                                        charlength = 11;
                                                        charlength1 = 22;
                                                        charlength2 = 33;
                                                        quanlentha = 4;
                                                        HT1 = new byte[]{0x2F};
                                                        str_line = "--------------------------------";
                                                        allbufline = new byte[][]{
                                                                left, un1, "--------------------------------".getBytes(), LF
                                                        };
                                                    }
                                                }
                                            }
                                        }
                                    } while (cc.moveToNext());
                                }
                                cc.close();
//                    }
                            }
                            getprint_type.close();

                            Cursor connnett = db.rawQuery("SELECT * FROM IPConn", null);
                            if (connnett.moveToFirst()) {
                                ipnamegets = connnett.getString(1);
                                portgets = connnett.getString(2);
                                statusnets = connnett.getString(3);
                            }
                            connnett.close();

                            Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
                            if (connnet_counter.moveToFirst()) {
                                ipnamegets_counter = connnet_counter.getString(1);
                                portgets_counter = connnet_counter.getString(2);
                                statusnets_counter = connnet_counter.getString(3);
                            }
                            connnet_counter.close();

                            Cursor connusbb = db.rawQuery("SELECT * FROM BTConn", null);
                            if (connusbb.moveToFirst()) {
                                addgets = connusbb.getString(1);
                                namegets = connusbb.getString(2);
                                statussusbs = connusbb.getString(3);
                            }
                            connusbb.close();

                            if (statussusbs.equals("ok") || statusnets.equals("ok") || statusnets_counter.equals("ok")) {

                                String dd = "";
                                TextView qazcvb = new TextView(getActivity());
                                Cursor cvonnusb = db.rawQuery("SELECT * FROM BTConn", null);
                                if (cvonnusb.moveToFirst()) {
                                    addgets = cvonnusb.getString(1);
                                    namegets = cvonnusb.getString(2);
                                    statussusbs = cvonnusb.getString(3);
                                    dd = cvonnusb.getString(4);
                                }
                                cvonnusb.close();

                                qazcvb.setText(dd);
                                if (qazcvb.getText().toString().equals("usb")) {
                                    runPrintCouponSequence(dialog);
                                }else {
                                    allbufrounded = new byte[][]{
                                            left, bold, un1, "Items list".getBytes(), LF

                                    };
                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(bold);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write("Items list");
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(bold);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write("Items list");
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(bold);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write("Items list");
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
                                    if (getcom.moveToFirst()) {
                                        do {
                                            strcompanyname = getcom.getString(1);
                                            straddress1 = getcom.getString(14);
                                        } while (getcom.moveToNext());
                                    }
                                    getcom.close();

                                    tvkot = new TextView(getActivity());

                                    tvkot.setText(strcompanyname);
                                    if (tvkot.getText().toString().equals("")) {

                                    } else {
                                        allbufflinec = new byte[][]{
                                                left, bold, un1, strcompanyname.getBytes(), LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(bold);    //
                                            BluetoothPrintDriver.BT_Write(un1);    //
                                            BT_Write(strcompanyname);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(bold);    //
                                                wifiSocket2.WIFI_Write(un1);    //
                                                wifiSocket2.WIFI_Write(strcompanyname);
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(bold);    //
                                                    wifiSocket.WIFI_Write(un1);    //
                                                    wifiSocket.WIFI_Write(strcompanyname);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }

                                    SimpleDateFormat normal11 = new SimpleDateFormat("dd MMM yyyy");
                                    final String normal1 = normal11.format(new Date());

                                    Date dt = new Date();
                                    SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa");
                                    final String time1 = sdf1.format(dt);

                                    allbufflinet = new byte[][]{
                                            left, bold, un1, normal1.getBytes(), ",".getBytes(), time1.getBytes(), LF

                                    };
                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(bold);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(normal1 + "," + time1);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(bold);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(normal1 + "," + time1);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(bold);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(normal1 + "," + time1);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor cursor_a = db.rawQuery("SELECT * FROM Hotel", null);
                                    int cdv1 = cursor_a.getCount();
                                    String inttostring = String.valueOf(cdv1);
                                    allbuf1 = new byte[][]{
                                            setHT32, left, un1, "No. of Categories".getBytes(), HT, inttostring.getBytes(), LF

                                    };
                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT32);    //
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write("No. of Categories");    //
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(inttostring);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT32);    //
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write("No. of Categories");    //
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(inttostring);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT32);    //
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write("No. of Categories");    //
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(inttostring);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                    cursor_a.close();

                                    Cursor cursor_b = db.rawQuery("SELECT * FROM Items", null);
                                    int cdv11 = cursor_b.getCount();
                                    String inttostring11 = String.valueOf(cdv11);

                                    allbufrounded = new byte[][]{
                                            setHT32, left, "No. of Items".getBytes(), HT, inttostring11.getBytes(), LF
                                    };

                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT32);    //
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BT_Write("No. of Items");    //
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(inttostring11);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT32);    //
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write("No. of Items");    //
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(inttostring11);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT32);    //
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write("No. of Items");    //
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(inttostring11);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(str_line);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(str_line);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(str_line);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                    cursor_b.close();

                                    allbufrounded = new byte[][]{
//                                        setHT321, left, "11111X".getBytes(),"Item nameeeeeeeeeeeeeee".getBytes(),HT, "    ".getBytes(), "Rs.".getBytes(),"999999".getBytes(), LF
                                            setHT321, left, "Qty X ".getBytes(), "Item name".getBytes(), HT, "    ".getBytes(), "Price".getBytes(), LF
                                    };

                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT321);    //
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BT_Write("Qty X ");    //
                                        BT_Write("Item name");    //
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write("    ");    //
                                        BT_Write("Price");    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT321);    //
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write("Qty X ");    //
                                            wifiSocket2.WIFI_Write("Item name");    //
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write("    ");    //
                                            wifiSocket2.WIFI_Write("Price");    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT321);    //
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write("Qty X ");    //
                                                wifiSocket.WIFI_Write("Item name");    //
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write("    ");    //
                                                wifiSocket.WIFI_Write("Price");    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    if (statussusbs.equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(str_line);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.equals("ok")) {
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(str_line);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.equals("ok")) {
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(str_line);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor cursor = db.rawQuery("SELECT * FROM Hotel", null);
                                    if (cursor.moveToFirst()) {
                                        do {
                                            String name = cursor.getString(1);

                                            TextView tv = new TextView(getActivity());
                                            tv.setText(name);

                                            if (tv.getText().toString().equals("All") || tv.getText().toString().equals("Favourites")) {

                                            } else {
                                                allbuf1 = new byte[][]{
                                                        left, bold, tv.getText().toString().getBytes(), LF

                                                };
                                                if (statussusbs.equals("ok")) {
                                                    BluetoothPrintDriver.BT_Write(left);    //
                                                    BluetoothPrintDriver.BT_Write(bold);    //
                                                    BT_Write(tv.getText().toString());
                                                    BluetoothPrintDriver.BT_Write(LF);    //
                                                } else {
                                                    if (statusnets_counter.equals("ok")) {
                                                        wifiSocket2.WIFI_Write(left);    //
                                                        wifiSocket2.WIFI_Write(bold);    //
                                                        wifiSocket2.WIFI_Write(tv.getText().toString());
                                                        wifiSocket2.WIFI_Write(LF);    //
                                                    }else {
                                                        if (statusnets.equals("ok")) {
                                                            wifiSocket.WIFI_Write(left);    //
                                                            wifiSocket.WIFI_Write(bold);    //
                                                            wifiSocket.WIFI_Write(tv.getText().toString());
                                                            wifiSocket.WIFI_Write(LF);    //
                                                        }
                                                    }
                                                }
                                                Cursor cursor2 = db.rawQuery("SELECT * FROM Items WHERE category = '" + tv.getText().toString() + "'", null);
                                                if (cursor2.moveToFirst()) {
                                                    do {
                                                        String name1 = cursor2.getString(1);
                                                        String id = cursor2.getString(0);
                                                        String quan = cursor2.getString(3);
                                                        String price = cursor2.getString(2);
                                                        String barcode = cursor2.getString(16);


                                                        TextView tv1 = new TextView(getActivity());
                                                        tv1.setText(quan);

                                                        if (name1.length() > 23) {
                                                            String string1 = name1.substring(0, 23);
                                                            String string3 = name1.substring(23);
                                                            allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                                                    setHT321, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), string1.getBytes(), HT, "    ".getBytes(), "Rs.".getBytes(), price.getBytes(), LF, "     ".getBytes(), string3.getBytes(), LF
                                                            };
                                                            if (statussusbs.equals("ok")) {
                                                                BluetoothPrintDriver.BT_Write(setHT321);    //
                                                                BluetoothPrintDriver.BT_Write(left);    //
                                                                BluetoothPrintDriver.BT_Write(un1);    //
                                                                BT_Write(tv1.getText().toString() + " X " + string1);    //
                                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                                BT_Write("    ");    //
                                                                BT_Write(insert1_rs);    //
                                                                BT_Write(price);    //
                                                                BluetoothPrintDriver.BT_Write(LF);    //
                                                                BT_Write("     ");    //
                                                                BT_Write(string3);    //
                                                                BluetoothPrintDriver.BT_Write(LF);    //
                                                            } else {
                                                                if (statusnets_counter.equals("ok")) {
                                                                    wifiSocket2.WIFI_Write(setHT321);    //
                                                                    wifiSocket2.WIFI_Write(left);    //
                                                                    wifiSocket2.WIFI_Write(un1);    //
                                                                    wifiSocket2.WIFI_Write(tv1.getText().toString() + " X " + string1);    //
                                                                    wifiSocket2.WIFI_Write(HT);    //
                                                                    wifiSocket2.WIFI_Write("    ");    //
                                                                    wifiSocket2.WIFI_Write(insert1_rs);    //
                                                                    wifiSocket2.WIFI_Write(price);    //
                                                                    wifiSocket2.WIFI_Write(LF);    //
                                                                    wifiSocket2.WIFI_Write("     ");    //
                                                                    wifiSocket2.WIFI_Write(string3);    //
                                                                    wifiSocket2.WIFI_Write(LF);    //
                                                                }else {
                                                                    if (statusnets.equals("ok")) {
                                                                        wifiSocket.WIFI_Write(setHT321);    //
                                                                        wifiSocket.WIFI_Write(left);    //
                                                                        wifiSocket.WIFI_Write(un1);    //
                                                                        wifiSocket.WIFI_Write(tv1.getText().toString() + " X " + string1);    //
                                                                        wifiSocket.WIFI_Write(HT);    //
                                                                        wifiSocket.WIFI_Write("    ");    //
                                                                        wifiSocket.WIFI_Write(insert1_rs);    //
                                                                        wifiSocket.WIFI_Write(price);    //
                                                                        wifiSocket.WIFI_Write(LF);    //
                                                                        wifiSocket.WIFI_Write("     ");    //
                                                                        wifiSocket.WIFI_Write(string3);    //
                                                                        wifiSocket.WIFI_Write(LF);    //
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                                                    setHT321, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), name1.getBytes(), HT, "    ".getBytes(), "Rs.".getBytes(), price.getBytes(), LF
                                                            };
                                                            if (statussusbs.equals("ok")) {
                                                                BluetoothPrintDriver.BT_Write(setHT321);    //
                                                                BluetoothPrintDriver.BT_Write(left);    //
                                                                BluetoothPrintDriver.BT_Write(un1);    //
                                                                BT_Write(tv1.getText().toString() + " X " + name1);    //
                                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                                BT_Write("    ");    //
                                                                BT_Write(insert1_rs);    //
                                                                BT_Write(price);    //
                                                                BluetoothPrintDriver.BT_Write(LF);    //
                                                            } else {
                                                                if (statusnets_counter.equals("ok")) {
                                                                    wifiSocket2.WIFI_Write(setHT321);    //
                                                                    wifiSocket2.WIFI_Write(left);    //
                                                                    wifiSocket2.WIFI_Write(un1);    //
                                                                    wifiSocket2.WIFI_Write(tv1.getText().toString() + " X " + name1);    //
                                                                    wifiSocket2.WIFI_Write(HT);    //
                                                                    wifiSocket2.WIFI_Write("    ");    //
                                                                    wifiSocket2.WIFI_Write(insert1_rs);    //
                                                                    wifiSocket2.WIFI_Write(price);    //
                                                                    wifiSocket2.WIFI_Write(LF);    //
                                                                }else {
                                                                    if (statusnets.equals("ok")) {
                                                                        wifiSocket.WIFI_Write(setHT321);    //
                                                                        wifiSocket.WIFI_Write(left);    //
                                                                        wifiSocket.WIFI_Write(un1);    //
                                                                        wifiSocket.WIFI_Write(tv1.getText().toString() + " X " + name1);    //
                                                                        wifiSocket.WIFI_Write(HT);    //
                                                                        wifiSocket.WIFI_Write("    ");    //
                                                                        wifiSocket.WIFI_Write(insert1_rs);    //
                                                                        wifiSocket.WIFI_Write(price);    //
                                                                        wifiSocket.WIFI_Write(LF);    //
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (statussusbs.equals("ok")) {
                                                            BluetoothPrintDriver.BT_Write(left);    //
                                                            BluetoothPrintDriver.BT_Write(un1);    //
                                                            BT_Write(str_line);
                                                            BluetoothPrintDriver.BT_Write(LF);    //
                                                        } else {
                                                            if (statusnets_counter.toString().equals("ok")) {
                                                                wifiSocket2.WIFI_Write(left);    //
                                                                wifiSocket2.WIFI_Write(un1);    //
                                                                wifiSocket2.WIFI_Write(str_line);
                                                                wifiSocket2.WIFI_Write(LF);    //
                                                            }else {
                                                                if (statusnets.toString().equals("ok")) {
                                                                    wifiSocket.WIFI_Write(left);    //
                                                                    wifiSocket.WIFI_Write(un1);    //
                                                                    wifiSocket.WIFI_Write(str_line);
                                                                    wifiSocket.WIFI_Write(LF);    //
                                                                }
                                                            }
                                                        }

                                                    } while (cursor2.moveToNext());
                                                }
                                                cursor2.close();
                                            }
                                        } while (cursor.moveToNext());

                                    }
                                    cursor.close();

                                    Cursor cursor3 = db.rawQuery("SELECT * FROM Items", null);
                                    if (cursor3.moveToFirst()) {
                                        do {
                                            String cate = cursor3.getString(4);
                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setText(cate);
                                            if (tv3.getText().toString().equals("") || tv3.getText().toString().equals("None") || tv3.getText().toString().equals("NONE")) {
                                                allbuf1 = new byte[][]{
                                                        left, bold, "non categorized items".getBytes(), LF

                                                };
                                                if (statussusbs.equals("ok")) {
                                                    BluetoothPrintDriver.BT_Write(left);    //
                                                    BluetoothPrintDriver.BT_Write(bold);    //
                                                    BT_Write("non categorized items");
                                                    BluetoothPrintDriver.BT_Write(LF);    //
                                                } else {
                                                    if (statusnets_counter.equals("ok")) {
                                                        wifiSocket2.WIFI_Write(left);    //
                                                        wifiSocket2.WIFI_Write(bold);    //
                                                        wifiSocket2.WIFI_Write("non categorized items");
                                                        wifiSocket2.WIFI_Write(LF);    //
                                                    }else {
                                                        if (statusnets.equals("ok")) {
                                                            wifiSocket.WIFI_Write(left);    //
                                                            wifiSocket.WIFI_Write(bold);    //
                                                            wifiSocket.WIFI_Write("non categorized items");
                                                            wifiSocket.WIFI_Write(LF);    //
                                                        }
                                                    }
                                                }
                                                break;
                                            }
                                        } while (cursor3.moveToNext());
                                    }
                                    cursor3.close();

                                    Cursor cursor2 = db.rawQuery("SELECT * FROM Items", null);
                                    if (cursor2.moveToFirst()) {
                                        do {
                                            String cate = cursor2.getString(4);
                                            String name1 = cursor2.getString(1);
                                            String id = cursor2.getString(0);
                                            String quan = cursor2.getString(3);
                                            String price = cursor2.getString(2);
                                            String barcode = cursor2.getString(16);

                                            TextView tv3 = new TextView(getActivity());
                                            tv3.setText(cate);

                                            if (tv3.getText().toString().equals("") || tv3.getText().toString().equals("None") || tv3.getText().toString().equals("NONE")) {


                                                TextView tv1 = new TextView(getActivity());
                                                tv1.setText(quan);
                                                if (name1.length() > 23) {
                                                    String string1 = name1.substring(0, 23);
                                                    String string3 = name1.substring(23);
                                                    allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                                            setHT321, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), string1.getBytes(), HT, "    ".getBytes(), "Rs.".getBytes(), price.getBytes(), LF, "     ".getBytes(), string3.getBytes(), LF
                                                    };
                                                    if (statussusbs.equals("ok")) {
                                                        BluetoothPrintDriver.BT_Write(setHT321);    //
                                                        BluetoothPrintDriver.BT_Write(left);    //
                                                        BluetoothPrintDriver.BT_Write(un1);    //
                                                        BT_Write(tv1.getText().toString() + " X " + string1);    //
                                                        BluetoothPrintDriver.BT_Write(HT);    //
                                                        BT_Write("    ");    //
                                                        BT_Write(insert1_rs);    //
                                                        BT_Write(price);    //
                                                        BluetoothPrintDriver.BT_Write(LF);    //
                                                        BT_Write("     ");    //
                                                        BT_Write(string3);    //
                                                        BluetoothPrintDriver.BT_Write(LF);    //
                                                    } else {
                                                        if (statusnets_counter.equals("ok")) {
                                                            wifiSocket2.WIFI_Write(setHT321);    //
                                                            wifiSocket2.WIFI_Write(left);    //
                                                            wifiSocket2.WIFI_Write(un1);    //
                                                            wifiSocket2.WIFI_Write(tv1.getText().toString() + " X " + string1);    //
                                                            wifiSocket2.WIFI_Write(HT);    //
                                                            wifiSocket2.WIFI_Write("    ");    //
                                                            wifiSocket2.WIFI_Write(insert1_rs);    //
                                                            wifiSocket2.WIFI_Write(price);    //
                                                            wifiSocket2.WIFI_Write(LF);    //
                                                            wifiSocket2.WIFI_Write("     ");    //
                                                            wifiSocket2.WIFI_Write(string3);    //
                                                            wifiSocket2.WIFI_Write(LF);    //
                                                        }else {
                                                            if (statusnets.equals("ok")) {
                                                                wifiSocket.WIFI_Write(setHT321);    //
                                                                wifiSocket.WIFI_Write(left);    //
                                                                wifiSocket.WIFI_Write(un1);    //
                                                                wifiSocket.WIFI_Write(tv1.getText().toString() + " X " + string1);    //
                                                                wifiSocket.WIFI_Write(HT);    //
                                                                wifiSocket.WIFI_Write("    ");    //
                                                                wifiSocket.WIFI_Write(insert1_rs);    //
                                                                wifiSocket.WIFI_Write(price);    //
                                                                wifiSocket.WIFI_Write(LF);    //
                                                                wifiSocket.WIFI_Write("     ");    //
                                                                wifiSocket.WIFI_Write(string3);    //
                                                                wifiSocket.WIFI_Write(LF);    //
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    allbuf1 = new byte[][]{
//                                                    setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                                            setHT321, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), name1.getBytes(), HT, "    ".getBytes(), "Rs.".getBytes(), price.getBytes(), LF
                                                    };
                                                    if (statussusbs.equals("ok")) {
                                                        BluetoothPrintDriver.BT_Write(setHT321);    //
                                                        BluetoothPrintDriver.BT_Write(left);    //
                                                        BluetoothPrintDriver.BT_Write(un1);    //
                                                        BT_Write(tv1.getText().toString() + " X " + name1);    //
                                                        BluetoothPrintDriver.BT_Write(HT);    //
                                                        BT_Write("    ");    //
                                                        BT_Write(insert1_rs);    //
                                                        BT_Write(price);    //
                                                        BluetoothPrintDriver.BT_Write(LF);    //
                                                    } else {
                                                        if (statusnets_counter.equals("ok")) {
                                                            wifiSocket2.WIFI_Write(setHT321);    //
                                                            wifiSocket2.WIFI_Write(left);    //
                                                            wifiSocket2.WIFI_Write(un1);    //
                                                            wifiSocket2.WIFI_Write(tv1.getText().toString() + " X " + name1);    //
                                                            wifiSocket2.WIFI_Write(HT);    //
                                                            wifiSocket2.WIFI_Write("    ");    //
                                                            wifiSocket2.WIFI_Write(insert1_rs);    //
                                                            wifiSocket2.WIFI_Write(price);    //
                                                            wifiSocket2.WIFI_Write(LF);    //
                                                        }else {
                                                            if (statusnets.equals("ok")) {
                                                                wifiSocket.WIFI_Write(setHT321);    //
                                                                wifiSocket.WIFI_Write(left);    //
                                                                wifiSocket.WIFI_Write(un1);    //
                                                                wifiSocket.WIFI_Write(tv1.getText().toString() + " X " + name1);    //
                                                                wifiSocket.WIFI_Write(HT);    //
                                                                wifiSocket.WIFI_Write("    ");    //
                                                                wifiSocket.WIFI_Write(insert1_rs);    //
                                                                wifiSocket.WIFI_Write(price);    //
                                                                wifiSocket.WIFI_Write(LF);    //
                                                            }
                                                        }
                                                    }
                                                }

                                                if (statussusbs.equals("ok")) {
                                                    BluetoothPrintDriver.BT_Write(left);    //
                                                    BluetoothPrintDriver.BT_Write(un1);    //
                                                    BT_Write(str_line);
                                                    BluetoothPrintDriver.BT_Write(LF);    //
                                                } else {
                                                    if (statusnets_counter.equals("ok")) {
                                                        wifiSocket2.WIFI_Write(left);    //
                                                        wifiSocket2.WIFI_Write(un1);    //
                                                        wifiSocket2.WIFI_Write(str_line);
                                                        wifiSocket2.WIFI_Write(LF);    //
                                                    }else {
                                                        if (statusnets.equals("ok")) {
                                                            wifiSocket.WIFI_Write(left);    //
                                                            wifiSocket.WIFI_Write(un1);    //
                                                            wifiSocket.WIFI_Write(str_line);
                                                            wifiSocket.WIFI_Write(LF);    //
                                                        }
                                                    }
                                                }
                                            }

                                        } while (cursor2.moveToNext());
                                    }
                                    cursor2.close();
                                    feedcut();
                                }
                            }else {
                                Toast.makeText(getActivity(), "printer not connected", Toast.LENGTH_SHORT).show();
                            }
                        }
                    } while (cc1.moveToNext());
                }
                cc1.close();

                break;

            case R.id.action_download_csv:
                final AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity());
//                alertDialog.setMessage("hi");
                final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_selectable_list_item);
                arrayAdapter.add(getString(R.string.download));
                arrayAdapter.add(getString(R.string.download_and_send));
                alertDialog.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        final String strName = arrayAdapter.getItem(which);
                        if (strName.equals(getString(R.string.download))){
//                            Toast.makeText(getActivity(), "download", Toast.LENGTH_SHORT).show();

                            sdff2 = new SimpleDateFormat("ddMMMyy", Locale.US);
                            currentDateandTimee1 = sdff2.format(new Date());

                            Date dt = new Date();
                            sdff1 = new SimpleDateFormat("hhmmssaa", Locale.US);
                            timee1 = sdff1.format(dt);

                            ExportDatabaseCSVTask task=new ExportDatabaseCSVTask();
                            task.execute();

                        }else {
                            if (strName.equals(getString(R.string.download_and_send))){
//                                Toast.makeText(getActivity(), "download and send", Toast.LENGTH_SHORT).show();



                                Cursor cursore = db.rawQuery("SELECT * FROM Email_setup", null);
                                if (cursore.moveToFirst()){
                                    Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                    if (cursoree.moveToFirst()){
                                        //both are there

                                        sdff2 = new SimpleDateFormat("ddMMMyy", Locale.US);
                                        currentDateandTimee1 = sdff2.format(new Date());

                                        Date dt = new Date();
                                        sdff1 = new SimpleDateFormat("hhmmssaa", Locale.US);
                                        timee1 = sdff1.format(dt);

                                        File dbFile=getActivity().getDatabasePath("mydb_Salesdata");
                                        //Log.v(TAG, "Db path is: "+dbFile);  //get the path of db

                                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
                                        if (!exportDir1.exists()) {
                                            exportDir1.mkdirs();
                                        }

                                        Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
                                        if (getcom.moveToFirst()) {
                                            strcompanyname = getcom.getString(1);
                                        }else {
                                            strcompanyname = "";
                                        }
                                        getcom.close();

                                        file1 = new File(exportDir1, "IvePOS_items_report"+currentDateandTimee1+"_"+timee1+".csv");
                                        try {

                                            file1.createNewFile();
                                            CSVWriter csvWrite1 = new CSVWriter(new FileWriter(file1));

                                            // this is the Column of the table and same for Header of CSV file
                                            String arrStr11[] ={"Id", "Itemname", "Price", "Qty", "Update Qty", "Category", "Itemtax1", "tax_value1", "disc_type", "disc_value", "Barcode", "Unit", "Itemtax2", "tax_value2",
                                                    "Itemtax3", "tax_value3", "Itemtax4", "tax_value4", "Itemtax5", "tax_value5", "Variant2", "Variant_price2", "Variant3", "Variant_price3", "Variant4", "Variant_price4",
                                                    "Variant5", "Variant_price5"};
                                            csvWrite1.writeNext(arrStr11);

//                                            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE,null);
                                            Cursor curCSVv = db.rawQuery("SELECT * FROM Items",null);
                                            //csvWrite.writeNext(curCSV.getColumnNames());

                                            if (curCSVv.moveToFirst())  {
                                                do {
                                                    String billnos = curCSVv.getString(5);
                                                    Cursor curCSV1 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '"+billnos+"'",null);
                                                    if (curCSV1.moveToFirst()){
                                                        String arrStr[] ={curCSVv.getString(0), curCSVv.getString(1), curCSVv.getString(2), curCSVv.getString(3), "0", curCSVv.getString(4), curCSVv.getString(5),
                                                                curCSV1.getString(2), curCSVv.getString(13), curCSVv.getString(14), curCSVv.getString(16), curCSVv.getString(26),
                                                                curCSVv.getString(28), curCSVv.getString(29), curCSVv.getString(30), curCSVv.getString(31), curCSVv.getString(32), curCSVv.getString(33), curCSVv.getString(34), curCSVv.getString(35),
                                                                curCSVv.getString(40), curCSVv.getString(41), curCSVv.getString(42), curCSVv.getString(43), curCSVv.getString(44), curCSVv.getString(45), curCSVv.getString(46), curCSVv.getString(47)};
                                                        csvWrite1.writeNext(arrStr);
                                                    }else {
                                                        String arrStr[] ={curCSVv.getString(0), curCSVv.getString(1), curCSVv.getString(2), curCSVv.getString(3), "0", curCSVv.getString(4), curCSVv.getString(5),
                                                                "0", curCSVv.getString(13), curCSVv.getString(14), curCSVv.getString(16), curCSVv.getString(26),
                                                                curCSVv.getString(28), curCSVv.getString(29), curCSVv.getString(30), curCSVv.getString(31), curCSVv.getString(32), curCSVv.getString(33), curCSVv.getString(34), curCSVv.getString(35),
                                                                curCSVv.getString(40), curCSVv.getString(41), curCSVv.getString(42), curCSVv.getString(43), curCSVv.getString(44), curCSVv.getString(45), curCSVv.getString(46), curCSVv.getString(47)};
                                                        csvWrite1.writeNext(arrStr);
                                                    }
                                                    curCSV1.close();
                                                }while (curCSVv.moveToNext());

                                            }
                                            curCSVv.close();
                                            csvWrite1.close();

                                        }
                                        catch (IOException e){
                                            Log.e("MainActivity", e.getMessage(), e);


                                        }

                                        Uri u2 = null;
                                        u2 = Uri.fromFile(file1);


                                        String url = "www.intuitionsoftwares.com";


                                        String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                                                "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
                                                "Powered by: " + Uri.parse(url);



                                        Cursor cursor = db.rawQuery("SELECT * FROM Email_setup", null);
                                        if (cursor.moveToFirst()) {
                                            String un = cursor.getString(1);
                                            String pwd = cursor.getString(2);
                                            String client = cursor.getString(3);


                                            Cursor cursor11 = db.rawQuery("SELECT * FROM Email_recipient", null);
                                            if (cursor11.moveToFirst()) {
                                                do {
                                                    String unn = cursor11.getString(3);
                                                    String toEmails = unn;
                                                    toEmailList = Arrays.asList(toEmails
                                                            .split("\\s*,\\s*"));
                                                } while (cursor11.moveToNext());
                                            }
                                            cursor11.close();


                                            if (client.equals("Gmail")) {
                                                getResultsFromApi();
                                                new MakeRequestTask(mCredential).execute();
                                            }else {
                                                if (client.equals("Yahoo")){
//                                                    Toast.makeText(getActivity(), "yahoo "+un, Toast.LENGTH_LONG).show();
                                                    Cursor cursor1 = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            String unn = cursor1.getString(3);
                                                            String toEmails = unn;
                                                            toEmailList = Arrays.asList(toEmails
                                                                    .split("\\s*,\\s*"));
                                                            new SendMailTask_Yahoo_attachment(getActivity()).execute(un,
                                                                    pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);
                                                        } while (cursor1.moveToNext());
                                                    }
                                                    cursor1.close();


                                                }else {
                                                    if (client.equals("Hotmail")){
//                                                        Toast.makeText(getActivity(), "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();
                                                        Cursor cursor1 = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                String unn = cursor1.getString(3);
                                                                String toEmails = unn;
                                                                toEmailList = Arrays.asList(toEmails
                                                                        .split("\\s*,\\s*"));
                                                                new SendMailTask_Hotmail_Outlook_attachment(getActivity()).execute(un,
                                                                        pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);
                                                            } while (cursor1.moveToNext());
                                                        }
                                                        cursor1.close();
                                                    }else {
                                                        if (client.equals("Office365")) {
//                                                            Toast.makeText(getActivity(), "office 365 " + un, Toast.LENGTH_LONG).show();
                                                            Cursor cursor1 = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                            if (cursor1.moveToFirst()) {
                                                                do {
                                                                    String unn = cursor1.getString(3);
                                                                    String toEmails = unn;
                                                                    toEmailList = Arrays.asList(toEmails
                                                                            .split("\\s*,\\s*"));
                                                                    new SendMailTask_Office365_attachment(getActivity()).execute(un,
                                                                            pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);
                                                                } while (cursor1.moveToNext());
                                                            }
                                                            cursor1.close();
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        cursor.close();


                                    }else {
                                        //only recipient not there
                                        final Dialog dialoge = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                                        dialoge.setContentView(R.layout.email_prerequisites);
                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                        dialoge.show();

                                        ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                dialoge.dismiss();
                                            }
                                        });

                                        ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                        ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                        ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                        ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                        recipient_notset.setVisibility(View.VISIBLE);

                                        sender_set.setVisibility(View.VISIBLE);

                                        Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                        gotosettings.setVisibility(View.GONE);
                                        gotosettings.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Intent intent = new Intent(getActivity(), EmailSetup_Recipients.class);
                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                startActivity(intent);
//                                                getActivity().finish();
                                                dialoge.dismiss();
                                            }
                                        });

                                        Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                        gotosettings1.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Intent intent = new Intent(getActivity(), EmailSetup_Recipients.class);
                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                startActivity(intent);
//                                                getActivity().finish();
                                                dialoge.dismiss();
                                            }
                                        });


                                    }
                                    cursoree.close();
                                }else {
                                    Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                    if (cursoree.moveToFirst()){
                                        //only sender not there
                                        final Dialog dialoge = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                                        dialoge.setContentView(R.layout.email_prerequisites);
                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                        dialoge.show();

                                        ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                dialoge.dismiss();
                                            }
                                        });

                                        ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                        ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                        ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                        ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                        sender_notset.setVisibility(View.VISIBLE);

                                        recipient_set.setVisibility(View.VISIBLE);

                                        Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                        gotosettings.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Intent intent = new Intent(getActivity(), EmailSetup.class);
                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                startActivity(intent);
//                                                getActivity().finish();
                                                dialoge.dismiss();
                                            }
                                        });

                                        Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                        gotosettings1.setVisibility(View.GONE);
                                        gotosettings1.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Intent intent = new Intent(getActivity(), EmailSetup.class);
                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                startActivity(intent);
//                                                getActivity().finish();
                                                dialoge.dismiss();
                                            }
                                        });

                                    }else {
                                        //both recipient and sender not there
                                        final Dialog dialoge = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                                        dialoge.setContentView(R.layout.email_prerequisites);
                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                        dialoge.show();

                                        ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                dialoge.dismiss();
                                            }
                                        });

                                        ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                        ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                        ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                        ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                        recipient_notset.setVisibility(View.VISIBLE);
                                        sender_notset.setVisibility(View.VISIBLE);

                                        Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                        gotosettings.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Intent intent = new Intent(getActivity(), EmailSetup.class);
                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                startActivity(intent);
//                                                getActivity().finish();
                                                dialoge.dismiss();
                                            }
                                        });

                                        Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                        gotosettings1.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Intent intent = new Intent(getActivity(), EmailSetup_Recipients.class);
                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                startActivity(intent);
//                                                getActivity().finish();
                                                dialoge.dismiss();
                                            }
                                        });

                                    }
                                    cursoree.close();
                                }
                                cursore.close();


                            }
                        }

                    }
                });

                alertDialog.show();
                break;

            case R.id.action_upload_csv:

                i_csv = 0;
                i_csv_id_empty = 0;
                i_csv_itemname_empty = 0;
                i_csv_id_comma = 0;
                i_csv_id_spec_char = 0;
                i_csv_id_spec_char1 = 0;

                i_corre_forma = 0;

//                Toast.makeText(getActivity(), "Please wait for few minutes", Toast.LENGTH_SHORT).show();

                if (intdate <= Integer.parseInt(da)) {
                    Intent fileintent = new Intent(Intent.ACTION_GET_CONTENT);
                    fileintent.addCategory(Intent.CATEGORY_OPENABLE);
                    fileintent.setType("*/*");
                    startActivityForResult(Intent.createChooser(fileintent, "Open CSV"), 1);
                    requestCode_i = 1;
                }else {
                    android.app.AlertDialog.Builder builder;
                    builder = new android.app.AlertDialog.Builder(getActivity());
                    //Setting message manually and performing action on button click
                    builder.setMessage("Your IVEPOS app license is expired.\nBut you can create upto 1000 bills free. Kindly renew it to enjoy complete features.")
                            .setCancelable(false)
                            .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    dialog.cancel();
                                }
                            });
                    //Creating dialog box
                    android.app.AlertDialog alert = builder.create();
                    //Setting the title manually
                    alert.setTitle(getString(R.string.title9));
                    alert.show();
                }

//                Intent fileintent = new Intent(Intent.ACTION_GET_CONTENT);
//                fileintent.setType("gagt/sdf");
//                try {
//                    startActivityForResult(fileintent, 1);
//                    requestCode_i = 1;
//                } catch (ActivityNotFoundException e) {
//
//                }

                break;

            case R.id.action_stock_transfer:
                Intent intent5 = new Intent(getActivity(), Stock_Transfer.class);
                startActivity(intent5);

                break;

            case R.id.action_inventory_indent:
                if (databaseExist()) {
                    db_inapp = getActivity().openOrCreateDatabase("amazoninapp", Context.MODE_PRIVATE, null);

                    db_inapp.execSQL("CREATE TABLE if not exists Pro_upgrade (_id integer PRIMARY KEY UNIQUE, status text, orderid text);");
                    db_inapp = getActivity().openOrCreateDatabase("amazoninapp", Context.MODE_PRIVATE, null);
                    Cursor co31 = db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
                    int cou31 = co31.getColumnCount();
                    if (String.valueOf(cou31).equals("3")) {
                        db_inapp.execSQL("ALTER TABLE Pro_upgrade ADD COLUMN pro_expiry");
                    }
                    co31.close();
                    Cursor cursor1_1 = db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
                    if (cursor1_1.moveToFirst()){

                    }else {
                        ContentValues cv = new ContentValues();
                        cv.put("status", "Not Activated");
                        db_inapp.insert("Pro_upgrade", null, cv);
                    }
                    cursor1_1.close();

                    SimpleDateFormat sdf2_pro = new SimpleDateFormat("yyyyMMdd");
                    String currentDateandTime1_pro = sdf2_pro.format(new Date());

                    Cursor cursor1 = db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
                    if (cursor1.moveToFirst()) {
                        String st = cursor1.getString(1);
                        String st_da = cursor1.getString(3);

                        TextView tv = new TextView(getActivity());
                        tv.setText(st);

                        TextView tv_da = new TextView(getActivity());
                        tv_da.setText(st_da);

                        if (tv.getText().toString().equals("Activated")) {
                            if (Integer.parseInt(tv_da.getText().toString()) > Integer.parseInt(currentDateandTime1_pro)) {
                                Intent intent = new Intent(getActivity(), Inventory_Indent.class);
                                startActivity(intent);
                            }else {
                                androidx.appcompat.app.AlertDialog.Builder builder1 = new androidx.appcompat.app.AlertDialog.Builder(getActivity());
                                builder1.setTitle(getString(R.string.title7));
                                builder1.setMessage(getString(R.string.setmessage1));
                                builder1.setCancelable(true);

                                builder1.setPositiveButton(
                                        "OK",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                dialog.cancel();
                                            }
                                        });

                                builder1.setNegativeButton(
                                        "Buy now",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
//                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKTRsqbTbqFN10yDhrthtSY3")));

                                                check();

//                                                Log.d(TAG, "Buy gas button clicked.");
//
//                                                CharSequence[] options;
//
//                                                // Both subscription options should be available
//                                                options = new CharSequence[1];
//                                                options[0] = getString(R.string.subscription_period_monthly11);
//
//
//
//
//                                                int titleResId;
//
//                                                titleResId = R.string.subscription_period_prompt;
//
//                                                AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
//                                                builder.setTitle(titleResId)
//                                                        .setSingleChoiceItems(options, 0 /* checkedItem */,DatabaseitemActivity.this)
//                                                        .setPositiveButton(R.string.subscription_prompt_continue, DatabaseitemActivity.this)
//                                                        .setNegativeButton(R.string.subscription_prompt_cancel, DatabaseitemActivity.this);
//                                                AlertDialog dialog1 = builder.create();
//                                                dialog1.show();
//
//                                                // launch the gas purchase UI flow.
//                                                // We will be notified of completion via mPurchaseFinishedListener
//                                                //setWaitScreen(true);
//                                                Log.d(TAG, "Launching purchase flow for gas.");
//
//                                                /* TODO: for security, generate your payload here for verification. See the comments on
//                                                 *        verifyDeveloperPayload() for more info. Since this is a SAMPLE, we just use
//                                                 *        an empty string, but on a production app you should carefully generate this. */
//                                                String payload = "";
                                            }
                                        });

                                builder1.setNeutralButton(
                                        "Know more",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKTRsqbTbqFN10yDhrthtSY3")));
                                            }
                                        });

                                androidx.appcompat.app.AlertDialog alert11 = builder1.create();
                                alert11.show();
                            }

                        } else {
                            androidx.appcompat.app.AlertDialog.Builder builder1 = new androidx.appcompat.app.AlertDialog.Builder(getActivity());
                            builder1.setTitle(getString(R.string.title7));
                            builder1.setMessage(getString(R.string.setmessage1));
                            builder1.setCancelable(true);

                            builder1.setPositiveButton(
                                    "OK",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {
                                            dialog.cancel();
                                        }
                                    });

                            builder1.setNegativeButton(
                                    "Buy now",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {
//                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKTRsqbTbqFN10yDhrthtSY3")));

                                            check();

//                                            Log.d(TAG, "Buy gas button clicked.");
//
//                                            CharSequence[] options;
//
//                                            // Both subscription options should be available
//                                            options = new CharSequence[1];
//                                            options[0] = getString(R.string.subscription_period_monthly11);
//
//
//
//
//                                            int titleResId;
//
//                                            titleResId = R.string.subscription_period_prompt;
//
//                                            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
//                                            builder.setTitle(titleResId)
//                                                    .setSingleChoiceItems(options, 0 /* checkedItem */,DatabaseitemActivity.this)
//                                                    .setPositiveButton(R.string.subscription_prompt_continue, DatabaseitemActivity.this)
//                                                    .setNegativeButton(R.string.subscription_prompt_cancel, DatabaseitemActivity.this);
//                                            AlertDialog dialog1 = builder.create();
//                                            dialog1.show();
//
//                                            // launch the gas purchase UI flow.
//                                            // We will be notified of completion via mPurchaseFinishedListener
//                                            //setWaitScreen(true);
//                                            Log.d(TAG, "Launching purchase flow for gas.");
//
//                                            /* TODO: for security, generate your payload here for verification. See the comments on
//                                             *        verifyDeveloperPayload() for more info. Since this is a SAMPLE, we just use
//                                             *        an empty string, but on a production app you should carefully generate this. */
//                                            String payload = "";
                                        }
                                    });

                            builder1.setNeutralButton(
                                    "Know more",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {
                                            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKTRsqbTbqFN10yDhrthtSY3")));
                                        }
                                    });

                            androidx.appcompat.app.AlertDialog alert11 = builder1.create();
                            alert11.show();
                        }
                    } else {
                        androidx.appcompat.app.AlertDialog.Builder builder1 = new androidx.appcompat.app.AlertDialog.Builder(getActivity());
                        builder1.setTitle(getString(R.string.title7));
                        builder1.setMessage(getString(R.string.setmessage1));
                        builder1.setCancelable(true);

                        builder1.setPositiveButton(
                                "OK",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
                                        dialog.cancel();
                                    }
                                });

                        builder1.setNegativeButton(
                                "Buy now",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
//                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKTRsqbTbqFN10yDhrthtSY3")));

                                        check();

//                                        Log.d(TAG, "Buy gas button clicked.");
//
//                                        CharSequence[] options;
//
//                                        options = new CharSequence[1];
//                                        options[0] = getString(R.string.subscription_period_monthly11);
//
//
//                                        int titleResId;
//
//                                        titleResId = R.string.subscription_period_prompt;
//
//                                        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
//                                        builder.setTitle(titleResId)
//                                                .setSingleChoiceItems(options, 0 /* checkedItem */, DatabaseitemActivity.this)
//                                                .setPositiveButton(R.string.subscription_prompt_continue, DatabaseitemActivity.this)
//                                                .setNegativeButton(R.string.subscription_prompt_cancel, DatabaseitemActivity.this);
//                                        AlertDialog dialog1 = builder.create();
//                                        dialog1.show();
//
//                                        // launch the gas purchase UI flow.
//                                        // We will be notified of completion via mPurchaseFinishedListener
//                                        // setWaitScreen(true);
//                                        Log.d(TAG, "Launching purchase flow for gas.");
//
//                                        /* TODO: for security, generate your payload here for verification. See the comments on
//                                         *        verifyDeveloperPayload() for more info. Since this is a SAMPLE, we just use
//                                         *        an empty string, but on a production app you should carefully generate this. */
//                                        String payload = "";
                                    }
                                });

                        builder1.setNeutralButton(
                                "Know more",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
                                        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKTRsqbTbqFN10yDhrthtSY3")));
                                    }
                                });

                        androidx.appcompat.app.AlertDialog alert11 = builder1.create();
                        alert11.show();
                    }
                    cursor1.close();
                }else {
                    androidx.appcompat.app.AlertDialog.Builder builder1 = new androidx.appcompat.app.AlertDialog.Builder(getActivity());
                    builder1.setTitle(getString(R.string.title7));
                    builder1.setMessage(getString(R.string.setmessage1));
                    builder1.setCancelable(true);

                    builder1.setPositiveButton(
                            "OK",
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    dialog.cancel();
                                }
                            });

                    builder1.setNegativeButton(
                            "Buy now",
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
//                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKTRsqbTbqFN10yDhrthtSY3")));

                                    check();

//                                    Log.d(TAG, "Buy gas button clicked.");
//
//                                    CharSequence[] options;
//
//
//                                    options = new CharSequence[1];
//                                    options[0] = getString(R.string.subscription_period_monthly11);
//
//
//
//                                    int titleResId;
//                                    titleResId = R.string.subscription_period_prompt;
//                                    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
//                                    builder.setTitle(titleResId)
//                                            .setSingleChoiceItems(options, 0 /* checkedItem */,DatabaseitemActivity.this)
//                                            .setPositiveButton(R.string.subscription_prompt_continue,DatabaseitemActivity.this)
//                                            .setNegativeButton(R.string.subscription_prompt_cancel, DatabaseitemActivity.this);
//                                    AlertDialog dialog1 = builder.create();
//                                    dialog1.show();
//
//                                    // launch the gas purchase UI flow.
//                                    // We will be notified of completion via mPurchaseFinishedListener
//                                    //   setWaitScreen(true);
//                                    Log.d(TAG, "Launching purchase flow for gas.");
//
//                                    /* TODO: for security, generate your payload here for verification. See the comments on
//                                     *        verifyDeveloperPayload() for more info. Since this is a SAMPLE, we just use
//                                     *        an empty string, but on a production app you should carefully generate this. */
//                                    String payload = "";
                                }
                            });

                    builder1.setNeutralButton(
                            "Know more",
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKTRsqbTbqFN10yDhrthtSY3")));
                                }
                            });

                    androidx.appcompat.app.AlertDialog alert11 = builder1.create();
                    alert11.show();
                }
                break;

            case R.id.action_syncnow:
//                Toast.makeText(getActivity(), "Here8", Toast.LENGTH_SHORT).show();
//                refreshData(); // your code
//                pullToRefresh.setRefreshing(false);

                updateBar.setProgress(0);

                final ConnectivityManager cm = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);

                if (cm != null) {
                    if (Build.VERSION.SDK_INT < 23) {
                        try {
                            Process p1 = java.lang.Runtime.getRuntime().exec("ping -c 1 www.google.com");
                            int returnVal = p1.waitFor();
                            reachable = (returnVal==0);
                            System.out.println(""+reachable);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
//                            return result;
                    } else {
                        boolean isOnline = false;
                        try {
                            ConnectivityManager manager = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
                            NetworkCapabilities capabilities = manager.getNetworkCapabilities(manager.getActiveNetwork());  // need ACCESS_NETWORK_STATE permission
                            isOnline = capabilities != null && capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        if (isOnline){
                            System.out.println("internet");
                            reachable = true;
                        }else {
                            System.out.println("no internet");
                            reachable = false;
                        }



//                    return isOnline;
                    }

                    if(reachable){


                        action.setVisibility(View.GONE);

                        action1.setVisibility(View.GONE);

                        progressBar_license.setVisibility(View.VISIBLE);

                        new DeleteData().execute();

                    }else {
                        AlertDialog alertDialog2 = new AlertDialog.Builder(getActivity()).create();

                        alertDialog2.setTitle(getString(R.string.title10));
                        alertDialog2.setMessage(getString(R.string.setmessage19));
                        alertDialog2.setIcon(android.R.drawable.ic_dialog_alert);
                        alertDialog2.setButton(DialogInterface.BUTTON_POSITIVE, "OK", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                // finish();
                            }
                        });

                        alertDialog2.show();

//                            pullToRefresh.setRefreshing(false);

                    }

                }
                break;

            case R.id.action_help:
                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.youtube.com/watch?v=1hIGJVeLjgI&index=2&list=PL6YNztMURCKT4YGYTmTg-no0fm80YFG1L")));
                break;

            case R.id.action_modifiers:
                Intent intent6 = new Intent(getActivity(), DatabaseModifiersActivity.class);
                startActivity(intent6);
                break;
//                }
            default:
                break;
        }
        return super.onOptionsItemSelected(item);
    }


    private class MyCustomAdapter extends ArrayAdapter<Country_items> {

        private ArrayList<Country_items> originalList;
        private ArrayList<Country_items> countryList;
        private CountryFilter filter;

        private Cursor c;
        private Context context;

        private  SparseBooleanArray mSelectedItemsIds;

        public MyCustomAdapter(Context context, int textViewResourceId,
                               ArrayList<Country_items> countryList) {
            super(context, textViewResourceId, countryList);
            this.countryList = new ArrayList<Country_items>();
            this.countryList.addAll(countryList);
            this.originalList = new ArrayList<Country_items>();
            this.originalList.addAll(countryList);
        }

        @Override
        public Filter getFilter() {
            if (filter == null){
                filter  = new CountryFilter();
            }
            return filter;
        }


        private class ViewHolder {
            TextView code;
            TextView name;
            TextView barvalue;
            TextView price;
            TextView inn;
            TextView qty;
            TextView continent;
            TextView region;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            ViewHolder holder = null;
            Log.v("ConvertView", String.valueOf(position));
            if (convertView == null) {

                LayoutInflater vi = (LayoutInflater)getActivity().getSystemService(
                        Context.LAYOUT_INFLATER_SERVICE);
                convertView = vi.inflate(R.layout.items_list_details, null);

                holder = new ViewHolder();
                holder.code = (TextView) convertView.findViewById(R.id.code);
                holder.name = (TextView) convertView.findViewById(R.id.name);
                holder.barvalue = (TextView) convertView.findViewById(R.id.barcode_value);
                holder.qty = (TextView) convertView.findViewById(R.id.qty);
                holder.price = (TextView) convertView.findViewById(R.id.price);
                holder.inn = (TextView) convertView.findViewById(R.id.inn);

                convertView.setTag(holder);

            } else {
                holder = (ViewHolder) convertView.getTag();
            }

            Country_items country = countryList.get(position);
            holder.code.setText(country.getCode());
            holder.name.setText(country.getName());
            holder.barvalue.setText(country.getbarvalue());
            holder.qty.setText(country.getqty());
            holder.price.setText(country.getprice());
//            holder.name.setText(country);
//            holder.continent.setText(country.getContinent());
//            holder.region.setText(country.getRegion());

            if (str_country.toString().equals("Rupee") || str_country.toString().equals("India")) {
                insert1_cc = "\u20B9";
                insert1_rs = "Rs.";
                holder.inn.setText(insert1_cc);
            }else {
                if (str_country.toString().equals("Pound") || str_country.toString().equals("UK Pound")) {
                    insert1_cc = "\u00a3";
                    insert1_rs = "BP.";
                    holder.inn.setText(insert1_cc);
                }else {
                    if (str_country.toString().equals("Euro") || str_country.toString().equals("UK Euro")) {
                        insert1_cc = "\u20ac";
                        insert1_rs = "EU.";
                        holder.inn.setText(insert1_cc);
                    }else {
                        if (str_country.toString().equals("Dollar")) {
                            insert1_cc = "\u0024";
                            insert1_rs = "\u0024";
                            holder.inn.setText(insert1_cc);
                        }else {
                            if (str_country.toString().equals("Dinar")) {
                                insert1_cc = "D";
                                insert1_rs = "KD.";
                                holder.inn.setText(insert1_cc);
                            }else {
                                if (str_country.toString().equals("Shilling")) {
                                    insert1_cc = "S";
                                    insert1_rs = "S.";
                                    holder.inn.setText(insert1_cc);
                                }else {
                                    if (str_country.toString().equals("Ringitt")) {
                                        insert1_cc = "R";
                                        insert1_rs = "RM.";
                                        holder.inn.setText(insert1_cc);
                                    }else {
                                        if (str_country.toString().equals("Rial")) {
                                            insert1_cc = "R";
                                            insert1_rs = "OR.";
                                            holder.inn.setText(insert1_cc);
                                        }else {
                                            if (str_country.toString().equals("Yen")) {
                                                insert1_cc = "\u00a5";
                                                insert1_rs = "\u00a5";
                                                holder.inn.setText(insert1_cc);
                                            }else {
                                                if (str_country.toString().equals("Papua New Guinean")) {
                                                    insert1_cc = "K";
                                                    insert1_rs = "K.";
                                                    holder.inn.setText(insert1_cc);
                                                }else {
                                                    if (str_country.toString().equals("UAE")) {
                                                        insert1_cc = "D";
                                                        insert1_rs = "DH.";
                                                        holder.inn.setText(insert1_cc);
                                                    }else {
                                                        if (str_country.toString().equals("South African Rand")) {
                                                            insert1_cc = "R";
                                                            insert1_rs = "R.";
                                                            holder.inn.setText(insert1_cc);
                                                        }else {
                                                            if (str_country.toString().equals("Congolese Franc")) {
                                                                insert1_cc = "F";
                                                                insert1_rs = "FC.";
                                                                holder.inn.setText(insert1_cc);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return convertView;

//            ViewHolder holder = null;
//            View v = convertView;
//            if (v == null) {
//                LayoutInflater inflater = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
//                v = inflater.inflate(R.layout.country_info, null);
//            }
//            holder = new ViewHolder();
//            holder.code = (TextView) v.findViewById(R.id.code);
//            holder.name = (TextView) v.findViewById(R.id.name);
//
//            //this.code.moveToPosition(pos);
//            String firstName = this.c.getString(this.c.getColumnIndex("name"));
//            int price = c.getInt(c.getColumnIndex("price"));
//
//            TextView fname = (TextView) v.findViewById(R.id.name);
//            fname.setText(firstName);
//
//            TextView lname = (TextView) v.findViewById(R.id.code);
//            lname.setText(String.valueOf(price));
//
////            TextView title = (TextView) v.findViewById(R.id.inventory);
////            title.setText(String.valueOf(quantity));
//            return (v);

        }

//        public  SparseBooleanArray getSelectedIds() {
//            return mSelectedItemsIds;
//        }

        private class CountryFilter extends Filter
        {

            @Override
            protected FilterResults performFiltering(CharSequence constraint) {

                constraint = constraint.toString().toLowerCase();
                FilterResults result = new FilterResults();
                if(constraint != null && constraint.toString().length() > 0)
                {
                    ArrayList<Country_items> filteredItems = new ArrayList<Country_items>();

                    for(int i = 0, l = originalList.size(); i < l; i++)
                    {
                        Country_items country = originalList.get(i);
                        if(country.toString().toLowerCase().contains(constraint))
                            filteredItems.add(country);
                    }
                    result.count = filteredItems.size();
                    result.values = filteredItems;
                }
                else
                {
                    synchronized(this)
                    {
                        result.values = originalList;
                        result.count = originalList.size();
                    }
                }
                return result;
            }

            @SuppressWarnings("unchecked")
            @Override
            protected void publishResults(CharSequence constraint,
                                          FilterResults results) {

                countryList = (ArrayList<Country_items>)results.values;
                notifyDataSetChanged();
                clear();
                for(int i = 0, l = countryList.size(); i < l; i++)
                    add(countryList.get(i));
                notifyDataSetInvalidated();
            }
        }


    }



    private void displayItemsListView(final View root) {



    }

    public Cursor fetchCountriesByName(String inputtext) throws SQLException {

        Cursor mCursor = null;
        if (inputtext == null  ||  inputtext.length () == 0)  {
            mCursor = db.query("Items", new String[] {"_id","itemname", "price", "stockquan", "category", "itemtax", "image"},
                    null, null, null, null, null);

        }
        else {
            mCursor = db.query(true, "Items", new String[] {"_id","itemname", "price", "stockquan", "category", "itemtax", "image"},
                    "itemname" + " like" + " '%" + inputtext + "%'", null,
                    null, null, null, null);
        }
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;

    }


    public Cursor fetchCountriesByName1(String inputtext) throws SQLException {

        Cursor mCursor = null;
        if (inputtext == null  ||  inputtext.length () == 0)  {
            mCursor = db.query("Hotel", new String[] {"_id","name"},
                    null, null, null, null, null);

        }
        else {
            mCursor = db.query(true, "Hotel", new String[] {"_id","name"},
                    "name" + " like" + " '%" + inputtext + "%'", null,
                    null, null, null, null);
        }
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;
    }


    public void alertas(String alerta) {
        ContextThemeWrapper wrapper = new ContextThemeWrapper(getActivity(), R.style.notitle);
        AlertDialog.Builder builder = new AlertDialog.Builder(wrapper);
        builder.setIcon(R.drawable.icon);
        builder.setTitle(R.string.app_name);
        builder.setMessage(alerta);
        builder.create().show();
    }

    public ArrayList<String> getTableValues() {
        ArrayList<String> my_array = new ArrayList<String>();
        try {
            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
            Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category='" + ItemID + "'", null);
            System.out.println("COUNT : " + allrows.getCount());

            if (allrows.moveToFirst()) {
                do {
                    String ID = allrows.getString(0);
                    String NAME = allrows.getString(1);
                    String PLACE = allrows.getString(2);
                    my_array.add(NAME);
                } while (allrows.moveToNext());
            }
            allrows.close();
            //db.close();
        } catch (Exception e) {
            Toast.makeText(getActivity(), "Error encountered.",
                    Toast.LENGTH_LONG);
        }
        return my_array;
    }

    public ArrayList<String> getTableValuesall() {
        ArrayList<String> my_array = new ArrayList<String>();
        try {
            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
            Cursor allrows = db.rawQuery("SELECT * FROM Hotel", null);
            System.out.println("COUNT : " + allrows.getCount());

            my_array.add("None");
            if (allrows.moveToFirst()) {
                do {
                    String ID = allrows.getString(0);
                    String NAME = allrows.getString(1);
                    String PLACE = allrows.getString(2);
                    if (NAME.equals("Favourites") || NAME.equals("All")){

                    }else {
                        my_array.add(NAME);
                    }

                } while (allrows.moveToNext());
            }
            allrows.close();
            //db.close();
        } catch (Exception e) {
            Toast.makeText(getActivity(), "Error encountered.",
                    Toast.LENGTH_LONG);
        }
        return my_array;
    }

    public ArrayList<String> getTableValues1() {
        ArrayList<String> my_array = new ArrayList<String>();
        try {
            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
            Cursor allrows = db.rawQuery("SELECT * FROM Hotel", null);
            System.out.println("COUNT : " + allrows.getCount());

            if (allrows.moveToFirst()) {
                do {
                    String ID = allrows.getString(0);
                    String NAME = allrows.getString(1);
                    String PLACE = allrows.getString(2);
                    my_array.add(NAME);
                } while (allrows.moveToNext());
            }
            allrows.close();
            //db.close();
        } catch (Exception e) {
            Toast.makeText(getActivity(), "Error encountered.",
                    Toast.LENGTH_LONG);
        }
        return my_array;
    }

    public ArrayList<String> getTableValues2() {
        ArrayList<String> my_array = new ArrayList<String>();
        try {
            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
            Cursor allrows = db.rawQuery("SELECT * FROM Hotel", null);
            System.out.println("COUNT : " + allrows.getCount());
            my_array.add("All");
            if (allrows.moveToFirst()) {
                do {
                    String ID = allrows.getString(0);
                    String NAME = allrows.getString(1);
                    String PLACE = allrows.getString(2);
                    if (NAME.equals("Favourites") || NAME.equals("All")){

                    }else {
                        my_array.add(NAME);
                    }
                } while (allrows.moveToNext());
            }
            allrows.close();
            //db.close();
        } catch (Exception e) {
            Toast.makeText(getActivity(), "Error encountered.",
                    Toast.LENGTH_LONG);
        }
        return my_array;
    }

    private int getIndex(Spinner spinner, String myString){

        int index = 0;

        for (int i=0;i<spinner.getCount();i++){
            if (spinner.getItemAtPosition(i).equals(myString)){
                index = i;
            }
        }
        return index;
    }

    public ArrayList<String> getTaxValues() {
        ArrayList<String> my_array = new ArrayList<String>();
        try {
            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
            Cursor allrows = db.rawQuery("SELECT * FROM Taxes WHERE taxtype = 'Itemtax' ", null);
            System.out.println("COUNT : " + allrows.getCount());
            //my_array.add("None");
            if (allrows.moveToFirst()) {
                do {
                    String ID = allrows.getString(0);
                    String NAME = allrows.getString(1);
                    String PLACE = allrows.getString(2);
                    my_array.add(NAME);

                } while (allrows.moveToNext());
            }

            allrows.close();
            //db.close();
        } catch (Exception e) {
            Toast.makeText(getActivity(), "Error encountered.",
                    Toast.LENGTH_LONG);
        }
        return my_array;
    }

    void setImage(byte[] byteImage1) {
        //Toast.makeText(getActivity(), "selecting image 11", Toast.LENGTH_SHORT).show();
        get_image.setImageBitmap(BitmapFactory.decodeByteArray(byteImage1, 0,
                byteImage1.length));

    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
//        Toast.makeText(getActivity(), "a", Toast.LENGTH_SHORT).show();


        if (requestCode_i == 1) {
            String filePath="";
            if (data != null){

                Uri uri = data.getData();
                System.out.println("");

                if(Build.VERSION.SDK_INT >= 26){
                    //create path from uri
                    File file = new File(uri.getPath());
                    if(file.exists()){
                        final String[] split = file.getPath().split(":");//split the path.
                        if(split.length==1){
                            filePath = split[0];
                        }else if(split.length==2){
                            filePath = split[1];
                        }else{
                            filePath = split[1];
                        }
                        //assign it to a string(your choice).
                        Log.e("path ",filePath);
                    }else{
                        try {
                            filePath= PathUtil.getPath(getActivity(),uri);
                            Log.e("path pathutil ",filePath);
                        } catch (URISyntaxException e) {
                            e.printStackTrace();
                        }
                    }

                }else{
                    File file = new File(uri.getPath());
                    if(file.exists()){
                        //create path from uri
                        final String[] split = file.getPath().split(":");//split the path.
                        if(split.length==1){
                            filePath = split[0];
                        }else if(split.length==2){
                            filePath = split[1];
                        }else{
                            filePath = split[1];
                        }
                        //assign it to a string(your choice).
                        Log.e("path ",filePath);
                    }else{
                        try {
                            filePath= PathUtil.getPath(getActivity(),uri);
                            Log.e("path pathutil ",filePath);
                        } catch (URISyntaxException e) {
                            e.printStackTrace();
                        }
                    }

                }

            }

            up_da(requestCode, resultCode, filePath);
            requestCode_i = 0;
        }
        else {

            try {
                if (resultCode == getActivity().RESULT_OK) {
                    if (image.equals("1")){
                        if (requestCode == SELECT_PICTURE) {
//                        Toast.makeText(getActivity(), "1", Toast.LENGTH_SHORT).show();
                            selectedImageUri = data.getData();
                            performCrop();
                            selectedImagePath = getPath(selectedImageUri);
                            selectedImagewidth = getWidth(selectedImageUri);
                            selectedImageheight = getHeight(selectedImageUri);

                            System.out.println("Image Path : " + selectedImagePath);

                            get_image.setCropToPadding(true);
                        } else if (requestCode == PIC_CROP) {
                            get_image.setVisibility(View.VISIBLE);
                            get_image.setImageURI(selectedImageUri);
//                        Toast.makeText(getActivity(), "2", Toast.LENGTH_SHORT).show();
//                    if (requestCode == SELECT_PICTURE) {
//                        Toast.makeText(getActivity(), "3", Toast.LENGTH_SHORT).show();
                            //get the returned data
                            extras = data.getExtras();
//get the cropped bitmap
                            Bitmap thePic = extras.getParcelable("data");
                            get_image.setImageBitmap(thePic);
//                    }else {
//                        Toast.makeText(getActivity(), "4", Toast.LENGTH_SHORT).show();
//                    }
                        }
                    }else {
                        image = data.getStringExtra("image");
                        if (image.equals("10")) {
                            String strEditText = data.getStringExtra("editTextValue");
//                            Toast.makeText(getActivity(), "2q " + strEditText, Toast.LENGTH_LONG).show();
                            dialog_no_of_items.setText(strEditText);
                            image = "1";
                        } else {
                            if (requestCode == SELECT_PICTURE) {
//                        Toast.makeText(getActivity(), "1", Toast.LENGTH_SHORT).show();
                                selectedImageUri = data.getData();
                                performCrop();
                                selectedImagePath = getPath(selectedImageUri);
                                selectedImagewidth = getWidth(selectedImageUri);
                                selectedImageheight = getHeight(selectedImageUri);

                                System.out.println("Image Path : " + selectedImagePath);

                                get_image.setCropToPadding(true);
                            } else if (requestCode == PIC_CROP) {
                                get_image.setVisibility(View.VISIBLE);
                                get_image.setImageURI(selectedImageUri);
//                        Toast.makeText(getActivity(), "2", Toast.LENGTH_SHORT).show();
//                    if (requestCode == SELECT_PICTURE) {
//                        Toast.makeText(getActivity(), "3", Toast.LENGTH_SHORT).show();
                                //get the returned data
                                extras = data.getExtras();
//get the cropped bitmap
                                Bitmap thePic = extras.getParcelable("data");
                                get_image.setImageBitmap(thePic);
//                    }else {
//                        Toast.makeText(getActivity(), "4", Toast.LENGTH_SHORT).show();
//                    }
                            }
                        }
                    }

                } else {
//                Toast.makeText(getActivity(), "result not ok", Toast.LENGTH_SHORT).show();
                    selectedImagePath = null;
                    selectedImageUri = null;
//                get_image.setImageURI(null);
                    get_image.setCropToPadding(false);
                }


            } catch (Exception e) {
                Toast.makeText(getActivity(), "Something went wrong", Toast.LENGTH_LONG)
                        .show();
            }
        }


        if (!mHelperPro.handleActivityResult(requestCode,
                resultCode, data)) {
            super.onActivityResult(requestCode, resultCode, data);
        }

    }

    private void performCrop(){
//        selectedImagePath = getPath(selectedImageUri);
//        ExifInterface ei = new ExifInterface(selectedImagePath);
//        int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);
//
//        switch(orientation) {
//            case ExifInterface.ORIENTATION_ROTATE_90:
//                rotateImage(bitmap, 90);
//                break;
//            case ExifInterface.ORIENTATION_ROTATE_180:
//                rotateImage(bitmap, 180);
//                break;
//            // etc.
//        }

        try {
            Intent cropIntent = new Intent("com.android.camera.action.CROP");
            //indicate image type and Uri
            cropIntent.setDataAndType(selectedImageUri, "image/*");
            //set crop properties
            cropIntent.putExtra("crop", "true");
            cropIntent.putExtra("outputX", 48);
            cropIntent.putExtra("outputY", 48);
            cropIntent.putExtra("aspectX", 1);
            cropIntent.putExtra("aspectY", 1);
            cropIntent.putExtra("scale", true);
            cropIntent.putExtra("scaleUpIfNeeded", true);
            cropIntent.putExtra("return-data", true);
            //start the activity - we handle returning in onActivityResult
            startActivityForResult(cropIntent, PIC_CROP);
        }
        catch(ActivityNotFoundException anfe){
            //display an error message
            String errorMessage = "Whoops - your device doesn't support the crop action!";
            Toast toast = Toast.makeText(getActivity(), errorMessage, Toast.LENGTH_SHORT);
            toast.show();
        }
    }

    public static Bitmap rotateImage(Bitmap source, float angle) {
        Bitmap retVal;

        Matrix matrix = new Matrix();
        matrix.postRotate(angle);
        retVal = Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(), matrix, true);

        return retVal;
    }

    private Bitmap rotateImage(String pathToImage) {

        selectedImagePath = getPath(selectedImageUri);

        ExifInterface ei = null;
        try {
            ei = new ExifInterface(selectedImagePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
        int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);

        // 1. figure out the amount of degrees
        //int rotation = getImageRotation();

        // 2. rotate matrix by postconcatination
        Matrix matrix = new Matrix();
        matrix.postRotate(orientation);

        // 3. create Bitmap from rotated matrix
        Bitmap sourceBitmap = BitmapFactory.decodeFile(pathToImage);
        return Bitmap.createBitmap(sourceBitmap, 0, 0, sourceBitmap.getWidth(), sourceBitmap.getHeight(), matrix, true);
    }


    @SuppressWarnings("deprecation")
    public String getPath(Uri uri) {
        InputStream is = null;
        if (uri.getAuthority() != null) {
            try {
                is = getContext().getContentResolver().openInputStream(uri);
                Bitmap bmp = BitmapFactory.decodeStream(is);
                return writeToTempImageAndGetPathUri(getContext(), bmp).toString();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }finally {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

    public static Uri writeToTempImageAndGetPathUri(Context inContext, Bitmap inImage) {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
        String path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, "Title", null);
        return Uri.parse(path);
    }

    public int getWidth(Uri width){
        String[] projection = { MediaStore.Images.Media.WIDTH };
        Cursor cursor = getActivity().managedQuery(width, projection, null, null, null);
        int column_index = cursor
                .getColumnIndexOrThrow(MediaStore.Images.Media.WIDTH);
        cursor.moveToFirst();
        return cursor.getInt(column_index);
    }

    public int getHeight(Uri height){
        String[] projection = { MediaStore.Images.Media.HEIGHT };
        Cursor cursor = getActivity().managedQuery(height, projection, null, null, null);
        int column_index = cursor
                .getColumnIndexOrThrow(MediaStore.Images.Media.HEIGHT);
        cursor.moveToFirst();
        return cursor.getInt(column_index);
    }

    void saveInDB() {

        if (text.getText().toString().length() <= 1) {
            layoutitemname.setError("Enter min 2 characters");
        }else {
            System.out.println("taxdetails " + spinneritem.getText().toString());
            SQLiteDatabase myDb = getActivity().openOrCreateDatabase("mydb_Appdata",
                    Context.MODE_PRIVATE, null);
            byte[] byteImage1;
            byte[] img;
            String s = myDb.getPath();

//        text = (EditText) rootview.findViewById(R.id.editText1);

            columnvalue = text.getText().toString();
            if (text.getText().toString().contains("'")) {
                columnvalue = text.getText().toString().replaceAll("'", " ");
            }


            ContentValues newValues = new ContentValues();
            Cursor itemnamecheck = myDb.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
            if (itemnamecheck.moveToFirst()) {
                layoutitemname.setError("Itemname already in use");
            } else {
                if (selectedImagePath != null && !editText.getText().toString().equals("") && !text.getText().toString().equals("") && !textquan.getText().toString().equals("")
                        && !disedittext.getText().toString().equals("")) {


                    Bitmap thePic = extras.getParcelable("data");
                    get_image.setImageBitmap(thePic);

                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
                    img = bos.toByteArray();
                    newValues.put("image", img);
                    newValues.put("image_text", "");
                    newValues.put("itemname", columnvalue);
                    newValues.put("price", editText.getText().toString());

                    newValues.put("stockquan", textquan.getText().toString());
                    newValues.put("disc_type", disctypee.getSelectedItem().toString());
                    if (disedittext.getText().toString().equals("")) {
                        newValues.put("disc_value", "0");
                    } else {
                        newValues.put("disc_value", disedittext.getText().toString());
                    }
                    newValues.put("category", spinnercat.getText().toString());
//                newValues.put("itemtax", spinneritem.getText().toString());
                    if (spinneritem.getText().toString().contains("taxes selected")) {
                        newValues.put("itemtax", "None");
                    } else {
                        newValues.put("itemtax", spinneritem.getText().toString());
                    }
                    newValues.put("weekdaysvalue", "0");
                    newValues.put("weekendsvalue", "0");
                    if (mySwitch.isChecked()) {
                        newValues.put("favourites", "yes");
                    } else {
                        newValues.put("favourites", "no");
                    }

                    if (unit_sav.isChecked()) {
                        newValues.put("unit_type", "Unit");
                    } else {
                        newValues.put("unit_type", "Weight");
                    }

                    if (barcode_no.getText().toString().equals("")) {
                        newValues.put("barcode_value", barcode_no.getText().toString());

                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                        resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                    myDb.insert("Items", null, newValues);
                        if (NAME3.equals("On")) {
                            Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                            if (cursor.moveToFirst()) {
                                NAME4 = cursor.getString(0);
                            }
                            cursor.close();
                            ContentValues newValues1 = new ContentValues();
                            newValues1.put("barcode_value", NAME4);
                            String where = "itemname = '" + columnvalue + "'";

                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                            getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProviderApp.AUTHORITY)
                                    .path("Items")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("itemname", columnvalue)
                                    .build();
                            getActivity().getContentResolver().notifyChange(resultUri, null);
//
//                        db.update("Items", newValues1, where, new String[]{});
                            //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();


                            //  db.update("Items", newValues1, where, new String[]{});
                            db.update("Items_Virtual", newValues1, where, new String[]{});


                        } else {
                            //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                        }
                        Toast.makeText(getActivity().getBaseContext(),
                                "Item added", Toast.LENGTH_SHORT).show();
                        myDb.close();
                        linearLayout.setVisibility(View.GONE);
                        additem.setVisibility(View.VISIBLE);
                        EditText one = (EditText) getActivity().findViewById(R.id.editText1);

                        one.setText("");
                        EditText two = (EditText) getActivity().findViewById(R.id.editText2);

                        two.setText("");
                        EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                        three.setText("");
                        EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                        four.setText("");
                        EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                        five.setText("");
                        search.setEnabled(true);
                        get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                        get_image.setImageResource(R.drawable.ic_add_image_48dp);
                        hideKeyboard(getContext());
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                            donotshowKeyboard(getActivity());

                            InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                            imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                        }

                        Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                        if (cursor_1.moveToFirst()) {
                            do {
                                String v_na = cursor_1.getString(1);
                                String v_pa = cursor_1.getString(2);

                                Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                if (cursor.moveToFirst()) {
                                    String id = cursor.getString(0);
                                    String v_na1 = cursor.getString(38);
                                    String v_na2 = cursor.getString(40);
                                    String v_na3 = cursor.getString(42);
                                    String v_na4 = cursor.getString(44);
                                    String v_na5 = cursor.getString(46);

                                    TextView textView = new TextView(getActivity());
                                    textView.setText(v_na1);
                                    TextView textView2 = new TextView(getActivity());
                                    textView2.setText(v_na2);
                                    TextView textView3 = new TextView(getActivity());
                                    textView3.setText(v_na3);
                                    TextView textView4 = new TextView(getActivity());
                                    textView4.setText(v_na4);
                                    TextView textView5 = new TextView(getActivity());
                                    textView5.setText(v_na5);

                                    if (textView.getText().toString().equals("")) {
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("variant1", v_na);
                                        contentValues.put("variant_price1", v_pa);
                                        String where1 = "_id = '" + id + "'";
                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                        //   db.update("Items", contentValues, where1, new String[]{});
                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id", id)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    db.update("Items", contentValues, where1, new String[]{});
                                    } else {
                                        if (textView2.getText().toString().equals("")) {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("variant2", v_na);
                                            contentValues.put("variant_price2", v_pa);
                                            String where1 = "_id = '" + id + "'";
                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                            //    db.update("Items", contentValues, where1, new String[]{});
                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                        db.update("Items", contentValues, where1, new String[]{});
                                        } else {
                                            if (textView3.getText().toString().equals("")) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("variant3", v_na);
                                                contentValues.put("variant_price3", v_pa);
                                                String where1 = "_id = '" + id + "'";
                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});
                                            } else {
                                                if (textView4.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant4", v_na);
                                                    contentValues.put("variant_price4", v_pa);
                                                    String where1 = "_id = '" + id + "'";

                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                    //      db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    if (textView5.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant5", v_na);
                                                        contentValues.put("variant_price5", v_pa);
                                                        String where1 = "_id = '" + id + "'";
                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        //    db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                cursor.close();

                            } while (cursor_1.moveToNext());
                        }
                        cursor_1.close();
                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                        getActivity().getContentResolver().delete(contentUri, null, null);
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("variants_temp")
                                .appendQueryParameter("operation", "delete")
                                .appendQueryParameter("1", "1")
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                    db.delete("variants_temp", null, null);

                        int i = 1;
                        Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                        if (cursor.moveToFirst()) {
                            do {
                                String tax_na = cursor.getString(1);
                                String tax_va = cursor.getString(2);

                                if (i == 1) {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("itemtax", tax_na);
                                    contentValues.put("tax_value", tax_va);
                                    String where1 = "itemname = '" + columnvalue + "'";
//                                Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                    //  String where1 = "itemname = '" + columnvalue + "'";
//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                    //      db.update("Items", contentValues, where1, new String[]{});
                                    db.update("Items_Virtual", contentValues, where1, new String[]{});

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("itemname", columnvalue)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                db.update("Items", contentValues, where1, new String[]{});
                                } else {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("itemtax" + i, tax_na);
                                    contentValues.put("tax_value" + i, tax_va);
                                    String where1 = "itemname = '" + columnvalue + "'";

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("itemname", columnvalue)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{});

                                    db.update("Items_Virtual", contentValues, where1, new String[]{});
                                }
                                i++;
                            } while (cursor.moveToNext());
                        }
                        cursor.close();


                    } else {
                        Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + barcode_no.getText().toString() + "'", null);
                        if (cursor4.moveToFirst()) {
                            layout_barcode.setError("barcode value already used");
                        } else {
                            newValues.put("barcode_value", barcode_no.getText().toString());

                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                            resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                            getActivity().getContentResolver().notifyChange(resultUri, null);

                            //   myDb.insert("Items", null, newValues);
                            myDb.insert("Items_Virtual", null, newValues);

//                        myDb.insert("Items", null, newValues);
                            if (NAME3.equals("On")) {
                                Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                if (cursor.moveToFirst()) {
                                    NAME4 = cursor.getString(0);
                                }
                                cursor.close();
                                ContentValues newValues1 = new ContentValues();
                                newValues1.put("barcode_value", NAME4);
                                String where = "itemname = '" + columnvalue + "'";

                                // String where = "itemname = '" + columnvalue + "'";
                                //   db.update("Items", newValues1, where, new String[]{});
                                db.update("Items_Virtual", newValues1, where, new String[]{});


                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Items")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("itemname", columnvalue)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Items", newValues1, where, new String[]{});
                                //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                            } else {
                                //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                            }
                            Toast.makeText(getActivity().getBaseContext(),
                                    "Item added", Toast.LENGTH_SHORT).show();
                            myDb.close();
                            linearLayout.setVisibility(View.GONE);
                            additem.setVisibility(View.VISIBLE);
                            EditText one = (EditText) getActivity().findViewById(R.id.editText1);

                            one.setText("");
                            EditText two = (EditText) getActivity().findViewById(R.id.editText2);

                            two.setText("");
                            EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                            three.setText("");
                            EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                            four.setText("");
                            EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                            five.setText("");
                            search.setEnabled(true);
                            get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                            get_image.setImageResource(R.drawable.ic_add_image_48dp);
                            hideKeyboard(getContext());
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                donotshowKeyboard(getActivity());

                                InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                            }

                            Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                            if (cursor_1.moveToFirst()) {
                                do {
                                    String v_na = cursor_1.getString(1);
                                    String v_pa = cursor_1.getString(2);

                                    Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                    if (cursor.moveToFirst()) {
                                        String id = cursor.getString(0);
                                        String v_na1 = cursor.getString(38);
                                        String v_na2 = cursor.getString(40);
                                        String v_na3 = cursor.getString(42);
                                        String v_na4 = cursor.getString(44);
                                        String v_na5 = cursor.getString(46);

                                        TextView textView = new TextView(getActivity());
                                        textView.setText(v_na1);
                                        TextView textView2 = new TextView(getActivity());
                                        textView2.setText(v_na2);
                                        TextView textView3 = new TextView(getActivity());
                                        textView3.setText(v_na3);
                                        TextView textView4 = new TextView(getActivity());
                                        textView4.setText(v_na4);
                                        TextView textView5 = new TextView(getActivity());
                                        textView5.setText(v_na5);

                                        if (textView.getText().toString().equals("")) {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("variant1", v_na);
                                            contentValues.put("variant_price1", v_pa);
                                            String where1 = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                            //    db.update("Items", contentValues, where1, new String[]{});
                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                        db.update("Items", contentValues, where1, new String[]{});
                                        } else {
                                            if (textView2.getText().toString().equals("")) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("variant2", v_na);
                                                contentValues.put("variant_price2", v_pa);
                                                String where1 = "_id = '" + id + "'";


                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id", id)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                //  db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});
                                                ;

//                                            db.update("Items", contentValues, where1, new String[]{});
                                            } else {
                                                if (textView3.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant3", v_na);
                                                    contentValues.put("variant_price3", v_pa);
                                                    String where1 = "_id = '" + id + "'";


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                    //  db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    if (textView4.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant4", v_na);
                                                        contentValues.put("variant_price4", v_pa);
                                                        String where1 = "_id = '" + id + "'";


                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        //   db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView5.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant5", v_na);
                                                            contentValues.put("variant_price5", v_pa);
                                                            String where1 = "_id = '" + id + "'";

                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            //    db.update("Items", contentValues, where1, new String[]{});
                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        } else {

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    cursor.close();

                                } while (cursor_1.moveToNext());
                            }
                            cursor_1.close();
                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                            getActivity().getContentResolver().delete(contentUri, null, null);
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProviderApp.AUTHORITY)
                                    .path("variants_temp")
                                    .appendQueryParameter("operation", "delete")
                                    .appendQueryParameter("1", "1")
                                    .build();
                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                        db.delete("variants_temp", null, null);

                            int i = 1;
                            Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                            if (cursor.moveToFirst()) {
                                do {
                                    String tax_na = cursor.getString(1);
                                    String tax_va = cursor.getString(2);

                                    if (i == 1) {
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("itemtax", tax_na);
                                        contentValues.put("tax_value", tax_va);
                                        String where1 = "itemname = '" + columnvalue + "'";
//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("itemname", columnvalue)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                        //   db.update("Items", contentValues, where1, new String[]{});
                                        db.update("Items_Virtual", contentValues, where1, new String[]{});

//                                    db.update("Items", contentValues, where1, new String[]{});
                                    } else {
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("itemtax" + i, tax_na);
                                        contentValues.put("tax_value" + i, tax_va);
                                        String where1 = "itemname = '" + columnvalue + "'";

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("itemname", columnvalue)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
                                        //   db.update("Items", contentValues, where1, new String[]{});
                                        db.update("Items_Virtual", contentValues, where1, new String[]{});
                                    }
                                    i++;
                                } while (cursor.moveToNext());
                            }
                            cursor.close();

                        }
                        cursor4.close();

                    }

                } else {
//            if(text.getText().toString().equals("") && editText.getText().toString().equals("")){
//                //Toast.makeText(getActivity(),"Fill Item name/Price", Toast.LENGTH_SHORT).show();
//                text.setError("Fill itemname");
//            }

                    TextInputLayout layoutitemname = (TextInputLayout) getActivity().findViewById(R.id.layout_itemname);

                    if (text.getText().toString().equals("")) {
                        //Toast.makeText(getActivity(),"Fill Item name", Toast.LENGTH_SHORT).show();

                        layoutitemname.setError("Fill itemname");
                    }
                    TextInputLayout layoutprice = (TextInputLayout) getActivity().findViewById(R.id.layout_price);
                    if (editText.getText().toString().equals("")) {
                        //Toast.makeText(getActivity(),"Fill Price", Toast.LENGTH_SHORT).show();
                        layoutprice.setError("Fill price");
                    }
                    if (!text.getText().toString().equals("") && !editText.getText().toString().equals("") && !textquan.getText().toString().equals("")) {
                        if (selectedImagePath != null) {
                            Bitmap thePic = extras.getParcelable("data");
                            get_image.setImageBitmap(thePic);

                            ByteArrayOutputStream bos = new ByteArrayOutputStream();
                            thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
                            img = bos.toByteArray();
                            newValues.put("image", img);
                            newValues.put("image_text", "");
                            newValues.put("itemname", columnvalue);
                            newValues.put("price", editText.getText().toString());
//                        newValues.put("barcode_value", barcode_no.getText().toString());
                            newValues.put("stockquan", textquan.getText().toString());
                            newValues.put("category", spinnercat.getText().toString());
//                        newValues.put("itemtax", spinneritem.getText().toString());
                            if (spinneritem.getText().toString().contains("taxes selected")) {
                                newValues.put("itemtax", "None");
                            } else {
                                newValues.put("itemtax", spinneritem.getText().toString());
                            }
                            newValues.put("disc_type", disctypee.getSelectedItem().toString());
                            if (disedittext.getText().toString().equals("")) {
                                newValues.put("disc_value", "0");
                            } else {
                                newValues.put("disc_value", disedittext.getText().toString());
                            }
                            newValues.put("weekdaysvalue", "0");
                            newValues.put("weekendsvalue", "0");
                            if (mySwitch.isChecked()) {
                                newValues.put("favourites", "yes");
                            } else {
                                newValues.put("favourites", "no");
                            }
                            if (unit_sav.isChecked()) {
                                newValues.put("unit_type", "Unit");
                            } else {
                                newValues.put("unit_type", "Weight");
                            }
                            if (barcode_no.getText().toString().equals("")) {
                                newValues.put("barcode_value", barcode_no.getText().toString());

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                                getActivity().getContentResolver().notifyChange(resultUri, null);

                                myDb.insert("Items_Virtual", null, newValues);

//                            myDb.insert("Items", null, newValues);
                                if (NAME3.equals("On")) {
                                    Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                    if (cursor.moveToFirst()) {
                                        NAME4 = cursor.getString(0);
                                    }
                                    cursor.close();
                                    ContentValues newValues1 = new ContentValues();
                                    newValues1.put("barcode_value", NAME4);
                                    String where = "itemname = '" + columnvalue + "'";
                                    //  String where = "itemname = '" + columnvalue + "'";
                                    // db.update("Items", newValues1, where, new String[]{});
                                    db.update("Items_Virtual", newValues1, where, new String[]{});

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("itemname", columnvalue)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                db.update("Items", newValues1, where, new String[]{});
                                    //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                                } else {
                                    //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                                }
                                Toast.makeText(getActivity().getBaseContext(),
                                        "Item added", Toast.LENGTH_SHORT).show();
                                linearLayout.setVisibility(View.GONE);
                                additem.setVisibility(View.VISIBLE);
                                //linearLayout.setVisibility(View.GONE);
                                EditText one = (EditText) getActivity().findViewById(R.id.editText1);
                                one.setText("");
                                EditText two = (EditText) getActivity().findViewById(R.id.editText2);
                                two.setText("");
                                EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                                three.setText("");
                                EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                                four.setText("");
                                EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                                five.setText("");
                                search.setEnabled(true);
                                get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                                get_image.setImageResource(R.drawable.ic_add_image_48dp);
                                hideKeyboard(getContext());
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                    donotshowKeyboard(getActivity());

                                    InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                    imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                                }

                                Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                if (cursor_1.moveToFirst()) {
                                    do {
                                        String v_na = cursor_1.getString(1);
                                        String v_pa = cursor_1.getString(2);

                                        Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                        if (cursor.moveToFirst()) {
                                            String id = cursor.getString(0);
                                            String v_na1 = cursor.getString(38);
                                            String v_na2 = cursor.getString(40);
                                            String v_na3 = cursor.getString(42);
                                            String v_na4 = cursor.getString(44);
                                            String v_na5 = cursor.getString(46);

                                            TextView textView = new TextView(getActivity());
                                            textView.setText(v_na1);
                                            TextView textView2 = new TextView(getActivity());
                                            textView2.setText(v_na2);
                                            TextView textView3 = new TextView(getActivity());
                                            textView3.setText(v_na3);
                                            TextView textView4 = new TextView(getActivity());
                                            textView4.setText(v_na4);
                                            TextView textView5 = new TextView(getActivity());
                                            textView5.setText(v_na5);

                                            if (textView.getText().toString().equals("")) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("variant1", v_na);
                                                contentValues.put("variant_price1", v_pa);
                                                String where1 = "_id = '" + id + "'";
                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id", id)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                            db.update("Items", contentValues, where1, new String[]{});
                                            } else {
                                                if (textView2.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant2", v_na);
                                                    contentValues.put("variant_price2", v_pa);
                                                    String where1 = "_id = '" + id + "'";
                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    if (textView3.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant3", v_na);
                                                        contentValues.put("variant_price3", v_pa);
                                                        String where1 = "_id = '" + id + "'";

                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView4.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant4", v_na);
                                                            contentValues.put("variant_price4", v_pa);
                                                            String where1 = "_id = '" + id + "'";
                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                        db.update("Items", contentValues, where1, new String[]{});

                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

                                                        } else {
                                                            if (textView5.getText().toString().equals("")) {
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("variant5", v_na);
                                                                contentValues.put("variant_price5", v_pa);
                                                                String where1 = "_id = '" + id + "'";
                                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Items")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", id)
                                                                        .build();
                                                                getActivity().getContentResolver().notifyChange(resultUri, null);
                                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                            db.update("Items", contentValues, where1, new String[]{});
                                                            } else {

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        cursor.close();

                                    } while (cursor_1.moveToNext());
                                }
                                cursor_1.close();
                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                getActivity().getContentResolver().delete(contentUri, null, null);
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("variants_temp")
                                        .appendQueryParameter("operation", "delete")
                                        .appendQueryParameter("1", "1")
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                            db.delete("variants_temp", null, null);

                                int i = 1;
                                Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                if (cursor.moveToFirst()) {
                                    do {
                                        String tax_na = cursor.getString(1);
                                        String tax_va = cursor.getString(2);

                                        if (i == 1) {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemtax", tax_na);
                                            contentValues.put("tax_value", tax_va);
                                            String where1 = "itemname = '" + columnvalue + "'";
                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("itemname", columnvalue)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
                                            db.update("Items_Virtual", contentValues, where1, new String[]{});

//                                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
//                                        db.update("Items", contentValues, where1, new String[]{});
                                        } else {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemtax" + i, tax_na);
                                            contentValues.put("tax_value" + i, tax_va);
                                            String where1 = "itemname = '" + columnvalue + "'";
                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("itemname", columnvalue)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                        Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
//                                        db.update("Items", contentValues, where1, new String[]{});

                                            db.update("Items_Virtual", contentValues, where1, new String[]{});

                                        }
                                        i++;
                                    } while (cursor.moveToNext());
                                }
                                cursor.close();

                            } else {
                                Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + barcode_no.getText().toString() + "'", null);
                                if (cursor4.moveToFirst()) {
                                    layout_barcode.setError("barcode value already used");
                                } else {
                                    newValues.put("barcode_value", barcode_no.getText().toString());

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
                                    myDb.insert("Items_Virtual", null, newValues);

//                                myDb.insert("Items", null, newValues);
                                    if (NAME3.equals("On")) {
                                        Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                        if (cursor.moveToFirst()) {
                                            NAME4 = cursor.getString(0);
                                        }
                                        cursor.close();
                                        ContentValues newValues1 = new ContentValues();
                                        newValues1.put("barcode_value", NAME4);
                                        String where = "itemname = '" + columnvalue + "'";

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("itemname", columnvalue)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                        db.update("Items_Virtual", newValues1, where, new String[]{});

                                        //                                    db.update("Items", newValues1, where, new String[]{});
                                        //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                                    } else {
                                        //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                                    }
                                    Toast.makeText(getActivity().getBaseContext(),
                                            "Item added", Toast.LENGTH_SHORT).show();
                                    linearLayout.setVisibility(View.GONE);
                                    additem.setVisibility(View.VISIBLE);
                                    //linearLayout.setVisibility(View.GONE);
                                    EditText one = (EditText) getActivity().findViewById(R.id.editText1);
                                    one.setText("");
                                    EditText two = (EditText) getActivity().findViewById(R.id.editText2);
                                    two.setText("");
                                    EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                                    three.setText("");
                                    EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                                    four.setText("");
                                    EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                                    five.setText("");
                                    search.setEnabled(true);
                                    get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                                    get_image.setImageResource(R.drawable.ic_add_image_48dp);
                                    hideKeyboard(getContext());
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                        donotshowKeyboard(getActivity());

                                        InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                        imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                                    }

                                    Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                    if (cursor_1.moveToFirst()) {
                                        do {
                                            String v_na = cursor_1.getString(1);
                                            String v_pa = cursor_1.getString(2);

                                            Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                            if (cursor.moveToFirst()) {
                                                String id = cursor.getString(0);
                                                String v_na1 = cursor.getString(38);
                                                String v_na2 = cursor.getString(40);
                                                String v_na3 = cursor.getString(42);
                                                String v_na4 = cursor.getString(44);
                                                String v_na5 = cursor.getString(46);

                                                TextView textView = new TextView(getActivity());
                                                textView.setText(v_na1);
                                                TextView textView2 = new TextView(getActivity());
                                                textView2.setText(v_na2);
                                                TextView textView3 = new TextView(getActivity());
                                                textView3.setText(v_na3);
                                                TextView textView4 = new TextView(getActivity());
                                                textView4.setText(v_na4);
                                                TextView textView5 = new TextView(getActivity());
                                                textView5.setText(v_na5);

                                                if (textView.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant1", v_na);
                                                    contentValues.put("variant_price1", v_pa);
                                                    String where1 = "_id = '" + id + "'";
                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                    //  db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    if (textView2.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant2", v_na);
                                                        contentValues.put("variant_price2", v_pa);
                                                        String where1 = "_id = '" + id + "'";

                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        //  db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView3.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant3", v_na);
                                                            contentValues.put("variant_price3", v_pa);
                                                            String where1 = "_id = '" + id + "'";

                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            //   db.update("Items", contentValues, where1, new String[]{});
                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        } else {
                                                            if (textView4.getText().toString().equals("")) {
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("variant4", v_na);
                                                                contentValues.put("variant_price4", v_pa);
                                                                String where1 = "_id = '" + id + "'";

                                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                //  db.update("Items", contentValues, where1, new String[]{});
                                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Items")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", id)
                                                                        .build();
                                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                            db.update("Items", contentValues, where1, new String[]{});
                                                            } else {
                                                                if (textView5.getText().toString().equals("")) {
                                                                    ContentValues contentValues = new ContentValues();
                                                                    contentValues.put("variant5", v_na);
                                                                    contentValues.put("variant_price5", v_pa);
                                                                    String where1 = "_id = '" + id + "'";

                                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                    //  db.update("Items", contentValues, where1, new String[]{});
                                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProviderApp.AUTHORITY)
                                                                            .path("Items")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", id)
                                                                            .build();
                                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                                db.update("Items", contentValues, where1, new String[]{});
                                                                } else {

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            cursor.close();

                                        } while (cursor_1.moveToNext());
                                    }
                                    cursor_1.close();
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                    getActivity().getContentResolver().delete(contentUri, null, null);
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("variants_temp")
                                            .appendQueryParameter("operation", "delete")
                                            .appendQueryParameter("1", "1")
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                db.delete("variants_temp", null, null);

                                    int i = 1;
                                    Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                    if (cursor.moveToFirst()) {
                                        do {
                                            String tax_na = cursor.getString(1);
                                            String tax_va = cursor.getString(2);

                                            if (i == 1) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax", tax_na);
                                                contentValues.put("tax_value", tax_va);
                                                String where1 = "itemname = '" + columnvalue + "'";

//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                //   db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1, new String[]{});

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("itemname", columnvalue)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
//                                            db.update("Items", contentValues, where1, new String[]{});
                                            } else {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax" + i, tax_na);
                                                contentValues.put("tax_value" + i, tax_va);
                                                String where1 = "itemname = '" + columnvalue + "'";
                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("itemname", columnvalue)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
                                                //  db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1, new String[]{});
                                            }
                                            i++;
                                        } while (cursor.moveToNext());
                                    }
                                    cursor.close();

                                }
                                cursor4.close();
                            }

                        } else {
//                        Bitmap b = BitmapFactory.decodeResource(getResources(), R.drawable.item_bg_image2);
//                        ByteArrayOutputStream bos = new ByteArrayOutputStream();
//                        b.compress(Bitmap.CompressFormat.PNG, 100, bos);
//                        img = bos.toByteArray();
                            String str1 = columnvalue.substring(0, 2);
                            String str2 = str1.toUpperCase();
                            newValues.put("image_text", str2);
                            newValues.put("image", "");
                            newValues.put("itemname", columnvalue);
                            newValues.put("price", editText.getText().toString());
//                        newValues.put("barcode_value", barcode_no.getText().toString());
                            newValues.put("stockquan", textquan.getText().toString());
                            newValues.put("category", spinnercat.getText().toString());
//                        newValues.put("itemtax", spinneritem.getText().toString());
                            if (spinneritem.getText().toString().contains("taxes selected")) {
                                newValues.put("itemtax", "None");
                            } else {
                                newValues.put("itemtax", spinneritem.getText().toString());
                            }
                            newValues.put("disc_type", disctypee.getSelectedItem().toString());
                            if (disedittext.getText().toString().equals("")) {
                                newValues.put("disc_value", "0");
                            } else {
                                newValues.put("disc_value", disedittext.getText().toString());
                            }
                            newValues.put("weekdaysvalue", "0");
                            newValues.put("weekendsvalue", "0");
                            if (mySwitch.isChecked()) {
                                newValues.put("favourites", "yes");
                            } else {
                                newValues.put("favourites", "no");
                            }
                            if (unit_sav.isChecked()) {
                                newValues.put("unit_type", "Unit");
                            } else {
                                newValues.put("unit_type", "Weight");
                            }
                            if (barcode_no.getText().toString().equals("")) {
                                newValues.put("barcode_value", barcode_no.getText().toString());

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                                getActivity().getContentResolver().notifyChange(resultUri, null);
                                myDb.insert("Items_Virtual", null, newValues);

//                            myDb.insert("Items", null, newValues);
                                if (NAME3.equals("On")) {
                                    Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                    if (cursor.moveToFirst()) {
                                        NAME4 = cursor.getString(0);
                                    }
                                    cursor.close();
                                    ContentValues newValues1 = new ContentValues();
                                    newValues1.put("barcode_value", NAME4);
                                    String where = "itemname = '" + columnvalue + "'";

                                    // String where = "itemname = '" + columnvalue + "'";
                                    //   db.update("Items", newValues1, where, new String[]{});
                                    db.update("Items_Virtual", newValues1, where, new String[]{});


                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("itemname", columnvalue)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                db.update("Items", newValues1, where, new String[]{});
                                    //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                                } else {
                                    //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                                }
                                Toast.makeText(getActivity().getBaseContext(),
                                        "Item added", Toast.LENGTH_SHORT).show();
                                linearLayout.setVisibility(View.GONE);
                                additem.setVisibility(View.VISIBLE);
                                //linearLayout.setVisibility(View.GONE);
                                EditText one = (EditText) getActivity().findViewById(R.id.editText1);
                                one.setText("");
                                EditText two = (EditText) getActivity().findViewById(R.id.editText2);
                                two.setText("");
                                EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                                three.setText("");
                                EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                                four.setText("");
                                EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                                five.setText("");
                                search.setEnabled(true);
                                get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                                get_image.setImageResource(R.drawable.ic_add_image_48dp);
                                hideKeyboard(getContext());
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                    donotshowKeyboard(getActivity());

                                    InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                    imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                                }

                                Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                if (cursor_1.moveToFirst()) {
                                    do {
                                        String v_na = cursor_1.getString(1);
                                        String v_pa = cursor_1.getString(2);

                                        Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                        if (cursor.moveToFirst()) {
                                            String id = cursor.getString(0);
                                            String v_na1 = cursor.getString(38);
                                            String v_na2 = cursor.getString(40);
                                            String v_na3 = cursor.getString(42);
                                            String v_na4 = cursor.getString(44);
                                            String v_na5 = cursor.getString(46);

                                            TextView textView = new TextView(getActivity());
                                            textView.setText(v_na1);
                                            TextView textView2 = new TextView(getActivity());
                                            textView2.setText(v_na2);
                                            TextView textView3 = new TextView(getActivity());
                                            textView3.setText(v_na3);
                                            TextView textView4 = new TextView(getActivity());
                                            textView4.setText(v_na4);
                                            TextView textView5 = new TextView(getActivity());
                                            textView5.setText(v_na5);

                                            if (textView.getText().toString().equals("")) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("variant1", v_na);
                                                contentValues.put("variant_price1", v_pa);
                                                String where1 = "_id = '" + id + "'";
                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                //   db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id", id)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Items", contentValues, where1, new String[]{});
                                            } else {
                                                if (textView2.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant2", v_na);
                                                    contentValues.put("variant_price2", v_pa);
                                                    String where1 = "_id = '" + id + "'";

                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                    //    db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    if (textView3.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant3", v_na);
                                                        contentValues.put("variant_price3", v_pa);
                                                        String where1 = "_id = '" + id + "'";

                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        //   db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView4.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant4", v_na);
                                                            contentValues.put("variant_price4", v_pa);
                                                            String where1 = "_id = '" + id + "'";


                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            //    db.update("Items", contentValues, where1, new String[]{});
                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        } else {
                                                            if (textView5.getText().toString().equals("")) {
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("variant5", v_na);
                                                                contentValues.put("variant_price5", v_pa);
                                                                String where1 = "_id = '" + id + "'";

                                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                //        db.update("Items", contentValues, where1, new String[]{});
                                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Items")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", id)
                                                                        .build();
                                                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                            db.update("Items", contentValues, where1, new String[]{});
                                                            } else {

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        cursor.close();

                                    } while (cursor_1.moveToNext());
                                }
                                cursor_1.close();
                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                getActivity().getContentResolver().delete(contentUri, null, null);
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("variants_temp")
                                        .appendQueryParameter("operation", "delete")
                                        .appendQueryParameter("1", "1")
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                            db.delete("variants_temp", null, null);

                                int i = 1;
                                Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                if (cursor.moveToFirst()) {
                                    do {
                                        String tax_na = cursor.getString(1);
                                        String tax_va = cursor.getString(2);

                                        if (i == 1) {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemtax", tax_na);
                                            contentValues.put("tax_value", tax_va);
                                            String where1 = "itemname = '" + columnvalue + "'";


//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                            //      db.update("Items", contentValues, where1, new String[]{});
                                            db.update("Items_Virtual", contentValues, where1, new String[]{});


                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("itemname", columnvalue)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
//                                        db.update("Items", contentValues, where1, new String[]{});
                                        } else {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemtax" + i, tax_na);
                                            contentValues.put("tax_value" + i, tax_va);
                                            String where1 = "itemname = '" + columnvalue + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("itemname", columnvalue)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                        Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
                                            //     db.update("Items", contentValues, where1, new String[]{});
                                            db.update("Items_Virtual", contentValues, where1, new String[]{});
                                        }
                                        i++;
                                    } while (cursor.moveToNext());
                                }
                                cursor.close();

                            } else {
                                Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + barcode_no.getText().toString() + "'", null);
                                if (cursor4.moveToFirst()) {
                                    layout_barcode.setError("barcode value already used");
                                } else {
                                    newValues.put("barcode_value", barcode_no.getText().toString());

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
                                    myDb.insert("Items_Virtual", null, newValues);

//                                myDb.insert("Items", null, newValues);
                                    if (NAME3.equals("On")) {
                                        Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                        if (cursor.moveToFirst()) {
                                            NAME4 = cursor.getString(0);
                                        }
                                        cursor.close();
                                        ContentValues newValues1 = new ContentValues();
                                        newValues1.put("barcode_value", NAME4);
                                        String where = "itemname = '" + columnvalue + "'";

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("itemname", columnvalue)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                    db.update("Items", newValues1, where, new String[]{});

                                        db.update("Items_Virtual", newValues1, where, new String[]{});

                                        //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                                    } else {
                                        //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                                    }
                                    Toast.makeText(getActivity().getBaseContext(),
                                            "Item added", Toast.LENGTH_SHORT).show();
                                    linearLayout.setVisibility(View.GONE);
                                    additem.setVisibility(View.VISIBLE);
                                    //linearLayout.setVisibility(View.GONE);
                                    EditText one = (EditText) getActivity().findViewById(R.id.editText1);
                                    one.setText("");
                                    EditText two = (EditText) getActivity().findViewById(R.id.editText2);
                                    two.setText("");
                                    EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                                    three.setText("");
                                    EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                                    four.setText("");
                                    EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                                    five.setText("");
                                    search.setEnabled(true);
                                    get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                                    get_image.setImageResource(R.drawable.ic_add_image_48dp);
                                    hideKeyboard(getContext());
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                        donotshowKeyboard(getActivity());

                                        InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                        imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                                    }

                                    Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                    if (cursor_1.moveToFirst()) {
                                        do {
                                            String v_na = cursor_1.getString(1);
                                            String v_pa = cursor_1.getString(2);

                                            Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                            if (cursor.moveToFirst()) {
                                                String id = cursor.getString(0);
                                                String v_na1 = cursor.getString(38);
                                                String v_na2 = cursor.getString(40);
                                                String v_na3 = cursor.getString(42);
                                                String v_na4 = cursor.getString(44);
                                                String v_na5 = cursor.getString(46);

                                                TextView textView = new TextView(getActivity());
                                                textView.setText(v_na1);
                                                TextView textView2 = new TextView(getActivity());
                                                textView2.setText(v_na2);
                                                TextView textView3 = new TextView(getActivity());
                                                textView3.setText(v_na3);
                                                TextView textView4 = new TextView(getActivity());
                                                textView4.setText(v_na4);
                                                TextView textView5 = new TextView(getActivity());
                                                textView5.setText(v_na5);

                                                if (textView.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant1", v_na);
                                                    contentValues.put("variant_price1", v_pa);
                                                    String where1 = "_id = '" + id + "'";

                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                    //    db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    if (textView2.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant2", v_na);
                                                        contentValues.put("variant_price2", v_pa);
                                                        String where1 = "_id = '" + id + "'";

                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView3.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant3", v_na);
                                                            contentValues.put("variant_price3", v_pa);
                                                            String where1 = "_id = '" + id + "'";

                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            //   db.update("Items", contentValues, where1, new String[]{});
                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        } else {
                                                            if (textView4.getText().toString().equals("")) {
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("variant4", v_na);
                                                                contentValues.put("variant_price4", v_pa);
                                                                String where1 = "_id = '" + id + "'";

                                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                //              db.update("Items", contentValues, where1, new String[]{});
                                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Items")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", id)
                                                                        .build();
                                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                            db.update("Items", contentValues, where1, new String[]{});
                                                            } else {
                                                                if (textView5.getText().toString().equals("")) {
                                                                    ContentValues contentValues = new ContentValues();
                                                                    contentValues.put("variant5", v_na);
                                                                    contentValues.put("variant_price5", v_pa);
                                                                    String where1 = "_id = '" + id + "'";

                                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                    //  db.update("Items", contentValues, where1, new String[]{});
                                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProviderApp.AUTHORITY)
                                                                            .path("Items")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", id)
                                                                            .build();
                                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                                db.update("Items", contentValues, where1, new String[]{});
                                                                } else {

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            cursor.close();

                                        } while (cursor_1.moveToNext());
                                    }
                                    cursor_1.close();

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                    getActivity().getContentResolver().delete(contentUri, null, null);
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("variants_temp")
                                            .appendQueryParameter("operation", "delete")
                                            .appendQueryParameter("1", "1")
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                db.delete("variants_temp", null, null);

                                    int i = 1;
                                    Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                    if (cursor.moveToFirst()) {
                                        do {
                                            String tax_na = cursor.getString(1);
                                            String tax_va = cursor.getString(2);

                                            if (i == 1) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax", tax_na);
                                                contentValues.put("tax_value", tax_va);
                                                String where1 = "itemname = '" + columnvalue + "'";
                                                // String where1 = "itemname = '" + columnvalue + "'";
//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                //    db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1, new String[]{});

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("itemname", columnvalue)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
//                                            db.update("Items", contentValues, where1, new String[]{});
                                            } else {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax" + i, tax_na);
                                                contentValues.put("tax_value" + i, tax_va);
                                                String where1 = "itemname = '" + columnvalue + "'";

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("itemname", columnvalue)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
                                                //    db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1, new String[]{});
                                            }
                                            i++;
                                        } while (cursor.moveToNext());
                                    }
                                    cursor.close();

                                }
                                cursor4.close();
                            }

                        }

                    } else {
                        if (!text.getText().toString().equals("") && !editText.getText().toString().equals("")) {
                            if (selectedImagePath != null) {
                                Bitmap thePic = extras.getParcelable("data");
                                get_image.setImageBitmap(thePic);

                                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                                thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
                                img = bos.toByteArray();
                                newValues.put("image", img);
                                newValues.put("image_text", "");
                                newValues.put("itemname", columnvalue);
                                newValues.put("price", editText.getText().toString());
//                            newValues.put("barcode_value", barcode_no.getText().toString());
                                newValues.put("stockquan", "0");
                                newValues.put("category", spinnercat.getText().toString());
//                            newValues.put("itemtax", spinneritem.getText().toString());
                                if (spinneritem.getText().toString().contains("taxes selected")) {
                                    newValues.put("itemtax", "None");
                                } else {
                                    newValues.put("itemtax", spinneritem.getText().toString());
                                }
                                newValues.put("disc_type", disctypee.getSelectedItem().toString());
                                if (disedittext.getText().toString().equals("")) {
                                    newValues.put("disc_value", "0");
                                } else {
                                    newValues.put("disc_value", disedittext.getText().toString());
                                }
                                newValues.put("weekdaysvalue", "0");
                                newValues.put("weekendsvalue", "0");
                                if (mySwitch.isChecked()) {
                                    newValues.put("favourites", "yes");
                                } else {
                                    newValues.put("favourites", "no");
                                }
                                if (unit_sav.isChecked()) {
                                    newValues.put("unit_type", "Unit");
                                } else {
                                    newValues.put("unit_type", "Weight");
                                }
                                if (barcode_no.getText().toString().equals("")) {
                                    newValues.put("barcode_value", barcode_no.getText().toString());

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
                                    //    myDb.insert("Items", null, newValues);
                                    myDb.insert("Items_Virtual", null, newValues);

//                                myDb.insert("Items", null, newValues);
                                    if (NAME3.equals("On")) {
                                        Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                        if (cursor.moveToFirst()) {
                                            NAME4 = cursor.getString(0);
                                        }
                                        cursor.close();
                                        ContentValues newValues1 = new ContentValues();
                                        newValues1.put("barcode_value", NAME4);
                                        String where = "itemname = '" + columnvalue + "'";

                                        //   String where = "itemname = '" + columnvalue + "'";
                                        //   db.update("Items", newValues1, where, new String[]{});
                                        db.update("Items_Virtual", newValues1, where, new String[]{});


                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("itemname", columnvalue)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                    db.update("Items", newValues1, where, new String[]{});
                                        //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                                    } else {
                                        //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                                    }
                                    Toast.makeText(getActivity().getBaseContext(),
                                            "Item added", Toast.LENGTH_SHORT).show();
                                    linearLayout.setVisibility(View.GONE);
                                    additem.setVisibility(View.VISIBLE);
                                    //linearLayout.setVisibility(View.GONE);
                                    EditText one = (EditText) getActivity().findViewById(R.id.editText1);
                                    one.setText("");
                                    EditText two = (EditText) getActivity().findViewById(R.id.editText2);
                                    two.setText("");
                                    EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                                    three.setText("");
                                    EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                                    four.setText("");
                                    EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                                    five.setText("");
                                    search.setEnabled(true);
                                    get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                                    get_image.setImageResource(R.drawable.ic_add_image_48dp);
                                    hideKeyboard(getContext());
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                        donotshowKeyboard(getActivity());

                                        InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                        imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                                    }

                                    Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                    if (cursor_1.moveToFirst()) {
                                        do {
                                            String v_na = cursor_1.getString(1);
                                            String v_pa = cursor_1.getString(2);

                                            Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                            if (cursor.moveToFirst()) {
                                                String id = cursor.getString(0);
                                                String v_na1 = cursor.getString(38);
                                                String v_na2 = cursor.getString(40);
                                                String v_na3 = cursor.getString(42);
                                                String v_na4 = cursor.getString(44);
                                                String v_na5 = cursor.getString(46);

                                                TextView textView = new TextView(getActivity());
                                                textView.setText(v_na1);
                                                TextView textView2 = new TextView(getActivity());
                                                textView2.setText(v_na2);
                                                TextView textView3 = new TextView(getActivity());
                                                textView3.setText(v_na3);
                                                TextView textView4 = new TextView(getActivity());
                                                textView4.setText(v_na4);
                                                TextView textView5 = new TextView(getActivity());
                                                textView5.setText(v_na5);

                                                if (textView.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant1", v_na);
                                                    contentValues.put("variant_price1", v_pa);
                                                    String where1 = "_id = '" + id + "'";

                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                    //   db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    if (textView2.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant2", v_na);
                                                        contentValues.put("variant_price2", v_pa);
                                                        String where1 = "_id = '" + id + "'";

                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        //   db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView3.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant3", v_na);
                                                            contentValues.put("variant_price3", v_pa);
                                                            String where1 = "_id = '" + id + "'";

                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            //   db.update("Items", contentValues, where1, new String[]{});
                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        } else {
                                                            if (textView4.getText().toString().equals("")) {
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("variant4", v_na);
                                                                contentValues.put("variant_price4", v_pa);
                                                                String where1 = "_id = '" + id + "'";

                                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                //   db.update("Items", contentValues, where1, new String[]{});
                                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Items")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", id)
                                                                        .build();
                                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                            db.update("Items", contentValues, where1, new String[]{});
                                                            } else {
                                                                if (textView5.getText().toString().equals("")) {
                                                                    ContentValues contentValues = new ContentValues();
                                                                    contentValues.put("variant5", v_na);
                                                                    contentValues.put("variant_price5", v_pa);
                                                                    String where1 = "_id = '" + id + "'";

                                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                    //     db.update("Items", contentValues, where1, new String[]{});
                                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProviderApp.AUTHORITY)
                                                                            .path("Items")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", id)
                                                                            .build();
                                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                                db.update("Items", contentValues, where1, new String[]{});
                                                                } else {

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            cursor.close();

                                        } while (cursor_1.moveToNext());
                                    }
                                    cursor_1.close();
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                    getActivity().getContentResolver().delete(contentUri, null, null);
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("variants_temp")
                                            .appendQueryParameter("operation", "delete")
                                            .appendQueryParameter("1", "1")
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                db.delete("variants_temp", null, null);

                                    int i = 1;
                                    Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                    if (cursor.moveToFirst()) {
                                        do {
                                            String tax_na = cursor.getString(1);
                                            String tax_va = cursor.getString(2);

                                            if (i == 1) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax", tax_na);
                                                contentValues.put("tax_value", tax_va);

                                                String where1 = "itemname = '" + columnvalue + "'";
//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                //    db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1, new String[]{});


                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("itemname", columnvalue)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
//                                            db.update("Items", contentValues, where1, new String[]{});
                                            } else {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax" + i, tax_na);
                                                contentValues.put("tax_value" + i, tax_va);
                                                String where1 = "itemname = '" + columnvalue + "'";

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("itemname", columnvalue)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
                                                //  db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1, new String[]{});
                                            }
                                            i++;
                                        } while (cursor.moveToNext());
                                    }
                                    cursor.close();


                                } else {
                                    Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + barcode_no.getText().toString() + "'", null);
                                    if (cursor4.moveToFirst()) {
                                        layout_barcode.setError("barcode value already used");
                                    } else {
                                        newValues.put("barcode_value", barcode_no.getText().toString());

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                        myDb.insert("Items_Virtual", null, newValues);

//                                    myDb.insert("Items", null, newValues);
                                        if (NAME3.equals("On")) {
                                            Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                            if (cursor.moveToFirst()) {
                                                NAME4 = cursor.getString(0);
                                            }
                                            cursor.close();
                                            ContentValues newValues1 = new ContentValues();
                                            newValues1.put("barcode_value", NAME4);
                                            String where = "itemname = '" + columnvalue + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("itemname", columnvalue)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

                                            db.update("Items_Virtual", newValues1, where, new String[]{});

                                            //                                        db.update("Items", newValues1, where, new String[]{});
                                            //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                                        } else {
                                            //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                                        }
                                        Toast.makeText(getActivity().getBaseContext(),
                                                "Item added", Toast.LENGTH_SHORT).show();
                                        linearLayout.setVisibility(View.GONE);
                                        additem.setVisibility(View.VISIBLE);
                                        //linearLayout.setVisibility(View.GONE);
                                        EditText one = (EditText) getActivity().findViewById(R.id.editText1);
                                        one.setText("");
                                        EditText two = (EditText) getActivity().findViewById(R.id.editText2);
                                        two.setText("");
                                        EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                                        three.setText("");
                                        EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                                        four.setText("");
                                        EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                                        five.setText("");
                                        search.setEnabled(true);
                                        get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                                        get_image.setImageResource(R.drawable.ic_add_image_48dp);
                                        hideKeyboard(getContext());
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                            donotshowKeyboard(getActivity());

                                            InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                            imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                                        }

                                        Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                        if (cursor_1.moveToFirst()) {
                                            do {
                                                String v_na = cursor_1.getString(1);
                                                String v_pa = cursor_1.getString(2);

                                                Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                                if (cursor.moveToFirst()) {
                                                    String id = cursor.getString(0);
                                                    String v_na1 = cursor.getString(38);
                                                    String v_na2 = cursor.getString(40);
                                                    String v_na3 = cursor.getString(42);
                                                    String v_na4 = cursor.getString(44);
                                                    String v_na5 = cursor.getString(46);

                                                    TextView textView = new TextView(getActivity());
                                                    textView.setText(v_na1);
                                                    TextView textView2 = new TextView(getActivity());
                                                    textView2.setText(v_na2);
                                                    TextView textView3 = new TextView(getActivity());
                                                    textView3.setText(v_na3);
                                                    TextView textView4 = new TextView(getActivity());
                                                    textView4.setText(v_na4);
                                                    TextView textView5 = new TextView(getActivity());
                                                    textView5.setText(v_na5);

                                                    if (textView.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant1", v_na);
                                                        contentValues.put("variant_price1", v_pa);
                                                        String where1 = "_id = '" + id + "'";

                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        //  db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView2.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant2", v_na);
                                                            contentValues.put("variant_price2", v_pa);
                                                            String where1 = "_id = '" + id + "'";

                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            //   db.update("Items", contentValues, where1, new String[]{});
                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        } else {
                                                            if (textView3.getText().toString().equals("")) {
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("variant3", v_na);
                                                                contentValues.put("variant_price3", v_pa);
                                                                String where1 = "_id = '" + id + "'";
                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Items")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", id)
                                                                        .build();
                                                                getActivity().getContentResolver().notifyChange(resultUri, null);
                                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                //   db.update("Items", contentValues, where1, new String[]{});
                                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//  db.update("Items", contentValues, where1, new String[]{});
                                                            } else {
                                                                if (textView4.getText().toString().equals("")) {
                                                                    ContentValues contentValues = new ContentValues();
                                                                    contentValues.put("variant4", v_na);
                                                                    contentValues.put("variant_price4", v_pa);
                                                                    String where1 = "_id = '" + id + "'";
                                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                    //   db.update("Items", contentValues, where1, new String[]{});
                                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProviderApp.AUTHORITY)
                                                                            .path("Items")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", id)
                                                                            .build();
                                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                                db.update("Items", contentValues, where1, new String[]{});
                                                                } else {
                                                                    if (textView5.getText().toString().equals("")) {
                                                                        ContentValues contentValues = new ContentValues();
                                                                        contentValues.put("variant5", v_na);
                                                                        contentValues.put("variant_price5", v_pa);
                                                                        String where1 = "_id = '" + id + "'";

                                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                        //  db.update("Items", contentValues, where1, new String[]{});
                                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProviderApp.AUTHORITY)
                                                                                .path("Items")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("_id", id)
                                                                                .build();
                                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                                    db.update("Items", contentValues, where1, new String[]{});
                                                                    } else {

                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                cursor.close();

                                            } while (cursor_1.moveToNext());
                                        }
                                        cursor_1.close();
                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                        getActivity().getContentResolver().delete(contentUri, null, null);
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("variants_temp")
                                                .appendQueryParameter("operation", "delete")
                                                .appendQueryParameter("1", "1")
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                    db.delete("variants_temp", null, null);

                                        int i = 1;
                                        Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                        if (cursor.moveToFirst()) {
                                            do {
                                                String tax_na = cursor.getString(1);
                                                String tax_va = cursor.getString(2);

                                                if (i == 1) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("itemtax", tax_na);
                                                    contentValues.put("tax_value", tax_va);
                                                    String where1 = "itemname = '" + columnvalue + "'";


//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                    //   db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where1, new String[]{});


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("itemname", columnvalue)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("itemtax" + i, tax_na);
                                                    contentValues.put("tax_value" + i, tax_va);
                                                    String where1 = "itemname = '" + columnvalue + "'";

                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("itemname", columnvalue)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
                                                    //   db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where1, new String[]{});
                                                }
                                                i++;
                                            } while (cursor.moveToNext());
                                        }
                                        cursor.close();


                                    }
                                    cursor4.close();
                                }

                            } else {
//                            Bitmap b = BitmapFactory.decodeResource(getResources(), R.drawable.item_bg_image2);
//                            ByteArrayOutputStream bos = new ByteArrayOutputStream();
//                            b.compress(Bitmap.CompressFormat.PNG, 100, bos);
//                            img = bos.toByteArray();
//                            newValues.put("image", img);
                                String str1 = columnvalue.substring(0, 2);
                                String str2 = str1.toUpperCase();
                                newValues.put("image_text", str2);
                                newValues.put("image", "");
                                newValues.put("itemname", columnvalue);
                                newValues.put("price", editText.getText().toString());
//                            newValues.put("barcode_value", barcode_no.getText().toString());
                                newValues.put("stockquan", "0");
                                newValues.put("category", spinnercat.getText().toString());
//                            newValues.put("itemtax", spinneritem.getText().toString());
                                if (spinneritem.getText().toString().contains("taxes selected")) {
                                    newValues.put("itemtax", "None");
                                } else {
                                    newValues.put("itemtax", spinneritem.getText().toString());
                                }
                                newValues.put("disc_type", disctypee.getSelectedItem().toString());
                                if (disedittext.getText().toString().equals("")) {
                                    newValues.put("disc_value", "0");
                                } else {
                                    newValues.put("disc_value", disedittext.getText().toString());
                                }
                                newValues.put("weekdaysvalue", "0");
                                newValues.put("weekendsvalue", "0");
                                if (mySwitch.isChecked()) {
                                    newValues.put("favourites", "yes");
                                } else {
                                    newValues.put("favourites", "no");
                                }
                                if (unit_sav.isChecked()) {
                                    newValues.put("unit_type", "Unit");
                                } else {
                                    newValues.put("unit_type", "Weight");
                                }
                                if (barcode_no.getText().toString().equals("")) {
                                    newValues.put("barcode_value", barcode_no.getText().toString());

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
                                    myDb.insert("Items_Virtual", null, newValues);
//                                myDb.insert("Items", null, newValues);
                                    if (NAME3.equals("On")) {
                                        Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                        if (cursor.moveToFirst()) {
                                            NAME4 = cursor.getString(0);
                                        }
                                        cursor.close();
                                        ContentValues newValues1 = new ContentValues();
                                        newValues1.put("barcode_value", NAME4);
                                        String where = "itemname = '" + columnvalue + "'";

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("itemname", columnvalue)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                        //  String where = "itemname = '" + columnvalue + "'";
                                        // db.update("Items", newValues1, where, new String[]{});
                                        db.update("Items_Virtual", newValues1, where, new String[]{});

//                                    db.update("Items", newValues1, where, new String[]{});
                                        //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                                    } else {
                                        //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                                    }
                                    Toast.makeText(getActivity().getBaseContext(),
                                            "Item added", Toast.LENGTH_SHORT).show();
                                    linearLayout.setVisibility(View.GONE);
                                    additem.setVisibility(View.VISIBLE);
                                    //linearLayout.setVisibility(View.GONE);
                                    EditText one = (EditText) getActivity().findViewById(R.id.editText1);
                                    one.setText("");
                                    EditText two = (EditText) getActivity().findViewById(R.id.editText2);
                                    two.setText("");
                                    EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                                    three.setText("");
                                    EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                                    four.setText("");
                                    EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                                    five.setText("");
                                    search.setEnabled(true);
                                    get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                                    get_image.setImageResource(R.drawable.ic_add_image_48dp);
                                    hideKeyboard(getContext());
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                        donotshowKeyboard(getActivity());

                                        InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                        imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                                    }

                                    Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                    if (cursor_1.moveToFirst()) {
                                        do {
                                            String v_na = cursor_1.getString(1);
                                            String v_pa = cursor_1.getString(2);

                                            Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                            if (cursor.moveToFirst()) {
                                                String id = cursor.getString(0);
                                                String v_na1 = cursor.getString(38);
                                                String v_na2 = cursor.getString(40);
                                                String v_na3 = cursor.getString(42);
                                                String v_na4 = cursor.getString(44);
                                                String v_na5 = cursor.getString(46);

                                                TextView textView = new TextView(getActivity());
                                                textView.setText(v_na1);
                                                TextView textView2 = new TextView(getActivity());
                                                textView2.setText(v_na2);
                                                TextView textView3 = new TextView(getActivity());
                                                textView3.setText(v_na3);
                                                TextView textView4 = new TextView(getActivity());
                                                textView4.setText(v_na4);
                                                TextView textView5 = new TextView(getActivity());
                                                textView5.setText(v_na5);

                                                if (textView.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant1", v_na);
                                                    contentValues.put("variant_price1", v_pa);
                                                    String where1 = "_id = '" + id + "'";

                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                    //    db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    if (textView2.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant2", v_na);
                                                        contentValues.put("variant_price2", v_pa);
                                                        String where1 = "_id = '" + id + "'";

                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        //  db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});

//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView3.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant3", v_na);
                                                            contentValues.put("variant_price3", v_pa);
                                                            String where1 = "_id = '" + id + "'";

                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            //     db.update("Items", contentValues, where1, new String[]{});
                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        } else {
                                                            if (textView4.getText().toString().equals("")) {
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("variant4", v_na);
                                                                contentValues.put("variant_price4", v_pa);
                                                                String where1 = "_id = '" + id + "'";

                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Items")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", id)
                                                                        .build();
                                                                getActivity().getContentResolver().notifyChange(resultUri, null);

                                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                //      db.update("Items", contentValues, where1, new String[]{});
                                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                //                                                            db.update("Items", contentValues, where1, new String[]{});
                                                            } else {
                                                                if (textView5.getText().toString().equals("")) {
                                                                    ContentValues contentValues = new ContentValues();
                                                                    contentValues.put("variant5", v_na);
                                                                    contentValues.put("variant_price5", v_pa);
                                                                    String where1 = "_id = '" + id + "'";

                                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                    //     db.update("Items", contentValues, where1, new String[]{});
                                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProviderApp.AUTHORITY)
                                                                            .path("Items")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", id)
                                                                            .build();
                                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                                db.update("Items", contentValues, where1, new String[]{});
                                                                } else {

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            cursor.close();

                                        } while (cursor_1.moveToNext());
                                    }
                                    cursor_1.close();
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                    getActivity().getContentResolver().delete(contentUri, null, null);
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("variants_temp")
                                            .appendQueryParameter("operation", "delete")
                                            .appendQueryParameter("1", "1")
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                db.delete("variants_temp", null, null);

                                    int i = 1;
                                    Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                    if (cursor.moveToFirst()) {
                                        do {
                                            String tax_na = cursor.getString(1);
                                            String tax_va = cursor.getString(2);

                                            if (i == 1) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax", tax_na);
                                                contentValues.put("tax_value", tax_va);
                                                String where1 = "itemname = '" + columnvalue + "'";
//                                            Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                //  String where1 = "itemname = '" + columnvalue + "'";
//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                //  db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1, new String[]{});

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("itemname", columnvalue)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            db.update("Items", contentValues, where1, new String[]{});
                                            } else {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax" + i, tax_na);
                                                contentValues.put("tax_value" + i, tax_va);
                                                String where1 = "itemname = '" + columnvalue + "'";

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("itemname", columnvalue)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                            Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
                                                //    db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1, new String[]{});
                                            }
                                            i++;
                                        } while (cursor.moveToNext());
                                    }
                                    cursor.close();

                                } else {
                                    Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + barcode_no.getText().toString() + "'", null);
                                    if (cursor4.moveToFirst()) {
                                        layout_barcode.setError("barcode value already used");
                                    } else {
                                        newValues.put("barcode_value", barcode_no.getText().toString());
                                        //  myDb.insert("Items", null, newValues);
                                        myDb.insert("Items_Virtual", null, newValues);

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        resultUri = getActivity().getContentResolver().insert(contentUri, newValues);
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    myDb.insert("Items", null, newValues);
                                        if (NAME3.equals("On")) {
                                            Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                            if (cursor.moveToFirst()) {
                                                NAME4 = cursor.getString(0);
                                            }
                                            cursor.close();
                                            ContentValues newValues1 = new ContentValues();
                                            newValues1.put("barcode_value", NAME4);
                                            String where = "itemname = '" + columnvalue + "'";
                                            // String where = "itemname = '" + columnvalue + "'";
                                            // db.update("Items", newValues1, where, new String[]{});
                                            db.update("Items_Virtual", newValues1, where, new String[]{});

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, newValues1, where, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("itemname", columnvalue)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                        db.update("Items", newValues1, where, new String[]{});
                                            //Toast.makeText(getActivity(), "on", Toast.LENGTH_SHORT).show();
                                        } else {
                                            //Toast.makeText(getActivity(), "off", Toast.LENGTH_SHORT).show();
                                        }
                                        Toast.makeText(getActivity().getBaseContext(),
                                                "Item added", Toast.LENGTH_SHORT).show();
                                        linearLayout.setVisibility(View.GONE);
                                        additem.setVisibility(View.VISIBLE);
                                        //linearLayout.setVisibility(View.GONE);
                                        EditText one = (EditText) getActivity().findViewById(R.id.editText1);
                                        one.setText("");
                                        EditText two = (EditText) getActivity().findViewById(R.id.editText2);
                                        two.setText("");
                                        EditText three = (EditText) getActivity().findViewById(R.id.editText3);
                                        three.setText("");
                                        EditText four = (EditText) getActivity().findViewById(R.id.discountvalue1);
                                        four.setText("");
                                        EditText five = (EditText) getActivity().findViewById(R.id.barcodenum);
                                        five.setText("");
                                        search.setEnabled(true);
                                        get_image = (de.hdodenhof.circleimageview.CircleImageView) getActivity().findViewById(R.id.get_image);
                                        get_image.setImageResource(R.drawable.ic_add_image_48dp);
                                        hideKeyboard(getContext());
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                                            donotshowKeyboard(getActivity());

                                            InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                                            imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
                                        }

                                        Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                        if (cursor_1.moveToFirst()) {
                                            do {
                                                String v_na = cursor_1.getString(1);
                                                String v_pa = cursor_1.getString(2);

                                                Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + columnvalue + "'", null);
                                                if (cursor.moveToFirst()) {
                                                    String id = cursor.getString(0);
                                                    String v_na1 = cursor.getString(38);
                                                    String v_na2 = cursor.getString(40);
                                                    String v_na3 = cursor.getString(42);
                                                    String v_na4 = cursor.getString(44);
                                                    String v_na5 = cursor.getString(46);

                                                    TextView textView = new TextView(getActivity());
                                                    textView.setText(v_na1);
                                                    TextView textView2 = new TextView(getActivity());
                                                    textView2.setText(v_na2);
                                                    TextView textView3 = new TextView(getActivity());
                                                    textView3.setText(v_na3);
                                                    TextView textView4 = new TextView(getActivity());
                                                    textView4.setText(v_na4);
                                                    TextView textView5 = new TextView(getActivity());
                                                    textView5.setText(v_na5);

                                                    if (textView.getText().toString().equals("")) {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("variant1", v_na);
                                                        contentValues.put("variant_price1", v_pa);
                                                        String where1 = "_id = '" + id + "'";
                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});

                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                        //  db.update("Items", contentValues, where1, new String[]{});
                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Items")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .build();
                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                    db.update("Items", contentValues, where1, new String[]{});
                                                    } else {
                                                        if (textView2.getText().toString().equals("")) {
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("variant2", v_na);
                                                            contentValues.put("variant_price2", v_pa);
                                                            String where1 = "_id = '" + id + "'";

                                                            String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                            //  db.update("Items", contentValues, where1, new String[]{});
                                                            db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                        db.update("Items", contentValues, where1, new String[]{});
                                                        } else {
                                                            if (textView3.getText().toString().equals("")) {
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("variant3", v_na);
                                                                contentValues.put("variant_price3", v_pa);
                                                                String where1 = "_id = '" + id + "'";
                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});

                                                                String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                //   db.update("Items", contentValues, where1, new String[]{});
                                                                db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Items")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", id)
                                                                        .build();
                                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                            db.update("Items", contentValues, where1, new String[]{});
                                                            } else {
                                                                if (textView4.getText().toString().equals("")) {
                                                                    ContentValues contentValues = new ContentValues();
                                                                    contentValues.put("variant4", v_na);
                                                                    contentValues.put("variant_price4", v_pa);
                                                                    String where1 = "_id = '" + id + "'";

                                                                    String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                    //   db.update("Items", contentValues, where1, new String[]{});
                                                                    db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProviderApp.AUTHORITY)
                                                                            .path("Items")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", id)
                                                                            .build();
                                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                                db.update("Items", contentValues, where1, new String[]{});
                                                                } else {
                                                                    if (textView5.getText().toString().equals("")) {
                                                                        ContentValues contentValues = new ContentValues();
                                                                        contentValues.put("variant5", v_na);
                                                                        contentValues.put("variant_price5", v_pa);
                                                                        String where1 = "_id = '" + id + "'";

                                                                        String where11_vv2 = "itemname = '" + columnvalue + "'";
                                                                        //     db.update("Items", contentValues, where1, new String[]{});
                                                                        db.update("Items_Virtual", contentValues, where11_vv2, new String[]{});


                                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProviderApp.AUTHORITY)
                                                                                .path("Items")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("_id", id)
                                                                                .build();
                                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                                    db.update("Items", contentValues, where1, new String[]{});
                                                                    } else {

                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                cursor.close();

                                            } while (cursor_1.moveToNext());
                                        }
                                        cursor_1.close();
                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                        getActivity().getContentResolver().delete(contentUri, null, null);
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("variants_temp")
                                                .appendQueryParameter("operation", "delete")
                                                .appendQueryParameter("1", "1")
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                                    db.delete("variants_temp", null, null);

                                        int i = 1;
                                        Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                        if (cursor.moveToFirst()) {
                                            do {
                                                String tax_na = cursor.getString(1);
                                                String tax_va = cursor.getString(2);

                                                if (i == 1) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("itemtax", tax_na);
                                                    contentValues.put("tax_value", tax_va);
                                                    String where1 = "itemname = '" + columnvalue + "'";


                                                    //  String where1 = "itemname = '" + columnvalue + "'";
//                                    Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                    //    db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where1, new String[]{});


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("itemname", columnvalue)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
//                                                db.update("Items", contentValues, where1, new String[]{});
                                                } else {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("itemtax" + i, tax_na);
                                                    contentValues.put("tax_value" + i, tax_va);
                                                    String where1 = "itemname = '" + columnvalue + "'";


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("itemname", columnvalue)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
                                                    //    db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where1, new String[]{});
                                                }
                                                i++;
                                            } while (cursor.moveToNext());
                                        }
                                        cursor.close();

                                    }
                                    cursor4.close();
                                }

                            }

                        }
                    }

                }
            }
            itemnamecheck.close();
        }
    }

    void saveInDBup(Integer _id) {

        Cursor mcursor = db.rawQuery("SELECT count(*) FROM variants_temp", null);
        mcursor.moveToFirst();
        int icount = mcursor.getInt(0);
        if(icount == 1){
            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
            getActivity().getContentResolver().delete(contentUri, null, null);
            resultUri = new Uri.Builder()
                    .scheme("content")
                    .authority(StubProviderApp.AUTHORITY)
                    .path("variants_temp")
                    .appendQueryParameter("operation", "delete")
                    .appendQueryParameter("1", "1")
                    .build();
            getActivity().getContentResolver().notifyChange(resultUri, null);
//            db.delete("variants_temp", null, null);
//            linearLayouthi.setBackgroundDrawable(getResources().getDrawable(R.drawable.table_back_green));
        }else{
//            linearLayouthi.setBackgroundDrawable(getResources().getDrawable(R.drawable.table_back_gr));
        }
        mcursor.close();

        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy MM dd",Locale.US);
        final String currentDateandTime1 = sdf2.format(new Date());

        SimpleDateFormat sdf3 = new SimpleDateFormat("dd MMM yyyy",Locale.US);
        final String currentDateandTime2 = sdf3.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa",Locale.US);
        final String time1 = sdf1.format(dt);

        Date dt1 = new Date();
        SimpleDateFormat sdf11 = new SimpleDateFormat("kkmm",Locale.US);
        final String time11 = sdf11.format(dt1);

        Date dtt_new = new Date();
        SimpleDateFormat sdf1t_new = new SimpleDateFormat("yyyyMMddkkmm",Locale.US);
        final String time24_new = sdf1t_new.format(dtt_new);

        SQLiteDatabase db = getActivity().openOrCreateDatabase("mydb_Appdata",
                Context.MODE_PRIVATE, null);
        byte[] byteImage1;
        byte[] img;
        String s = db.getPath();
        ContentValues newValues = new ContentValues();
//        Cursor itemnamecheck = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+NAme1+"' AND _id != '"+iddd+"'", null);
//        if (itemnamecheck.moveToFirst()){
//            dialogC1_id.setError("Itemname already in use");
//        } else {


        dialog_columnvalue  = dialogC1_id.getText().toString();
        if (dialogC1_id.getText().toString().contains("'")) {
            dialog_columnvalue  = dialogC1_id.getText().toString().replaceAll("'", " ");
        }


        if (selectedImagePath != null && !dialogC2_id.getText().toString().equals("") && !dialogC1_id.getText().toString().equals("") && !dialogC3_id.getText().toString().equals("")
                && !dialogC3_dis.getText().toString().equals("")) {


            Bitmap thePic = extras.getParcelable("data");
            get_image.setImageBitmap(thePic);


            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
            img = bos.toByteArray();
            newValues.put("image", img);
            newValues.put("image_text", "");
            newValues.put("itemname", dialog_columnvalue);
            newValues.put("price", dialogC2_id.getText().toString());
            newValues.put("stockquan", dialogC3_id.getText().toString());

            if (NAME3.equals("On")) {
                newValues.put("barcode_value", dialogC3_barcode.getText().toString());
            } else {
                newValues.put("barcode_value", dialogC3_barcode.getText().toString());
            }

            newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
            if (dialogC3_dis.getText().toString().equals("")){
                newValues.put("disc_value", "0");
            }else {
                newValues.put("disc_value", dialogC3_dis.getText().toString());
            }
            //newValues.put("disc_value", dialogC3_dis.getText().toString());
            newValues.put("category", dialogC4_id.getText().toString());
//            newValues.put("itemtax", dialogC4_id1.getText().toString());
            if (dialogC4_id1.getText().toString().contains("taxes selected")){
                newValues.put("itemtax", "None");
            }else {
                newValues.put("itemtax", dialogC4_id1.getText().toString());
            }
            if (dialogC3_myswitch.isChecked()) {
                newValues.put("favourites", "yes");
            } else {
                newValues.put("favourites", "no");
            }
            if (unit_sav_dialog.isChecked()){
                newValues.put("unit_type", "Unit");
            }else {
                newValues.put("unit_type", "Weight");
            }

            String where = "_id = ?";
            //   db.update("Items", newValues, where, new String[]{Integer.toString(_id)});
            String where1_ssvv = "itemname = '" + NAme1 + "'";
            db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});


            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
            getActivity().getContentResolver().update(contentUri, newValues,where,new String[]{Integer.toString(_id)});
            resultUri = new Uri.Builder()
                    .scheme("content")
                    .authority(StubProviderApp.AUTHORITY)
                    .path("Items")
                    .appendQueryParameter("operation", "update")
                    .appendQueryParameter("_id", Integer.toString(_id))
                    .build();
            getActivity().getContentResolver().notifyChange(resultUri, null);

//            db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

            int i = 1;
            Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
            if (cursor.moveToFirst()){
                do {
                    String tax_na = cursor.getString(1);
                    String tax_va = cursor.getString(2);

                    if (i == 1) {
                        ContentValues contentValues = new ContentValues();
                        contentValues.put("itemtax", tax_na);
                        contentValues.put("tax_value", tax_va);
                        String where1 = "_id = ?";

                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                        getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Items")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", Integer.toString(_id))
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);
                        String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                        //  db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                        db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});

//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                        // db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                        //  db.update("Items_Virtual", contentValues, where1_ssv, new String[]{Integer.toString(_id)});
                    }else {
                        ContentValues contentValues = new ContentValues();
                        contentValues.put("itemtax"+i, tax_na);
                        contentValues.put("tax_value"+i, tax_va);
                        String where1 = "_id = ?";
                        String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                        //  db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                        db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                        getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Items")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", Integer.toString(_id))
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                        Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
//                        db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                    }
                    i++;
                }while (cursor.moveToNext());
            }
            cursor.close();

//            Toast.makeText(getActivity().getBaseContext(),
//                    "Item saved", Toast.LENGTH_SHORT).show();
//            db.close();
            dialog.dismiss();
            donotshowKeyboard(getActivity());
            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
            getActivity().getContentResolver().delete(contentUri, null, null);
            resultUri = new Uri.Builder()
                    .scheme("content")
                    .authority(StubProviderApp.AUTHORITY)
                    .path("Ingredients_item_selection_temp")
                    .appendQueryParameter("operation", "delete")
                    .appendQueryParameter("1", "1")
                    .build();
            getActivity().getContentResolver().notifyChange(resultUri, null);
//            db.delete("Ingredients_item_selection_temp", null, null);

            Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '"+NAme1+"'", null);
            if (cursor2.moveToFirst()){
                do {
                    String id = cursor2.getString(0);
                    ContentValues contentValues = new ContentValues();
                    contentValues.put("itemname", dialog_columnvalue);
                    String where1 = "_id = '"+id+"'";

                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                    getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                    resultUri = new Uri.Builder()
                            .scheme("content")
                            .authority(StubProviderApp.AUTHORITY)
                            .path("Ingredient_items_list")
                            .appendQueryParameter("operation", "update")
                            .appendQueryParameter("_id", Integer.toString(_id))
                            .build();
                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                }while (cursor2.moveToNext());
            }
            cursor2.close();

            Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '"+NAme1+"'", null);
            if (cursor3.moveToFirst()){
                do {
                    String id = cursor3.getString(0);
                    ContentValues contentValues = new ContentValues();
                    contentValues.put("itemname", dialog_columnvalue);
                    String where1 = "_id = '"+id+"'";

                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                    getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                    resultUri = new Uri.Builder()
                            .scheme("content")
                            .authority(StubProviderApp.AUTHORITY)
                            .path("Vendor_sold_item_details")
                            .appendQueryParameter("operation", "update")
                            .appendQueryParameter("_id", id)
                            .build();
                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                }while (cursor3.moveToNext());
            }
            cursor3.close();

        } else {

            if (dialogC1_id.getText().toString().equals("")) {
                //Toast.makeText(getActivity(),"Fill Item name", Toast.LENGTH_SHORT).show();
                layoutitemname_dialog.setError("Fill itemname");
            }
            if (dialogC2_id.getText().toString().equals("")) {
                //Toast.makeText(getActivity(),"Fill Price", Toast.LENGTH_SHORT).show();
                layoutprice_dialog.setError("Fill price");
            }
            if (!dialogC1_id.getText().toString().equals("") && !dialogC2_id.getText().toString().equals("") && !dialogC3_id.getText().toString().equals("")) {
                if (selectedImagePath != null) {
                    Bitmap thePic = extras.getParcelable("data");
                    get_image.setImageBitmap(thePic);

                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
                    img = bos.toByteArray();

                    newValues.put("image", img);
                    newValues.put("image_text", "");
                    newValues.put("itemname", dialog_columnvalue);
                    newValues.put("price", dialogC2_id.getText().toString());
                    newValues.put("stockquan", dialogC3_id.getText().toString());

                    if (NAME3.equals("On")) {
                        newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                    } else {
                        newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                    }

                    newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                    if (dialogC3_dis.getText().toString().equals("")){
                        newValues.put("disc_value", "0");
                    }else {
                        newValues.put("disc_value", dialogC3_dis.getText().toString());
                    }
                    newValues.put("category", dialogC4_id.getText().toString());
//                    newValues.put("itemtax", dialogC4_id1.getText().toString());
                    if (dialogC4_id1.getText().toString().contains("taxes selected")){
                        newValues.put("itemtax", "None");
                    }else {
                        newValues.put("itemtax", dialogC4_id1.getText().toString());
                    }
                    if (dialogC3_myswitch.isChecked()) {
                        newValues.put("favourites", "yes");
                    } else {
                        newValues.put("favourites", "no");
                    }
                    if (unit_sav_dialog.isChecked()){
                        newValues.put("unit_type", "Unit");
                    }else {
                        newValues.put("unit_type", "Weight");
                    }

                    String where = "_id = ?";


                    // db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                    String where1_ssvv = "itemname = '" + NAme1 + "'";
                    db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});




                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                    getActivity().getContentResolver().update(contentUri, newValues,where,new String[]{Integer.toString(_id)});
                    resultUri = new Uri.Builder()
                            .scheme("content")
                            .authority(StubProviderApp.AUTHORITY)
                            .path("Items")
                            .appendQueryParameter("operation", "update")
                            .appendQueryParameter("_id", Integer.toString(_id))
                            .build();
                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                    int i = 1;
                    Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                    if (cursor.moveToFirst()){
                        do {
                            String tax_na = cursor.getString(1);
                            String tax_va = cursor.getString(2);

                            if (i == 1) {
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemtax", tax_na);
                                contentValues.put("tax_value", tax_va);
                                String where1 = "_id = ?";

                                String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                //    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Items")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id", Integer.toString(_id))
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                Toast.makeText(getActivity(), "selected3 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                            }else {
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemtax"+i, tax_na);
                                contentValues.put("tax_value"+i, tax_va);
                                String where1 = "_id = ?";
                                String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                //    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Items")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id", Integer.toString(_id))
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                Toast.makeText(getActivity(), "selected4 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                            }
                            i++;
                        }while (cursor.moveToNext());
                    }
                    cursor.close();

//                    Toast.makeText(getActivity().getBaseContext(),
//                            "Item saved", Toast.LENGTH_SHORT).show();
                    dialog.dismiss();
                    donotshowKeyboard(getActivity());
                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                    getActivity().getContentResolver().delete(contentUri, null, null);
                    resultUri = new Uri.Builder()
                            .scheme("content")
                            .authority(StubProviderApp.AUTHORITY)
                            .path("Ingredients_item_selection_temp")
                            .appendQueryParameter("operation", "delete")
                            .appendQueryParameter("1", "1")
                            .build();
                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.delete("Ingredients_item_selection_temp", null, null);
                    Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '"+NAme1+"'", null);
                    if (cursor2.moveToFirst()){
                        do {
                            String id = cursor2.getString(0);
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("itemname", dialog_columnvalue);
                            String where1 = "_id = '"+id+"'";

                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                            getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProviderApp.AUTHORITY)
                                    .path("Ingredient_items_list")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("_id",id)
                                    .build();
                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                        }while (cursor2.moveToNext());
                    }
                    cursor2.close();

                    Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '"+NAme1+"'", null);
                    if (cursor3.moveToFirst()){
                        do {
                            String id = cursor3.getString(0);
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("itemname", dialog_columnvalue);
                            String where1 = "_id = '"+id+"'";

                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                            getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProviderApp.AUTHORITY)
                                    .path("Vendor_sold_item_details")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("_id",id)
                                    .build();
                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                        }while (cursor3.moveToNext());
                    }
                    cursor3.close();

//                linearLayout.setVisibility(View.GONE);
                } else {

                    String str1 = dialog_columnvalue.substring(0, 2);
                    String str2 = str1.toUpperCase();
                    newValues.put("image_text", str2);
                    newValues.put("itemname", dialog_columnvalue);
                    newValues.put("price", dialogC2_id.getText().toString());
                    newValues.put("stockquan", dialogC3_id.getText().toString());

                    if (NAME3.equals("On")) {
                        newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                    } else {
                        newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                    }

                    newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                    if (dialogC3_dis.getText().toString().equals("")){
                        newValues.put("disc_value", "0");
                    }else {
                        newValues.put("disc_value", dialogC3_dis.getText().toString());
                    }
                    newValues.put("category", dialogC4_id.getText().toString());
//                    newValues.put("itemtax", dialogC4_id1.getText().toString());
                    if (dialogC4_id1.getText().toString().contains("taxes selected")){
                        newValues.put("itemtax", "None");
                    }else {
                        newValues.put("itemtax", dialogC4_id1.getText().toString());
                    }
                    if (dialogC3_myswitch.isChecked()) {
                        newValues.put("favourites", "yes");
                    } else {
                        newValues.put("favourites", "no");
                    }
                    if (unit_sav_dialog.isChecked()){
                        newValues.put("unit_type", "Unit");
                    }else {
                        newValues.put("unit_type", "Weight");
                    }

                    String where = "_id = ?";
                    //   db.update("Items", newValues, where, new String[]{Integer.toString(_id)});
                    String where1_ssvv = "itemname = '" + NAme1 + "'";
                    db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});

                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                    getActivity().getContentResolver().update(contentUri, newValues,where,new String[]{Integer.toString(_id)});
                    resultUri = new Uri.Builder()
                            .scheme("content")
                            .authority(StubProviderApp.AUTHORITY)
                            .path("Items")
                            .appendQueryParameter("operation", "update")
                            .appendQueryParameter("_id", Integer.toString(_id))
                            .build();
                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                    db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                    int i = 1;
                    Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                    if (cursor.moveToFirst()){
                        do {
                            String tax_na = cursor.getString(1);
                            String tax_va = cursor.getString(2);
                            if (i == 1) {
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemtax", tax_na);
                                contentValues.put("tax_value", tax_va);
                                String where1 = "_id = ?";


                                String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                //     db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Items")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id", Integer.toString(_id))
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                Toast.makeText(getActivity(), "selected5 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                            }else {
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemtax"+i, tax_na);
                                contentValues.put("tax_value"+i, tax_va);
                                String where1 = "_id = ?";

                                String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                //   db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Items")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id", Integer.toString(_id))
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                Toast.makeText(getActivity(), "selected6 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                            }
                            i++;
                        }while (cursor.moveToNext());
                    }
                    cursor.close();

//                    Toast.makeText(getActivity().getBaseContext(),
//                            "Item saved", Toast.LENGTH_SHORT).show();
                    dialog.dismiss();
                    donotshowKeyboard(getActivity());
                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                    getActivity().getContentResolver().delete(contentUri, null, null);
                    resultUri = new Uri.Builder()
                            .scheme("content")
                            .authority(StubProviderApp.AUTHORITY)
                            .path("Ingredients_item_selection_temp")
                            .appendQueryParameter("operation", "delete")
                            .appendQueryParameter("1", "1")
                            .build();
                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.delete("Ingredients_item_selection_temp", null, null);
                    Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '"+NAme1+"'", null);
                    if (cursor2.moveToFirst()){
                        do {
                            String id = cursor2.getString(0);
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("itemname", dialog_columnvalue);
                            String where1 = "_id = '"+id+"'";
                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                            getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProviderApp.AUTHORITY)
                                    .path("Ingredient_items_list")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("_id", Integer.toString(_id))
                                    .build();
                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                            db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                        }while (cursor2.moveToNext());
                    }
                    cursor2.close();

                    Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '"+NAme1+"'", null);
                    if (cursor3.moveToFirst()){
                        do {
                            String id = cursor3.getString(0);
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("itemname", dialog_columnvalue);
                            String where1 = "_id = '"+id+"'";

                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                            getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProviderApp.AUTHORITY)
                                    .path("Vendor_sold_item_details")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("_id",id)
                                    .build();
                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                        }while (cursor3.moveToNext());
                    }
                    cursor3.close();

//                linearLayout.setVisibility(View.GONE);
                }

            } else {
                if (!dialogC1_id.getText().toString().equals("") && !dialogC2_id.getText().toString().equals("")) {
                    if (selectedImagePath != null) {

                        Bitmap thePic = extras.getParcelable("data");
                        get_image.setImageBitmap(thePic);

                        ByteArrayOutputStream bos = new ByteArrayOutputStream();
                        thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
                        img = bos.toByteArray();

                        newValues.put("image", img);
                        newValues.put("image_text", "");
                        newValues.put("itemname", dialog_columnvalue);
                        newValues.put("price", dialogC2_id.getText().toString());
                        newValues.put("stockquan", "0");

                        if (NAME3.equals("On")) {
                            newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                        } else {
                            newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                        }

                        newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                        if (dialogC3_dis.getText().toString().equals("")){
                            newValues.put("disc_value", "0");
                        }else {
                            newValues.put("disc_value", dialogC3_dis.getText().toString());
                        }
                        newValues.put("category", dialogC4_id.getText().toString());
//                        newValues.put("itemtax", dialogC4_id1.getText().toString());
                        if (dialogC4_id1.getText().toString().contains("taxes selected")){
                            newValues.put("itemtax", "None");
                        }else {
                            newValues.put("itemtax", dialogC4_id1.getText().toString());
                        }
                        if (dialogC3_myswitch.isChecked()) {
                            newValues.put("favourites", "yes");
                        } else {
                            newValues.put("favourites", "no");
                        }
                        if (unit_sav_dialog.isChecked()){
                            newValues.put("unit_type", "Unit");
                        }else {
                            newValues.put("unit_type", "Weight");
                        }

                        String where = "_id = ?";
                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                        getActivity().getContentResolver().update(contentUri, newValues,where,new String[]{Integer.toString(_id)});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Items")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", Integer.toString(_id))
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

                        String where1_ssvv = "itemname = '" + NAme1 + "'";
                        db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});


                        int i = 1;
                        Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                        if (cursor.moveToFirst()){
                            do {
                                String tax_na = cursor.getString(1);
                                String tax_va = cursor.getString(2);

                                if (i == 1) {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("itemtax", tax_na);
                                    contentValues.put("tax_value", tax_va);
                                    String where1 = "_id = ?";
                                    String where1_ssv = "itemname = '" + NAme1 + "'";
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", Integer.toString(_id))
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    Toast.makeText(getActivity(), "selected7 "+tax_na, Toast.LENGTH_LONG).show();
                                    //    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                    db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});
                                }else {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("itemtax"+i, tax_na);
                                    contentValues.put("tax_value"+i, tax_va);
                                    String where1 = "_id = ?";
                                    String where1_ssv = "itemname = '" + NAme1 + "'";
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", Integer.toString(_id))
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    Toast.makeText(getActivity(), "selected8 "+tax_na, Toast.LENGTH_LONG).show();
                                    //   db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                    db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});
                                }
                                i++;
                            }while (cursor.moveToNext());
                        }
                        cursor.close();

//                        Toast.makeText(getActivity().getBaseContext(),
//                                "Item saved", Toast.LENGTH_SHORT).show();
                        dialog.dismiss();
                        donotshowKeyboard(getActivity());
                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                        getActivity().getContentResolver().delete(contentUri, null, null);
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Ingredients_item_selection_temp")
                                .appendQueryParameter("operation", "delete")
                                .appendQueryParameter("1", "1")
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                        db.delete("Ingredients_item_selection_temp", null, null);
                        Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '"+NAme1+"'", null);
                        if (cursor2.moveToFirst()){
                            do {
                                String id = cursor2.getString(0);
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemname", dialog_columnvalue);
                                String where1 = "_id = '"+id+"'";

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Ingredient_items_list")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id",id)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                                db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                            }while (cursor2.moveToNext());
                        }
                        cursor2.close();

                        Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '"+NAme1+"'", null);
                        if (cursor3.moveToFirst()){
                            do {
                                String id = cursor3.getString(0);
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemname", dialog_columnvalue);
                                String where1 = "_id = '"+id+"'";

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Vendor_sold_item_details")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id",id)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);

                                db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                            }while (cursor3.moveToNext());
                        }
                        cursor3.close();
//                    linearLayout.setVisibility(View.GONE);

                    } else {

                        String str1 = dialog_columnvalue.substring(0, 2);
                        String str2 = str1.toUpperCase();
                        newValues.put("image_text", str2);
                        newValues.put("itemname", dialog_columnvalue);
                        newValues.put("price", dialogC2_id.getText().toString());
                        newValues.put("stockquan", "0");

                        if (NAME3.equals("On")) {
                            newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                        } else {
                            newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                        }

                        newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                        if (dialogC3_dis.getText().toString().equals("")){
                            newValues.put("disc_value", "0");
                        }else {
                            newValues.put("disc_value", dialogC3_dis.getText().toString());
                        }
                        newValues.put("category", dialogC4_id.getText().toString());
//                        newValues.put("itemtax", dialogC4_id1.getText().toString());
                        if (dialogC4_id1.getText().toString().contains("taxes selected")){
                            newValues.put("itemtax", "None");
                        }else {
                            newValues.put("itemtax", dialogC4_id1.getText().toString());
                        }
                        if (dialogC3_myswitch.isChecked()) {
                            newValues.put("favourites", "yes");
                        } else {
                            newValues.put("favourites", "no");
                        }
                        if (unit_sav_dialog.isChecked()){
                            newValues.put("unit_type", "Unit");
                        }else {
                            newValues.put("unit_type", "Weight");
                        }

                        String where = "_id = ?";
                        //   db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                        getActivity().getContentResolver().update(contentUri, newValues,where,new String[]{Integer.toString(_id)});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Items")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", Integer.toString(_id))
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

                        String where1_ssvv = "itemname = '" + NAme1 + "'";
                        db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});


                        int i = 1;
                        Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                        if (cursor.moveToFirst()){
                            do {
                                String tax_na = cursor.getString(1);
                                String tax_va = cursor.getString(2);

                                if (i == 1) {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("itemtax", tax_na);
                                    contentValues.put("tax_value", tax_va);
                                    String where1 = "_id = ?";

                                    String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                    //     db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                    db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});



                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", Integer.toString(_id))
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                    Toast.makeText(getActivity(), "selected9 "+tax_na, Toast.LENGTH_LONG).show();
//                                    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                }else {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("itemtax"+i, tax_na);
                                    contentValues.put("tax_value"+i, tax_va);
                                    String where1 = "_id = ?";

                                    String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                    //     db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                    db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{Integer.toString(_id)});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", Integer.toString(_id))
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                                    Toast.makeText(getActivity(), "selected10 "+tax_na, Toast.LENGTH_LONG).show();
//                                    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                }
                                i++;
                            }while (cursor.moveToNext());
                        }
                        cursor.close();

//                        Toast.makeText(getActivity().getBaseContext(),
//                                "Item saved", Toast.LENGTH_SHORT).show();
                        dialog.dismiss();
                        donotshowKeyboard(getActivity());
                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                        getActivity().getContentResolver().delete(contentUri, null, null);
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Ingredients_item_selection_temp")
                                .appendQueryParameter("operation", "delete")
                                .appendQueryParameter("1", "1")
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                        db.delete("Ingredients_item_selection_temp", null, null);
                        Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '"+NAme1+"'", null);
                        if (cursor2.moveToFirst()){
                            do {
                                String id = cursor2.getString(0);
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemname", dialog_columnvalue);
                                String where1 = "_id = '"+id+"'";

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Ingredient_items_list")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id",id)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                            }while (cursor2.moveToNext());
                        }
                        cursor2.close();

                        Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '"+NAme1+"'", null);
                        if (cursor3.moveToFirst()){
                            do {
                                String id = cursor3.getString(0);
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemname", dialog_columnvalue);
                                String where1 = "_id = '"+id+"'";

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Vendor_sold_item_details")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id",id)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                            }while (cursor3.moveToNext());
                        }
                        cursor3.close();
//                    linearLayout.setVisibility(View.GONE);

                    }
                }
            }

        }

        //insert variants here

        Cursor cursor3 = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+dialog_columnvalue+"'", null);
        if (cursor3.moveToFirst()){
            String id = cursor3.getString(0);
            ContentValues contentValues = new ContentValues();
            contentValues.put("variant1", "");
            contentValues.put("variant_price1", "");
            contentValues.put("variant2", "");
            contentValues.put("variant_price2", "");
            contentValues.put("variant3", "");
            contentValues.put("variant_price3", "");
            contentValues.put("variant4", "");
            contentValues.put("variant_price4", "");
            contentValues.put("variant5", "");
            contentValues.put("variant_price5", "");
            String where1 = "_id = '"+id+"'";

            String where1_v = "itemname = '" + dialog_columnvalue + "'";
            //    db.update("Items", contentValues, where1, new String[]{});
            db.update("Items_Virtual", contentValues, where1_v, new String[]{});

            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
            getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
            resultUri = new Uri.Builder()
                    .scheme("content")
                    .authority(StubProviderApp.AUTHORITY)
                    .path("Items")
                    .appendQueryParameter("operation", "update")
                    .appendQueryParameter("_id",id)
                    .build();
            getActivity().getContentResolver().notifyChange(resultUri, null);

//            db.update("Items", contentValues, where1, new String[]{});
        }
        cursor3.close();

        Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
        if (cursor_1.moveToFirst()){
            do {
                String v_na = cursor_1.getString(1);
                String v_pa = cursor_1.getString(2);

                Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+dialog_columnvalue+"'", null);
                if (cursor.moveToFirst()){
                    String id = cursor.getString(0);
                    String v_na1 = cursor.getString(38);
                    String v_na2 = cursor.getString(40);
                    String v_na3 = cursor.getString(42);
                    String v_na4 = cursor.getString(44);
                    String v_na5 = cursor.getString(46);

                    TextView textView = new TextView(getActivity());
                    textView.setText(v_na1);
                    TextView textView2 = new TextView(getActivity());
                    textView2.setText(v_na2);
                    TextView textView3 = new TextView(getActivity());
                    textView3.setText(v_na3);
                    TextView textView4 = new TextView(getActivity());
                    textView4.setText(v_na4);
                    TextView textView5 = new TextView(getActivity());
                    textView5.setText(v_na5);

                    if (textView.getText().toString().equals("")){
                        ContentValues contentValues = new ContentValues();
                        contentValues.put("variant1", v_na);
                        contentValues.put("variant_price1", v_pa);
                        String where1 = "_id = '" + id + "'";
                        String where1_v = "itemname = '" + dialog_columnvalue + "'";
                        //    db.update("Items", contentValues, where1, new String[]{});
                        db.update("Items_Virtual", contentValues, where1_v, new String[]{});

                        // String where1 = "_id = '"+id+"'";
                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                        getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Items")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id",id)
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                        db.update("Items", contentValues, where1, new String[]{});
                    }else {
                        if (textView2.getText().toString().equals("")){
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("variant2", v_na);
                            contentValues.put("variant_price2", v_pa);
                            String where1 = "_id = '"+id+"'";

                            //  String where1 = "_id = '" + id + "'";
                            String where1_v = "itemname = '" + dialog_columnvalue + "'";
                            // db.update("Items", contentValues, where1, new String[]{});
                            db.update("Items_Virtual", contentValues, where1_v, new String[]{});


                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                            getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProviderApp.AUTHORITY)
                                    .path("Items")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("_id",id)
                                    .build();
                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Items", contentValues, where1, new String[]{});
                        }else {
                            if (textView3.getText().toString().equals("")){
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("variant3", v_na);
                                contentValues.put("variant_price3", v_pa);
                                String where1 = "_id = '"+id+"'";
                                //   String where1 = "_id = '" + id + "'";
                                String where1_v = "itemname = '" + dialog_columnvalue + "'";
                                //  db.update("Items", contentValues, where1, new String[]{});
                                db.update("Items_Virtual", contentValues, where1_v, new String[]{});


                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Items")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id",id)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                                db.update("Items", contentValues, where1, new String[]{});
                            }else {
                                if (textView4.getText().toString().equals("")){
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("variant4", v_na);
                                    contentValues.put("variant_price4", v_pa);
                                    String where1 = "_id = '"+id+"'";

                                    //   String where1 = "_id = '" + id + "'";
                                    String where1_v = "itemname = '" + dialog_columnvalue + "'";
                                    //     db.update("Items", contentValues, where1, new String[]{});
                                    db.update("Items_Virtual", contentValues, where1_v, new String[]{});


                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id",id)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    db.update("Items", contentValues, where1, new String[]{});
                                }else {
                                    if (textView5.getText().toString().equals("")){
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("variant5", v_na);
                                        contentValues.put("variant_price5", v_pa);
                                        String where1 = "_id = '"+id+"'";

                                        //  String where1 = "_id = '" + id + "'";
                                        String where1_v = "itemname = '" + dialog_columnvalue + "'";
                                        //  db.update("Items", contentValues, where1, new String[]{});
                                        db.update("Items_Virtual", contentValues, where1_v, new String[]{});


                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id",id)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//
//                                        db.update("Items", contentValues, where1, new String[]{});
                                    }else {

                                    }
                                }
                            }
                        }
                    }
                }
                cursor.close();

            }while (cursor_1.moveToNext());
        }
        cursor_1.close();
        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
        getActivity().getContentResolver().delete(contentUri, null, null);
        resultUri = new Uri.Builder()
                .scheme("content")
                .authority(StubProviderApp.AUTHORITY)
                .path("variants_temp")
                .appendQueryParameter("operation", "delete")
                .appendQueryParameter("1", "1")
                .build();
        getActivity().getContentResolver().notifyChange(resultUri, null);
//        db.delete("variants_temp", null, null);

        //}

        Cursor cursor1_1 = db.rawQuery("SELECT * FROM Taxes", null);
        if (cursor1_1.moveToFirst()){
            do {
                String ida = cursor1_1.getString(0);
                ContentValues contentValues = new ContentValues();
                contentValues.put("checked", "");
                String where1 = "_id = '"+ida+"' ";

                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                resultUri = new Uri.Builder()
                        .scheme("content")
                        .authority(StubProviderApp.AUTHORITY)
                        .path("Taxes")
                        .appendQueryParameter("operation", "update")
                        .appendQueryParameter("_id",ida)
                        .build();
                getActivity().getContentResolver().notifyChange(resultUri, null);

//                db.update("Taxes", contentValues, where1, new String[]{});
            }while (cursor1_1.moveToNext());
        }
        cursor1_1.close();

    }

    public static void hideKeyboard(Context ctx) {
        InputMethodManager inputManager = (InputMethodManager) ctx
                .getSystemService(Context.INPUT_METHOD_SERVICE);

        // check if no view has focus:
        View v = ((Activity) ctx).getCurrentFocus();
        if (v == null)
            return;

        inputManager.hideSoftInputFromWindow(v.getWindowToken(), 0);
    }

    public static void showKeyboard(Activity activity) {
        if (activity != null) {
            activity.getWindow()
                    .setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
        }
    }

    public static void donotshowKeyboard(Activity activity) {
        if (activity != null) {
            activity.getWindow()
                    .setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        }
    }

    public void displayKeyboard() {
        InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);
    }

    @Override
    public void onDestroy() {

        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
        listView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {

            @Override
            public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {

            }

            @Override
            public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
                // TODO  Auto-generated method stub
                return false;
            }

            @Override
            public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                return false;
            }

            @Override
            public void onDestroyActionMode(ActionMode mode) {
                mode.invalidate();
                // TODO  Auto-generated method stub
            }

            @Override
            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
                // TODO  Auto-generated method stub
                //mode.getMenuInflater().inflate(R.menu.multiple_delete, menu);
                return true;

            }
        });
        //mode.invalidate();
        super.onDestroy();

    }

    class DownloadMusicfromInternet extends AsyncTask<Void, Integer, Void> {
        private ProgressDialog dialog = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);

        @Override
        protected Void doInBackground(Void... params) {

            try {
                //Get the current thread's token
                synchronized (this) {
                    //Initialize an integer (that will act as a counter) to zero
                    int counter = 0;
                    //While the counter is smaller than four
                    while (counter <= 4) {
                        //Wait 850 milliseconds
                        this.wait(300);
                        //Increment the counter
                        counter++;
                        //Set the current progress.
                        //This value is going to be passed to the onProgressUpdate() method.
                        publishProgress(counter * 25);
                    }
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (spinner.getSelectedItem().toString().equals("All")){
//                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                Cursor fr = db.rawQuery("SELECT * FROM Items", null);
                int numberOfRows = fr.getCount();
                //countryList = new ArrayList<Country_items>();
                try {
                    //db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    //db.execSQL("PRAGMA synchronous=OFF");
                    int limit = 0;
                    if (numberOfRows > 100){
                        while (limit + 100 < numberOfRows) {
                            String statement = "SELECT * FROM Items LIMIT '"+ limit+"', 100";
                            Cursor allrows = db.rawQuery(statement, null);
                            System.out.println("COUNT : " + allrows.getCount());
                            if (allrows.moveToFirst()) {
                                do {
                                    String ID = allrows.getString(0);
                                    String NAme = allrows.getString(1);
                                    String BAr = allrows.getString(16);
                                    String PRiCe = allrows.getString(2);
                                    String QtY = allrows.getString(3);
                                    String PlaCe = allrows.getString(2);
                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                    countryList.add(NAME);
                                    //countryList.add(PLACE);
                                } while (allrows.moveToNext());
                            }
                            allrows.close();
                            limit += 100;
                        }
                        int news = numberOfRows - limit;
                        if (news == 0){
                            //Toast.makeText(getActivity(), "limit is b " + limit, Toast.LENGTH_SHORT).show();
                        }else {
                            String statement = "SELECT * FROM Items LIMIT '"+ news+"' OFFSET '"+limit+"'";
                            Cursor allrows = db.rawQuery(statement, null);
                            System.out.println("COUNT : " + allrows.getCount());
                            if (allrows.moveToFirst()) {
                                do {
                                    String ID = allrows.getString(0);
                                    String NAme = allrows.getString(1);
                                    String BAr = allrows.getString(16);
                                    String PRiCe = allrows.getString(2);
                                    String QtY = allrows.getString(3);
                                    String PlaCe = allrows.getString(2);
                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                    countryList.add(NAME);
                                    //countryList.add(PLACE);
                                } while (allrows.moveToNext());
                            }
                            allrows.close();
                        }
                    }else {
                        String statement = "SELECT * FROM Items";
                        Cursor allrows = db.rawQuery(statement, null);
                        System.out.println("COUNT : " + allrows.getCount());
                        if (allrows.moveToFirst()) {
                            do {
                                String ID = allrows.getString(0);
                                String NAme = allrows.getString(1);
                                String BAr = allrows.getString(16);
                                String PRiCe = allrows.getString(2);
                                String QtY = allrows.getString(3);
                                String PlaCe = allrows.getString(2);
                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                countryList.add(NAME);
                                //countryList.add(PLACE);
                            } while (allrows.moveToNext());
                        }
                        allrows.close();


                    }

                    //db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
                fr.close();
            }

            return null;
        }

        // Show Progress bar before downloading Music
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            // Shows Progress Bar Dialog and then call doInBackground method
            //showDialog(progress_bar_type);

            dialog.setMessage("Loading");
            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);

            dialog.setMax(1000);
            //Set the current progress to zero
            dialog.setProgress(0);
            dialog.show();
        }


        @Override
        protected void onPostExecute(Void result) {
            dialog.dismiss();

            listView.setAdapter(null);
//            if (dialog.isShowing()){
//                //Toast.makeText(getActivity(), "showing", Toast.LENGTH_SHORT).show();
//            }else {
            dataAdapter = new MyCustomAdapter(getActivity(),
                    R.layout.items_list_details, countryList);

            // Assign adapter to ListView
            listView.setAdapter(dataAdapter);
            //Toast.makeText(getActivity(), "11", Toast.LENGTH_SHORT).show();
            //}
        }
    }

    class DownloadMusicfromInternet1 extends AsyncTask<Void, Integer, Void> {
        private ProgressDialog dialog = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);

        @Override
        protected Void doInBackground(Void... params) {
            countryList.clear();
            try {
                //Get the current thread's token
                synchronized (this) {
                    //Initialize an integer (that will act as a counter) to zero
                    int counter = 0;
                    //While the counter is smaller than four
                    while (counter <= 4) {
                        //Wait 850 milliseconds
                        this.wait(300);
                        //Increment the counter
                        counter++;
                        //Set the current progress.
                        //This value is going to be passed to the onProgressUpdate() method.
                        publishProgress(counter * 25);
                    }
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }


            if (selected.equals("All")){
                //Toast.makeText(getActivity(), " "+selected, Toast.LENGTH_SHORT).show();
                Cursor fr = db.rawQuery("SELECT * FROM Items", null);
                int numberOfRows = fr.getCount();
                //countryList = new ArrayList<Country_items>();
                try {
                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    //db.execSQL("PRAGMA synchronous=OFF");
                    int limit = 0;
                    if (numberOfRows > 100){
                        while (limit + 100 < numberOfRows) {
                            String statement = "SELECT * FROM Items LIMIT '"+ limit+"', 100";
                            Cursor allrows = db.rawQuery(statement, null);
                            System.out.println("COUNT : " + allrows.getCount());


                            //Country_items country = new Country_items(name, name, name, name);

                            if (allrows.moveToFirst()) {
                                do {
                                    String ID = allrows.getString(0);
                                    String NAme = allrows.getString(1);
                                    String BAr = allrows.getString(16);
                                    String PRiCe = allrows.getString(2);
                                    String QtY = allrows.getString(3);
                                    String PlaCe = allrows.getString(2);
                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                    countryList.add(NAME);
                                    //countryList.add(PLACE);
                                } while (allrows.moveToNext());
                            }
                            allrows.close();
                            limit += 100;
                        }
                        int news = numberOfRows - limit;
                        if (news == 0){
                            //Toast.makeText(getActivity(), "limit is b " + limit, Toast.LENGTH_SHORT).show();
                        }else {
                            String statement = "SELECT * FROM Items LIMIT '"+ news+"' OFFSET '"+limit+"'";
                            Cursor allrows = db.rawQuery(statement, null);
                            System.out.println("COUNT : " + allrows.getCount());


                            //Country_items country = new Country_items(name, name, name, name);

                            if (allrows.moveToFirst()) {
                                do {
                                    String ID = allrows.getString(0);
                                    String NAme = allrows.getString(1);
                                    String BAr = allrows.getString(16);
                                    String PRiCe = allrows.getString(2);
                                    String QtY = allrows.getString(3);
                                    String PlaCe = allrows.getString(2);
                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                    countryList.add(NAME);
                                    //countryList.add(PLACE);
                                } while (allrows.moveToNext());
                            }
                            allrows.close();
                        }
                    }else {
                        String statement = "SELECT * FROM Items";
                        Cursor allrows = db.rawQuery(statement, null);
                        System.out.println("COUNT : " + allrows.getCount());


                        //Country_items country = new Country_items(name, name, name, name);

                        if (allrows.moveToFirst()) {
                            do {
                                String ID = allrows.getString(0);
                                String NAme = allrows.getString(1);
                                String BAr = allrows.getString(16);
                                String PRiCe = allrows.getString(2);
                                String QtY = allrows.getString(3);
                                String PlaCe = allrows.getString(2);
                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                countryList.add(NAME);
                                //countryList.add(PLACE);
                            } while (allrows.moveToNext());
                        }
                        allrows.close();
                    }


                    //db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
                fr.close();
            }else {
                //Toast.makeText(getActivity(), " "+selected, Toast.LENGTH_SHORT).show();
                Cursor fr = db.rawQuery("SELECT * FROM Items", null);
                int numberOfRows = fr.getCount();
                //countryList = new ArrayList<Country_items>();
                try {
                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    //db.execSQL("PRAGMA synchronous=OFF");
                    int limit = 0;
                    if (numberOfRows > 100){
                        while (limit + 100 < numberOfRows) {
                            String statement = "SELECT * FROM Items WHERE category = '"+selected+"' LIMIT '"+ limit+"', 100";
                            Cursor allrows = db.rawQuery(statement, null);
                            System.out.println("COUNT : " + allrows.getCount());

                            if (allrows.moveToFirst()) {
                                do {
                                    String ID = allrows.getString(0);
                                    String NAme = allrows.getString(1);
                                    String BAr = allrows.getString(16);
                                    String PRiCe = allrows.getString(2);
                                    String QtY = allrows.getString(3);
                                    String PlaCe = allrows.getString(2);
                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                    countryList.add(NAME);
                                    //countryList.add(PLACE);
                                } while (allrows.moveToNext());
                            }
                            allrows.close();
                            limit += 100;
                        }
                        int news = numberOfRows - limit;
                        if (news == 0){
                            //Toast.makeText(getActivity(), "limit is b " + limit, Toast.LENGTH_SHORT).show();
                        }else {
                            String statement = "SELECT * FROM Items WHERE category = '"+selected+"' LIMIT '"+ news+"' OFFSET '"+limit+"'";
                            Cursor allrows = db.rawQuery(statement, null);
                            System.out.println("COUNT : " + allrows.getCount());

                            if (allrows.moveToFirst()) {
                                do {
                                    String ID = allrows.getString(0);
                                    String NAme = allrows.getString(1);
                                    String BAr = allrows.getString(16);
                                    String PRiCe = allrows.getString(2);
                                    String QtY = allrows.getString(3);
                                    String PlaCe = allrows.getString(2);
                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                    countryList.add(NAME);
                                    //countryList.add(PLACE);
                                } while (allrows.moveToNext());
                            }
                            allrows.close();
                        }
                    }else {
                        String statement = "SELECT * FROM Items WHERE category = '"+selected+"'";
                        Cursor allrows = db.rawQuery(statement, null);
                        System.out.println("COUNT : " + allrows.getCount());

                        if (allrows.moveToFirst()) {
                            do {
                                String ID = allrows.getString(0);
                                String NAme = allrows.getString(1);
                                String BAr = allrows.getString(16);
                                String PRiCe = allrows.getString(2);
                                String QtY = allrows.getString(3);
                                String PlaCe = allrows.getString(2);
                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                countryList.add(NAME);
                                //countryList.add(PLACE);
                            } while (allrows.moveToNext());
                        }
                        allrows.close();
                    }


                    //db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
                fr.close();
            }

            return null;
        }

        // Show Progress bar before downloading Music
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            // Shows Progress Bar Dialog and then call doInBackground method
            //showDialog(progress_bar_type);

            dialog.setMessage("Loading");
            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);

            dialog.setMax(1000);
            //Set the current progress to zero
            dialog.setProgress(0);
            //Display the progress dialog
//            dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
//                @Override
//                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
//                    if (keyCode == KeyEvent.KEYCODE_BACK) {
//                        //dialog.dismiss();
//                        //row.setBackgroundResource(0);
//                        return true;
//                    }
//                    return false;
//                }
//            });
            dialog.show();
        }


        @Override
        protected void onPostExecute(Void result) {
            // Dismiss the dialog after the Music file was downloaded
            //dismissDialog(progress_bar_type);
            //Toast.makeText(getActivity(), "Download complete, playing Music", Toast.LENGTH_LONG).show();
            // Play the music
            //playMusic();
            dialog.dismiss();


//            dataAdapter = new MyCustomAdapter(getActivity(),
//                    R.layout.items_list_details, countryList);
//
//            // Assign adapter to ListView
//            listView.setAdapter(dataAdapter);

            //dataAdapter.notifyDataSetChanged();


//            if (dialog.isShowing()){
//                //Toast.makeText(getActivity(), "showing", Toast.LENGTH_SHORT).show();
//            }else {
            dataAdapter = new MyCustomAdapter(getActivity(),
                    R.layout.items_list_details, countryList);

            // Assign adapter to ListView
            listView.setAdapter(dataAdapter);
            //}
            //Toast.makeText(getActivity(), "22", Toast.LENGTH_SHORT).show();
        }
    }



//    class DownloadMusicfromInternet2 extends AsyncTask<Void, Integer, Void> {
//        private ProgressDialog dialog = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);
//
//        @Override
//        protected Void doInBackground(Void... params) {
//            try {
//                FileReader file = new FileReader(filepath);
//                BufferedReader buffer = new BufferedReader(file);
//
//                String line = "";
////                        db.beginTransaction();
//
//                while ((line = buffer.readLine()) != null) {
////                            Toast.makeText(getActivity(), "updated", Toast.LENGTH_SHORT).show();
//
//
//                    String[] str = line.split(",", 28);  // defining 3 columns with null or blank field //values acceptance
//
//                    //Id, Company,Name,Price
//
//                    String imp1 = "0", imp2 = "0";
//
//                    String name = str[0];
//                    String issn = str[1];
//                    Log.e("name",name);
//                    Log.e("issn",issn);
//
//                    String imp = str[2];
//                    imp1 = str[3];
//                    imp2 = str[4];
//                    String imp3 = str[5];
//                    String imp4 = str[6];
//                    String imp41 = str[7];
//                    String imp5 = str[8];
//                    String imp6 = str[9];
//                    String imp7 = str[10];
//                    String imp8 = str[11];
//                    String c_tax2 = str[12];
//                    String c_taxv2 = str[13];
//                    String c_tax3 = str[14];
//                    String c_taxv3 = str[15];
//                    String c_tax4 = str[16];
//                    String c_taxv4 = str[17];
//                    String c_tax5 = str[18];
//                    String c_taxv5 = str[19];
//                    String c_var2 = str[20];
//                    String c_varv2 = str[21];
//                    String c_var3 = str[22];
//                    String c_varv3 = str[23];
//                    String c_var4 = str[24];
//                    String c_varv4 = str[25];
//                    String c_var5 = str[26];
//                    String c_varv5 = str[27];
//
//
////                    TextView tv = new TextView(getActivity());
////                    tv.setText(name);
////
////                    TextView tv1 = new TextView(getActivity());
////                    tv1.setText(issn);
////
////                    TextView tv2 = new TextView(getActivity());
////                    tv2.setText(imp);
////
////                    TextView tv3 = new TextView(getActivity());
////                    tv3.setText(imp1);
////
////                    TextView tv4 = new TextView(getActivity());
////                    tv4.setText(imp2);
////
////                    TextView tv5 = new TextView(getActivity());
////                    tv5.setText(imp3);
////
////                    TextView tv6 = new TextView(getActivity());
////                    tv6.setText(imp4);
////
////                    TextView tv7 = new TextView(getActivity());
////                    tv7.setText(imp41);
////
////                    TextView tv8 = new TextView(getActivity());
////                    tv8.setText(imp5);
////
////                    TextView tv9 = new TextView(getActivity());
////                    tv9.setText(imp6);
////
////                    TextView tv10 = new TextView(getActivity());
////                    tv10.setText(imp7);
//
//
//                    if (name.contains("\"")) {
//                        name = name.replaceAll("\"", "");
//                    }
//
//                    if (issn.contains("\"")) {
//                        issn = issn.replaceAll("\"", "");
//                    }
//
//                    if (issn.contains("'")) {
//                        issn = issn.replaceAll("'", "");
//                    }
//
//                    if (issn.contains("&")) {
//                        issn = issn.replaceAll("&", " and ");
//                    }
//
//                    if (imp.contains("\"")) {
//                        imp = imp.replaceAll("\"", "");
//                    }
//
//                    if (imp1.contains("\"")) {
//                        imp1 = imp1.replaceAll("\"", "");
//                    }
//
//                    if (imp2.contains("\"")) {
//                        imp2 = imp2.replaceAll("\"", "");
//                    }
//
//                    if (imp3.contains("\"")) {
//                        imp3 = imp3.replaceAll("\"", "");
//                    }
//
//                    if (imp4.contains("\"")) {
//                        imp4 = imp4.replaceAll("\"", "");
//                    }
//
//                    if (c_tax2.contains("\"")) {
//                        c_tax2 = c_tax2.replaceAll("\"", "");
//                    }
//
//                    if (c_tax3.contains("\"")) {
//                        c_tax3 = c_tax3.replaceAll("\"", "");
//                    }
//
//                    if (c_tax4.contains("\"")) {
//                        c_tax4 = c_tax4.replaceAll("\"", "");
//                    }
//
//                    if (c_tax5.contains("\"")) {
//                        c_tax5 = c_tax5.replaceAll("\"", "");
//                    }
//
//                    if (imp41.contains("\"")) {
//                        imp41 = imp41.replaceAll("\"", "");
//                    }
//
//                    if (imp5.contains("\"")) {
//                        imp5 = imp5.replaceAll("\"", "");
//                    }
//
//                    if (imp6.contains("\"")) {
//                        imp6 = imp6.replaceAll("\"", "");
//                    }
//
//                    if (imp7.contains("\"")) {
//                        imp7 = imp7.replaceAll("\"", "");
//                    }
//
//
//                    if (issn.equals("Itemname")) {
//
//                    } else {
//
//                        if (imp1.equals("")){
//                            imp1 = "0";
//                        }
//                        if (imp2.equals("")){
//                            imp2 = "0";
//                        }
//
//                        float nb = Float.parseFloat(imp1) + Float.parseFloat(imp2);
//                        Cursor cursor = db.rawQuery("SELECT * FROM Items", null);
//                        if (cursor.moveToFirst()) {
//                            do {
//                                String id = cursor.getString(0);
//                                String id_nam = cursor.getString(1);
//
//                                if (name.equals(id)){
//
////                                        Toast.makeText(getActivity(), "csv " + name, Toast.LENGTH_SHORT).show();
////                                        Toast.makeText(getActivity(), "dbb " + id, Toast.LENGTH_SHORT).show();
//
////                                        Toast.makeText(getActivity(), "name is "+issn, Toast.LENGTH_SHORT).show();
//
//                                    Cursor cb = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+issn+"'", null);
//                                    if (cb.moveToFirst()){
////                                            Toast.makeText(getActivity(), "11", Toast.LENGTH_SHORT).show();
//                                        Log.d("itemname", issn);
////                                            Toast.makeText(getActivity(), "12", Toast.LENGTH_SHORT).show();
////                                              contentValues.put("_id", name);
//                                        ContentValues contentValues = new ContentValues();
////                                        String str1 = issn.substring(0, 2);
////                                        String str2 = str1.toUpperCase();
////                                        contentValues.put("image_text", str2);
////                                        contentValues.put("image", "");
////                                            contentValues.put("itemname", issn);
////                                            Toast.makeText(getActivity(), "13", Toast.LENGTH_SHORT).show();
//                                        if (imp.equals("")){
//                                            contentValues.put("price", "0");
//                                        } else{
//                                            contentValues.put("price", imp);
//                                        }
////                                            Toast.makeText(getActivity(), "14", Toast.LENGTH_SHORT).show();
//                                        contentValues.put("stockquan", String.valueOf(nb));
////                                                contentValues.put("up_quan", imp2);
//                                        if (imp3.equals("")){
//                                            contentValues.put("category", "None");
//                                        }else {
//                                            contentValues.put("category", imp3);
//                                        }
////                                            Toast.makeText(getActivity(), "15", Toast.LENGTH_SHORT).show();
//
//                                        if (imp4.equals("")){
//                                            contentValues.put("itemtax", "None");
//                                            contentValues.put("tax_value", "");
//                                        }else {
//                                            contentValues.put("itemtax", imp4+"("+imp41+"%)");
//                                            contentValues.put("tax_value", imp41);
//                                        }
//
//                                        if (c_tax2.equals("")){
//                                            contentValues.put("itemtax2", "None");
//                                            contentValues.put("tax_value2", "");
//                                        }else {
//                                            contentValues.put("itemtax2", c_tax2+"("+c_taxv2+"%)");
//                                            contentValues.put("tax_value2", c_taxv2);
//                                        }
//
//                                        if (c_tax3.equals("")){
//                                            contentValues.put("itemtax3", "None");
//                                            contentValues.put("tax_value3", "");
//                                        }else {
//                                            contentValues.put("itemtax3", c_tax3+"("+c_taxv3+"%)");
//                                            contentValues.put("tax_value3", c_taxv3);
//                                        }
//
//                                        if (c_tax4.equals("")){
//                                            contentValues.put("itemtax4", "None");
//                                            contentValues.put("tax_value4", "");
//                                        }else {
//                                            contentValues.put("itemtax4", c_tax4+"("+c_taxv4+"%)");
//                                            contentValues.put("tax_value4", c_taxv4);
//                                        }
//
//                                        if (c_tax5.equals("")){
//                                            contentValues.put("itemtax5", "None");
//                                            contentValues.put("tax_value5", "");
//                                        }else {
//                                            contentValues.put("itemtax5", c_tax5+"("+c_taxv5+"%)");
//                                            contentValues.put("tax_value5", c_taxv5);
//                                        }
//
//                                        if (c_var2.equals("")){
//                                            contentValues.put("variant2", "");
//                                            contentValues.put("variant_price2", "");
//                                        }else {
//                                            contentValues.put("variant1", "Regular");
//                                            contentValues.put("variant_price1", imp);
//                                            contentValues.put("variant2", c_var2);
//                                            contentValues.put("variant_price2", c_varv2);
//                                        }
//
//                                        if (c_var3.equals("")){
//                                            contentValues.put("variant3", "");
//                                            contentValues.put("variant_price3", "");
//                                        }else {
//                                            contentValues.put("variant1", "Regular");
//                                            contentValues.put("variant_price1", imp);
//                                            contentValues.put("variant3", c_var3);
//                                            contentValues.put("variant_price3", c_varv3);
//                                        }
//
//                                        if (c_var4.equals("")){
//                                            contentValues.put("variant4", "");
//                                            contentValues.put("variant_price4", "");
//                                        }else {
//                                            contentValues.put("variant1", "Regular");
//                                            contentValues.put("variant_price1", imp);
//                                            contentValues.put("variant4", c_var4);
//                                            contentValues.put("variant_price4", c_varv4);
//                                        }
//
//                                        if (c_var5.equals("")){
//                                            contentValues.put("variant5", "");
//                                            contentValues.put("variant_price5", "");
//                                        }else {
//                                            contentValues.put("variant1", "Regular");
//                                            contentValues.put("variant_price1", imp);
//                                            contentValues.put("variant5", c_var5);
//                                            contentValues.put("variant_price5", c_varv5);
//                                        }
//
////                                            Toast.makeText(getActivity(), "16", Toast.LENGTH_SHORT).show();
////                                                contentValues.put("tax_value", imp41);
//                                        if (imp5.equals("")){
//                                            contentValues.put("disc_type", "%");
//                                        }else {
//                                            contentValues.put("disc_type", imp5);
//                                        }
////                                            Toast.makeText(getActivity(), "17", Toast.LENGTH_SHORT).show();
//                                        if (imp6.equals("")){
//                                            contentValues.put("disc_value", "0");
//                                        }else {
//                                            contentValues.put("disc_value", imp6);
//                                        }
////                                            Toast.makeText(getActivity(), "18", Toast.LENGTH_SHORT).show();
//                                        contentValues.put("barcode_value", imp7);
////                                            Toast.makeText(getActivity(), "19", Toast.LENGTH_SHORT).show();
//                                        contentValues.put("favourites", "no");
////                                            Toast.makeText(getActivity(), "110", Toast.LENGTH_SHORT).show();
////                                                db.insert("Items", null, contentValues);
//
////                                            Toast.makeText(getActivity(), "1 inserted "+issn+" "+imp+" "+String.valueOf(nb), Toast.LENGTH_SHORT).show();
//
//                                        if (imp8.toString().equals("Unit") || imp8.toString().equals("unit")){
//                                            contentValues.put("unit_type", "Unit");
//                                        }else {
//                                            contentValues.put("unit_type", "Weight");
//                                        }
//
//                                        String where = "_id = '" + id + "' ";
//                                        String whereeer = "itemname = '" + id_nam + "'";
//                                        //  db.update("Items", contentValues, where, new String[]{});
//                                        db.update("Items_Virtual", contentValues, whereeer, new String[]{});
//
////                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
////                                        getActivity().getContentResolver().update(contentUri, contentValues,where,new String[]{});
////                                        resultUri = new Uri.Builder()
////                                                .scheme("content")
////                                                .authority(StubProviderApp.AUTHORITY)
////                                                .path("Items")
////                                                .appendQueryParameter("operation", "update")
////                                                .appendQueryParameter("_id", id)
////                                                .build();
////                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//
//                                        db.update("Items", contentValues, where, new String[]{});
//                                    }else {
////                                            Toast.makeText(getActivity(), "1", Toast.LENGTH_SHORT).show();
//                                        Log.d("itemname", issn);
////                                            Toast.makeText(getActivity(), "2", Toast.LENGTH_SHORT).show();
////                                              contentValues.put("_id", name);
//                                        ContentValues contentValues = new ContentValues();
////                                        String str1 = issn.substring(0, 2);
////                                        String str2 = str1.toUpperCase();
////                                        contentValues.put("image_text", str2);
////                                        contentValues.put("image", "");
//                                        contentValues.put("itemname", issn);
////                                            Toast.makeText(getActivity(), "3", Toast.LENGTH_SHORT).show();
//                                        if (imp.equals("")){
//                                            contentValues.put("price", "0");
//                                        } else{
//                                            contentValues.put("price", imp);
//                                        }
////                                            Toast.makeText(getActivity(), "4", Toast.LENGTH_SHORT).show();
//                                        contentValues.put("stockquan", String.valueOf(nb));
////                                                contentValues.put("up_quan", imp2);
//                                        if (imp3.equals("")){
//                                            contentValues.put("category", "None");
//                                        }else {
//                                            contentValues.put("category", imp3);
//                                        }
////                                            Toast.makeText(getActivity(), "5", Toast.LENGTH_SHORT).show();
//
//                                        if (imp4.equals("")){
//                                            contentValues.put("itemtax", "None");
//                                            contentValues.put("tax_value", "");
//                                        }else {
//                                            contentValues.put("itemtax", imp4+"("+imp41+"%)");
//                                            contentValues.put("tax_value", imp41);
//                                        }
//
//                                        if (c_tax2.equals("")){
//                                            contentValues.put("itemtax2", "None");
//                                            contentValues.put("tax_value2", "");
//                                        }else {
//                                            contentValues.put("itemtax2", c_tax2+"("+c_taxv2+"%)");
//                                            contentValues.put("tax_value2", c_taxv2);
//                                        }
//
//                                        if (c_tax3.equals("")){
//                                            contentValues.put("itemtax3", "None");
//                                            contentValues.put("tax_value3", "");
//                                        }else {
//                                            contentValues.put("itemtax3", c_tax3+"("+c_taxv3+"%)");
//                                            contentValues.put("tax_value3", c_taxv3);
//                                        }
//
//                                        if (c_tax4.equals("")){
//                                            contentValues.put("itemtax4", "None");
//                                            contentValues.put("tax_value4", "");
//                                        }else {
//                                            contentValues.put("itemtax4", c_tax4+"("+c_taxv4+"%)");
//                                            contentValues.put("tax_value4", c_taxv4);
//                                        }
//
//                                        if (c_tax5.equals("")){
//                                            contentValues.put("itemtax5", "None");
//                                            contentValues.put("tax_value5", "");
//                                        }else {
//                                            contentValues.put("itemtax5", c_tax5+"("+c_taxv5+"%)");
//                                            contentValues.put("tax_value5", c_taxv5);
//                                        }
//
//                                        if (c_var2.equals("")){
//                                            contentValues.put("variant2", "");
//                                            contentValues.put("variant_price2", "");
//                                        }else {
//                                            contentValues.put("variant1", "Regular");
//                                            contentValues.put("variant_price1", imp);
//                                            contentValues.put("variant2", c_var2);
//                                            contentValues.put("variant_price2", c_varv2);
//                                        }
//
//                                        if (c_var3.equals("")){
//                                            contentValues.put("variant3", "");
//                                            contentValues.put("variant_price3", "");
//                                        }else {
//                                            contentValues.put("variant1", "Regular");
//                                            contentValues.put("variant_price1", imp);
//                                            contentValues.put("variant3", c_var3);
//                                            contentValues.put("variant_price3", c_varv3);
//                                        }
//
//                                        if (c_var4.equals("")){
//                                            contentValues.put("variant4", "");
//                                            contentValues.put("variant_price4", "");
//                                        }else {
//                                            contentValues.put("variant1", "Regular");
//                                            contentValues.put("variant_price1", imp);
//                                            contentValues.put("variant4", c_var4);
//                                            contentValues.put("variant_price4", c_varv4);
//                                        }
//
//                                        if (c_var5.equals("")){
//                                            contentValues.put("variant5", "");
//                                            contentValues.put("variant_price5", "");
//                                        }else {
//                                            contentValues.put("variant1", "Regular");
//                                            contentValues.put("variant_price1", imp);
//                                            contentValues.put("variant5", c_var5);
//                                            contentValues.put("variant_price5", c_varv5);
//                                        }
//
////                                            Toast.makeText(getActivity(), "6", Toast.LENGTH_SHORT).show();
////                                                contentValues.put("tax_value", imp41);
//                                        if (imp5.equals("")){
//                                            contentValues.put("disc_type", "%");
//                                        }else {
//                                            contentValues.put("disc_type", imp5);
//                                        }
////                                            Toast.makeText(getActivity(), "7", Toast.LENGTH_SHORT).show();
//                                        if (imp6.equals("")){
//                                            contentValues.put("disc_value", "0");
//                                        }else {
//                                            contentValues.put("disc_value", imp6);
//                                        }
////                                            Toast.makeText(getActivity(), "8", Toast.LENGTH_SHORT).show();
//                                        contentValues.put("barcode_value", imp7);
////                                            Toast.makeText(getActivity(), "9", Toast.LENGTH_SHORT).show();
//                                        contentValues.put("favourites", "no");
////                                            Toast.makeText(getActivity(), "10", Toast.LENGTH_SHORT).show();
////                                                db.insert("Items", null, contentValues);
//
////                                            Toast.makeText(getActivity(), "inserted "+issn+" "+imp+" "+String.valueOf(nb), Toast.LENGTH_SHORT).show();
//
//                                        if (imp8.toString().equals("Unit") || imp8.toString().equals("unit")){
//                                            contentValues.put("unit_type", "Unit");
//                                        }else {
//                                            contentValues.put("unit_type", "Weight");
//                                        }
//
//                                        String where = "_id = '" + id + "' ";
//
//                                        String where1_v1 = "itemname = '" + id_nam + "'";
//                                        // db.update("Items", contentValues, where, new String[]{});
//                                        db.update("Items_Virtual", contentValues, where1_v1, new String[]{});
//
////                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
////                                        getActivity().getContentResolver().update(contentUri, contentValues,where,new String[]{});
////                                        resultUri = new Uri.Builder()
////                                                .scheme("content")
////                                                .authority(StubProviderApp.AUTHORITY)
////                                                .path("Items")
////                                                .appendQueryParameter("operation", "update")
////                                                .appendQueryParameter("_id", id)
////                                                .build();
////                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//
//                                        db.update("Items", contentValues, where, new String[]{});
//                                    }
//                                    cb.close();
////                                        break;
//
//                                }
//                            } while (cursor.moveToNext());
//                        }else {
//                            Cursor cb = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+issn+"'", null);
//                            if (cb.moveToFirst()){
//
//                            }else {
//                                ContentValues contentValues = new ContentValues();
//                                int itemname_leng = issn.length();
//                                String str1 = "";
//                                if (issn.length() <= 3){
//                                    str1 = issn.substring(0, 1);
//                                }else {
//                                    str1 = issn.substring(0, 2);
//                                }
//                                String str2 = str1.toUpperCase();
//                                contentValues.put("image_text", str2);
//                                contentValues.put("image", "");
//                                contentValues.put("itemname", issn);
////                                    contentValues.put("price", imp);
//                                if (imp.equals("")){
//                                    contentValues.put("price", "0");
//                                } else{
//                                    contentValues.put("price", imp);
//                                }
//                                contentValues.put("stockquan", String.valueOf(nb));
////                                                contentValues.put("up_quan", imp2);
//                                if (imp3.equals("")){
//                                    contentValues.put("category", "None");
//                                }else {
//                                    contentValues.put("category", imp3);
//                                }
//
//                                if (imp4.equals("") || imp4.equals("None") || imp4.equals("NONE")){
//                                    contentValues.put("itemtax", "None");
//                                    contentValues.put("tax_value", "");
//                                }else {
//                                    contentValues.put("itemtax", imp4+"("+imp41+"%)");
//                                    contentValues.put("tax_value", imp41);
//                                }
//
//                                if (c_tax2.equals("") || c_tax2.equals("None") || c_tax2.equals("NONE")){
//                                    contentValues.put("itemtax2", "None");
//                                    contentValues.put("tax_value2", "");
//                                }else {
//                                    contentValues.put("itemtax2", c_tax2+"("+c_taxv2+"%)");
//                                    contentValues.put("tax_value2", c_taxv2);
//                                }
//
//                                if (c_tax3.equals("") || c_tax3.equals("None") || c_tax3.equals("NONE")){
//                                    contentValues.put("itemtax3", "None");
//                                    contentValues.put("tax_value3", "");
//                                }else {
//                                    contentValues.put("itemtax3", c_tax3+"("+c_taxv3+"%)");
//                                    contentValues.put("tax_value3", c_taxv3);
//                                }
//
//                                if (c_tax4.equals("") || c_tax4.equals("None") || c_tax4.equals("NONE")){
//                                    contentValues.put("itemtax4", "None");
//                                    contentValues.put("tax_value4", "");
//                                }else {
//                                    contentValues.put("itemtax4", c_tax4+"("+c_taxv4+"%)");
//                                    contentValues.put("tax_value4", c_taxv4);
//                                }
//
//                                if (c_tax5.equals("") || c_tax5.equals("None") || c_tax5.equals("NONE")){
//                                    contentValues.put("itemtax5", "None");
//                                    contentValues.put("tax_value5", "");
//                                }else {
//                                    contentValues.put("itemtax5", c_tax5+"("+c_taxv5+"%)");
//                                    contentValues.put("tax_value5", c_taxv5);
//                                }
//
//                                if (c_var2.equals("")){
//                                    contentValues.put("variant2", "");
//                                    contentValues.put("variant_price2", "");
//                                }else {
//                                    contentValues.put("variant1", "Regular");
//                                    contentValues.put("variant_price1", imp);
//                                    contentValues.put("variant2", c_var2);
//                                    contentValues.put("variant_price2", c_varv2);
//                                }
//
//                                if (c_var3.equals("")){
//                                    contentValues.put("variant3", "");
//                                    contentValues.put("variant_price3", "");
//                                }else {
//                                    contentValues.put("variant1", "Regular");
//                                    contentValues.put("variant_price1", imp);
//                                    contentValues.put("variant3", c_var3);
//                                    contentValues.put("variant_price3", c_varv3);
//                                }
//
//                                if (c_var4.equals("")){
//                                    contentValues.put("variant4", "");
//                                    contentValues.put("variant_price4", "");
//                                }else {
//                                    contentValues.put("variant1", "Regular");
//                                    contentValues.put("variant_price1", imp);
//                                    contentValues.put("variant4", c_var4);
//                                    contentValues.put("variant_price4", c_varv4);
//                                }
//
//                                if (c_var5.equals("")){
//                                    contentValues.put("variant5", "");
//                                    contentValues.put("variant_price5", "");
//                                }else {
//                                    contentValues.put("variant1", "Regular");
//                                    contentValues.put("variant_price1", imp);
//                                    contentValues.put("variant5", c_var5);
//                                    contentValues.put("variant_price5", c_varv5);
//                                }
//
////                                                contentValues.put("tax_value", imp41);
//                                if (imp5.equals("")){
//                                    contentValues.put("disc_type", "%");
//                                }else {
//                                    contentValues.put("disc_type", imp5);
//                                }
//                                if (imp6.equals("")){
//                                    contentValues.put("disc_value", "0");
//                                }else {
//                                    contentValues.put("disc_value", imp6);
//                                }
//                                contentValues.put("barcode_value", imp7);
//                                contentValues.put("favourites", "no");
//
//                                if (imp8.toString().equals("Unit") || imp8.toString().equals("unit")){
//                                    contentValues.put("unit_type", "Unit");
//                                }else {
//                                    contentValues.put("unit_type", "Weight");
//                                }
//
//                                //  contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
//                                //  resultUri = getActivity().getContentResolver().insert(contentUri,contentValues);
//                                //  getActivity().getContentResolver().notifyChange(resultUri, null);
//                                //   db.insert("Items", null, contentValues);
//                                //  db.insert("Items_Virtual", null, contentValues);
//                                csvExportCVArrayList.add(new CSVExportCV(contentValues,"Items"));
//                                csvExportCVArrayList.add(new CSVExportCV(contentValues,"Items_virtual"));
////                                db.insert("Items", null, contentValues);
//                            }
//                            cb.close();
//                        }
//                        cursor.close();
//
////                            Toast.makeText(getActivity(), "category "+tv5.getText().toString(), Toast.LENGTH_SHORT).show();
//
//                        if (imp3.equals("") || imp3.length()<=0 || imp3.equals("None")){
//
//                        }else {
//                            Cursor cursor2 = db.rawQuery("SELECT * FROM Hotel WHERE name = '" + imp3 + "'", null);
//                            if (cursor2.moveToFirst()) {
//
//                            } else {
//                                ContentValues contentValues = new ContentValues();
//                                contentValues.put("name", imp3);
//
////
////                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Hotel");
////                                resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
////                                getActivity().getContentResolver().notifyChange(resultUri, null);
//
//                                db.insert("Hotel", null, contentValues);
//                                csvExportCVArrayList.add(new CSVExportCV(contentValues,"Hotel"));
//
//                            }
//                            cursor2.close();
//                        }
//
////                            Toast.makeText(getActivity(), "tax "+tv6.getText().toString(), Toast.LENGTH_SHORT).show();
//
//                        if (imp4.equals("") || imp4.length()<=0 || imp4.equals("None")){
//
//                        }else {
//                            if (imp4.equals("")){
//
//                            }else {
//                                Cursor cursor31 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + imp4 + "(" + imp41 + "%)" + "'", null);
//                                if (cursor31.moveToFirst()) {
//
//                                } else {
//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", imp4 + "(" + imp41 + "%)");
//                                    contentValues.put("value", imp41);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    //    db.insert("Taxes", null, contentValues);
//                                    csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
////                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
////                                    resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
////                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//
//                                }
//                                cursor31.close();
//                            }
//
//                            if (c_tax2.equals("")){
//
//                            }else {
//                                Cursor cursor32 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax2 + "(" + c_taxv2 + "%)" + "'", null);
//                                if (cursor32.moveToFirst()) {
//
//                                } else {
//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax2 + "(" + c_taxv2 + "%)");
//                                    contentValues.put("value", c_taxv2);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    //  db.insert("Taxes", null, contentValues);
//                                    csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
//                                }
//                                cursor32.close();
//                            }
//
//                            if (c_tax3.equals("")){
//
//                            }else {
//                                Cursor cursor33 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax3 + "(" + c_taxv3 + "%)" + "'", null);
//                                if (cursor33.moveToFirst()) {
//
//                                } else {
//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax3 + "(" + c_taxv3 + "%)");
//                                    contentValues.put("value", c_taxv3);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    // db.insert("Taxes", null, contentValues);
//                                    csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
//                                }
//                                cursor33.close();
//                            }
//
//                            if (c_tax4.equals("")){
//
//                            }else {
//                                Cursor cursor34 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax4 + "(" + c_taxv4 + "%)" + "'", null);
//                                if (cursor34.moveToFirst()) {
//
//                                } else {
//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax4 + "(" + c_taxv4 + "%)");
//                                    contentValues.put("value", c_taxv4);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    //  db.insert("Taxes", null, contentValues);
//                                    csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
//                                }
//                                cursor34.close();
//                            }
//
//                            if (c_tax5.equals("")){
//
//                            }else {
//                                Cursor cursor35 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax5 + "(" + c_taxv5 + "%)" + "'", null);
//                                if (cursor35.moveToFirst()) {
//
//                                } else {
//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax5 + "(" + c_taxv5 + "%)");
//                                    contentValues.put("value", c_taxv5);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    // db.insert("Taxes", null, contentValues);
//                                    csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
//                                }
//                                cursor35.close();
//                            }
//                        }
//
//
//                        Cursor filter_cat2 = db.rawQuery("SELECT * FROM Hotel1", null);
//                        if (filter_cat2.moveToFirst()){
//                            do {
//                                String cat_name = filter_cat2.getString(0);
//
//                                String where = "_id = '" + cat_name + "' ";
//                                db.delete("Hotel1", where, new String[]{});
//                            }while(filter_cat2.moveToNext());
//                        }
//                        filter_cat2.close();
//
//
//                        Cursor filter_cat3 = db.rawQuery("SELECT * FROM Hotel", null);
//                        if (filter_cat3.moveToFirst()){
////            do {
//                            String cat_name = filter_cat3.getString(1);
//                            String cat_value = filter_cat3.getString(5);
//
//                            ContentValues cv = new ContentValues();
//
//                            cv.put("name", "All");
//                            cv.put("value", "0");
//                            db.insert("Hotel1", null, cv);
//                            cv.put("name", "Favourites");
//                            cv.put("value", "1");
//                            //  db.insert("Hotel1", null, cv);
//                            csvExportCVArrayList.add(new CSVExportCV(cv,"Hotel1"));
////            }while(filter_cat3.moveToNext());
//                        }
//                        filter_cat3.close();
//
//                        int prio=3;
//                        Cursor filter_cat4 = db.rawQuery("SELECT * FROM Hotel order by value ASC", null);
//                        if (filter_cat4.moveToFirst()){
//                            do {
//                                String cat_name = filter_cat4.getString(1);
//                                String cat_value = filter_cat4.getString(5);
//
//                                ContentValues cv = new ContentValues();
//                                if (cat_name.toString().equals("All")){
////                    cv.put("name", "All");
//                                }else {
//                                    if (cat_name.toString().equals("Favourites")) {
////                    cv.put("name", "Favourites");
//                                    }else {
//
//                                        TextView cat_value1 = new TextView(getActivity());
//                                        cat_value1.setText(cat_value);
////                Cursor filter_cat5 = db.rawQuery("SELECT * FROM Hotel WHERE '"+cat_value1.getText().toString()+"' != '' ", null);
//                                        if (!cat_value1.getText().toString().equals("")) {
//                                            cv.put("name", cat_name);
//                                            cv.put("value", cat_value1.getText().toString());
//                                        }else{
//                                            cv.put("name", cat_name);
//                                            cv.put("value", prio+"");
//                                            prio++;
//                                        }
//
//                                        //db.insert("Hotel1", null, cv);
//                                        csvExportCVArrayList.add(new CSVExportCV(cv,"Hotel1"));
//                                    }
//                                }
//                            }while(filter_cat4.moveToNext());
//                        }
//                        filter_cat4.close();
//
//
//                        Cursor filter_cat = db.rawQuery("SELECT * FROM Hotel ORDER BY name ASC", null);
//                        if (filter_cat.moveToFirst()){
//                            do {
//                                String cat_name = filter_cat.getString(1);
//                                String cat_value = filter_cat.getString(5);
//
//                                ContentValues cv = new ContentValues();
//                                if (cat_name.toString().equals("All")){
////                    cv.put("name", "All");
//                                }else {
//                                    if (cat_name.toString().equals("Favourites")) {
////                    cv.put("name", "Favourites");
//                                    }else {
//
//                                        TextView cat_value1 = new TextView(getActivity());
//                                        cat_value1.setText(cat_value);
////                Cursor filter_cat5 = db.rawQuery("SELECT * FROM Hotel WHERE '"+cat_value1.getText().toString()+"' = '' ", null);
//                                        if (cat_value1.getText().toString().equals("")) {
//                                            cv.put("name", cat_name);
//                                            cv.put("value", cat_value1.getText().toString());
//                                        }else{
//                                            cv.put("name", cat_name);
//                                            cv.put("value", prio+"");
//                                        }
//                                        //  db.insert("Hotel1", null, cv);
//                                        csvExportCVArrayList.add(new CSVExportCV(cv,"Hotel1"));
//                                    }
//                                }
//                            }while(filter_cat.moveToNext());
//                        }
//                        filter_cat.close();
//
//                    }
//
//
//
//
//
//                }
//
//            } catch (SQLException e) {
//                Log.e("Error", e.getMessage());
//            } catch (IOException e) {
//                Dialog d = new Dialog(getActivity());
//                d.setTitle(e.getMessage() + "first");
//                d.show();
//                // db.endTransaction();
//            }
//
//            db.beginTransaction();
//            try {
//
//                for(int i=0;i<csvExportCVArrayList.size();i++){
//                    CSVExportCV csvExportCV= csvExportCVArrayList.get(i);
//
//                    ContentValues cv=csvExportCV.getCv();
//                    String tableName=csvExportCV.getTableName();
//                    db.insert(tableName, null, cv);
//                }
//
//
//                // do ALL your inserts here
//                db.setTransactionSuccessful();
//            } finally {
//                db.endTransaction();
//            }
//
//
//
//
//
//
//            return null;
//        }
//
//        // Show Progress bar before downloading Music
//        @Override
//        protected void onPreExecute() {
//            super.onPreExecute();
//            // Shows Progress Bar Dialog and then call doInBackground method
//            //showDialog(progress_bar_type);
//
//            dialog.setMessage("Uploading CSV data...\nIt may take few secs to few mins based on data size.");
//            dialog.setCanceledOnTouchOutside(false);
//            dialog.setCancelable(false);
//
//            dialog.setMax(1000);
//            //Set the current progress to zero
//            dialog.setProgress(0);
//            //Display the progress dialog
////            dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
////                @Override
////                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
////                    if (keyCode == KeyEvent.KEYCODE_BACK) {
////                        //dialog.dismiss();
////                        //row.setBackgroundResource(0);
////                        return true;
////                    }
////                    return false;
////                }
////            });
//            dialog.show();
//        }
//
//
//        @Override
//        protected void onPostExecute(Void result) {
//            // Dismiss the dialog after the Music file was downloaded
//            //dismissDialog(progress_bar_type);
//            //Toast.makeText(getActivity(), "Download complete, playing Music", Toast.LENGTH_LONG).show();
//            // Play the music
//            //playMusic();
//            dialog.dismiss();
//
//            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//
//            if (!spinner.getSelectedItem().toString().equals("All")) {
//                //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
//                countryList = new ArrayList<Country_items>();
//                try {
////                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//                    Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "'", null);
//                    System.out.println("COUNT : " + allrows.getCount());
//
//
//                    //Country_items country = new Country_items(name, name, name, name);
//
//                    if (allrows.moveToFirst()) {
//                        do {
//                            String ID = allrows.getString(0);
//                            String NAme = allrows.getString(1);
//                            String BAr = allrows.getString(16);
//                            String PRiCe = allrows.getString(2);
//                            String QtY = allrows.getString(3);
//                            String PlaCe = allrows.getString(2);
//                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
//                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
//                            countryList.add(NAME);
//                            //countryList.add(PLACE);
//                        } while (allrows.moveToNext());
//                    }
//                    allrows.close();
////                                db.close();
//                } catch (Exception e) {
//                    Toast.makeText(getActivity(), "Error encountered.",
//                            Toast.LENGTH_LONG);
//                }
//            }
//            if (spinner.getSelectedItem().toString().equals("All")) {
//                //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
//                countryList = new ArrayList<Country_items>();
//                try {
////                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
//                    System.out.println("COUNT : " + allrows.getCount());
//
//
//                    //Country_items country = new Country_items(name, name, name, name);
//
//                    if (allrows.moveToFirst()) {
//                        do {
//                            String ID = allrows.getString(0);
//                            String NAme = allrows.getString(1);
//                            String BAr = allrows.getString(16);
//                            String PRiCe = allrows.getString(2);
//                            String QtY = allrows.getString(3);
//                            String PlaCe = allrows.getString(2);
//                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
//                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
//                            countryList.add(NAME);
//                            //countryList.add(PLACE);
//                        } while (allrows.moveToNext());
//                    }
//                    allrows.close();
////                                db.close();
//                } catch (Exception e) {
//                    Toast.makeText(getActivity(), "Error encountered.",
//                            Toast.LENGTH_LONG);
//                }
//            }
//
//            dataAdapter = new MyCustomAdapter(getActivity(),
//                    R.layout.items_list_details, countryList);
////                            final ListView listView = (ListView) rootview.findViewById(R.id.listView);
//            // Assign adapter to ListView
//            listView.setAdapter(dataAdapter);
//
//            ArrayList<String> my_arrayy = getTableValues2();
//            final ArrayAdapter my_Adapterr = new ArrayAdapter(getActivity(), R.layout.spinner_row,
//                    my_arrayy);
//            spinner.setAdapter(my_Adapterr);
//
//        }
//    }

    class DownloadMusicfromInternet2 extends AsyncTask<Void, Integer, Void> {
        private ProgressDialog dialog = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);

        @Override
        protected Void doInBackground(Void... params) {

            my_array_id = new ArrayList<String>();
            my_array_itemname = new ArrayList<String>();
            my_array_comma = new ArrayList<String>();
            my_array_spec_char = new ArrayList<String>();
            my_array_exponen = new ArrayList<String>();


            try {
                System.out.println("inside download method first" );
                FileReader file0 = new FileReader(filepath);
                BufferedReader buffer0 = new BufferedReader(file0);
                String line0 = "";
                System.out.println("inside download method" );

                while ((line0 = buffer0.readLine()) != null) {
                    String[] str1 = line0.split(",", 30);

                    int cou0 = StringUtils.countMatches(line0, ",");
                    System.out.println("cou0 " +cou0 +"  " +line0);
                    System.out.println("cou0 " +str1[0].toString());

//                    if (str1[0].toString().equals("")) {
//                        i_corre_forma = 1;
//                        break;
//                    }


//                    String tmp = tv.getText().toString();
//                    if (tv.getText().toString().equals())
//                    tmp.replace("\"", "");
//                    if (tv.getText().toString().length() <= 1) {
//                        i_corre_forma = 1;
////                        break;
//                    }
//
//                    if (tv.getText().toString().equalsIgnoreCase("Id")) {
//                        i_corre_forma = 0;
////                        break;
//                    }else {
//                        i_corre_forma = 1;
//                    }
//
//
////                    TextView tv1 = new TextView(getActivity());
//                    tv1.setText(imp1);
//                    if (tv1.getText().toString().equalsIgnoreCase("Itemname")) {
//                        i_corre_forma = 0;
////                        break;
//                    }else {
//                        i_corre_forma = 1;
//                    }

                    if (cou0 == 29) {

                        String imp = str1[0];
                        String imp1 = str1[1];
                        String imp2 = str1[2];
                        String imp3 = str1[3];
                        String imp4 = str1[4];
                        String imp5 = str1[5];
                        String imp6 = str1[6];
                        String imp7 = str1[7];
                        String imp8 = str1[8];
                        String imp9 = str1[9];
                        String imp10 = str1[10];
                        String imp11 = str1[11];
                        String imp12 = str1[12];
                        String imp13 = str1[13];
                        String imp14 = str1[14];
                        String imp15 = str1[15];
                        String imp16 = str1[16];
                        String imp17 = str1[17];
                        String imp18 = str1[18];
                        String imp19 = str1[19];
                        String imp20 = str1[20];
                        String imp21 = str1[21];
                        String imp22 = str1[22];
                        String imp23 = str1[23];
                        String imp24 = str1[24];
                        String imp25 = str1[25];
                        String imp26 = str1[26];
                        String imp27 = str1[27];
                        String imp28 = str1[28];
                        String imp29 = str1[29];
                        TextView tv = new TextView(getActivity());
                        TextView tv1 = new TextView(getActivity());
                        TextView tv2 = new TextView(getActivity());
                        TextView tv3 = new TextView(getActivity());
                        TextView tv4 = new TextView(getActivity());
                        TextView tv5 = new TextView(getActivity());
                        TextView tv6 = new TextView(getActivity());
                        TextView tv7 = new TextView(getActivity());
                        TextView tv8 = new TextView(getActivity());
                        TextView tv9 = new TextView(getActivity());
                        TextView tv10 = new TextView(getActivity());
                        TextView tv11 = new TextView(getActivity());
                        TextView tv12 = new TextView(getActivity());
                        TextView tv13 = new TextView(getActivity());
                        TextView tv14 = new TextView(getActivity());
                        TextView tv15 = new TextView(getActivity());
                        TextView tv16 = new TextView(getActivity());
                        TextView tv17 = new TextView(getActivity());
                        TextView tv18 = new TextView(getActivity());
                        TextView tv19 = new TextView(getActivity());
                        TextView tv20 = new TextView(getActivity());
                        TextView tv21 = new TextView(getActivity());
                        TextView tv22 = new TextView(getActivity());
                        TextView tv23 = new TextView(getActivity());
                        TextView tv24 = new TextView(getActivity());
                        TextView tv25 = new TextView(getActivity());
                        TextView tv26 = new TextView(getActivity());
                        TextView tv27 = new TextView(getActivity());
                        TextView tv28 = new TextView(getActivity());
                        TextView tv29 = new TextView(getActivity());
                        tv.setText(imp);
                        tv1.setText(imp1);
                        tv2.setText(imp2);
                        tv3.setText(imp3);
                        tv4.setText(imp4);
                        tv5.setText(imp5);
                        tv6.setText(imp6);
                        tv7.setText(imp7);
                        tv8.setText(imp8);
                        tv9.setText(imp9);
                        tv10.setText(imp10);
                        tv11.setText(imp11);
                        tv12.setText(imp12);
                        tv13.setText(imp13);
                        tv14.setText(imp14);
                        tv15.setText(imp15);
                        tv16.setText(imp16);
                        tv17.setText(imp17);
                        tv18.setText(imp18);
                        tv19.setText(imp19);
                        tv20.setText(imp20);
                        tv21.setText(imp21);
                        tv22.setText(imp22);
                        tv23.setText(imp23);
                        tv24.setText(imp24);
                        tv25.setText(imp25);
                        tv26.setText(imp26);
                        tv27.setText(imp27);
                        tv28.setText(imp28);
                        tv29.setText(imp29);

                        String hi = tv.getText().toString()+""+tv1.getText().toString()+""+tv2.getText().toString()+""+tv3.getText().toString()
                                +""+tv4.getText().toString()+""+tv5.getText().toString()+""+tv6.getText().toString()+""+tv7.getText().toString()+""+tv8.getText().toString()
                                +""+tv9.getText().toString()+""+tv10.getText().toString()+""+tv11.getText().toString()+""+tv12.getText().toString()+""+tv13.getText().toString()
                                +""+tv14.getText().toString()+""+tv15.getText().toString()+""+tv16.getText().toString()+""+tv17.getText().toString()+""+tv18.getText().toString()
                                +""+tv19.getText().toString()+""+tv20.getText().toString()+""+tv21.getText().toString()+""+tv22.getText().toString()+""+tv23.getText().toString()
                                +""+tv24.getText().toString()+""+tv25.getText().toString()+""+tv26.getText().toString()+""+tv27.getText().toString()+""+tv28.getText().toString()+""+tv29.getText().toString();

                        TextView hi1 = new TextView(getActivity());
                        hi1.setText(hi);

//                        if (hi.toString().equals("Id,Itemname,Price,Qty,Update Qty,Category,Itemtax1,tax_value1,disc_type,disc_value,Barcode,Unit,Itemtax2,tax_value2,Itemtax3,tax_value3,Itemtax4,tax_value4,Itemtax5,tax_value5,Variant2,Variant_price2,Variant3,Variant_price3,Variant4,Variant_price4,Variant5,Variant_price5")){
//                            i_corre_forma = 0;//correct
//                        }else {
//                            i_corre_forma = 1;//wrong
//                        }
//                        if (hi.toString().equals("\"Id\"\"Itemname\"\"Price\"\"Qty\"\"Update Qty\"\"Category\"\"Itemtax1\"\"tax_value1\"\"disc_type\"\"disc_value\"\"Barcode\"\"Unit\"\"Itemtax2\"\"tax_value2\"\"Itemtax3\"\"tax_value3\"\"Itemtax4\"\"tax_value4\"\"Itemtax5\"\"tax_value5\"\"Variant2\"\"Variant_price2\"\"Variant3\"\"Variant_price3\"\"Variant4\"\"Variant_price4\"\"Variant5\"\"Variant_price5\"")) {
//                            i_corre_forma = 0;//correct
//                        }else {
//                            i_corre_forma = 1;//wrong
//                        }

                        if ((hi1.getText().toString().equalsIgnoreCase("\uFEFFIdItemnamePriceQtyUpdate QtyCategoryItemtax1tax_value1disc_typedisc_valueBarcodeUnitItemtax2tax_value2Itemtax3tax_value3Itemtax4tax_value4Itemtax5tax_value5Variant2Variant_price2Variant3Variant_price3Variant4Variant_price4Variant5Variant_price5Is_VegPacking_charges")) ||
                                (hi1.getText().toString().equalsIgnoreCase("\"Id\"\"Itemname\"\"Price\"\"Qty\"\"Update Qty\"\"Category\"\"Itemtax1\"\"tax_value1\"\"disc_type\"\"disc_value\"\"Barcode\"\"Unit\"\"Itemtax2\"\"tax_value2\"\"Itemtax3\"\"tax_value3\"\"Itemtax4\"\"tax_value4\"\"Itemtax5\"\"tax_value5\"\"Variant2\"\"Variant_price2\"\"Variant3\"\"Variant_price3\"\"Variant4\"\"Variant_price4\"\"Variant5\"\"Variant_price5\"\"Is_Veg\"\"Packing_charges\"")) ||
                                (line0.toString().equalsIgnoreCase("Id,Itemname,Price,Qty,Update Qty,Category,Itemtax1,tax_value1,disc_type,disc_value,Barcode,Unit,Itemtax2,tax_value2,Itemtax3,tax_value3,Itemtax4,tax_value4,Itemtax5,tax_value5,Variant2,Variant_price2,Variant3,Variant_price3,Variant4,Variant_price4,Variant5,Variant_price5,Is_Veg,Packing_charges")) ||
                                (hi1.getText().toString().equalsIgnoreCase("_iditemnamepriceQtyUpdate QtycategoryItemtax1taxvalue1disctypediscvalueBarcodeUnitItemtax2taxvalue2Itemtax3taxvalue3Itemtax4taxvalue4Itemtax5taxvalue5Variant2Variantprice2Variant3Variantprice3Variant4Variantprice4Variant5Variantprice5Is_VegPacking_charges ")) ||
                                (hi1.getText().toString().equalsIgnoreCase("_iditemnamepriceQtyUpdate QtycategoryItemtax1taxvalue1disctypediscvalueBarcodeUnitItemtax2taxvalue2Itemtax3taxvalue3Itemtax4taxvalue4Itemtax5taxvalue5Variant2Variantprice2Variant3Variantprice3Variant4Variantprice4Variant5Variantprice5Is_VegPacking_charges")) ||
                                (line0.equalsIgnoreCase("Id,Itemname,Price,Qty,Update Qty,Category,Itemtax1,tax_value1,disc_type,disc_value,Barcode,Unit,Itemtax2,tax_value2,Itemtax3,tax_value3,Itemtax4,tax_value4,Itemtax5,tax_value5,Variant2,Variant_price2,Variant3,Variant_price3,Variant4,Variant_price4,Variant5,Variant_price5,Is_Veg,Packing_charges"))) {
                            i_corre_forma = 0;//correct
                            break;
                        } else {
                            i_corre_forma = 1;//wrong
                            break;
                        }
                    }else {
                        i_corre_forma = 1;//wrong
                        break;
                    }


                }

                if (i_corre_forma == 1){

                }else {
                    FileReader file = new FileReader(filepath);
                    BufferedReader buffer = new BufferedReader(file);
                    String line = "";
                    String line_11 = "";

                    int row_id = 1;
                    while ((line = buffer.readLine()) != null) {
                        String[] str = line.split(",", 30);

                        int cou = StringUtils.countMatches(line, ",");
                        if (cou < 29){
                            line_11 = line_11+line;
                            String[] str_11 = line_11.split(",", 30);
                            String issn = str_11[1];
                            if (issn.contains("\"")) {
                                Log.e("issn", issn);
                            }else {
                                Log.e("issn", issn);
                            }
                        }else {
                            String name = str[0];
                            if (name.toString().equals("")) {

                            } else {
                                String issn = str[1];
                                Log.e("name", name);
                                Log.e("issn", issn);

                                if (issn.contains("\"") || issn.toString().equals("")) {

                                } else {
                                    if (issn.equalsIgnoreCase("Itemname")) {

                                    } else {
                                        if (name.toString().equals("")) {
                                            System.out.println("csv issue1 Id is empty " + row_id);
                                            i_csv = 1;
                                            i_csv_id_empty = 1;
                                            my_array_id.add(String.valueOf(row_id));
                                        }
                                    }
                                }
                                row_id =  row_id+1;
                            }
                        }

                    }


                    FileReader file_1 = new FileReader(filepath);
                    BufferedReader buffer_1 = new BufferedReader(file_1);
                    String line_1 = "";
                    String line_12 = "";

                    int row_itemname = 1;
                    while ((line_1 = buffer_1.readLine()) != null) {
                        String[] str = line_1.split(",", 30);
                        int cou = StringUtils.countMatches(line_1, ",");
                        if (cou < 29){
                            line_12 = line_12+line_1;
                            String[] str_11 = line_12.split(",", 30);
                            String issn = str_11[1];
                            if (issn.contains("\"")) {
                                Log.e("issn", issn);
                            }else {
                                Log.e("issn", issn);
                            }
                        }else {
                            String name = str[0];
                            String issn = str[1];
                            Log.e("name", name);
                            Log.e("issn", issn);

                            if (issn.equalsIgnoreCase("Itemname")) {

                            } else {
                                if (issn.toString().equals("")) {
                                    i_csv = 1;
                                    i_csv_itemname_empty = 1;
                                    System.out.println("csv issue2 Id " + name + " Itemname is empty in");
                                    my_array_itemname.add(String.valueOf(row_itemname));
                                }
                            }
                            row_itemname = row_itemname + 1;
                        }
                    }



                    FileReader file_2 = new FileReader(filepath);
                    BufferedReader buffer_2 = new BufferedReader(file_2);
                    String line_2 = "";
                    String line_13 = "";

                    int row_comma = 1;
                    int row_spec_char = 1;
                    while ((line_2 = buffer_2.readLine()) != null) {
                        String[] str_2 = line_2.split(",", 30);
                        int cou1 = StringUtils.countMatches(line_2, ",");
                        if (cou1 < 29){
                            line_13 = line_13+line_2;
                            String[] str_11 = line_13.split(",", 30);
                            String issn = str_11[1];
                            if (issn.contains("\"")) {
                                Log.e("issn", issn);
                            }else {
                                Log.e("issn", issn);
                            }
                        }else {
                            String name_2 = str_2[0];
                            String issn_2 = str_2[1];
                            Log.e("name", name_2);
                            Log.e("issn", issn_2);

                            int cou = StringUtils.countMatches(line_2, ",");
//                    System.out.println("comma is "+cou+" name is "+name);

                            if (issn_2.equalsIgnoreCase("Itemname")) {

                            } else {
                                if (cou > 29) {
                                    i_csv = 1;
                                    i_csv_id_comma = 1;
                                    System.out.println("csv issue3 Id " + name_2 + " more commas");
                                    my_array_comma.add(String.valueOf(row_comma));
                                } else {
                                    String[] str = line_2.split(",", 30);
                                    String name = str[0];
                                    String issn = str[1];
                                    Log.e("name", name);
                                    Log.e("issn", issn);

                                    String imp = str[2];
                                    String imp1 = str[3];
                                    String imp2 = str[4];
                                    String imp3 = str[5];
                                    String imp4 = str[6];
                                    String imp41 = str[7];
                                    String imp5 = str[8];
                                    String imp6 = str[9];
                                    String imp7 = str[10];
                                    String imp8 = str[11];
                                    String c_tax2 = str[12];
                                    String c_taxv2 = str[13];
                                    String c_tax3 = str[14];
                                    String c_taxv3 = str[15];
                                    String c_tax4 = str[16];
                                    String c_taxv4 = str[17];
                                    String c_tax5 = str[18];
                                    String c_taxv5 = str[19];
                                    String c_var2 = str[20];
                                    String c_varv2 = str[21];
                                    String c_var3 = str[22];
                                    String c_varv3 = str[23];
                                    String c_var4 = str[24];
                                    String c_varv4 = str[25];
                                    String c_var5 = str[26];
                                    String c_varv5 = str[27];
                                    String c_isveg = str[28];
                                    String c_pckcrgs = str[29];

                                    i_csv_id_spec_char1 = 0;

                                    if (issn.equalsIgnoreCase("Itemname")) {

                                    } else {
                                        if (imp.toString().equals("") || imp.toString().matches("[0-9.]+") || imp.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue4 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (imp1.toString().equals("") || imp1.toString().matches("[0-9.-]+") || imp1.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue41 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (imp2.toString().equals("") || imp2.toString().matches("[0-9.-]+") || imp2.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue42 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (imp41.toString().equals("") || imp41.toString().matches("[0-9.-]+") || imp41.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue43 Id " + name + " price issue " + row_spec_char);
//                            my_array_spec_char.add(name);
                                        }
                                        if (imp6.toString().equals("") || imp6.toString().matches("[0-9.-]+") || imp6.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue44 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_taxv2.toString().equals("") || c_taxv2.toString().matches("[0-9.-]+") || c_taxv2.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue45 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_taxv3.toString().equals("") || c_taxv3.toString().matches("[0-9.-]+") || c_taxv3.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue46 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_taxv4.toString().equals("") || c_taxv4.toString().matches("[0-9.-]+") || c_taxv4.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue47 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_taxv5.toString().equals("") || c_taxv5.toString().matches("[0-9.-]+") || c_taxv5.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue48 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_varv2.toString().equals("") || c_varv2.toString().matches("[0-9.-]+") || c_varv2.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue49 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_varv3.toString().equals("") || c_varv3.toString().matches("[0-9.-]+") || c_varv3.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue410 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_varv4.toString().equals("") || c_varv4.toString().matches("[0-9.-]+") || c_varv4.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue411 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_varv5.toString().equals("") || c_varv5.toString().matches("[0-9.-]+") || c_varv5.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue412 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_isveg.toString().equals("") || c_isveg.toString().matches("[0-9.-]+") || c_isveg.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue413 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (c_pckcrgs.toString().equals("") || c_pckcrgs.toString().matches("[0-9.-]+") || c_pckcrgs.toString().contains("\"")) {

                                        } else {
                                            i_csv = 1;
                                            i_csv_id_spec_char = 1;
                                            i_csv_id_spec_char1 = 1;
                                            System.out.println("csv issue414 Id " + name + " price issue");
//                            my_array_spec_char.add(name);
                                        }
                                        if (i_csv_id_spec_char1 == 1) {
                                            my_array_spec_char.add(String.valueOf(row_spec_char));
                                            System.out.println("csv issue special issue " + row_spec_char);
                                        }
                                    }
                                }
                            }
                            row_spec_char = row_spec_char + 1;
                            row_comma = row_comma + 1;
                        }
                    }


                    FileReader file_3 = new FileReader(filepath);
                    BufferedReader buffer_3 = new BufferedReader(file_3);
                    String line_3 = "";
                    String line_123 = "";

                    int row_itemname3 = 1;
                    while ((line_3 = buffer_3.readLine()) != null) {
                        String[] str = line_3.split(",", 30);
                        int cou = StringUtils.countMatches(line_3, ",");
                        if (cou < 29){
                            line_123 = line_123+line_3;
                            String[] str_13 = line_123.split(",", 30);
                            String issn = str_13[1];
                            if (issn.contains("\"")) {
                                Log.e("issn", issn);
                            }else {
                                Log.e("issn", issn);
                            }
                        }else {
                            String name = str[0];
                            String issn = str[1];
                            String barc = str[10];
                            Log.e("name", name);
                            Log.e("issn", issn);

                            if (issn.equalsIgnoreCase("Itemname")) {

                            } else {
                                if (barc.toString().contains("+")) {
                                    i_csv = 1;
                                    i_csv_id_exponen = 1;
                                    System.out.println("csv issue2 Id " + name + " barcode");
                                    my_array_exponen.add(String.valueOf(row_itemname3));
                                }
                            }
                            row_itemname3 = row_itemname3 + 1;
                        }
                    }

                }



//                FileReader file_3 = new FileReader(filepath);
//                BufferedReader buffer_3 = new BufferedReader(file_3);
//                String line_3 = "";
//
//
//                while ((line_3 = buffer_3.readLine()) != null) {
//                    int row_spec_char = 1;
//                    for (int i_c = 0; i_c < my_array_comma.size(); i_c++) {
//                        String i_c1 = my_array_comma.get(i_c);
//                        if (row_spec_char == Integer.parseInt(i_c1)) {
//                            row_spec_char = row_spec_char + 1;
//                        } else {
//
//                        }
//                    }
//                }



            } catch (SQLException e) {
                Log.e("Error", e.getMessage());
            } catch (IOException e) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Dialog d = new Dialog(getActivity());
                        d.setTitle(e.getMessage()+"first");
                        d.show();
                        // db.endTransaction();
                    }
                });
            }


            return null;
        }

        // Show Progress bar before downloading Music
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            // Shows Progress Bar Dialog and then call doInBackground method
            //showDialog(progress_bar_type);


//            csvExportCVArrayList.clear();
//            //   webserviceArrayList.clear();
//
//            db.execSQL("delete from items");
//            db.execSQL("delete from hotel WHERE name != 'All' AND name != 'Favourites'");
//            db.execSQL("delete from taxes");
//
//            db.execSQL("UPDATE sqlite_sequence SET seq = 0 WHERE NAME = 'Items'");
//            db.execSQL("UPDATE sqlite_sequence SET seq = 0 WHERE NAME = 'Taxes'");
//            db.execSQL("UPDATE sqlite_sequence SET seq = 2 WHERE NAME = 'Hotel'");
//
//            deleteAllItems();
//            deleteAllCategories();
//            webservicequery("delete from taxes");
//            webservicequery("ALTER TABLE Taxes AUTO_INCREMENT = 1");

            //  deleteAllItems();

            //   new SyncHelperApp().stopSync(getActivity());
            dialog.setMessage(getString(R.string.setmessage20));
            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);

            dialog.setMax(1000);
            //Set the current progress to zero
            dialog.setProgress(0);
            //Display the progress dialog
//            dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
//                @Override
//                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
//                    if (keyCode == KeyEvent.KEYCODE_BACK) {
//                        //dialog.dismiss();
//                        //row.setBackgroundResource(0);
//                        return true;
//                    }
//                    return false;
//                }
//            });

//            new SyncHelperApp().stopSync(getActivity());



            dialog.show();
        }


        @Override
        protected void onPostExecute(Void result) {

            if (i_corre_forma == 1){
                final Dialog dialog_csv_screen = new Dialog(getActivity(), R.style.notitle);
                dialog_csv_screen.setContentView(R.layout.csv_screening);
                dialog_csv_screen.show();

                ImageButton btnclear = (ImageButton) dialog_csv_screen.findViewById(R.id.btnclear);
                btnclear.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        dialog_csv_screen.dismiss();
                    }
                });

                TextView id_empty = (TextView) dialog_csv_screen.findViewById(R.id.id_empty);
                id_empty.setText("Wrong CSV template");
                id_empty.setVisibility(View.VISIBLE);

            }else {
                if (i_csv == 1) {

                    StringBuilder builder0 = new StringBuilder();
//                for (String details : my_array_id) {
//                    builder0.append(details + ", ");
//                }
                    for (int i = 0; i < my_array_id.size(); i++) {
                        String price = my_array_id.get(i);
                        if (i < my_array_id.size() - 1) {
                            builder0.append(price + ", ");
                        } else {
                            builder0.append(price);
                        }
                    }

                    StringBuilder builder = new StringBuilder();
//                for (String details : my_array_comma) {
//                    builder.append(details + ", ");
//                }
                    for (int i = 0; i < my_array_comma.size(); i++) {
                        String price = my_array_comma.get(i);
                        if (i < my_array_comma.size() - 1) {
                            builder.append(price + ", ");
                        } else {
                            builder.append(price);
                        }
                    }

                    StringBuilder builder1 = new StringBuilder();
//                for (String details : my_array_itemname) {
//                    builder1.append(details + ", ");
//                }
                    for (int i = 0; i < my_array_itemname.size(); i++) {
                        String price = my_array_itemname.get(i);
                        if (i < my_array_itemname.size() - 1) {
                            builder1.append(price + ", ");
                        } else {
                            builder1.append(price);
                        }
                    }

                    StringBuilder builder2 = new StringBuilder();
//                for (String details : my_array_spec_char) {
//                    builder2.append(details + ", ");
//                }
                    for (int i = 0; i < my_array_spec_char.size(); i++) {
                        String price = my_array_spec_char.get(i);
                        if (i < my_array_spec_char.size() - 1) {
                            builder2.append(price + ", ");
                        } else {
                            builder2.append(price);
                        }
                    }

                    StringBuilder builder3 = new StringBuilder();
//                for (String details : my_array_spec_char) {
//                    builder2.append(details + ", ");
//                }
                    for (int i = 0; i < my_array_exponen.size(); i++) {
                        String price = my_array_exponen.get(i);
                        if (i < my_array_exponen.size() - 1) {
                            builder3.append(price + ", ");
                        } else {
                            builder3.append(price);
                        }
                    }


//            System.out.println("CSV issss comma more in "+ builder.toString());

                    final Dialog dialog_csv_screen = new Dialog(getActivity(), R.style.notitle);
                    dialog_csv_screen.setContentView(R.layout.csv_screening);
                    dialog_csv_screen.show();

                    ImageButton btnclear = (ImageButton) dialog_csv_screen.findViewById(R.id.btnclear);
                    btnclear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            dialog_csv_screen.dismiss();
                        }
                    });

                    TextView id_comma = (TextView) dialog_csv_screen.findViewById(R.id.id_comma);
                    if (i_csv_id_comma == 1) {
                        id_comma.setText("- In Row " + builder.toString() + " comma(s) are not allowed");
                        id_comma.setVisibility(View.VISIBLE);
                    }else {
                        id_comma.setVisibility(View.GONE);
                    }

                    TextView itemname_empty = (TextView) dialog_csv_screen.findViewById(R.id.itemname_empty);
                    if (i_csv_itemname_empty == 1) {
                        itemname_empty.setText("- In Row " + builder1.toString() + " \"Itemname\" is empty");
                        itemname_empty.setVisibility(View.VISIBLE);
                    }else {
                        itemname_empty.setVisibility(View.GONE);
                    }

                    TextView id_empty = (TextView) dialog_csv_screen.findViewById(R.id.id_empty);
                    if (i_csv_id_empty == 1) {
                        id_empty.setText("- In Row " + builder0.toString() + " \"Id\" is empty");
                        id_empty.setVisibility(View.VISIBLE);
                    }else {
                        id_empty.setVisibility(View.GONE);

                    }

                    TextView id_exponen = (TextView) dialog_csv_screen.findViewById(R.id.id_exponen);
                    if (i_csv_id_exponen == 1) {
                        id_exponen.setText("- In Row " + builder3.toString() + " \"Barcode\" is in  Scientific notation. Kindly open your CSV sheet and format Barcode column to Text");
                        id_exponen.setVisibility(View.VISIBLE);
                    }else {
                        id_exponen.setVisibility(View.GONE);

                    }

                    LinearLayout linearLayout = (LinearLayout) dialog_csv_screen.findViewById(R.id.linearLayout);
                    TextView id_spec_char = (TextView) dialog_csv_screen.findViewById(R.id.id_spec_char);
                    if (i_csv_id_spec_char == 1) {
                        id_spec_char.setText("- In Row " + builder2.toString() + " there is text/special characters(&!?*$#) in number only fields");
                        id_spec_char.setVisibility(View.VISIBLE);
                        linearLayout.setVisibility(View.VISIBLE);
                    }else {
                        id_spec_char.setVisibility(View.GONE);
                        linearLayout.setVisibility(View.GONE);

                    }
                }else {
//                upload_data();
                    db.execSQL("delete from Items_Virtual");
                    Upload_data downloadMusicfromInternet = new Upload_data();
                    downloadMusicfromInternet.execute();
                }
            }



//            Iterator<String> it = my_array_itemname.iterator();
//            while (it.hasNext()) {
//                System.out.println("CSV issss Itemname missed in "+ it.next());
//            }
//
//            Iterator<String> it1 = my_array_comma.iterator();
//            while (it1.hasNext()) {
//                System.out.println("CSV issss comma more in "+ it1.next());
//            }


//            new SyncHelperApp().startSync(getActivity());


            //new SyncHelperApp().startSync(getActivity());

//            Bundle extras=new Bundle();
//            extras.putString("table","taxes");
//            extras.putString("bulk","true");
//            ContentResolver.requestSync(null, AUTHORITY, extras);
//
//            Bundle extras2=new Bundle();
//            extras2.putString("table","hotel");
//            extras2.putString("bulk","true");
//            ContentResolver.requestSync(null, AUTHORITY, extras2);

//            for(int q=0;q<webserviceArrayList.size();q++){
//                Bundle extras3=new Bundle();
//                extras3.putString("table","items");
//                extras3.putString("query",webserviceArrayList.get(q));
//                ContentResolver.requestSync(null, AUTHORITY, extras3);
//            }

//            Bundle extras3=new Bundle();
//            extras3.putString("table","items");
//            extras3.putString("bulk","true");
//            ContentResolver.requestSync(null, AUTHORITY, extras3);



            dialog.dismiss();

            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);

            if (!spinner.getSelectedItem().toString().equals("All")) {
                //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                countryList = new ArrayList<Country_items>();
                try {
//                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "'", null);
                    System.out.println("COUNT : " + allrows.getCount());


                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            String PlaCe = allrows.getString(2);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                                db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            }
            if (spinner.getSelectedItem().toString().equals("All")) {
                //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                countryList = new ArrayList<Country_items>();
                try {
//                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                    System.out.println("COUNT : " + allrows.getCount());


                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            String PlaCe = allrows.getString(2);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                                db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            }

            dataAdapter = new MyCustomAdapter(getActivity(),
                    R.layout.items_list_details, countryList);
//                            final ListView listView = (ListView) rootview.findViewById(R.id.listView);
            // Assign adapter to ListView
            listView.setAdapter(dataAdapter);

            ArrayList<String> my_arrayy = getTableValues2();
            final ArrayAdapter my_Adapterr = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                    my_arrayy);
            spinner.setAdapter(my_Adapterr);

        }
    }


    class Upload_data extends AsyncTask<Void, Integer, Void> {
        private ProgressDialog dialog = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);

        @Override
        protected Void doInBackground(Void... params) {



            try {



                FileReader file = new FileReader(filepath);
                BufferedReader buffer = new BufferedReader(file);

                System.out.println("inside upload data method" );
                String line = "";
                String line_13 = "";
//                        db.beginTransaction();

                while ((line = buffer.readLine()) != null) {
//                            Toast.makeText(getActivity(), "updated", Toast.LENGTH_SHORT).show();
                    String[] str_2 = line.split(",", 30);
                    int cou1 = StringUtils.countMatches(line, ",");
                    if (cou1 < 29) {
                        line_13 = line_13 + line;
                        String[] str_11 = line_13.split(",", 30);
                        String issn = str_11[1];
                        if (issn.contains("\"")) {
                            Log.e("issn", issn);
                        } else {
                            Log.e("issn", issn);
                        }

                        int cou0 = StringUtils.countMatches(line_13, ",");
                        System.out.println("cou0" +cou0);

                        if (cou0 == 29) {


                            webserviceQuery = "INSERT INTO Items(";
                            webserviceValues = "VALUES(";
                            String[] str = line_13.split(",", 30);  // defining 3 columns with null or blank field //values acceptance

                            //Id, Company,Name,Price

                            String imp1 = "0", imp2 = "0";

                            String name = str[0];
                            issn = str[1];
                            if (issn.contains("\"")){
                                issn = issn.replace("\"", "");
                            }
                            Log.e("name", name);
                            Log.e("issn", issn);

                            String imp = str[2];
                            imp1 = str[3];
                            imp2 = str[4];
                            String imp3 = str[5];
                            String imp4 = str[6];
                            String imp41 = str[7];
                            String imp5 = str[8];
                            String imp6 = str[9];
                            String imp7 = str[10];
                            String imp8 = str[11];
                            String c_tax2 = str[12];
                            String c_taxv2 = str[13];
                            String c_tax3 = str[14];
                            String c_taxv3 = str[15];
                            String c_tax4 = str[16];
                            String c_taxv4 = str[17];
                            String c_tax5 = str[18];
                            String c_taxv5 = str[19];
                            String c_var2 = str[20];
                            String c_varv2 = str[21];
                            String c_var3 = str[22];
                            String c_varv3 = str[23];
                            String c_var4 = str[24];
                            String c_varv4 = str[25];
                            String c_var5 = str[26];
                            String c_varv5 = str[27];
                            String c_isveg = str[28];
                            String c_pckcrgs = str[29];

                            // System.out.println("veg and packing charges "+c_isveg+"  "+c_pckcrgs+"  "+name);


                            if (issn.toString().contains("'")) {
                                issn = issn.replace("'", "");
                            }

                            if (name.contains("\"")) {
                                name = name.replaceAll("\"", "");
                            }

                            if (issn.contains("\"")) {
                                issn = issn.replaceAll("\"", "");
                            }

                            if (issn.contains("'")) {
                                issn = issn.replaceAll("'", "");
                            }

                            if (issn.contains("&")) {
                                issn = issn.replaceAll("&", " and ");
                            }

                            if (issn.contains("(")) {
                                issn = issn.replaceAll("(", "");
                            }

                            if (issn.contains(")")) {
                                issn = issn.replaceAll(")", "");
                            }

                            if (imp.contains("\"")) {
                                imp = imp.replaceAll("\"", "");
                            }

                            if (imp1.contains("\"")) {
                                imp1 = imp1.replaceAll("\"", "");
                            }

                            if (imp2.contains("\"")) {
                                imp2 = imp2.replaceAll("\"", "");
                            }

                            if (imp3.contains("\"")) {
                                imp3 = imp3.replaceAll("\"", "");
                            }

                            if (imp4.contains("\"")) {
                                imp4 = imp4.replaceAll("\"", "");
                            }

                            if (c_tax2.contains("\"")) {
                                c_tax2 = c_tax2.replaceAll("\"", "");
                            }

                            if (c_taxv2.contains("\"")) {
                                c_taxv2 = c_taxv2.replaceAll("\"", "");
                            }

                            if (c_tax3.contains("\"")) {
                                c_tax3 = c_tax3.replaceAll("\"", "");
                            }

                            if (c_taxv3.contains("\"")) {
                                c_taxv3 = c_taxv3.replaceAll("\"", "");
                            }

                            if (c_tax4.contains("\"")) {
                                c_tax4 = c_tax4.replaceAll("\"", "");
                            }

                            if (c_taxv4.contains("\"")) {
                                c_taxv4 = c_taxv4.replaceAll("\"", "");
                            }

                            if (c_tax5.contains("\"")) {
                                c_tax5 = c_tax5.replaceAll("\"", "");
                            }

                            if (c_taxv5.contains("\"")) {
                                c_taxv5 = c_taxv5.replaceAll("\"", "");
                            }

                            if (imp4.contains("(")) {
                                String match = "(";
                                int position = imp4.indexOf(match);
                                imp4 = imp4.substring(0, position);
                            }

                            if (c_tax2.contains("(")) {
                                String match = "(";
                                int position = c_tax2.indexOf(match);
                                c_tax2 = c_tax2.substring(0, position);
                            }

                            if (c_tax3.contains("(")) {
                                String match = "(";
                                int position = c_tax3.indexOf(match);
                                c_tax3 = c_tax3.substring(0, position);
                            }

                            if (c_tax4.contains("(")) {
                                String match = "(";
                                int position = c_tax4.indexOf(match);
                                c_tax4 = c_tax4.substring(0, position);
                            }

                            if (c_tax5.contains("(")) {
                                String match = "(";
                                int position = c_tax5.indexOf(match);
                                c_tax5 = c_tax5.substring(0, position);
                            }

                            if (imp41.contains("\"")) {
                                imp41 = imp41.replaceAll("\"", "");
                            }

                            if (imp5.contains("\"")) {
                                imp5 = imp5.replaceAll("\"", "");
                            }

                            if (imp6.contains("\"")) {
                                imp6 = imp6.replaceAll("\"", "");
                            }

                            if (imp7.contains("\"")) {
                                imp7 = imp7.replaceAll("\"", "");
                            }

                            if (c_var2.contains("\"")) {
                                c_var2 = c_var2.replaceAll("\"", "");
                            }

                            if (c_varv2.contains("\"")) {
                                c_varv2 = c_varv2.replaceAll("\"", "");
                            }

                            if (c_var3.contains("\"")) {
                                c_var3 = c_var3.replaceAll("\"", "");
                            }

                            if (c_varv3.contains("\"")) {
                                c_varv3 = c_varv3.replaceAll("\"", "");
                            }

                            if (c_var4.contains("\"")) {
                                c_var4 = c_var4.replaceAll("\"", "");
                            }

                            if (c_varv4.contains("\"")) {
                                c_varv4 = c_varv4.replaceAll("\"", "");
                            }

                            if (c_var5.contains("\"")) {
                                c_var5 = c_var5.replaceAll("\"", "");
                            }

                            if (c_varv5.contains("\"")) {
                                c_varv5 = c_varv5.replaceAll("\"", "");
                            }

                            if (c_isveg.contains("\"")) {
                                c_isveg = c_isveg.replaceAll("\"", "");
                            }

                            if (c_isveg.contains("\"")) {
                                c_isveg = c_isveg.replaceAll("\"", "");
                            }

                            if (c_pckcrgs.contains("\"")) {
                                c_pckcrgs = c_pckcrgs.replaceAll("\"", "");
                            }

                            if (c_pckcrgs.contains("\"")) {
                                c_pckcrgs = c_pckcrgs.replaceAll("\"", "");
                            }

                            if (imp8.contains("\"")) {
                                imp8 = imp8.replaceAll("\"", "");
                            }

                            Log.e("tax1", imp4);
                            Log.e("tax2", c_tax2);
                            Log.e("tax3", c_tax3);
                            Log.e("tax4", c_tax4);
                            Log.e("tax5", c_tax5);

                            if (issn.equalsIgnoreCase("Itemname")) {

                            } else {

                                if (imp1.equals("")) {
                                    imp1 = "0";
                                }
                                if (imp.equals("")) {
                                    imp = "0";
                                }
                                if (imp2.equals("")) {
                                    imp2 = "0";
                                }

                                float nb = Float.parseFloat(imp1) + Float.parseFloat(imp2);
                                Cursor cursor = db.rawQuery("SELECT * FROM Items", null);
                                if (cursor.moveToFirst()) {

                                } else {
                                    Cursor cb = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + issn + "'", null);
                                    if (cb.moveToFirst()) {

                                    } else {

                                        Cursor cb1 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '"+imp7+"' AND barcode_value != ''", null);
                                        if (cb1.moveToFirst()) {

                                        }else {

                                            webserviceQuery = "INSERT INTO Items(";
                                            webserviceValues = "VALUES(";

                                            //  ContentValues contentValues = new ContentValues();
                                            int itemname_leng = issn.length();
                                            String str1 = "";
                                            if (issn.length() <= 3) {
                                                str1 = issn.substring(0, 1);
                                            } else {
                                                str1 = issn.substring(0, 2);
                                            }
                                            String str2 = str1.toUpperCase();
                                            //  contentValues.put("image_text", str2);

                                            webserviceQuery = webserviceQuery + "image_text,";
                                            webserviceValues = webserviceValues + "'" + str2 + "',";

                                            // contentValues.put("image", "");
                                            webserviceQuery = webserviceQuery + "image,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            // contentValues.put("itemname", issn);
                                            webserviceQuery = webserviceQuery + "itemname,";
                                            webserviceValues = webserviceValues + "'" + issn + "',";

/*  webserviceQuery="INSERT INTO Items (image_text, image, itemname, price, stockquan," +
          "category,itemtax,tax_value,itemtax2,tax_value2,itemtax3,tax_value3,itemtax4,tax_value4,itemtax5,tax_value5,variant2,variant_price2,)" +
          "VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway')";*/

//                                    contentValues.put("price", imp);
                                            if (imp.equals("")) {
                                                //    contentValues.put("price", "0");
                                                webserviceQuery = webserviceQuery + "price,";
                                                webserviceValues = webserviceValues + "'0'" + ",";
                                            } else {
                                                //    contentValues.put("price", imp);
                                                webserviceQuery = webserviceQuery + "price,";
                                                webserviceValues = webserviceValues + "'" + imp + "',";
                                            }
                                            //   contentValues.put("stockquan", String.valueOf(nb));

                                            webserviceQuery = webserviceQuery + "stockquan,";
                                            webserviceValues = webserviceValues + String.valueOf(nb) + ",";

//                                                contentValues.put("up_quan", imp2);
                                            if (imp3.equals("")) {
                                                //    contentValues.put("category", "'None'");

                                                webserviceQuery = webserviceQuery + "category,";
                                                webserviceValues = webserviceValues + "'None',";

                                            } else {
                                                //     contentValues.put("category", imp3);

                                                webserviceQuery = webserviceQuery + "category,";
                                                webserviceValues = webserviceValues + "'" + imp3 + "',";
                                            }

                                            if (imp4.equals("") || imp4.equals("None") || imp4.equals("NONE") || imp41.equals("")) {
                                                //      contentValues.put("itemtax", "None");
                                                //      contentValues.put("tax_value", "''");

                                                webserviceQuery = webserviceQuery + "itemtax,";
                                                webserviceValues = webserviceValues + "'None',";

                                                webserviceQuery = webserviceQuery + "tax_value,";
                                                webserviceValues = webserviceValues + "'',";

                                            } else {
                                                //      contentValues.put("itemtax", imp4+"("+imp41+"%)");
                                                //      contentValues.put("tax_value", "'"+imp41+"'");

                                                webserviceQuery = webserviceQuery + "itemtax,";
                                                webserviceValues = webserviceValues + "'" + imp4 + "(" + imp41 + "%)" + "',";

                                                webserviceQuery = webserviceQuery + "tax_value,";
                                                webserviceValues = webserviceValues + "'" + imp41 + "',";
                                            }

                                            if (c_tax2.equals("") || c_tax2.equals("None") || c_tax2.equals("NONE") || c_taxv2.equals("")) {
                                                //       contentValues.put("itemtax2", "'None'");
                                                //       contentValues.put("tax_value2", "''");

                                                webserviceQuery = webserviceQuery + "itemtax2,";
                                                webserviceValues = webserviceValues + "'None'" + ",";

                                                webserviceQuery = webserviceQuery + "tax_value2,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                            } else {
                                                //      contentValues.put("itemtax2", c_tax2+"("+c_taxv2+"%)");
                                                //      contentValues.put("tax_value2", c_taxv2);

                                                webserviceQuery = webserviceQuery + "itemtax2,";
                                                webserviceValues = webserviceValues + "'" + c_tax2 + "(" + c_taxv2 + "%)" + "',";

                                                webserviceQuery = webserviceQuery + "tax_value2,";
                                                webserviceValues = webserviceValues + "'" + c_taxv2 + "',";
                                            }

                                            if (c_tax3.equals("") || c_tax3.equals("None") || c_tax3.equals("NONE") || c_taxv3.equals("")) {
                                                //      contentValues.put("itemtax3", "None");
                                                //      contentValues.put("tax_value3", "");

                                                webserviceQuery = webserviceQuery + "itemtax3,";
                                                webserviceValues = webserviceValues + "'None'" + ",";

                                                webserviceQuery = webserviceQuery + "tax_value3,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                            } else {
                                                //      contentValues.put("itemtax3", c_tax3+"("+c_taxv3+"%)");
                                                //      contentValues.put("tax_value3", c_taxv3);

                                                webserviceQuery = webserviceQuery + "itemtax3" + ",";
                                                webserviceValues = webserviceValues + "'" + c_tax3 + "(" + c_taxv3 + "%)" + "',";

                                                webserviceQuery = webserviceQuery + "tax_value3,";
                                                webserviceValues = webserviceValues + "'" + c_taxv3 + "',";

                                            }

                                            if (c_tax4.equals("") || c_tax4.equals("None") || c_tax4.equals("NONE") || c_taxv4.equals("")) {
                                                //      contentValues.put("itemtax4", "None");
                                                //      contentValues.put("tax_value4", "");

                                                webserviceQuery = webserviceQuery + "itemtax4" + ",";
                                                webserviceValues = webserviceValues + "'None',";

                                                webserviceQuery = webserviceQuery + "tax_value4,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                            } else {
                                                //       contentValues.put("itemtax4", c_tax4+"("+c_taxv4+"%)");
                                                //       contentValues.put("tax_value4", c_taxv4);


                                                webserviceQuery = webserviceQuery + "itemtax4" + ",";
                                                webserviceValues = webserviceValues + "'" + c_tax4 + "(" + c_taxv4 + "%)',";

                                                webserviceQuery = webserviceQuery + "tax_value4,";
                                                webserviceValues = webserviceValues + "'" + c_taxv4 + "',";
                                            }

                                            if (c_tax5.equals("") || c_tax5.equals("None") || c_tax5.equals("NONE") || c_taxv5.equals("")) {
                                                //        contentValues.put("itemtax5", "None");
                                                //       contentValues.put("tax_value5", "");

                                                webserviceQuery = webserviceQuery + "itemtax5,";
                                                webserviceValues = webserviceValues + "'None'" + ",";

                                                webserviceQuery = webserviceQuery + "tax_value5,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                            } else {
                                                //        contentValues.put("itemtax5", c_tax5+"("+c_taxv5+"%)");
                                                //        contentValues.put("tax_value5", c_taxv5);

                                                webserviceQuery = webserviceQuery + "itemtax5,";
                                                webserviceValues = webserviceValues + "'" + c_tax5 + "(" + c_taxv5 + "%)" + "',";

                                                webserviceQuery = webserviceQuery + "tax_value5,";
                                                webserviceValues = webserviceValues + "'" + c_taxv5 + "',";

                                            }

                                            if (c_var2.equals("")) {
                                                //       contentValues.put("variant2", "");
                                                //        contentValues.put("variant_price2", "");

                                                webserviceQuery = webserviceQuery + "variant2,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                                webserviceQuery = webserviceQuery + "variant_price2,";
                                                webserviceValues = webserviceValues + "''" + ",";


                                            } else {
                                                //      contentValues.put("variant1", "Regular");
                                                //      contentValues.put("variant_price1", imp);
                                                //      contentValues.put("variant2", c_var2);
                                                //      contentValues.put("variant_price2", c_varv2);

                                                webserviceQuery = webserviceQuery + "variant1,";
                                                webserviceValues = webserviceValues + "'Regular'" + ",";

                                                webserviceQuery = webserviceQuery + "variant_price1,";
                                                webserviceValues = webserviceValues + "'" + imp + "',";

                                                webserviceQuery = webserviceQuery + "variant2,";
                                                webserviceValues = webserviceValues + "'" + c_var2 + "',";

                                                webserviceQuery = webserviceQuery + "variant_price2,";
                                                webserviceValues = webserviceValues + "'" + c_varv2 + "',";

                                            }

                                            if (c_var3.equals("")) {
                                                //   contentValues.put("variant3", "");
                                                //   contentValues.put("variant_price3", "");

                                                webserviceQuery = webserviceQuery + "variant3,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                                webserviceQuery = webserviceQuery + "variant_price3,";
                                                webserviceValues = webserviceValues + "''" + ",";


                                            } else {
                                                //    contentValues.put("variant1", "Regular");
                                                //    contentValues.put("variant_price1", imp);
                                                //    contentValues.put("variant3", c_var3);
                                                //    contentValues.put("variant_price3", c_varv3);

                                                webserviceQuery = webserviceQuery + "variant1,";
                                                webserviceValues = webserviceValues + "'Regular'" + ",";

                                                webserviceQuery = webserviceQuery + "variant_price1,";
                                                webserviceValues = webserviceValues + "'" + imp + "',";

                                                webserviceQuery = webserviceQuery + "variant3,";
                                                webserviceValues = webserviceValues + "'" + c_var3 + "',";

                                                webserviceQuery = webserviceQuery + "variant_price3,";
                                                webserviceValues = webserviceValues + "'" + c_varv3 + "',";

                                            }

                                            if (c_var4.equals("")) {
                                                //   contentValues.put("variant4", "");
                                                //   contentValues.put("variant_price4", "");

                                                webserviceQuery = webserviceQuery + "variant4,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                                webserviceQuery = webserviceQuery + "variant_price4,";
                                                webserviceValues = webserviceValues + "''" + ",";


                                            } else {
                                                //   contentValues.put("variant1", "Regular");
                                                //   contentValues.put("variant_price1", imp);
                                                //   contentValues.put("variant4", c_var4);
                                                //   contentValues.put("variant_price4", c_varv4);

                                                webserviceQuery = webserviceQuery + "variant1,";
                                                webserviceValues = webserviceValues + "'Regular'" + ",";

                                                webserviceQuery = webserviceQuery + "variant_price1,";
                                                webserviceValues = webserviceValues + "'" + imp + "',";

                                                webserviceQuery = webserviceQuery + "variant4,";
                                                webserviceValues = webserviceValues + "'" + c_var4 + "',";

                                                webserviceQuery = webserviceQuery + "variant_price4,";
                                                webserviceValues = webserviceValues + "'" + c_varv4 + "',";


                                            }

                                            if (c_var5.equals("")) {
                                                //    contentValues.put("variant5", "");
                                                //   contentValues.put("variant_price5", "");

                                                webserviceQuery = webserviceQuery + "variant5,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                                webserviceQuery = webserviceQuery + "variant_price5,";
                                                webserviceValues = webserviceValues + "''" + ",";


                                            } else {
                                                //  contentValues.put("variant1", "Regular");
                                                //  contentValues.put("variant_price1", imp);
                                                //  contentValues.put("variant5", c_var5);
                                                //  contentValues.put("variant_price5", c_varv5);

                                                webserviceQuery = webserviceQuery + "variant1,";
                                                webserviceValues = webserviceValues + "'Regular'" + ",";

                                                webserviceQuery = webserviceQuery + "variant_price1,";
                                                webserviceValues = webserviceValues + "'" + imp + "',";

                                                webserviceQuery = webserviceQuery + "variant5,";
                                                webserviceValues = webserviceValues + "'" + c_var5 + "',";

                                                webserviceQuery = webserviceQuery + "variant_price5,";
                                                webserviceValues = webserviceValues + "'" + c_varv5 + "',";
                                            }

//                                                contentValues.put("tax_value", imp41);
                                            if (imp5.equals("")) {
                                                // contentValues.put("disc_type", "%");

                                                webserviceQuery = webserviceQuery + "disc_type,";
                                                webserviceValues = webserviceValues + "'%'" + ",";

                                            } else {
                                                //contentValues.put("disc_type", imp5);

                                                webserviceQuery = webserviceQuery + "disc_type,";
                                                webserviceValues = webserviceValues + "'" + imp5 + "',";
                                            }
                                            if (c_isveg.equals("")) {
                                                //contentValues.put("disc_value", "0");

                                                webserviceQuery = webserviceQuery + "is_veg,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                            } else {
                                                //  contentValues.put("disc_value", imp6);

                                                webserviceQuery = webserviceQuery + "is_veg,";
                                                webserviceValues = webserviceValues + "'" + c_isveg + "',";

                                            }
                                            if (c_pckcrgs.equals("")) {
                                                //contentValues.put("disc_value", "0");

                                                webserviceQuery = webserviceQuery + "packing_charges,";
                                                webserviceValues = webserviceValues + "''" + ",";

                                            } else {
                                                //  contentValues.put("disc_value", imp6);

                                                webserviceQuery = webserviceQuery + "packing_charges,";
                                                webserviceValues = webserviceValues + "'" + c_pckcrgs + "',";

                                            }
                                            if (imp6.equals("")) {
                                                //contentValues.put("disc_value", "0");

                                                webserviceQuery = webserviceQuery + "disc_value,";
                                                webserviceValues = webserviceValues + "'0'" + ",";

                                            } else {
                                                //  contentValues.put("disc_value", imp6);

                                                webserviceQuery = webserviceQuery + "disc_value,";
                                                webserviceValues = webserviceValues + "'" + imp6 + "',";

                                            }
                                            // contentValues.put("barcode_value", imp7);
                                            // contentValues.put("favourites", "no");

                                            webserviceQuery = webserviceQuery + "barcode_value,";
                                            webserviceValues = webserviceValues + "'" + imp7 + "',";

                                            webserviceQuery = webserviceQuery + "favourites,";
                                            webserviceValues = webserviceValues + "'no'" + ",";


                                            if (imp8.toString().equals("Unit") || imp8.toString().equalsIgnoreCase("unit") || imp8.toString().equals("")) {
                                                //contentValues.put("unit_type", "Unit");

                                                webserviceQuery = webserviceQuery + "unit_type)";
                                                webserviceValues = webserviceValues + "'Unit'" + ")";

                                            } else {
                                                // contentValues.put("unit_type", "Weight");

                                                webserviceQuery = webserviceQuery + "unit_type)";
                                                webserviceValues = webserviceValues + "'Weight'" + ")";

                                            }
                                            webserviceQuery = webserviceQuery + webserviceValues;
                                            //    webserviceArrayList.add(webserviceQuery);


                                            try {
                                                db.execSQL(webserviceQuery);

                                                SQLiteDatabase dbapp = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                String sql = "SELECT MAX(_id)  FROM Items";
                                                Cursor allrows_a = dbapp.rawQuery(sql, null);
                                                int lastid = 0;
                                                if (allrows_a.moveToFirst()) {
                                                    lastid = allrows_a.getInt(0);
                                                }
                                                allrows_a.close();
                                                dbapp.close();


                                                SQLiteDatabase syncdbapp = getActivity().openOrCreateDatabase("syncdbapp", Context.MODE_PRIVATE, null);
                                                ContentValues cv = new ContentValues();
                                                cv.put("lastsyncedid", lastid + "");
                                                String where1 = "tablename = " + "'Items'";
                                                syncdbapp.update("appdata", cv, where1, new String[]{});
                                                syncdbapp.close();

                                                Log.e("webservicequery", webserviceQuery);
                                            } catch (SQLException e) {
                                                Log.e("webs-exception", webserviceQuery);
                                                e.printStackTrace();
                                            }

                                            webservicequery(webserviceQuery);
                                        }
                                        cb1.close();


                                    }
                                    cb.close();
                                }
                                cursor.close();

                                Cursor ccursor1 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + issn + "'", null);
                                if (ccursor1.moveToFirst()) {

                                } else {

                                    Cursor cb1 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '"+imp7+"' AND barcode_value != ''", null);
                                    if (cb1.moveToFirst()) {

                                    }else {

                                        webserviceQuery = "INSERT INTO Items(";
                                        webserviceValues = "VALUES(";

                                        //  ContentValues contentValues = new ContentValues();
                                        int itemname_leng = issn.length();
                                        String str1 = "";
                                        if (issn.length() <= 3) {
                                            str1 = issn.substring(0, 1);
                                        } else {
                                            str1 = issn.substring(0, 2);
                                        }
                                        String str2 = str1.toUpperCase();
                                        //  contentValues.put("image_text", str2);

                                        webserviceQuery = webserviceQuery + "image_text,";
                                        webserviceValues = webserviceValues + "'" + str2 + "',";

                                        // contentValues.put("image", "");
                                        webserviceQuery = webserviceQuery + "image,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                        // contentValues.put("itemname", issn);
                                        webserviceQuery = webserviceQuery + "itemname,";
                                        webserviceValues = webserviceValues + "'" + issn + "',";

/*  webserviceQuery="INSERT INTO Items (image_text, image, itemname, price, stockquan," +
          "category,itemtax,tax_value,itemtax2,tax_value2,itemtax3,tax_value3,itemtax4,tax_value4,itemtax5,tax_value5,variant2,variant_price2,)" +
          "VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway')";*/

//                                    contentValues.put("price", imp);
                                        if (imp.equals("")) {
                                            //    contentValues.put("price", "0");
                                            webserviceQuery = webserviceQuery + "price,";
                                            webserviceValues = webserviceValues + "'0'" + ",";
                                        } else {
                                            //    contentValues.put("price", imp);
                                            webserviceQuery = webserviceQuery + "price,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";
                                        }
                                        //   contentValues.put("stockquan", String.valueOf(nb));

                                        webserviceQuery = webserviceQuery + "stockquan,";
                                        webserviceValues = webserviceValues + String.valueOf(nb) + ",";

//                                                contentValues.put("up_quan", imp2);
                                        if (imp3.equals("")) {
                                            //    contentValues.put("category", "'None'");

                                            webserviceQuery = webserviceQuery + "category,";
                                            webserviceValues = webserviceValues + "'None',";

                                        } else {
                                            //     contentValues.put("category", imp3);

                                            webserviceQuery = webserviceQuery + "category,";
                                            webserviceValues = webserviceValues + "'" + imp3 + "',";
                                        }

                                        if (imp4.equals("") || imp4.equals("None") || imp4.equals("NONE") || imp41.equals("")) {
                                            //      contentValues.put("itemtax", "None");
                                            //      contentValues.put("tax_value", "''");

                                            webserviceQuery = webserviceQuery + "itemtax,";
                                            webserviceValues = webserviceValues + "'None',";

                                            webserviceQuery = webserviceQuery + "tax_value,";
                                            webserviceValues = webserviceValues + "'',";

                                        } else {
                                            //      contentValues.put("itemtax", imp4+"("+imp41+"%)");
                                            //      contentValues.put("tax_value", "'"+imp41+"'");

                                            webserviceQuery = webserviceQuery + "itemtax,";
                                            webserviceValues = webserviceValues + "'" + imp4 + "(" + imp41 + "%)" + "',";

                                            webserviceQuery = webserviceQuery + "tax_value,";
                                            webserviceValues = webserviceValues + "'" + imp41 + "',";
                                        }

                                        if (c_tax2.equals("") || c_tax2.equals("None") || c_tax2.equals("NONE") || c_taxv2.equals("")) {
                                            //       contentValues.put("itemtax2", "'None'");
                                            //       contentValues.put("tax_value2", "''");

                                            webserviceQuery = webserviceQuery + "itemtax2,";
                                            webserviceValues = webserviceValues + "'None'" + ",";

                                            webserviceQuery = webserviceQuery + "tax_value2,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //      contentValues.put("itemtax2", c_tax2+"("+c_taxv2+"%)");
                                            //      contentValues.put("tax_value2", c_taxv2);

                                            webserviceQuery = webserviceQuery + "itemtax2,";
                                            webserviceValues = webserviceValues + "'" + c_tax2 + "(" + c_taxv2 + "%)" + "',";

                                            webserviceQuery = webserviceQuery + "tax_value2,";
                                            webserviceValues = webserviceValues + "'" + c_taxv2 + "',";
                                        }

                                        if (c_tax3.equals("") || c_tax3.equals("None") || c_tax3.equals("NONE") || c_taxv3.equals("")) {
                                            //      contentValues.put("itemtax3", "None");
                                            //      contentValues.put("tax_value3", "");

                                            webserviceQuery = webserviceQuery + "itemtax3,";
                                            webserviceValues = webserviceValues + "'None'" + ",";

                                            webserviceQuery = webserviceQuery + "tax_value3,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //      contentValues.put("itemtax3", c_tax3+"("+c_taxv3+"%)");
                                            //      contentValues.put("tax_value3", c_taxv3);

                                            webserviceQuery = webserviceQuery + "itemtax3" + ",";
                                            webserviceValues = webserviceValues + "'" + c_tax3 + "(" + c_taxv3 + "%)" + "',";

                                            webserviceQuery = webserviceQuery + "tax_value3,";
                                            webserviceValues = webserviceValues + "'" + c_taxv3 + "',";

                                        }

                                        if (c_tax4.equals("") || c_tax4.equals("None") || c_tax4.equals("NONE") || c_taxv4.equals("")) {
                                            //      contentValues.put("itemtax4", "None");
                                            //      contentValues.put("tax_value4", "");

                                            webserviceQuery = webserviceQuery + "itemtax4" + ",";
                                            webserviceValues = webserviceValues + "'None',";

                                            webserviceQuery = webserviceQuery + "tax_value4,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //       contentValues.put("itemtax4", c_tax4+"("+c_taxv4+"%)");
                                            //       contentValues.put("tax_value4", c_taxv4);


                                            webserviceQuery = webserviceQuery + "itemtax4" + ",";
                                            webserviceValues = webserviceValues + "'" + c_tax4 + "(" + c_taxv4 + "%)',";

                                            webserviceQuery = webserviceQuery + "tax_value4,";
                                            webserviceValues = webserviceValues + "'" + c_taxv4 + "',";
                                        }

                                        if (c_tax5.equals("") || c_tax5.equals("None") || c_tax5.equals("NONE") || c_taxv5.equals("")) {
                                            //        contentValues.put("itemtax5", "None");
                                            //       contentValues.put("tax_value5", "");

                                            webserviceQuery = webserviceQuery + "itemtax5,";
                                            webserviceValues = webserviceValues + "'None'" + ",";

                                            webserviceQuery = webserviceQuery + "tax_value5,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //        contentValues.put("itemtax5", c_tax5+"("+c_taxv5+"%)");
                                            //        contentValues.put("tax_value5", c_taxv5);

                                            webserviceQuery = webserviceQuery + "itemtax5,";
                                            webserviceValues = webserviceValues + "'" + c_tax5 + "(" + c_taxv5 + "%)" + "',";

                                            webserviceQuery = webserviceQuery + "tax_value5,";
                                            webserviceValues = webserviceValues + "'" + c_taxv5 + "',";

                                        }

                                        if (c_var2.equals("")) {
                                            //       contentValues.put("variant2", "");
                                            //        contentValues.put("variant_price2", "");

                                            webserviceQuery = webserviceQuery + "variant2,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price2,";
                                            webserviceValues = webserviceValues + "''" + ",";


                                        } else {
                                            //      contentValues.put("variant1", "Regular");
                                            //      contentValues.put("variant_price1", imp);
                                            //      contentValues.put("variant2", c_var2);
                                            //      contentValues.put("variant_price2", c_varv2);

                                            webserviceQuery = webserviceQuery + "variant1,";
                                            webserviceValues = webserviceValues + "'Regular'" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price1,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";

                                            webserviceQuery = webserviceQuery + "variant2,";
                                            webserviceValues = webserviceValues + "'" + c_var2 + "',";

                                            webserviceQuery = webserviceQuery + "variant_price2,";
                                            webserviceValues = webserviceValues + "'" + c_varv2 + "',";

                                        }

                                        if (c_var3.equals("")) {
                                            //   contentValues.put("variant3", "");
                                            //   contentValues.put("variant_price3", "");

                                            webserviceQuery = webserviceQuery + "variant3,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price3,";
                                            webserviceValues = webserviceValues + "''" + ",";


                                        } else {
                                            //    contentValues.put("variant1", "Regular");
                                            //    contentValues.put("variant_price1", imp);
                                            //    contentValues.put("variant3", c_var3);
                                            //    contentValues.put("variant_price3", c_varv3);

                                            webserviceQuery = webserviceQuery + "variant1,";
                                            webserviceValues = webserviceValues + "'Regular'" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price1,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";

                                            webserviceQuery = webserviceQuery + "variant3,";
                                            webserviceValues = webserviceValues + "'" + c_var3 + "',";

                                            webserviceQuery = webserviceQuery + "variant_price3,";
                                            webserviceValues = webserviceValues + "'" + c_varv3 + "',";

                                        }

                                        if (c_var4.equals("")) {
                                            //   contentValues.put("variant4", "");
                                            //   contentValues.put("variant_price4", "");

                                            webserviceQuery = webserviceQuery + "variant4,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price4,";
                                            webserviceValues = webserviceValues + "''" + ",";


                                        } else {
                                            //   contentValues.put("variant1", "Regular");
                                            //   contentValues.put("variant_price1", imp);
                                            //   contentValues.put("variant4", c_var4);
                                            //   contentValues.put("variant_price4", c_varv4);

                                            webserviceQuery = webserviceQuery + "variant1,";
                                            webserviceValues = webserviceValues + "'Regular'" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price1,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";

                                            webserviceQuery = webserviceQuery + "variant4,";
                                            webserviceValues = webserviceValues + "'" + c_var4 + "',";

                                            webserviceQuery = webserviceQuery + "variant_price4,";
                                            webserviceValues = webserviceValues + "'" + c_varv4 + "',";


                                        }

                                        if (c_var5.equals("")) {
                                            //    contentValues.put("variant5", "");
                                            //   contentValues.put("variant_price5", "");

                                            webserviceQuery = webserviceQuery + "variant5,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price5,";
                                            webserviceValues = webserviceValues + "''" + ",";


                                        } else {
                                            //  contentValues.put("variant1", "Regular");
                                            //  contentValues.put("variant_price1", imp);
                                            //  contentValues.put("variant5", c_var5);
                                            //  contentValues.put("variant_price5", c_varv5);

                                            webserviceQuery = webserviceQuery + "variant1,";
                                            webserviceValues = webserviceValues + "'Regular'" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price1,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";

                                            webserviceQuery = webserviceQuery + "variant5,";
                                            webserviceValues = webserviceValues + "'" + c_var5 + "',";

                                            webserviceQuery = webserviceQuery + "variant_price5,";
                                            webserviceValues = webserviceValues + "'" + c_varv5 + "',";
                                        }

//                                                contentValues.put("tax_value", imp41);
                                        if (imp5.equals("")) {
                                            // contentValues.put("disc_type", "%");

                                            webserviceQuery = webserviceQuery + "disc_type,";
                                            webserviceValues = webserviceValues + "'%'" + ",";

                                        } else {
                                            //contentValues.put("disc_type", imp5);

                                            webserviceQuery = webserviceQuery + "disc_type,";
                                            webserviceValues = webserviceValues + "'" + imp5 + "',";
                                        }
                                        if (c_isveg.equals("")) {
                                            // contentValues.put("disc_type", "%");

                                            webserviceQuery = webserviceQuery + "is_veg,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //contentValues.put("disc_type", imp5);

                                            webserviceQuery = webserviceQuery + "is_veg,";
                                            webserviceValues = webserviceValues + "'" + c_isveg + "',";
                                        }
                                        if (c_pckcrgs.equals("")) {
                                            // contentValues.put("disc_type", "%");

                                            webserviceQuery = webserviceQuery + "packing_charges,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //contentValues.put("disc_type", imp5);

                                            webserviceQuery = webserviceQuery + "packing_charges,";
                                            webserviceValues = webserviceValues + "'" + c_pckcrgs + "',";
                                        }
                                        if (imp6.equals("")) {
                                            //contentValues.put("disc_value", "0");

                                            webserviceQuery = webserviceQuery + "disc_value,";
                                            webserviceValues = webserviceValues + "'0'" + ",";

                                        } else {
                                            //  contentValues.put("disc_value", imp6);

                                            webserviceQuery = webserviceQuery + "disc_value,";
                                            webserviceValues = webserviceValues + "'" + imp6 + "',";

                                        }
                                        // contentValues.put("barcode_value", imp7);
                                        // contentValues.put("favourites", "no");

                                        webserviceQuery = webserviceQuery + "barcode_value,";
                                        webserviceValues = webserviceValues + "'" + imp7 + "',";

                                        webserviceQuery = webserviceQuery + "favourites,";
                                        webserviceValues = webserviceValues + "'no'" + ",";


                                        if (imp8.toString().equals("Unit") || imp8.toString().equalsIgnoreCase("unit") || imp8.toString().equals("")) {
                                            //contentValues.put("unit_type", "Unit");

                                            webserviceQuery = webserviceQuery + "unit_type)";
                                            webserviceValues = webserviceValues + "'Unit'" + ")";

                                        } else {
                                            // contentValues.put("unit_type", "Weight");

                                            webserviceQuery = webserviceQuery + "unit_type)";
                                            webserviceValues = webserviceValues + "'Weight'" + ")";

                                        }
                                        webserviceQuery = webserviceQuery + webserviceValues;
                                        //  webserviceArrayList.add(webserviceQuery);


                                        try {
                                            db.execSQL(webserviceQuery);

                                            SQLiteDatabase dbapp = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                            String sql = "SELECT MAX(_id)  FROM Items";
                                            Cursor allrows_a = dbapp.rawQuery(sql, null);
                                            int lastid = 0;
                                            if (allrows_a.moveToFirst()) {
                                                lastid = allrows_a.getInt(0);
                                            }
                                            allrows_a.close();
                                            dbapp.close();


                                            SQLiteDatabase syncdbapp = getActivity().openOrCreateDatabase("syncdbapp", Context.MODE_PRIVATE, null);
                                            ContentValues cv = new ContentValues();
                                            cv.put("lastsyncedid", lastid + "");
                                            String where1 = "tablename = " + "'Items'";
                                            syncdbapp.update("appdata", cv, where1, new String[]{});
                                            syncdbapp.close();

                                            Log.e("webservicequery", webserviceQuery);
                                        } catch (SQLException e) {
                                            Log.e("webs-exception", webserviceQuery);
                                            e.printStackTrace();
                                        }
                                        webservicequery(webserviceQuery);
                                    }
                                    cb1.close();


                                }
                                ccursor1.close();


//                            Toast.makeText(getActivity(), "category "+tv5.getText().toString(), Toast.LENGTH_SHORT).show();

                                if (imp3.equals("") || imp3.length() <= 0 || imp3.equals("None")) {

                                } else {
                                    Cursor cursor2 = db.rawQuery("SELECT * FROM Hotel WHERE name = '" + imp3 + "'", null);
                                    if (cursor2.moveToFirst()) {

                                    } else {
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("name", imp3);

                                        webserviceQuery1 = "INSERT INTO Hotel(";
                                        webserviceValues1 = "VALUES(";

                                        webserviceQuery1 = webserviceQuery1 + "name)";
                                        webserviceValues1 = webserviceValues1 + "'" + imp3 + "')";
                                        webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                        db.execSQL(webserviceQuery1);
                                        webservicequery(webserviceQuery1);
//
//                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Hotel");
//                                resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
//                                getActivity().getContentResolver().notifyChange(resultUri, null);

                                        // db.insert("Hotel", null, contentValues);
                                        // csvExportCVArrayList.add(new CSVExportCV(contentValues,"Hotel"));
                                    }
                                    cursor2.close();
                                }

//                            Toast.makeText(getActivity(), "tax "+tv6.getText().toString(), Toast.LENGTH_SHORT).show();

                                if (imp4.equals("") || imp4.length() <= 0 || imp4.equals("None") || imp41.equals("")) {

                                } else {
                                    if (imp4.equals("") || imp4.equals("None") || imp4.equals("NONE")) {

                                    } else {
                                        Cursor cursor31 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + imp4 + "(" + imp41 + "%)" + "'", null);
                                        if (cursor31.moveToFirst()) {

                                        } else {

                                            webserviceQuery1 = "INSERT INTO Taxes(";
                                            webserviceValues1 = "VALUES(";

                                            webserviceQuery1 = webserviceQuery1 + "taxname,";
                                            webserviceQuery1 = webserviceQuery1 + "value,";
                                            webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                            webserviceQuery1 = webserviceQuery1 + "tax1,";
                                            webserviceQuery1 = webserviceQuery1 + "tax2,";
                                            webserviceQuery1 = webserviceQuery1 + "tax3)";

                                            webserviceValues1 = webserviceValues1 + "'" + imp4 + "(" + imp41 + "%)" + "',";
                                            webserviceValues1 = webserviceValues1 + "'" + imp41 + "',";
                                            webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                            webserviceValues1 = webserviceValues1 + "'dine_in',";
                                            webserviceValues1 = webserviceValues1 + "'takeaway',";
                                            webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                            webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                            db.execSQL(webserviceQuery1);
                                            webservicequery(webserviceQuery1);
                                            Log.e("webservicequery1", webserviceQuery1);

//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", imp4 + "(" + imp41 + "%)");
//                                    contentValues.put("value", imp41);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    db.insert("Taxes", null, contentValues);
                                            //  csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
//                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
//                                    resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
//                                    getActivity().getContentResolver().notifyChange(resultUri, null);

                                        }
                                        cursor31.close();
                                    }

                                    if (c_tax2.equals("") || c_tax2.equals("None") || c_tax2.equals("NONE") || c_taxv2.equals("")) {

                                    } else {
                                        Cursor cursor32 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax2 + "(" + c_taxv2 + "%)" + "'", null);
                                        if (cursor32.moveToFirst()) {

                                        } else {


                                            webserviceQuery1 = "INSERT INTO Taxes(";
                                            webserviceValues1 = "VALUES(";

                                            webserviceQuery1 = webserviceQuery1 + "taxname,";
                                            webserviceQuery1 = webserviceQuery1 + "value,";
                                            webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                            webserviceQuery1 = webserviceQuery1 + "tax1,";
                                            webserviceQuery1 = webserviceQuery1 + "tax2,";
                                            webserviceQuery1 = webserviceQuery1 + "tax3)";

                                            webserviceValues1 = webserviceValues1 + "'" + c_tax2 + "(" + c_taxv2 + "%)" + "',";
                                            webserviceValues1 = webserviceValues1 + "'" + c_taxv2 + "',";
                                            webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                            webserviceValues1 = webserviceValues1 + "'dine_in',";
                                            webserviceValues1 = webserviceValues1 + "'takeaway',";
                                            webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                            webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                            db.execSQL(webserviceQuery1);
                                            webservicequery(webserviceQuery1);
                                            Log.e("webservicequery1", webserviceQuery1);
//

//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax2 + "(" + c_taxv2 + "%)");
//                                    contentValues.put("value", c_taxv2);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    db.insert("Taxes", null, contentValues);
                                            //  csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));

                                        }
                                        cursor32.close();
                                    }

                                    if (c_tax3.equals("") || c_tax3.equals("None") || c_tax3.equals("NONE") || c_taxv3.equals("")) {

                                    } else {
                                        Cursor cursor33 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax3 + "(" + c_taxv3 + "%)" + "'", null);
                                        if (cursor33.moveToFirst()) {

                                        } else {

                                            webserviceQuery1 = "INSERT INTO Taxes(";
                                            webserviceValues1 = "VALUES(";

                                            webserviceQuery1 = webserviceQuery1 + "taxname,";
                                            webserviceQuery1 = webserviceQuery1 + "value,";
                                            webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                            webserviceQuery1 = webserviceQuery1 + "tax1,";
                                            webserviceQuery1 = webserviceQuery1 + "tax2,";
                                            webserviceQuery1 = webserviceQuery1 + "tax3)";

                                            webserviceValues1 = webserviceValues1 + "'" + c_tax3 + "(" + c_taxv3 + "%)" + "',";
                                            webserviceValues1 = webserviceValues1 + "'" + c_taxv3 + "',";
                                            webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                            webserviceValues1 = webserviceValues1 + "'dine_in',";
                                            webserviceValues1 = webserviceValues1 + "'takeaway',";
                                            webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                            webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                            db.execSQL(webserviceQuery1);
                                            webservicequery(webserviceQuery1);
                                            Log.e("webservicequery1", webserviceQuery1);


                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("taxname", c_tax3 + "(" + c_taxv3 + "%)");
                                            contentValues.put("value", c_taxv3);
                                            contentValues.put("taxtype", "Itemtax");
                                            contentValues.put("tax1", "dine_in");
                                            contentValues.put("tax2", "takeaway");
                                            contentValues.put("tax3", "homedelivery");
                                            db.insert("Taxes", null, contentValues);
                                            //csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));

                                        }
                                        cursor33.close();
                                    }

                                    if (c_tax4.equals("") || c_tax4.equals("None") || c_tax4.equals("NONE") || c_taxv4.equals("")) {

                                    } else {
                                        Cursor cursor34 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax4 + "(" + c_taxv4 + "%)" + "'", null);
                                        if (cursor34.moveToFirst()) {

                                        } else {


                                            webserviceQuery1 = "INSERT INTO Taxes(";
                                            webserviceValues1 = "VALUES(";

                                            webserviceQuery1 = webserviceQuery1 + "taxname,";
                                            webserviceQuery1 = webserviceQuery1 + "value,";
                                            webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                            webserviceQuery1 = webserviceQuery1 + "tax1,";
                                            webserviceQuery1 = webserviceQuery1 + "tax2,";
                                            webserviceQuery1 = webserviceQuery1 + "tax3)";

                                            webserviceValues1 = webserviceValues1 + "'" + c_tax4 + "(" + c_taxv4 + "%)" + "',";
                                            webserviceValues1 = webserviceValues1 + "'" + c_taxv4 + "',";
                                            webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                            webserviceValues1 = webserviceValues1 + "'dine_in',";
                                            webserviceValues1 = webserviceValues1 + "'takeaway',";
                                            webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                            webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                            db.execSQL(webserviceQuery1);
                                            webservicequery(webserviceQuery1);
                                            Log.e("webservicequery1", webserviceQuery1);

//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax4 + "(" + c_taxv4 + "%)");
//                                    contentValues.put("value", c_taxv4);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    db.insert("Taxes", null, contentValues);
                                            // csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));

                                        }
                                        cursor34.close();
                                    }

                                    if (c_tax5.equals("") || c_tax5.equals("None") || c_tax5.equals("NONE") || c_taxv5.equals("")) {

                                    } else {
                                        Cursor cursor35 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax5 + "(" + c_taxv5 + "%)" + "'", null);
                                        if (cursor35.moveToFirst()) {

                                        } else {


                                            webserviceQuery1 = "INSERT INTO Taxes(";
                                            webserviceValues1 = "VALUES(";

                                            webserviceQuery1 = webserviceQuery1 + "taxname,";
                                            webserviceQuery1 = webserviceQuery1 + "value,";
                                            webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                            webserviceQuery1 = webserviceQuery1 + "tax1,";
                                            webserviceQuery1 = webserviceQuery1 + "tax2,";
                                            webserviceQuery1 = webserviceQuery1 + "tax3)";

                                            webserviceValues1 = webserviceValues1 + "'" + c_tax5 + "(" + c_taxv5 + "%)" + "',";
                                            webserviceValues1 = webserviceValues1 + "'" + c_taxv5 + "',";
                                            webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                            webserviceValues1 = webserviceValues1 + "'dine_in',";
                                            webserviceValues1 = webserviceValues1 + "'takeaway',";
                                            webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                            webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                            db.execSQL(webserviceQuery1);

                                            webservicequery(webserviceQuery1);
                                            Log.e("webservicequery1", webserviceQuery1);

//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax5 + "(" + c_taxv5 + "%)");
//                                    contentValues.put("value", c_taxv5);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                   db.insert("Taxes", null, contentValues);
                                            //csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
                                        }
                                        cursor35.close();
                                    }
                                }

                            }

                        }

                    } else {


                        webserviceQuery = "INSERT INTO Items(";
                        webserviceValues = "VALUES(";
                        String[] str = line.split(",", 30);  // defining 3 columns with null or blank field //values acceptance

                        //Id, Company,Name,Price

                        String imp1 = "0", imp2 = "0";

                        String name = str[0];
                        String issn = str[1];
                        Log.e("name", name);
                        Log.e("issn", issn);

                        String imp = str[2];
                        imp1 = str[3];
                        imp2 = str[4];
                        String imp3 = str[5];
                        String imp4 = str[6];
                        String imp41 = str[7];
                        String imp5 = str[8];
                        String imp6 = str[9];
                        String imp7 = str[10];
                        String imp8 = str[11];
                        String c_tax2 = str[12];
                        String c_taxv2 = str[13];
                        String c_tax3 = str[14];
                        String c_taxv3 = str[15];
                        String c_tax4 = str[16];
                        String c_taxv4 = str[17];
                        String c_tax5 = str[18];
                        String c_taxv5 = str[19];
                        String c_var2 = str[20];
                        String c_varv2 = str[21];
                        String c_var3 = str[22];
                        String c_varv3 = str[23];
                        String c_var4 = str[24];
                        String c_varv4 = str[25];
                        String c_var5 = str[26];
                        String c_varv5 = str[27];
                        String c_isveg = str[28];
                        String c_pckcrgs = str[29];


                        if (issn.toString().contains("'")) {
                            issn = issn.replace("'", "");
                        }

                        if (name.contains("\"")) {
                            name = name.replaceAll("\"", "");
                        }

                        if (issn.contains("\"")) {
                            issn = issn.replaceAll("\"", "");
                        }

                        if (issn.contains("'")) {
                            issn = issn.replaceAll("'", "");
                        }

                        if (issn.contains("&")) {
                            issn = issn.replaceAll("&", " and ");
                        }

                        if (issn.contains("(")) {
                            issn = issn.replaceAll("(", "");
                        }

                        if (issn.contains(")")) {
                            issn = issn.replaceAll(")", "");
                        }

                        if (imp.contains("\"")) {
                            imp = imp.replaceAll("\"", "");
                        }

                        if (imp1.contains("\"")) {
                            imp1 = imp1.replaceAll("\"", "");
                        }

                        if (imp2.contains("\"")) {
                            imp2 = imp2.replaceAll("\"", "");
                        }

                        if (imp3.contains("\"")) {
                            imp3 = imp3.replaceAll("\"", "");
                        }

                        if (imp4.contains("\"")) {
                            imp4 = imp4.replaceAll("\"", "");
                        }

                        if (c_tax2.contains("\"")) {
                            c_tax2 = c_tax2.replaceAll("\"", "");
                        }

                        if (c_taxv2.contains("\"")) {
                            c_taxv2 = c_taxv2.replaceAll("\"", "");
                        }

                        if (c_tax3.contains("\"")) {
                            c_tax3 = c_tax3.replaceAll("\"", "");
                        }

                        if (c_taxv3.contains("\"")) {
                            c_taxv3 = c_taxv3.replaceAll("\"", "");
                        }

                        if (c_tax4.contains("\"")) {
                            c_tax4 = c_tax4.replaceAll("\"", "");
                        }

                        if (c_taxv4.contains("\"")) {
                            c_taxv4 = c_taxv4.replaceAll("\"", "");
                        }

                        if (c_tax5.contains("\"")) {
                            c_tax5 = c_tax5.replaceAll("\"", "");
                        }

                        if (c_taxv5.contains("\"")) {
                            c_taxv5 = c_taxv5.replaceAll("\"", "");
                        }

                        if (imp4.contains("(")) {
                            String match = "(";
                            int position = imp4.indexOf(match);
                            imp4 = imp4.substring(0, position);
                        }

                        if (c_tax2.contains("(")) {
                            String match = "(";
                            int position = c_tax2.indexOf(match);
                            c_tax2 = c_tax2.substring(0, position);
                        }

                        if (c_tax3.contains("(")) {
                            String match = "(";
                            int position = c_tax3.indexOf(match);
                            c_tax3 = c_tax3.substring(0, position);
                        }

                        if (c_tax4.contains("(")) {
                            String match = "(";
                            int position = c_tax4.indexOf(match);
                            c_tax4 = c_tax4.substring(0, position);
                        }

                        if (c_tax5.contains("(")) {
                            String match = "(";
                            int position = c_tax5.indexOf(match);
                            c_tax5 = c_tax5.substring(0, position);
                        }

                        if (imp41.contains("\"")) {
                            imp41 = imp41.replaceAll("\"", "");
                        }

                        if (imp5.contains("\"")) {
                            imp5 = imp5.replaceAll("\"", "");
                        }

                        if (imp6.contains("\"")) {
                            imp6 = imp6.replaceAll("\"", "");
                        }

                        if (imp7.contains("\"")) {
                            imp7 = imp7.replaceAll("\"", "");
                        }

                        if (c_var2.contains("\"")) {
                            c_var2 = c_var2.replaceAll("\"", "");
                        }

                        if (c_varv2.contains("\"")) {
                            c_varv2 = c_varv2.replaceAll("\"", "");
                        }

                        if (c_var3.contains("\"")) {
                            c_var3 = c_var3.replaceAll("\"", "");
                        }

                        if (c_varv3.contains("\"")) {
                            c_varv3 = c_varv3.replaceAll("\"", "");
                        }

                        if (c_var4.contains("\"")) {
                            c_var4 = c_var4.replaceAll("\"", "");
                        }

                        if (c_varv4.contains("\"")) {
                            c_varv4 = c_varv4.replaceAll("\"", "");
                        }

                        if (c_var5.contains("\"")) {
                            c_var5 = c_var5.replaceAll("\"", "");
                        }

                        if (c_varv5.contains("\"")) {
                            c_varv5 = c_varv5.replaceAll("\"", "");
                        }

                        if (c_isveg.contains("\"")) {
                            c_isveg = c_isveg.replaceAll("\"", "");
                        }

                        if (c_isveg.contains("\"")) {
                            c_isveg = c_isveg.replaceAll("\"", "");
                        }

                        if (c_pckcrgs.contains("\"")) {
                            c_pckcrgs = c_pckcrgs.replaceAll("\"", "");
                        }

                        if (c_pckcrgs.contains("\"")) {
                            c_pckcrgs = c_pckcrgs.replaceAll("\"", "");
                        }

                        if (imp8.contains("\"")) {
                            imp8 = imp8.replaceAll("\"", "");
                        }

                        Log.e("tax1", imp4);
                        Log.e("tax2", c_tax2);
                        Log.e("tax3", c_tax3);
                        Log.e("tax4", c_tax4);
                        Log.e("tax5", c_tax5);

                        if (issn.equalsIgnoreCase("Itemname")) {

                        } else {

                            if (imp1.equals("")) {
                                imp1 = "0";
                            }
                            if (imp.equals("")) {
                                imp = "0";
                            }
                            if (imp2.equals("")) {
                                imp2 = "0";
                            }

                            float nb = Float.parseFloat(imp1) + Float.parseFloat(imp2);
                            Cursor cursor = db.rawQuery("SELECT * FROM Items", null);
                            if (cursor.moveToFirst()) {

                            } else {
                                Cursor cb = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + issn + "'", null);
                                if (cb.moveToFirst()) {

                                } else {

                                    Cursor cb1 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '"+imp7+"' AND barcode_value != ''", null);
                                    if (cb1.moveToFirst()) {

                                    }else {

                                        webserviceQuery = "INSERT INTO Items(";
                                        webserviceValues = "VALUES(";

                                        //  ContentValues contentValues = new ContentValues();
                                        int itemname_leng = issn.length();
                                        String str1 = "";
                                        if (issn.length() <= 3) {
                                            str1 = issn.substring(0, 1);
                                        } else {
                                            str1 = issn.substring(0, 2);
                                        }
                                        String str2 = str1.toUpperCase();
                                        //  contentValues.put("image_text", str2);

                                        webserviceQuery = webserviceQuery + "image_text,";
                                        webserviceValues = webserviceValues + "'" + str2 + "',";

                                        // contentValues.put("image", "");
                                        webserviceQuery = webserviceQuery + "image,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                        // contentValues.put("itemname", issn);
                                        webserviceQuery = webserviceQuery + "itemname,";
                                        webserviceValues = webserviceValues + "'" + issn + "',";

/*  webserviceQuery="INSERT INTO Items (image_text, image, itemname, price, stockquan," +
          "category,itemtax,tax_value,itemtax2,tax_value2,itemtax3,tax_value3,itemtax4,tax_value4,itemtax5,tax_value5,variant2,variant_price2,)" +
          "VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway')";*/

//                                    contentValues.put("price", imp);
                                        if (imp.equals("")) {
                                            //    contentValues.put("price", "0");
                                            webserviceQuery = webserviceQuery + "price,";
                                            webserviceValues = webserviceValues + "'0'" + ",";
                                        } else {
                                            //    contentValues.put("price", imp);
                                            webserviceQuery = webserviceQuery + "price,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";
                                        }
                                        //   contentValues.put("stockquan", String.valueOf(nb));

                                        webserviceQuery = webserviceQuery + "stockquan,";
                                        webserviceValues = webserviceValues + String.valueOf(nb) + ",";

//                                                contentValues.put("up_quan", imp2);
                                        if (imp3.equals("")) {
                                            //    contentValues.put("category", "'None'");

                                            webserviceQuery = webserviceQuery + "category,";
                                            webserviceValues = webserviceValues + "'None',";

                                        } else {
                                            //     contentValues.put("category", imp3);

                                            webserviceQuery = webserviceQuery + "category,";
                                            webserviceValues = webserviceValues + "'" + imp3 + "',";
                                        }

                                        if (imp4.equals("") || imp4.equals("None") || imp4.equals("NONE") || imp41.equals("")) {
                                            //      contentValues.put("itemtax", "None");
                                            //      contentValues.put("tax_value", "''");

                                            webserviceQuery = webserviceQuery + "itemtax,";
                                            webserviceValues = webserviceValues + "'None',";

                                            webserviceQuery = webserviceQuery + "tax_value,";
                                            webserviceValues = webserviceValues + "'',";

                                        } else {
                                            //      contentValues.put("itemtax", imp4+"("+imp41+"%)");
                                            //      contentValues.put("tax_value", "'"+imp41+"'");

                                            webserviceQuery = webserviceQuery + "itemtax,";
                                            webserviceValues = webserviceValues + "'" + imp4 + "(" + imp41 + "%)" + "',";

                                            webserviceQuery = webserviceQuery + "tax_value,";
                                            webserviceValues = webserviceValues + "'" + imp41 + "',";
                                        }

                                        if (c_tax2.equals("") || c_tax2.equals("None") || c_tax2.equals("NONE") || c_taxv2.equals("")) {
                                            //       contentValues.put("itemtax2", "'None'");
                                            //       contentValues.put("tax_value2", "''");

                                            webserviceQuery = webserviceQuery + "itemtax2,";
                                            webserviceValues = webserviceValues + "'None'" + ",";

                                            webserviceQuery = webserviceQuery + "tax_value2,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //      contentValues.put("itemtax2", c_tax2+"("+c_taxv2+"%)");
                                            //      contentValues.put("tax_value2", c_taxv2);

                                            webserviceQuery = webserviceQuery + "itemtax2,";
                                            webserviceValues = webserviceValues + "'" + c_tax2 + "(" + c_taxv2 + "%)" + "',";

                                            webserviceQuery = webserviceQuery + "tax_value2,";
                                            webserviceValues = webserviceValues + "'" + c_taxv2 + "',";
                                        }

                                        if (c_tax3.equals("") || c_tax3.equals("None") || c_tax3.equals("NONE") || c_taxv3.equals("")) {
                                            //      contentValues.put("itemtax3", "None");
                                            //      contentValues.put("tax_value3", "");

                                            webserviceQuery = webserviceQuery + "itemtax3,";
                                            webserviceValues = webserviceValues + "'None'" + ",";

                                            webserviceQuery = webserviceQuery + "tax_value3,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //      contentValues.put("itemtax3", c_tax3+"("+c_taxv3+"%)");
                                            //      contentValues.put("tax_value3", c_taxv3);

                                            webserviceQuery = webserviceQuery + "itemtax3" + ",";
                                            webserviceValues = webserviceValues + "'" + c_tax3 + "(" + c_taxv3 + "%)" + "',";

                                            webserviceQuery = webserviceQuery + "tax_value3,";
                                            webserviceValues = webserviceValues + "'" + c_taxv3 + "',";

                                        }

                                        if (c_tax4.equals("") || c_tax4.equals("None") || c_tax4.equals("NONE") || c_taxv4.equals("")) {
                                            //      contentValues.put("itemtax4", "None");
                                            //      contentValues.put("tax_value4", "");

                                            webserviceQuery = webserviceQuery + "itemtax4" + ",";
                                            webserviceValues = webserviceValues + "'None',";

                                            webserviceQuery = webserviceQuery + "tax_value4,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //       contentValues.put("itemtax4", c_tax4+"("+c_taxv4+"%)");
                                            //       contentValues.put("tax_value4", c_taxv4);


                                            webserviceQuery = webserviceQuery + "itemtax4" + ",";
                                            webserviceValues = webserviceValues + "'" + c_tax4 + "(" + c_taxv4 + "%)',";

                                            webserviceQuery = webserviceQuery + "tax_value4,";
                                            webserviceValues = webserviceValues + "'" + c_taxv4 + "',";
                                        }

                                        if (c_tax5.equals("") || c_tax5.equals("None") || c_tax5.equals("NONE") || c_taxv5.equals("")) {
                                            //        contentValues.put("itemtax5", "None");
                                            //       contentValues.put("tax_value5", "");

                                            webserviceQuery = webserviceQuery + "itemtax5,";
                                            webserviceValues = webserviceValues + "'None'" + ",";

                                            webserviceQuery = webserviceQuery + "tax_value5,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //        contentValues.put("itemtax5", c_tax5+"("+c_taxv5+"%)");
                                            //        contentValues.put("tax_value5", c_taxv5);

                                            webserviceQuery = webserviceQuery + "itemtax5,";
                                            webserviceValues = webserviceValues + "'" + c_tax5 + "(" + c_taxv5 + "%)" + "',";

                                            webserviceQuery = webserviceQuery + "tax_value5,";
                                            webserviceValues = webserviceValues + "'" + c_taxv5 + "',";

                                        }

                                        if (c_var2.equals("")) {
                                            //       contentValues.put("variant2", "");
                                            //        contentValues.put("variant_price2", "");

                                            webserviceQuery = webserviceQuery + "variant2,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price2,";
                                            webserviceValues = webserviceValues + "''" + ",";


                                        } else {
                                            //      contentValues.put("variant1", "Regular");
                                            //      contentValues.put("variant_price1", imp);
                                            //      contentValues.put("variant2", c_var2);
                                            //      contentValues.put("variant_price2", c_varv2);

                                            webserviceQuery = webserviceQuery + "variant1,";
                                            webserviceValues = webserviceValues + "'Regular'" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price1,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";

                                            webserviceQuery = webserviceQuery + "variant2,";
                                            webserviceValues = webserviceValues + "'" + c_var2 + "',";

                                            webserviceQuery = webserviceQuery + "variant_price2,";
                                            webserviceValues = webserviceValues + "'" + c_varv2 + "',";

                                        }

                                        if (c_var3.equals("")) {
                                            //   contentValues.put("variant3", "");
                                            //   contentValues.put("variant_price3", "");

                                            webserviceQuery = webserviceQuery + "variant3,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price3,";
                                            webserviceValues = webserviceValues + "''" + ",";


                                        } else {
                                            //    contentValues.put("variant1", "Regular");
                                            //    contentValues.put("variant_price1", imp);
                                            //    contentValues.put("variant3", c_var3);
                                            //    contentValues.put("variant_price3", c_varv3);

                                            webserviceQuery = webserviceQuery + "variant1,";
                                            webserviceValues = webserviceValues + "'Regular'" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price1,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";

                                            webserviceQuery = webserviceQuery + "variant3,";
                                            webserviceValues = webserviceValues + "'" + c_var3 + "',";

                                            webserviceQuery = webserviceQuery + "variant_price3,";
                                            webserviceValues = webserviceValues + "'" + c_varv3 + "',";

                                        }

                                        if (c_var4.equals("")) {
                                            //   contentValues.put("variant4", "");
                                            //   contentValues.put("variant_price4", "");

                                            webserviceQuery = webserviceQuery + "variant4,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price4,";
                                            webserviceValues = webserviceValues + "''" + ",";


                                        } else {
                                            //   contentValues.put("variant1", "Regular");
                                            //   contentValues.put("variant_price1", imp);
                                            //   contentValues.put("variant4", c_var4);
                                            //   contentValues.put("variant_price4", c_varv4);

                                            webserviceQuery = webserviceQuery + "variant1,";
                                            webserviceValues = webserviceValues + "'Regular'" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price1,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";

                                            webserviceQuery = webserviceQuery + "variant4,";
                                            webserviceValues = webserviceValues + "'" + c_var4 + "',";

                                            webserviceQuery = webserviceQuery + "variant_price4,";
                                            webserviceValues = webserviceValues + "'" + c_varv4 + "',";


                                        }

                                        if (c_var5.equals("")) {
                                            //    contentValues.put("variant5", "");
                                            //   contentValues.put("variant_price5", "");

                                            webserviceQuery = webserviceQuery + "variant5,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price5,";
                                            webserviceValues = webserviceValues + "''" + ",";


                                        } else {
                                            //  contentValues.put("variant1", "Regular");
                                            //  contentValues.put("variant_price1", imp);
                                            //  contentValues.put("variant5", c_var5);
                                            //  contentValues.put("variant_price5", c_varv5);

                                            webserviceQuery = webserviceQuery + "variant1,";
                                            webserviceValues = webserviceValues + "'Regular'" + ",";

                                            webserviceQuery = webserviceQuery + "variant_price1,";
                                            webserviceValues = webserviceValues + "'" + imp + "',";

                                            webserviceQuery = webserviceQuery + "variant5,";
                                            webserviceValues = webserviceValues + "'" + c_var5 + "',";

                                            webserviceQuery = webserviceQuery + "variant_price5,";
                                            webserviceValues = webserviceValues + "'" + c_varv5 + "',";
                                        }

//                                                contentValues.put("tax_value", imp41);
                                        if (imp5.equals("")) {
                                            // contentValues.put("disc_type", "%");

                                            webserviceQuery = webserviceQuery + "disc_type,";
                                            webserviceValues = webserviceValues + "'%'" + ",";

                                        } else {
                                            //contentValues.put("disc_type", imp5);

                                            webserviceQuery = webserviceQuery + "disc_type,";
                                            webserviceValues = webserviceValues + "'" + imp5 + "',";
                                        }
                                        if (imp6.equals("")) {
                                            //contentValues.put("disc_value", "0");

                                            webserviceQuery = webserviceQuery + "disc_value,";
                                            webserviceValues = webserviceValues + "'0'" + ",";

                                        } else {
                                            //  contentValues.put("disc_value", imp6);

                                            webserviceQuery = webserviceQuery + "disc_value,";
                                            webserviceValues = webserviceValues + "'" + imp6 + "',";

                                        }
                                        if (c_isveg.equals("")) {
                                            //contentValues.put("disc_value", "0");

                                            webserviceQuery = webserviceQuery + "is_veg,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //  contentValues.put("disc_value", imp6);

                                            webserviceQuery = webserviceQuery + "is_veg,";
                                            webserviceValues = webserviceValues + "'" + c_isveg + "',";

                                        }
                                        if (c_pckcrgs.equals("")) {
                                            //contentValues.put("disc_value", "0");

                                            webserviceQuery = webserviceQuery + "packing_charges,";
                                            webserviceValues = webserviceValues + "''" + ",";

                                        } else {
                                            //  contentValues.put("disc_value", imp6);

                                            webserviceQuery = webserviceQuery + "packing_charges,";
                                            webserviceValues = webserviceValues + "'" + c_pckcrgs + "',";

                                        }
                                        // contentValues.put("barcode_value", imp7);
                                        // contentValues.put("favourites", "no");

                                        webserviceQuery = webserviceQuery + "barcode_value,";
                                        webserviceValues = webserviceValues + "'" + imp7 + "',";

                                        webserviceQuery = webserviceQuery + "favourites,";
                                        webserviceValues = webserviceValues + "'no'" + ",";


                                        if (imp8.toString().equals("Unit") || imp8.toString().equalsIgnoreCase("unit") || imp8.toString().equals("")) {
                                            //contentValues.put("unit_type", "Unit");

                                            webserviceQuery = webserviceQuery + "unit_type)";
                                            webserviceValues = webserviceValues + "'Unit'" + ")";

                                        } else {
                                            // contentValues.put("unit_type", "Weight");

                                            webserviceQuery = webserviceQuery + "unit_type)";
                                            webserviceValues = webserviceValues + "'Weight'" + ")";

                                        }
                                        webserviceQuery = webserviceQuery + webserviceValues;
                                        //    webserviceArrayList.add(webserviceQuery);


                                        try {
                                            db.execSQL(webserviceQuery);

                                            SQLiteDatabase dbapp = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                            String sql = "SELECT MAX(_id)  FROM Items";
                                            Cursor allrows_a = dbapp.rawQuery(sql, null);
                                            int lastid = 0;
                                            if (allrows_a.moveToFirst()) {
                                                lastid = allrows_a.getInt(0);
                                            }
                                            allrows_a.close();
                                            dbapp.close();


                                            SQLiteDatabase syncdbapp = getActivity().openOrCreateDatabase("syncdbapp", Context.MODE_PRIVATE, null);
                                            ContentValues cv = new ContentValues();
                                            cv.put("lastsyncedid", lastid + "");
                                            String where1 = "tablename = " + "'Items'";
                                            syncdbapp.update("appdata", cv, where1, new String[]{});
                                            syncdbapp.close();

                                            Log.e("webservicequery", webserviceQuery);
                                        } catch (SQLException e) {
                                            Log.e("webs-exception", webserviceQuery);
                                            e.printStackTrace();
                                        }

                                        webservicequery(webserviceQuery);
                                    }
                                    cb1.close();


                                }
                                cb.close();
                            }
                            cursor.close();

                            Cursor ccursor1 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + issn + "'", null);
                            if (ccursor1.moveToFirst()) {

                            } else {

                                Cursor cb1 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '"+imp7+"' AND barcode_value != ''", null);
                                if (cb1.moveToFirst()) {

                                }else {

                                    webserviceQuery = "INSERT INTO Items(";
                                    webserviceValues = "VALUES(";

                                    //  ContentValues contentValues = new ContentValues();
                                    int itemname_leng = issn.length();
                                    String str1 = "";
                                    if (issn.length() <= 3) {
                                        str1 = issn.substring(0, 1);
                                    } else {
                                        str1 = issn.substring(0, 2);
                                    }
                                    String str2 = str1.toUpperCase();
                                    //  contentValues.put("image_text", str2);

                                    webserviceQuery = webserviceQuery + "image_text,";
                                    webserviceValues = webserviceValues + "'" + str2 + "',";

                                    // contentValues.put("image", "");
                                    webserviceQuery = webserviceQuery + "image,";
                                    webserviceValues = webserviceValues + "''" + ",";

                                    // contentValues.put("itemname", issn);
                                    webserviceQuery = webserviceQuery + "itemname,";
                                    webserviceValues = webserviceValues + "'" + issn + "',";

/*  webserviceQuery="INSERT INTO Items (image_text, image, itemname, price, stockquan," +
          "category,itemtax,tax_value,itemtax2,tax_value2,itemtax3,tax_value3,itemtax4,tax_value4,itemtax5,tax_value5,variant2,variant_price2,)" +
          "VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway')";*/

//                                    contentValues.put("price", imp);
                                    if (imp.equals("")) {
                                        //    contentValues.put("price", "0");
                                        webserviceQuery = webserviceQuery + "price,";
                                        webserviceValues = webserviceValues + "'0'" + ",";
                                    } else {
                                        //    contentValues.put("price", imp);
                                        webserviceQuery = webserviceQuery + "price,";
                                        webserviceValues = webserviceValues + "'" + imp + "',";
                                    }
                                    //   contentValues.put("stockquan", String.valueOf(nb));

                                    webserviceQuery = webserviceQuery + "stockquan,";
                                    webserviceValues = webserviceValues + String.valueOf(nb) + ",";

//                                                contentValues.put("up_quan", imp2);
                                    if (imp3.equals("")) {
                                        //    contentValues.put("category", "'None'");

                                        webserviceQuery = webserviceQuery + "category,";
                                        webserviceValues = webserviceValues + "'None',";

                                    } else {
                                        //     contentValues.put("category", imp3);

                                        webserviceQuery = webserviceQuery + "category,";
                                        webserviceValues = webserviceValues + "'" + imp3 + "',";
                                    }

                                    if (imp4.equals("") || imp4.equals("None") || imp4.equals("NONE") || imp41.equals("")) {
                                        //      contentValues.put("itemtax", "None");
                                        //      contentValues.put("tax_value", "''");

                                        webserviceQuery = webserviceQuery + "itemtax,";
                                        webserviceValues = webserviceValues + "'None',";

                                        webserviceQuery = webserviceQuery + "tax_value,";
                                        webserviceValues = webserviceValues + "'',";

                                    } else {
                                        //      contentValues.put("itemtax", imp4+"("+imp41+"%)");
                                        //      contentValues.put("tax_value", "'"+imp41+"'");

                                        webserviceQuery = webserviceQuery + "itemtax,";
                                        webserviceValues = webserviceValues + "'" + imp4 + "(" + imp41 + "%)" + "',";

                                        webserviceQuery = webserviceQuery + "tax_value,";
                                        webserviceValues = webserviceValues + "'" + imp41 + "',";
                                    }

                                    if (c_tax2.equals("") || c_tax2.equals("None") || c_tax2.equals("NONE") || c_taxv2.equals("")) {
                                        //       contentValues.put("itemtax2", "'None'");
                                        //       contentValues.put("tax_value2", "''");

                                        webserviceQuery = webserviceQuery + "itemtax2,";
                                        webserviceValues = webserviceValues + "'None'" + ",";

                                        webserviceQuery = webserviceQuery + "tax_value2,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                    } else {
                                        //      contentValues.put("itemtax2", c_tax2+"("+c_taxv2+"%)");
                                        //      contentValues.put("tax_value2", c_taxv2);

                                        webserviceQuery = webserviceQuery + "itemtax2,";
                                        webserviceValues = webserviceValues + "'" + c_tax2 + "(" + c_taxv2 + "%)" + "',";

                                        webserviceQuery = webserviceQuery + "tax_value2,";
                                        webserviceValues = webserviceValues + "'" + c_taxv2 + "',";
                                    }

                                    if (c_tax3.equals("") || c_tax3.equals("None") || c_tax3.equals("NONE") || c_taxv3.equals("")) {
                                        //      contentValues.put("itemtax3", "None");
                                        //      contentValues.put("tax_value3", "");

                                        webserviceQuery = webserviceQuery + "itemtax3,";
                                        webserviceValues = webserviceValues + "'None'" + ",";

                                        webserviceQuery = webserviceQuery + "tax_value3,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                    } else {
                                        //      contentValues.put("itemtax3", c_tax3+"("+c_taxv3+"%)");
                                        //      contentValues.put("tax_value3", c_taxv3);

                                        webserviceQuery = webserviceQuery + "itemtax3" + ",";
                                        webserviceValues = webserviceValues + "'" + c_tax3 + "(" + c_taxv3 + "%)" + "',";

                                        webserviceQuery = webserviceQuery + "tax_value3,";
                                        webserviceValues = webserviceValues + "'" + c_taxv3 + "',";

                                    }

                                    if (c_tax4.equals("") || c_tax4.equals("None") || c_tax4.equals("NONE") || c_taxv4.equals("")) {
                                        //      contentValues.put("itemtax4", "None");
                                        //      contentValues.put("tax_value4", "");

                                        webserviceQuery = webserviceQuery + "itemtax4" + ",";
                                        webserviceValues = webserviceValues + "'None',";

                                        webserviceQuery = webserviceQuery + "tax_value4,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                    } else {
                                        //       contentValues.put("itemtax4", c_tax4+"("+c_taxv4+"%)");
                                        //       contentValues.put("tax_value4", c_taxv4);


                                        webserviceQuery = webserviceQuery + "itemtax4" + ",";
                                        webserviceValues = webserviceValues + "'" + c_tax4 + "(" + c_taxv4 + "%)',";

                                        webserviceQuery = webserviceQuery + "tax_value4,";
                                        webserviceValues = webserviceValues + "'" + c_taxv4 + "',";
                                    }

                                    if (c_tax5.equals("") || c_tax5.equals("None") || c_tax5.equals("NONE") || c_taxv5.equals("")) {
                                        //        contentValues.put("itemtax5", "None");
                                        //       contentValues.put("tax_value5", "");

                                        webserviceQuery = webserviceQuery + "itemtax5,";
                                        webserviceValues = webserviceValues + "'None'" + ",";

                                        webserviceQuery = webserviceQuery + "tax_value5,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                    } else {
                                        //        contentValues.put("itemtax5", c_tax5+"("+c_taxv5+"%)");
                                        //        contentValues.put("tax_value5", c_taxv5);

                                        webserviceQuery = webserviceQuery + "itemtax5,";
                                        webserviceValues = webserviceValues + "'" + c_tax5 + "(" + c_taxv5 + "%)" + "',";

                                        webserviceQuery = webserviceQuery + "tax_value5,";
                                        webserviceValues = webserviceValues + "'" + c_taxv5 + "',";

                                    }

                                    if (c_var2.equals("")) {
                                        //       contentValues.put("variant2", "");
                                        //        contentValues.put("variant_price2", "");

                                        webserviceQuery = webserviceQuery + "variant2,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                        webserviceQuery = webserviceQuery + "variant_price2,";
                                        webserviceValues = webserviceValues + "''" + ",";


                                    } else {
                                        //      contentValues.put("variant1", "Regular");
                                        //      contentValues.put("variant_price1", imp);
                                        //      contentValues.put("variant2", c_var2);
                                        //      contentValues.put("variant_price2", c_varv2);

                                        webserviceQuery = webserviceQuery + "variant1,";
                                        webserviceValues = webserviceValues + "'Regular'" + ",";

                                        webserviceQuery = webserviceQuery + "variant_price1,";
                                        webserviceValues = webserviceValues + "'" + imp + "',";

                                        webserviceQuery = webserviceQuery + "variant2,";
                                        webserviceValues = webserviceValues + "'" + c_var2 + "',";

                                        webserviceQuery = webserviceQuery + "variant_price2,";
                                        webserviceValues = webserviceValues + "'" + c_varv2 + "',";

                                    }

                                    if (c_var3.equals("")) {
                                        //   contentValues.put("variant3", "");
                                        //   contentValues.put("variant_price3", "");

                                        webserviceQuery = webserviceQuery + "variant3,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                        webserviceQuery = webserviceQuery + "variant_price3,";
                                        webserviceValues = webserviceValues + "''" + ",";


                                    } else {
                                        //    contentValues.put("variant1", "Regular");
                                        //    contentValues.put("variant_price1", imp);
                                        //    contentValues.put("variant3", c_var3);
                                        //    contentValues.put("variant_price3", c_varv3);

                                        webserviceQuery = webserviceQuery + "variant1,";
                                        webserviceValues = webserviceValues + "'Regular'" + ",";

                                        webserviceQuery = webserviceQuery + "variant_price1,";
                                        webserviceValues = webserviceValues + "'" + imp + "',";

                                        webserviceQuery = webserviceQuery + "variant3,";
                                        webserviceValues = webserviceValues + "'" + c_var3 + "',";

                                        webserviceQuery = webserviceQuery + "variant_price3,";
                                        webserviceValues = webserviceValues + "'" + c_varv3 + "',";

                                    }

                                    if (c_var4.equals("")) {
                                        //   contentValues.put("variant4", "");
                                        //   contentValues.put("variant_price4", "");

                                        webserviceQuery = webserviceQuery + "variant4,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                        webserviceQuery = webserviceQuery + "variant_price4,";
                                        webserviceValues = webserviceValues + "''" + ",";


                                    } else {
                                        //   contentValues.put("variant1", "Regular");
                                        //   contentValues.put("variant_price1", imp);
                                        //   contentValues.put("variant4", c_var4);
                                        //   contentValues.put("variant_price4", c_varv4);

                                        webserviceQuery = webserviceQuery + "variant1,";
                                        webserviceValues = webserviceValues + "'Regular'" + ",";

                                        webserviceQuery = webserviceQuery + "variant_price1,";
                                        webserviceValues = webserviceValues + "'" + imp + "',";

                                        webserviceQuery = webserviceQuery + "variant4,";
                                        webserviceValues = webserviceValues + "'" + c_var4 + "',";

                                        webserviceQuery = webserviceQuery + "variant_price4,";
                                        webserviceValues = webserviceValues + "'" + c_varv4 + "',";


                                    }

                                    if (c_var5.equals("")) {
                                        //    contentValues.put("variant5", "");
                                        //   contentValues.put("variant_price5", "");

                                        webserviceQuery = webserviceQuery + "variant5,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                        webserviceQuery = webserviceQuery + "variant_price5,";
                                        webserviceValues = webserviceValues + "''" + ",";


                                    } else {
                                        //  contentValues.put("variant1", "Regular");
                                        //  contentValues.put("variant_price1", imp);
                                        //  contentValues.put("variant5", c_var5);
                                        //  contentValues.put("variant_price5", c_varv5);

                                        webserviceQuery = webserviceQuery + "variant1,";
                                        webserviceValues = webserviceValues + "'Regular'" + ",";

                                        webserviceQuery = webserviceQuery + "variant_price1,";
                                        webserviceValues = webserviceValues + "'" + imp + "',";

                                        webserviceQuery = webserviceQuery + "variant5,";
                                        webserviceValues = webserviceValues + "'" + c_var5 + "',";

                                        webserviceQuery = webserviceQuery + "variant_price5,";
                                        webserviceValues = webserviceValues + "'" + c_varv5 + "',";
                                    }

//                                                contentValues.put("tax_value", imp41);
                                    if (imp5.equals("")) {
                                        // contentValues.put("disc_type", "%");

                                        webserviceQuery = webserviceQuery + "disc_type,";
                                        webserviceValues = webserviceValues + "'%'" + ",";

                                    } else {
                                        //contentValues.put("disc_type", imp5);

                                        webserviceQuery = webserviceQuery + "disc_type,";
                                        webserviceValues = webserviceValues + "'" + imp5 + "',";
                                    }
                                    if (imp6.equals("")) {
                                        //contentValues.put("disc_value", "0");

                                        webserviceQuery = webserviceQuery + "disc_value,";
                                        webserviceValues = webserviceValues + "'0'" + ",";

                                    } else {
                                        //  contentValues.put("disc_value", imp6);

                                        webserviceQuery = webserviceQuery + "disc_value,";
                                        webserviceValues = webserviceValues + "'" + imp6 + "',";

                                    }
                                    if (c_isveg.equals("")) {
                                        //contentValues.put("disc_value", "0");

                                        webserviceQuery = webserviceQuery + "is_veg,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                    } else {
                                        //  contentValues.put("disc_value", imp6);

                                        System.out.println("db veg "+c_isveg);
                                        webserviceQuery = webserviceQuery + "is_veg,";
                                        webserviceValues = webserviceValues + "'" + c_isveg + "',";

                                    }
                                    if (c_pckcrgs.equals("")) {
                                        //contentValues.put("disc_value", "0");

                                        webserviceQuery = webserviceQuery + "packing_charges,";
                                        webserviceValues = webserviceValues + "''" + ",";

                                    } else {
                                        //  contentValues.put("disc_value", imp6);

                                        webserviceQuery = webserviceQuery + "packing_charges,";
                                        webserviceValues = webserviceValues + "'" + c_pckcrgs + "',";

                                    }
                                    // contentValues.put("barcode_value", imp7);
                                    // contentValues.put("favourites", "no");

                                    webserviceQuery = webserviceQuery + "barcode_value,";
                                    webserviceValues = webserviceValues + "'" + imp7 + "',";

                                    webserviceQuery = webserviceQuery + "favourites,";
                                    webserviceValues = webserviceValues + "'no'" + ",";


                                    if (imp8.toString().equals("Unit") || imp8.toString().equalsIgnoreCase("unit") || imp8.toString().equals("")) {
                                        //contentValues.put("unit_type", "Unit");

                                        webserviceQuery = webserviceQuery + "unit_type)";
                                        webserviceValues = webserviceValues + "'Unit'" + ")";

                                    } else {
                                        // contentValues.put("unit_type", "Weight");

                                        webserviceQuery = webserviceQuery + "unit_type)";
                                        webserviceValues = webserviceValues + "'Weight'" + ")";

                                    }
                                    webserviceQuery = webserviceQuery + webserviceValues;
                                    //  webserviceArrayList.add(webserviceQuery);


                                    try {
                                        db.execSQL(webserviceQuery);

                                        SQLiteDatabase dbapp = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                        String sql = "SELECT MAX(_id)  FROM Items";
                                        Cursor allrows_a = dbapp.rawQuery(sql, null);
                                        int lastid = 0;
                                        if (allrows_a.moveToFirst()) {
                                            lastid = allrows_a.getInt(0);
                                        }
                                        allrows_a.close();
                                        dbapp.close();


                                        SQLiteDatabase syncdbapp = getActivity().openOrCreateDatabase("syncdbapp", Context.MODE_PRIVATE, null);
                                        ContentValues cv = new ContentValues();
                                        cv.put("lastsyncedid", lastid + "");
                                        String where1 = "tablename = " + "'Items'";
                                        syncdbapp.update("appdata", cv, where1, new String[]{});
                                        syncdbapp.close();

                                        Log.e("webservicequery", webserviceQuery);
                                    } catch (SQLException e) {
                                        Log.e("webs-exception", webserviceQuery);
                                        e.printStackTrace();
                                    }
                                    webservicequery(webserviceQuery);
                                }
                                cb1.close();


                            }
                            ccursor1.close();


//                            Toast.makeText(getActivity(), "category "+tv5.getText().toString(), Toast.LENGTH_SHORT).show();

                            if (imp3.equals("") || imp3.length() <= 0 || imp3.equals("None")) {

                            } else {
                                Cursor cursor2 = db.rawQuery("SELECT * FROM Hotel WHERE name = '" + imp3 + "'", null);
                                if (cursor2.moveToFirst()) {

                                } else {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("name", imp3);

                                    webserviceQuery1 = "INSERT INTO Hotel(";
                                    webserviceValues1 = "VALUES(";

                                    webserviceQuery1 = webserviceQuery1 + "name)";
                                    webserviceValues1 = webserviceValues1 + "'" + imp3 + "')";
                                    webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                    db.execSQL(webserviceQuery1);
                                    webservicequery(webserviceQuery1);
//
//                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Hotel");
//                                resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
//                                getActivity().getContentResolver().notifyChange(resultUri, null);

                                    // db.insert("Hotel", null, contentValues);
                                    // csvExportCVArrayList.add(new CSVExportCV(contentValues,"Hotel"));
                                }
                                cursor2.close();
                            }

//                            Toast.makeText(getActivity(), "tax "+tv6.getText().toString(), Toast.LENGTH_SHORT).show();

                            if (imp4.equals("") || imp4.length() <= 0 || imp4.equals("None") || imp41.equals("")) {

                            } else {
                                if (imp4.equals("") || imp4.equals("None") || imp4.equals("NONE")) {

                                } else {
                                    Cursor cursor31 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + imp4 + "(" + imp41 + "%)" + "'", null);
                                    if (cursor31.moveToFirst()) {

                                    } else {

                                        webserviceQuery1 = "INSERT INTO Taxes(";
                                        webserviceValues1 = "VALUES(";

                                        webserviceQuery1 = webserviceQuery1 + "taxname,";
                                        webserviceQuery1 = webserviceQuery1 + "value,";
                                        webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                        webserviceQuery1 = webserviceQuery1 + "tax1,";
                                        webserviceQuery1 = webserviceQuery1 + "tax2,";
                                        webserviceQuery1 = webserviceQuery1 + "tax3)";

                                        webserviceValues1 = webserviceValues1 + "'" + imp4 + "(" + imp41 + "%)" + "',";
                                        webserviceValues1 = webserviceValues1 + "'" + imp41 + "',";
                                        webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                        webserviceValues1 = webserviceValues1 + "'dine_in',";
                                        webserviceValues1 = webserviceValues1 + "'takeaway',";
                                        webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                        webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                        db.execSQL(webserviceQuery1);
                                        webservicequery(webserviceQuery1);
                                        Log.e("webservicequery1", webserviceQuery1);

//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", imp4 + "(" + imp41 + "%)");
//                                    contentValues.put("value", imp41);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    db.insert("Taxes", null, contentValues);
                                        //  csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
//                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
//                                    resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
//                                    getActivity().getContentResolver().notifyChange(resultUri, null);

                                    }
                                    cursor31.close();
                                }

                                if (c_tax2.equals("") || c_tax2.equals("None") || c_tax2.equals("NONE") || c_taxv2.equals("")) {

                                } else {
                                    Cursor cursor32 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax2 + "(" + c_taxv2 + "%)" + "'", null);
                                    if (cursor32.moveToFirst()) {

                                    } else {


                                        webserviceQuery1 = "INSERT INTO Taxes(";
                                        webserviceValues1 = "VALUES(";

                                        webserviceQuery1 = webserviceQuery1 + "taxname,";
                                        webserviceQuery1 = webserviceQuery1 + "value,";
                                        webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                        webserviceQuery1 = webserviceQuery1 + "tax1,";
                                        webserviceQuery1 = webserviceQuery1 + "tax2,";
                                        webserviceQuery1 = webserviceQuery1 + "tax3)";

                                        webserviceValues1 = webserviceValues1 + "'" + c_tax2 + "(" + c_taxv2 + "%)" + "',";
                                        webserviceValues1 = webserviceValues1 + "'" + c_taxv2 + "',";
                                        webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                        webserviceValues1 = webserviceValues1 + "'dine_in',";
                                        webserviceValues1 = webserviceValues1 + "'takeaway',";
                                        webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                        webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                        db.execSQL(webserviceQuery1);
                                        webservicequery(webserviceQuery1);
                                        Log.e("webservicequery1", webserviceQuery1);

//
//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax2 + "(" + c_taxv2 + "%)");
//                                    contentValues.put("value", c_taxv2);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    db.insert("Taxes", null, contentValues);
                                        //  csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));

                                    }
                                    cursor32.close();
                                }

                                if (c_tax3.equals("") || c_tax3.equals("None") || c_tax3.equals("NONE") || c_taxv3.equals("")) {

                                } else {
                                    Cursor cursor33 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax3 + "(" + c_taxv3 + "%)" + "'", null);
                                    if (cursor33.moveToFirst()) {

                                    } else {

                                        webserviceQuery1 = "INSERT INTO Taxes(";
                                        webserviceValues1 = "VALUES(";

                                        webserviceQuery1 = webserviceQuery1 + "taxname,";
                                        webserviceQuery1 = webserviceQuery1 + "value,";
                                        webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                        webserviceQuery1 = webserviceQuery1 + "tax1,";
                                        webserviceQuery1 = webserviceQuery1 + "tax2,";
                                        webserviceQuery1 = webserviceQuery1 + "tax3)";

                                        webserviceValues1 = webserviceValues1 + "'" + c_tax3 + "(" + c_taxv3 + "%)" + "',";
                                        webserviceValues1 = webserviceValues1 + "'" + c_taxv3 + "',";
                                        webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                        webserviceValues1 = webserviceValues1 + "'dine_in',";
                                        webserviceValues1 = webserviceValues1 + "'takeaway',";
                                        webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                        webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                        db.execSQL(webserviceQuery1);
                                        webservicequery(webserviceQuery1);
                                        Log.e("webservicequery1", webserviceQuery1);


                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("taxname", c_tax3 + "(" + c_taxv3 + "%)");
                                        contentValues.put("value", c_taxv3);
                                        contentValues.put("taxtype", "Itemtax");
                                        contentValues.put("tax1", "dine_in");
                                        contentValues.put("tax2", "takeaway");
                                        contentValues.put("tax3", "homedelivery");
                                        db.insert("Taxes", null, contentValues);
                                        //csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));

                                    }
                                    cursor33.close();
                                }

                                if (c_tax4.equals("") || c_tax4.equals("None") || c_tax4.equals("NONE") || c_taxv4.equals("")) {

                                } else {
                                    Cursor cursor34 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax4 + "(" + c_taxv4 + "%)" + "'", null);
                                    if (cursor34.moveToFirst()) {

                                    } else {


                                        webserviceQuery1 = "INSERT INTO Taxes(";
                                        webserviceValues1 = "VALUES(";

                                        webserviceQuery1 = webserviceQuery1 + "taxname,";
                                        webserviceQuery1 = webserviceQuery1 + "value,";
                                        webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                        webserviceQuery1 = webserviceQuery1 + "tax1,";
                                        webserviceQuery1 = webserviceQuery1 + "tax2,";
                                        webserviceQuery1 = webserviceQuery1 + "tax3)";

                                        webserviceValues1 = webserviceValues1 + "'" + c_tax4 + "(" + c_taxv4 + "%)" + "',";
                                        webserviceValues1 = webserviceValues1 + "'" + c_taxv4 + "',";
                                        webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                        webserviceValues1 = webserviceValues1 + "'dine_in',";
                                        webserviceValues1 = webserviceValues1 + "'takeaway',";
                                        webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                        webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                        db.execSQL(webserviceQuery1);
                                        webservicequery(webserviceQuery1);
                                        Log.e("webservicequery1", webserviceQuery1);

//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax4 + "(" + c_taxv4 + "%)");
//                                    contentValues.put("value", c_taxv4);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                    db.insert("Taxes", null, contentValues);
                                        // csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));

                                    }
                                    cursor34.close();
                                }

                                if (c_tax5.equals("") || c_tax5.equals("None") || c_tax5.equals("NONE") || c_taxv5.equals("")) {

                                } else {
                                    Cursor cursor35 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + c_tax5 + "(" + c_taxv5 + "%)" + "'", null);
                                    if (cursor35.moveToFirst()) {

                                    } else {


                                        webserviceQuery1 = "INSERT INTO Taxes(";
                                        webserviceValues1 = "VALUES(";

                                        webserviceQuery1 = webserviceQuery1 + "taxname,";
                                        webserviceQuery1 = webserviceQuery1 + "value,";
                                        webserviceQuery1 = webserviceQuery1 + "taxtype,";
                                        webserviceQuery1 = webserviceQuery1 + "tax1,";
                                        webserviceQuery1 = webserviceQuery1 + "tax2,";
                                        webserviceQuery1 = webserviceQuery1 + "tax3)";

                                        webserviceValues1 = webserviceValues1 + "'" + c_tax5 + "(" + c_taxv5 + "%)" + "',";
                                        webserviceValues1 = webserviceValues1 + "'" + c_taxv5 + "',";
                                        webserviceValues1 = webserviceValues1 + "'Itemtax',";
                                        webserviceValues1 = webserviceValues1 + "'dine_in',";
                                        webserviceValues1 = webserviceValues1 + "'takeaway',";
                                        webserviceValues1 = webserviceValues1 + "'homedelivery')";

                                        webserviceQuery1 = webserviceQuery1 + webserviceValues1;
                                        db.execSQL(webserviceQuery1);

                                        webservicequery(webserviceQuery1);
                                        Log.e("webservicequery1", webserviceQuery1);

//                                    ContentValues contentValues = new ContentValues();
//                                    contentValues.put("taxname", c_tax5 + "(" + c_taxv5 + "%)");
//                                    contentValues.put("value", c_taxv5);
//                                    contentValues.put("taxtype", "Itemtax");
//                                    contentValues.put("tax1", "dine_in");
//                                    contentValues.put("tax2", "takeaway");
//                                    contentValues.put("tax3", "homedelivery");
//                                   db.insert("Taxes", null, contentValues);
                                        //csvExportCVArrayList.add(new CSVExportCV(contentValues,"Taxes"));
                                    }
                                    cursor35.close();
                                }
                            }

                        }

                    }
                }

            } catch (SQLException e) {
                Log.e("Error", e.getMessage());
            } catch (IOException e) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Dialog d = new Dialog(getActivity());
                        d.setTitle(e.getMessage() + "first");
                        d.show();
                        // db.endTransaction();
                    }
                });
            }


            return null;
        }

        // Show Progress bar before downloading Music
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            // Shows Progress Bar Dialog and then call doInBackground method
            //showDialog(progress_bar_type);



            csvExportCVArrayList.clear();
            //   webserviceArrayList.clear();

            db.execSQL("delete from items");
            db.execSQL("delete from hotel WHERE name != 'All' AND name != 'Favourites'");
            db.execSQL("delete from taxes");

            db.execSQL("UPDATE sqlite_sequence SET seq = 0 WHERE NAME = 'Items'");
            db.execSQL("UPDATE sqlite_sequence SET seq = 0 WHERE NAME = 'Taxes'");
            db.execSQL("UPDATE sqlite_sequence SET seq = 2 WHERE NAME = 'Hotel'");

            deleteAllItems();
            deleteAllCategories();
            webservicequery("delete from taxes");
            webservicequery("ALTER TABLE Taxes AUTO_INCREMENT = 1");

            //  deleteAllItems();

            //   new SyncHelperApp().stopSync(getActivity());
            dialog.setMessage("Uploading CSV data...\nIt may take few secs to few mins based on data size.");
            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);

            dialog.setMax(1000);
            //Set the current progress to zero
            dialog.setProgress(0);



            dialog.show();
        }

        @Override
        protected void onPostExecute(Void result) {


//            Iterator<String> it = my_array_itemname.iterator();
//            while (it.hasNext()) {
//                System.out.println("CSV issss Itemname missed in "+ it.next());
//            }
//
//            Iterator<String> it1 = my_array_comma.iterator();
//            while (it1.hasNext()) {
//                System.out.println("CSV issss comma more in "+ it1.next());
//            }


//            new SyncHelperApp().startSync(getActivity());


            //new SyncHelperApp().startSync(getActivity());

//            Bundle extras=new Bundle();
//            extras.putString("table","taxes");
//            extras.putString("bulk","true");
//            ContentResolver.requestSync(null, AUTHORITY, extras);
//
//            Bundle extras2=new Bundle();
//            extras2.putString("table","hotel");
//            extras2.putString("bulk","true");
//            ContentResolver.requestSync(null, AUTHORITY, extras2);

//            for(int q=0;q<webserviceArrayList.size();q++){
//                Bundle extras3=new Bundle();
//                extras3.putString("table","items");
//                extras3.putString("query",webserviceArrayList.get(q));
//                ContentResolver.requestSync(null, AUTHORITY, extras3);
//            }

//            Bundle extras3=new Bundle();
//            extras3.putString("table","items");
//            extras3.putString("bulk","true");
//            ContentResolver.requestSync(null, AUTHORITY, extras3);



            dialog.dismiss();

            final Dialog dialog1 = new Dialog(getActivity(), R.style.timepicker_date_dialog);
            dialog1.setContentView(R.layout.dialog_items_upload_success_total);
            dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
            dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
            dialog1.show();

//            db.execSQL("delete from Items_Virtual");

            Button done = (Button) dialog1.findViewById(R.id.done);
            done.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    dialog1.dismiss();
                }
            });

            TextView items_count = (TextView) dialog1.findViewById(R.id.items_count);
            TextView category_count = (TextView) dialog1.findViewById(R.id.category_count);
            TextView taxes_count = (TextView) dialog1.findViewById(R.id.taxes_count);

            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);

            Cursor cursor_items = db.rawQuery("SELECT count(*) FROM Items", null);
            cursor_items.moveToFirst();
            int i_count = cursor_items.getInt(0);
            Cursor cursor_cat = db.rawQuery("SELECT count(*) FROM Hotel", null);
            cursor_cat.moveToFirst();
            int c_count = cursor_cat.getInt(0);
            int c12 = c_count-2;
            Cursor cursor_tax = db.rawQuery("SELECT count(*) FROM Taxes", null);
            cursor_tax.moveToFirst();
            int t_count = cursor_tax.getInt(0);

            items_count.setText(String.valueOf(i_count));
            category_count.setText(String.valueOf(c12));
            taxes_count.setText(String.valueOf(t_count));

            if (!spinner.getSelectedItem().toString().equals("All")) {
                //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                countryList = new ArrayList<Country_items>();
                try {
//                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "'", null);
                    System.out.println("COUNT : " + allrows.getCount());


                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            String PlaCe = allrows.getString(2);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                                db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            }
            if (spinner.getSelectedItem().toString().equals("All")) {
                //Toast.makeText(getActivity(), " " + spinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
                countryList = new ArrayList<Country_items>();
                try {
//                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                    System.out.println("COUNT : " + allrows.getCount());


                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            String PlaCe = allrows.getString(2);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                                db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            }

            dataAdapter = new MyCustomAdapter(getActivity(),
                    R.layout.items_list_details, countryList);
//                            final ListView listView = (ListView) rootview.findViewById(R.id.listView);
            // Assign adapter to ListView
            listView.setAdapter(dataAdapter);

            ArrayList<String> my_arrayy = getTableValues2();
            final ArrayAdapter my_Adapterr = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                    my_arrayy);
            spinner.setAdapter(my_Adapterr);

        }
    }




    class MHandler extends Handler {

        WeakReference<DatabaseitemActivity> mActivity;

        MHandler(DatabaseitemActivity activity) {
            mActivity = new WeakReference<DatabaseitemActivity>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            DatabaseitemActivity theActivity = mActivity.get();

            //Message msgs = mHandler.obtainMessage(Global.MSG_WORKTHREAD_SEND_CONNECTBTRESULT);
            if (msg.arg1 == 0) {
                ContentValues contentValues = new ContentValues();
                contentValues.put("status", "");
                String where1 = "_id = '1' ";


                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "BTConn");
                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                resultUri = new Uri.Builder()
                        .scheme("content")
                        .authority(StubProviderApp.AUTHORITY)
                        .path("BTConn")
                        .appendQueryParameter("operation", "update")
                        .appendQueryParameter("_id", "1")
                        .build();
                getActivity().getContentResolver().notifyChange(resultUri, null);

//                db.update("BTConn", contentValues, where1, new String[]{});


            }else {

                ContentValues contentValues = new ContentValues();
                contentValues.put("status", "ok");
                String where1 = "_id = '1' ";

                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "BTConn");
                getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                resultUri = new Uri.Builder()
                        .scheme("content")
                        .authority(StubProviderApp.AUTHORITY)
                        .path("BTConn")
                        .appendQueryParameter("operation", "update")
                        .appendQueryParameter("_id", "1")
                        .build();
                getActivity().getContentResolver().notifyChange(resultUri, null);


//                db.update("BTConn", contentValues, where1, new String[]{});

            }

            switch (msg.what) {
                case Global.MSG_WORKTHREAD_SEND_CONNECTBTRESULT: {
                    int result = msg.arg1;
                    Log.v(TAG, "Connect Result: " + result);
                    theActivity.dialogp.cancel();

                    if (result == 0){

                        ContentValues contentValues = new ContentValues();
                        contentValues.put("status", "");
                        String where1 = "_id = '1' ";

                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "BTConn");
                        getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("BTConn")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", "1")
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                        db.update("BTConn", contentValues, where1, new String[]{});

                    }else {

                        ContentValues contentValues = new ContentValues();
                        contentValues.put("status", "ok");
                        String where1 = "_id = '1' ";

                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "BTConn");
                        getActivity().getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("BTConn")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", "1")
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                        db.update("BTConn", contentValues, where1, new String[]{});

                    }
                    break;
                }

                case Global.CMD_POS_PRINTPICTURERESULT: {
                    int result = msg.arg1;
                    //Toast.makeText(theActivity, (result == 1) ? "Success BT" : "failure",
                    //Toast.LENGTH_SHORT).show();
                    Log.v(TAG, "Result: " + result);
                    break;
                }
            }
        }
    }


    public void printbarcode_bill(Dialog dialog) {

        Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }
        connnet.close();

        Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }
        connusb.close();

        //Toast.makeText(getActivity(), "printbillonly one ", Toast.LENGTH_SHORT).show();
        byte[] setHT34M = {0x1b, 0x44, 0x04, 0x11, 0x19, 0x00};
        byte[] dotfeed = {0x1b, 0x4a, 0x15};
        byte[] HTRight = {0x1b, 0x61, 0x02, 0x09};
        byte[] HT = {0x09};
        byte[] HT1 = {0x09};
        byte[] LF = {0x0d, 0x0a};

        byte[] left = {0x1b, 0x61, 0x00};
        byte[] cen = {0x1b, 0x61, 0x01};
        byte[] right = {0x1b, 0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b, 0x44, 0x19, 0x19, 0x00};
        byte[] horiz = {0x1b, 0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d, 0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        tvkot = new TextView(getActivity());

        Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
        if (print_ty.moveToFirst()) {
            str_print_ty = print_ty.getString(1);
        }
        print_ty.close();

        Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if (cc.moveToFirst()) {
            cc.moveToFirst();
            do {
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    if (str_print_ty.equals("Generic") || str_print_ty.equals("Epson/others")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x20, 0x29, 0x00};//4 tabs 3"
                        nPaperWidth = 576;
                        charlength = 23;
                        charlength1 = 46;
                        charlength2 = 69;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.equals("POS")) {
                            setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                            setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                            nPaperWidth = 576;
                            charlength = 23;
                            charlength1 = 46;
                            charlength2 = 69;
                            quanlentha = 4;
                            HT1 = new byte[]{0x2F};
                            str_line = "------------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------------".getBytes(), LF

                            };
                        }
                    }
                } else {
//                    setHT32 = new byte[]{0x1b,0x44,0x16,0x00};//2 tabs 2"
//                    setHT321 = new byte[]{0x1b,0x44,0x13,0x00};//2 tabs 3"
//                    setHT3212 = new byte[]{0x1b,0x44,0x15,0x00};//2 tabs 3"
//                    setHT33 = new byte[] {0x1b,0x44,0x09,0x19,0x00};//3 tabs 2"
//                    setHT34 = new byte[]{0x1b,0x44,0x06,0x12,0x19,0x00};//4 tabs 2"
//                    nPaperWidth = 384;
//                    charlength = 10;
//                    charlength1 = 20;
//                    charlength2 = 30;
//                    quanlentha = 5;
//                    allbufline = new byte[][]{
//                            left,un1, "--------------------------------".getBytes(), LF
//
//                    };

                    if (str_print_ty.equals("Generic")) {
//                        Toast.makeText(getActivity(), "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    } else {
                        if (str_print_ty.equals("Epson/others")) {
//                        Toast.makeText(getActivity(), "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            nPaperWidth = 384;
                            charlength = 16;
                            charlength1 = 32;
                            charlength2 = 48;
                            quanlentha = 5;
                            HT1 = new byte[]{0x09};
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }else {
                            if (str_print_ty.equals("POS")) {
                                setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                nPaperWidth = 384;
                                charlength = 11;
                                charlength1 = 22;
                                charlength2 = 33;
                                quanlentha = 4;
                                HT1 = new byte[]{0x2F};
                                str_line = "--------------------------------";
                                allbufline = new byte[][]{
                                        left, un1, "--------------------------------".getBytes(), LF
                                };
                            }
                        }
                    }
                }
            } while (cc.moveToNext());
        }
        cc.close();

        String dd = "";
        TextView qazcvb = new TextView(getActivity());
        Cursor cvonnusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (cvonnusb.moveToFirst()) {
            addgets = cvonnusb.getString(1);
            namegets = cvonnusb.getString(2);
            statussusbs = cvonnusb.getString(3);
            dd = cvonnusb.getString(4);
        }
        cvonnusb.close();

        qazcvb.setText(dd);
        if (qazcvb.getText().toString().equals("usb")) {
            runPrintCouponSequence_barcode(dialog);
        } else {
            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }
            getcom.close();

            Cursor getcom1 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + dialogC1_id.getText().toString() + "'", null);
            if (getcom1.moveToFirst()) {
                do {
                    stritemname = getcom1.getString(1);
                    strbarcodeno = getcom1.getString(16);
                    strprice = getcom1.getString(2);
                } while (getcom1.moveToNext());
            }
            getcom1.close();

            allbuf1 = new byte[][]{
                    dotfeed
            };
            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(dotfeed);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(dotfeed);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(dotfeed);    //
                    }
                }
            }

            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {
                allbuf1 = new byte[][]{
                        left, bold, setHT321, "".getBytes(), LF
                };
                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(bold);    //
                    BluetoothPrintDriver.BT_Write(setHT321);    //
                    BT_Write("");
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(setHT321);    //
                        wifiSocket2.WIFI_Write("");
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(setHT321);    //
                            wifiSocket.WIFI_Write("");
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            } else {
                int len = strcompanyname.length();

                if (len >= 30) {
                    String string1 = strcompanyname.substring(0, 30);
                    allbuf1 = new byte[][]{
                            left, bold, setHT321, string1.getBytes(), "..".getBytes(), LF
                    };
//            allbuf1 = new byte[][]{
//                    bold,un1,cen,strcompanyname.getBytes(), LF
//
//            };
                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(bold);    //
                        BluetoothPrintDriver.BT_Write(setHT321);    //
                        BT_Write(string1 + "..");
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(bold);    //
                            wifiSocket2.WIFI_Write(setHT321);    //
                            wifiSocket2.WIFI_Write(string1 + "..");
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(bold);    //
                                wifiSocket.WIFI_Write(setHT321);    //
                                wifiSocket.WIFI_Write(string1 + "..");
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {
                    allbuf1 = new byte[][]{
                            left, bold, setHT321, strcompanyname.getBytes(), LF
                    };
//            allbuf1 = new byte[][]{
//                    bold,un1,cen,strcompanyname.getBytes(), LF
//
//            };
                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(bold);    //
                        BluetoothPrintDriver.BT_Write(setHT321);    //
                        BT_Write(strcompanyname);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(bold);    //
                            wifiSocket2.WIFI_Write(setHT321);    //
                            wifiSocket2.WIFI_Write(strcompanyname);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(bold);    //
                                wifiSocket.WIFI_Write(setHT321);    //
                                wifiSocket.WIFI_Write(strcompanyname);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                }
            }

            tvkot.setText(stritemname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                int len = stritemname.length();
                if (len >= 19) {
                    String string1 = stritemname.substring(0, 19);
                    allbuf2 = new byte[][]{
                            setHT32, left, string1.getBytes(), "..".getBytes(), HT, "Rs".getBytes(), strprice.getBytes(), "/-".getBytes(), LF
                    };

//            allbuf2 = new byte[][]{
//                    normal, stritemname.getBytes(), LF
//
//            };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(setHT32);    //
                        BluetoothPrintDriver.BT_Write(left);    //
                        BT_Write(string1 + "..");
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BT_Write(insert1_rs + strprice + "/-");
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(setHT32);    //
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(string1 + "..");
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(insert1_rs + strprice + "/-");
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(setHT32);    //
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(string1 + "..");
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(insert1_rs + strprice + "/-");
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                    allbuf2 = new byte[][]{
                            setHT32, left, stritemname.getBytes(), HT, "Rs".getBytes(), strprice.getBytes(), "/-".getBytes(), LF
                    };

//            allbuf2 = new byte[][]{
//                    normal, stritemname.getBytes(), LF
//
//            };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(setHT32);    //
                        BluetoothPrintDriver.BT_Write(left);    //
                        BT_Write(stritemname);
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BT_Write(insert1_rs + strprice + "/-");
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(setHT32);    //
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(stritemname);
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(insert1_rs + strprice + "/-");
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(setHT32);    //
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(stritemname);
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(insert1_rs + strprice + "/-");
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                }
            }

            buttonBarcodetype.setText(getResources().getStringArray(
                    R.array.barcodetype)[nBarcodetype]);
            buttonStartOrgx.setText(getResources().getStringArray(
                    R.array.barcodestartorgx)[nStartOrgx]);
            buttonBarcodeWidth.setText(getResources().getStringArray(
                    R.array.barcodewidth)[nBarcodeWidth]);
            buttonBarcodeHeight.setText(getResources().getStringArray(
                    R.array.barcodeheight)[nBarcodeHeight]);
            buttonBarcodeFontType.setText(getResources().getStringArray(
                    R.array.barcodefonttype)[nBarcodeFontType]);
            buttonBarcodeFontPosition.setText(getResources().getStringArray(
                    R.array.barcodefontposition)[nBarcodeFontPosition]);

            tvkot.setText(strbarcodeno);
            if (tvkot.getText().toString().equals("")) {

            } else {
                String strBarcode = strbarcodeno;
                int nOrgx = nStartOrgx * 12;
                int nType = Cmd.Constant.BARCODE_TYPE_CODE128 + nBarcodetype;
                int nWidthX = nBarcodeWidth + 1;
                int nHeight = (nBarcodeHeight + 1) * 24;
                int nHriFontType = nBarcodeFontType;
                int nHriFontPosition = nBarcodeFontPosition;

                if (statussusbs.equals("ok")) {

                    try {

                        Bitmap bitmap = null;
                        ImageView iv = new ImageView(getActivity());

                        bitmap = encodeAsBitmap1(strBarcode, BarcodeFormat.CODE_128, 240, 48);
                        iv.setImageBitmap(bitmap);

                    } catch (WriterException e) {
                        e.printStackTrace();
                    }

//                byte[] buf1 = DataUtils.byteArraysToBytes(allbuf2);
                    Bundle data = new Bundle();
//                data.putByteArray(Global.BYTESPARA1, buf1);;
//                data.putInt(Global.INTPARA7, buf1.length);
                    data.putString(Global.STRPARA1, strBarcode);
                    data.putInt(Global.INTPARA1, nOrgx);
                    data.putInt(Global.INTPARA2, nType);
                    data.putInt(Global.INTPARA3, nWidthX);
                    data.putInt(Global.INTPARA4, nHeight);
                    data.putInt(Global.INTPARA5, nHriFontType);
                    data.putInt(Global.INTPARA6, nHriFontPosition);
//                    DrawerService.workThread.handleCmd(Global.CMD_POS_SETBARCODE,
//                            data);
                } else {
                    if (statusnets_counter.equals("ok")) {
                        strBarcode = strbarcodeno;
                        try {

                            Bitmap bitmap = null;
                            ImageView iv = new ImageView(getActivity());

                            bitmap = encodeAsBitmap2_counter(strBarcode, BarcodeFormat.CODE_128, 240, 48);
                            iv.setImageBitmap(bitmap);

                        } catch (WriterException e) {
                            e.printStackTrace();
                        }
                        Bundle data = new Bundle();
                        data.putString(Global.STRPARA1, strBarcode);
                        data.putInt(Global.INTPARA1, nOrgx);
                        data.putInt(Global.INTPARA2, nType);
                        data.putInt(Global.INTPARA3, nWidthX);
                        data.putInt(Global.INTPARA4, nHeight);
                        data.putInt(Global.INTPARA5, nHriFontType);
                        data.putInt(Global.INTPARA6, nHriFontPosition);
                    }else {
                        if (statusnets.equals("ok")) {
                            strBarcode = strbarcodeno;
                            try {

                                Bitmap bitmap = null;
                                ImageView iv = new ImageView(getActivity());

                                bitmap = encodeAsBitmap2(strBarcode, BarcodeFormat.CODE_128, 240, 48);
                                iv.setImageBitmap(bitmap);

                            } catch (WriterException e) {
                                e.printStackTrace();
                            }
                            Bundle data = new Bundle();
                            data.putString(Global.STRPARA1, strBarcode);
                            data.putInt(Global.INTPARA1, nOrgx);
                            data.putInt(Global.INTPARA2, nType);
                            data.putInt(Global.INTPARA3, nWidthX);
                            data.putInt(Global.INTPARA4, nHeight);
                            data.putInt(Global.INTPARA5, nHriFontType);
                            data.putInt(Global.INTPARA6, nHriFontPosition);
                        }
                    }
                }
            }

            allbuf1 = new byte[][]{
                    dotfeed, dotfeed, dotfeed, dotfeed
            };
            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(dotfeed);    //
                BluetoothPrintDriver.BT_Write(dotfeed);    //
                BluetoothPrintDriver.BT_Write(dotfeed);    //
                BluetoothPrintDriver.BT_Write(dotfeed);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(dotfeed);    //
                    wifiSocket2.WIFI_Write(dotfeed);    //
                    wifiSocket2.WIFI_Write(dotfeed);    //
                    wifiSocket2.WIFI_Write(dotfeed);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(dotfeed);    //
                        wifiSocket.WIFI_Write(dotfeed);    //
                        wifiSocket.WIFI_Write(dotfeed);    //
                        wifiSocket.WIFI_Write(dotfeed);    //
                    }
                }
            }

        }
    }

    public void printbarcode_bill() {
        Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }
        connnet.close();

        Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }
        connusb.close();

        //Toast.makeText(getActivity(), "printbillonly one ", Toast.LENGTH_SHORT).show();
        byte[] setHT34M = {0x1b, 0x44, 0x04, 0x11, 0x19, 0x00};
        byte[] dotfeed = {0x1b, 0x4a, 0x15};
        byte[] HTRight = {0x1b, 0x61, 0x02, 0x09};
        byte[] HT = {0x09};
        byte[] HT1 = {0x09};
        byte[] LF = {0x0d, 0x0a};

        byte[] left = {0x1b, 0x61, 0x00};
        byte[] cen = {0x1b, 0x61, 0x01};
        byte[] right = {0x1b, 0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b, 0x44, 0x19, 0x19, 0x00};
        byte[] horiz = {0x1b, 0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d, 0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        tvkot = new TextView(getActivity());

        Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
        if (print_ty.moveToFirst()) {
            str_print_ty = print_ty.getString(1);
        }
        print_ty.close();

        Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if (cc.moveToFirst()) {
            cc.moveToFirst();
            do {
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    if (str_print_ty.equals("Generic") || str_print_ty.equals("Epson/others")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x20, 0x29, 0x00};//4 tabs 3"
                        nPaperWidth = 576;
                        charlength = 23;
                        charlength1 = 46;
                        charlength2 = 69;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.equals("POS")) {
                            setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                            setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                            nPaperWidth = 576;
                            charlength = 23;
                            charlength1 = 46;
                            charlength2 = 69;
                            quanlentha = 4;
                            HT1 = new byte[]{0x2F};
                            str_line = "------------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------------".getBytes(), LF

                            };
                        }
                    }
                } else {
//                    setHT32 = new byte[]{0x1b,0x44,0x16,0x00};//2 tabs 2"
//                    setHT321 = new byte[]{0x1b,0x44,0x13,0x00};//2 tabs 3"
//                    setHT3212 = new byte[]{0x1b,0x44,0x15,0x00};//2 tabs 3"
//                    setHT33 = new byte[] {0x1b,0x44,0x09,0x19,0x00};//3 tabs 2"
//                    setHT34 = new byte[]{0x1b,0x44,0x06,0x12,0x19,0x00};//4 tabs 2"
//                    nPaperWidth = 384;
//                    charlength = 10;
//                    charlength1 = 20;
//                    charlength2 = 30;
//                    quanlentha = 5;
//                    allbufline = new byte[][]{
//                            left,un1, "--------------------------------".getBytes(), LF
//
//                    };
                    if (str_print_ty.equals("Generic")) {
//                        Toast.makeText(getActivity(), "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    } else {
                        if (str_print_ty.equals("Epson/others")) {
//                        Toast.makeText(getActivity(), "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            nPaperWidth = 384;
                            charlength = 16;
                            charlength1 = 32;
                            charlength2 = 48;
                            quanlentha = 5;
                            HT1 = new byte[]{0x09};
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }else {
                            if (str_print_ty.equals("POS")) {
                                setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                nPaperWidth = 384;
                                charlength = 11;
                                charlength1 = 22;
                                charlength2 = 33;
                                quanlentha = 4;
                                HT1 = new byte[]{0x2F};
                                str_line = "--------------------------------";
                                allbufline = new byte[][]{
                                        left, un1, "--------------------------------".getBytes(), LF
                                };
                            }
                        }
                    }
                }
            } while (cc.moveToNext());
        }
        cc.close();

        String dd = "";
        TextView qazcvb = new TextView(getActivity());
        Cursor cvonnusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (cvonnusb.moveToFirst()) {
            addgets = cvonnusb.getString(1);
            namegets = cvonnusb.getString(2);
            statussusbs = cvonnusb.getString(3);
            dd = cvonnusb.getString(4);
        }
        cvonnusb.close();
        qazcvb.setText(dd);
        if (qazcvb.getText().toString().equals("usb")) {
            runPrintCouponSequence_barcode();
        } else {
            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }
            getcom.close();

            Cursor getcom1 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + text.getText().toString() + "'", null);
            if (getcom1.moveToFirst()) {
                do {
                    stritemname = getcom1.getString(1);
                    strbarcodeno = getcom1.getString(16);
                    strprice = getcom1.getString(2);
                } while (getcom1.moveToNext());
            }
            getcom1.close();

            allbuf1 = new byte[][]{
                    dotfeed
            };
            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(dotfeed);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(dotfeed);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(dotfeed);    //
                    }
                }
            }

            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {
                allbuf1 = new byte[][]{
                        left, bold, setHT321, "".getBytes(), LF
                };

                if (statussusbs.equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(bold);    //
                    BluetoothPrintDriver.BT_Write(setHT321);    //
                    BT_Write("");
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.equals("ok")) {
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(setHT321);    //
                        wifiSocket2.WIFI_Write("");
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.equals("ok")) {
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(setHT321);    //
                            wifiSocket.WIFI_Write("");
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            } else {
                int len = strcompanyname.length();
                if (len >= 30) {

                    String string1 = strcompanyname.substring(0, 30);
                    allbuf1 = new byte[][]{
                            left, bold, setHT321, string1.getBytes(), "..".getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(bold);    //
                        BluetoothPrintDriver.BT_Write(setHT321);    //
                        BT_Write(string1 + "..");
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(bold);    //
                            wifiSocket2.WIFI_Write(setHT321);    //
                            wifiSocket2.WIFI_Write(string1 + "..");
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(bold);    //
                                wifiSocket.WIFI_Write(setHT321);    //
                                wifiSocket.WIFI_Write(string1 + "..");
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {
                    allbuf1 = new byte[][]{
                            left, bold, setHT321, strcompanyname.getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(bold);    //
                        BluetoothPrintDriver.BT_Write(setHT321);    //
                        BT_Write(strcompanyname);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(bold);    //
                            wifiSocket2.WIFI_Write(setHT321);    //
                            wifiSocket2.WIFI_Write(strcompanyname);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(bold);    //
                                wifiSocket.WIFI_Write(setHT321);    //
                                wifiSocket.WIFI_Write(strcompanyname);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                }
            }

            tvkot.setText(text.getText().toString());
            if (tvkot.getText().toString().equals("")) {

            } else {
                int len = text.length();

                if (len >= 19) {
                    String string = text.getText().toString().substring(0, 19);
                    allbuf2 = new byte[][]{
                            setHT32, left, string.getBytes(), "..".getBytes(), HT, "Rs".getBytes(), editText.getText().toString().getBytes(), "/-".getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(setHT32);    //
                        BluetoothPrintDriver.BT_Write(left);    //
                        BT_Write(string + "..");
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BT_Write(insert1_rs);
                        BT_Write(editText.getText().toString());
                        BT_Write("/-");
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(setHT32);    //
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(string + "..");
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(insert1_rs);
                            wifiSocket2.WIFI_Write(editText.getText().toString());
                            wifiSocket2.WIFI_Write("/-");
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(setHT32);    //
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(string + "..");
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(insert1_rs);
                                wifiSocket.WIFI_Write(editText.getText().toString());
                                wifiSocket.WIFI_Write("/-");
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {
                    allbuf2 = new byte[][]{
                            setHT32, left, text.getText().toString().getBytes(), HT, "Rs".getBytes(), editText.getText().toString().getBytes(), "/-".getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(setHT32);    //
                        BluetoothPrintDriver.BT_Write(left);    //
                        BT_Write(text.getText().toString());
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BT_Write(insert1_rs);
                        BT_Write(editText.getText().toString());
                        BT_Write("/-");
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(setHT32);    //
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(text.getText().toString());
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(insert1_rs);
                            wifiSocket2.WIFI_Write(editText.getText().toString());
                            wifiSocket2.WIFI_Write("/-");
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(setHT32);    //
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(text.getText().toString());
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(insert1_rs);
                                wifiSocket.WIFI_Write(editText.getText().toString());
                                wifiSocket.WIFI_Write("/-");
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                }
            }

//        dialogC1_id.setText(barcode_no.getText().toString());
            buttonBarcodetype.setText(getResources().getStringArray(
                    R.array.barcodetype)[nBarcodetype]);
            buttonStartOrgx.setText(getResources().getStringArray(
                    R.array.barcodestartorgx)[nStartOrgx]);
            buttonBarcodeWidth.setText(getResources().getStringArray(
                    R.array.barcodewidth)[nBarcodeWidth]);
            buttonBarcodeHeight.setText(getResources().getStringArray(
                    R.array.barcodeheight)[nBarcodeHeight]);
            buttonBarcodeFontType.setText(getResources().getStringArray(
                    R.array.barcodefonttype)[nBarcodeFontType]);
            buttonBarcodeFontPosition.setText(getResources().getStringArray(
                    R.array.barcodefontposition)[nBarcodeFontPosition]);

            tvkot.setText(barcode_no.getText().toString());
            if (tvkot.getText().toString().equals("")) {

            } else {
                String strBarcode = barcode_no.getText().toString();
                int nOrgx = nStartOrgx * 12;
                int nType = Cmd.Constant.BARCODE_TYPE_CODE128 + nBarcodetype;
                int nWidthX = nBarcodeWidth + 1;
                int nHeight = (nBarcodeHeight + 1) * 24;
                int nHriFontType = nBarcodeFontType;
                int nHriFontPosition = nBarcodeFontPosition;

                if (statussusbs.equals("ok")) {

                    try {

                        Bitmap bitmap = null;
                        ImageView iv = new ImageView(getActivity());

                        bitmap = encodeAsBitmap1(strBarcode, BarcodeFormat.CODE_128, 240, 48);
                        iv.setImageBitmap(bitmap);

                    } catch (WriterException e) {
                        e.printStackTrace();
                    }

//                byte[] buf1 = DataUtils.byteArraysToBytes(allbuf2);
                    Bundle data = new Bundle();
//                data.putByteArray(Global.BYTESPARA1, buf1);;
//                data.putInt(Global.INTPARA7, buf1.length);
                    data.putString(Global.STRPARA1, strBarcode);
                    data.putInt(Global.INTPARA1, nOrgx);
                    data.putInt(Global.INTPARA2, nType);
                    data.putInt(Global.INTPARA3, nWidthX);
                    data.putInt(Global.INTPARA4, nHeight);
                    data.putInt(Global.INTPARA5, nHriFontType);
                    data.putInt(Global.INTPARA6, nHriFontPosition);
//                    DrawerService.workThread.handleCmd(Global.CMD_POS_SETBARCODE,
//                            data);
                } else {
                    if (statusnets_counter.equals("ok")) {
                        try {

                            Bitmap bitmap = null;
                            ImageView iv = new ImageView(getActivity());

                            bitmap = encodeAsBitmap2_counter(strBarcode, BarcodeFormat.CODE_128, 240, 48);
                            iv.setImageBitmap(bitmap);

                        } catch (WriterException e) {
                            e.printStackTrace();
                        }
                        Bundle data = new Bundle();
                        data.putString(Global.STRPARA1, strBarcode);
                        data.putInt(Global.INTPARA1, nOrgx);
                        data.putInt(Global.INTPARA2, nType);
                        data.putInt(Global.INTPARA3, nWidthX);
                        data.putInt(Global.INTPARA4, nHeight);
                        data.putInt(Global.INTPARA5, nHriFontType);
                        data.putInt(Global.INTPARA6, nHriFontPosition);
                    }else {
                        if (statusnets.equals("ok")) {
                            try {

                                Bitmap bitmap = null;
                                ImageView iv = new ImageView(getActivity());

                                bitmap = encodeAsBitmap2(strBarcode, BarcodeFormat.CODE_128, 240, 48);
                                iv.setImageBitmap(bitmap);

                            } catch (WriterException e) {
                                e.printStackTrace();
                            }
                            Bundle data = new Bundle();
                            data.putString(Global.STRPARA1, strBarcode);
                            data.putInt(Global.INTPARA1, nOrgx);
                            data.putInt(Global.INTPARA2, nType);
                            data.putInt(Global.INTPARA3, nWidthX);
                            data.putInt(Global.INTPARA4, nHeight);
                            data.putInt(Global.INTPARA5, nHriFontType);
                            data.putInt(Global.INTPARA6, nHriFontPosition);
                        }
                    }
                }
            }

            allbuf1 = new byte[][]{
                    dotfeed, dotfeed, dotfeed, dotfeed
            };
            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(dotfeed);    //
                BluetoothPrintDriver.BT_Write(dotfeed);    //
                BluetoothPrintDriver.BT_Write(dotfeed);    //
                BluetoothPrintDriver.BT_Write(dotfeed);    //
            } else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(dotfeed);    //
                    wifiSocket2.WIFI_Write(dotfeed);    //
                    wifiSocket2.WIFI_Write(dotfeed);    //
                    wifiSocket2.WIFI_Write(dotfeed);    //
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(dotfeed);    //
                        wifiSocket.WIFI_Write(dotfeed);    //
                        wifiSocket.WIFI_Write(dotfeed);    //
                        wifiSocket.WIFI_Write(dotfeed);    //
                    }
                }
            }

        }
    }

    private static final int WHITE = 0xFFFFFFFF;
    private static final int BLACK = 0xFF000000;

    Bitmap encodeAsBitmap(String contents, BarcodeFormat format, int img_width, int img_height) throws WriterException {
        String contentsToEncode = contents;
        if (contentsToEncode == null) {
            return null;
        }
        Map<EncodeHintType, Object> hints = null;
        String encoding = guessAppropriateEncoding(contentsToEncode);
        if (encoding != null) {
            hints = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);
            hints.put(EncodeHintType.CHARACTER_SET, encoding);
        }
        MultiFormatWriter writer = new MultiFormatWriter();
        BitMatrix result;
        try {
            result = writer.encode(contentsToEncode, format, img_width, img_height, hints);
        } catch (IllegalArgumentException iae) {
            // Unsupported format
            return null;
        }
        int width = result.getWidth();
        int height = result.getHeight();
        int[] pixels = new int[width * height];
        for (int y = 0; y < height; y++) {
            int offset = y * width;
            for (int x = 0; x < width; x++) {
                pixels[offset + x] = result.get(x, y) ? BLACK : WHITE;
            }
        }

        Bitmap bitmap = Bitmap.createBitmap(width, height,
                Bitmap.Config.ARGB_8888);
        bitmap.setPixels(pixels, 0, width, 0, 0, width, height);

        return bitmap;
    }

    Bitmap encodeAsBitmap1(String contents, BarcodeFormat format, int img_width, int img_height) throws WriterException {
        String contentsToEncode = contents;
        if (contentsToEncode == null) {
            return null;
        }
        Map<EncodeHintType, Object> hints = null;
        String encoding = guessAppropriateEncoding(contentsToEncode);
        if (encoding != null) {
            hints = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);
            hints.put(EncodeHintType.CHARACTER_SET, encoding);
        }
        MultiFormatWriter writer = new MultiFormatWriter();
        BitMatrix result;
        try {
            result = writer.encode(contentsToEncode, format, img_width, img_height, hints);
        } catch (IllegalArgumentException iae) {
            // Unsupported format
            return null;
        }
        int width = result.getWidth();
        int height = result.getHeight();
        int[] pixels = new int[width * height];
        for (int y = 0; y < height; y++) {
            int offset = y * width;
            for (int x = 0; x < width; x++) {
                pixels[offset + x] = result.get(x, y) ? BLACK : WHITE;
            }
        }

        Bitmap bitmap = Bitmap.createBitmap(width, height,
                Bitmap.Config.ARGB_8888);
        bitmap.setPixels(pixels, 0, width, 0, 0, width, height);

        byte[] command = Utils.decodeBitmap(bitmap);
        printByteData(command);

        return bitmap;
    }

    Bitmap encodeAsBitmap2(String contents, BarcodeFormat format, int img_width, int img_height) throws WriterException {
        String contentsToEncode = contents;
        if (contentsToEncode == null) {
            return null;
        }
        Map<EncodeHintType, Object> hints = null;
        String encoding = guessAppropriateEncoding(contentsToEncode);
        if (encoding != null) {
            hints = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);
            hints.put(EncodeHintType.CHARACTER_SET, encoding);
        }
        MultiFormatWriter writer = new MultiFormatWriter();
        BitMatrix result;
        try {
            result = writer.encode(contentsToEncode, format, img_width, img_height, hints);
        } catch (IllegalArgumentException iae) {
            // Unsupported format
            return null;
        }
        int width = result.getWidth();
        int height = result.getHeight();
        int[] pixels = new int[width * height];
        for (int y = 0; y < height; y++) {
            int offset = y * width;
            for (int x = 0; x < width; x++) {
                pixels[offset + x] = result.get(x, y) ? BLACK : WHITE;
            }
        }

        Bitmap bitmap = Bitmap.createBitmap(width, height,
                Bitmap.Config.ARGB_8888);
        bitmap.setPixels(pixels, 0, width, 0, 0, width, height);

        byte[] command = Utils.decodeBitmap(bitmap);
        printByteData_wifi(command);

        return bitmap;
    }

    Bitmap encodeAsBitmap2_counter(String contents, BarcodeFormat format, int img_width, int img_height) throws WriterException {
        String contentsToEncode = contents;
        if (contentsToEncode == null) {
            return null;
        }
        Map<EncodeHintType, Object> hints = null;
        String encoding = guessAppropriateEncoding(contentsToEncode);
        if (encoding != null) {
            hints = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);
            hints.put(EncodeHintType.CHARACTER_SET, encoding);
        }
        MultiFormatWriter writer = new MultiFormatWriter();
        BitMatrix result;
        try {
            result = writer.encode(contentsToEncode, format, img_width, img_height, hints);
        } catch (IllegalArgumentException iae) {
            // Unsupported format
            return null;
        }
        int width = result.getWidth();
        int height = result.getHeight();
        int[] pixels = new int[width * height];
        for (int y = 0; y < height; y++) {
            int offset = y * width;
            for (int x = 0; x < width; x++) {
                pixels[offset + x] = result.get(x, y) ? BLACK : WHITE;
            }
        }

        Bitmap bitmap = Bitmap.createBitmap(width, height,
                Bitmap.Config.ARGB_8888);
        bitmap.setPixels(pixels, 0, width, 0, 0, width, height);

        byte[] command = Utils.decodeBitmap(bitmap);
        printByteData_wifi_counter(command);

        return bitmap;
    }

    public static void printByteData(byte[] buf) {
        BT_Write(buf);
        BT_Write(new byte[]{10});
    }

    public void printByteData_wifi(byte[] buf) {
        wifiSocket.WIFI_Write(buf);
        wifiSocket.WIFI_Write(new byte[]{10});
    }


    public void printByteData_wifi_counter(byte[] buf) {
        wifiSocket2.WIFI_Write(buf);
        wifiSocket2.WIFI_Write(new byte[]{10});
    }

    private static String guessAppropriateEncoding(CharSequence contents) {
        // Very crude at the moment
        for (int i = 0; i < contents.length(); i++) {
            if (contents.charAt(i) > 0xFF) {
                return "UTF-8";
            }
        }
        return null;
    }


    public void feedcut(){

        Cursor connnett = db.rawQuery("SELECT * FROM IPConn", null);
        if (connnett.moveToFirst()) {
            ipnamegets = connnett.getString(1);
            portgets = connnett.getString(2);
            statusnets = connnett.getString(3);
        }
        connnett.close();

        Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }
        connnet_counter.close();

        Cursor connusbb = db.rawQuery("SELECT * FROM BTConn", null);
        if (connusbb.moveToFirst()) {
            addgets = connusbb.getString(1);
            namegets = connusbb.getString(2);
            statussusbs = connusbb.getString(3);
        }
        connusbb.close();

        Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                }
                else {
                    feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                }
            }while(cc.moveToNext());
        }
        cc.close();

        byte[][] allbuf = new byte[][]{
                feedcut2
        };
        if (statussusbs.equals("ok")) {
            BluetoothPrintDriver.BT_Write(feedcut2);	//
        }else {
            if (statusnets_counter.equals("ok")) {
                wifiSocket2.WIFI_Write(feedcut2);	//
            }else {
                if (statusnets.equals("ok")) {
                    wifiSocket.WIFI_Write(feedcut2);	//
                }
            }
        }
    }


    private class ExportDatabaseCSVTask extends AsyncTask<String, Void, Boolean> {
        private final ProgressDialog dialog = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);

        @Override
        protected void onPreExecute() {

            this.dialog.setMessage(getString(R.string.setmessage17));
            this.dialog.show();

        }
        protected Boolean doInBackground(final String... args){

            File dbFile=getActivity().getDatabasePath("mydb_Salesdata");
            //Log.v(TAG, "Db path is: "+dbFile);  //get the path of db

//                        File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), fileName);//Use this if dowload is not working

            File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
            if (!exportDir1.exists()) {
                exportDir1.mkdirs();
            }

            file1 = new File(exportDir1, "IvePOS_items_report"+currentDateandTimee1+"_"+timee1+".csv");
            try {

                file1.createNewFile();
                CSVWriter csvWrite1 = new CSVWriter(new FileWriter(file1));

                // this is the Column of the table and same for Header of CSV file
                String arrStr11[] ={"Id", "Itemname", "Price", "Qty", "Update Qty", "Category", "Itemtax1", "tax_value1", "disc_type", "disc_value", "Barcode", "Unit", "Itemtax2", "tax_value2",
                        "Itemtax3", "tax_value3", "Itemtax4", "tax_value4", "Itemtax5", "tax_value5", "Variant2", "Variant_price2", "Variant3", "Variant_price3", "Variant4", "Variant_price4",
                        "Variant5", "Variant_price5", "Is_Veg" , "Packing_Charges"};
                csvWrite1.writeNext(arrStr11);

//                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE,null);
                Cursor curCSVv = db.rawQuery("SELECT * FROM Items",null);
                //csvWrite.writeNext(curCSV.getColumnNames());

                if (curCSVv.moveToFirst())  {
                    do {
                        String billnos = curCSVv.getString(5);
                        Cursor curCSV1 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '"+billnos+"'",null);
                        if (curCSV1.moveToFirst()){
                            String arrStr[] ={curCSVv.getString(0), curCSVv.getString(1), curCSVv.getString(2), curCSVv.getString(3), "0", curCSVv.getString(4), curCSVv.getString(5),
                                    curCSV1.getString(2), curCSVv.getString(13), curCSVv.getString(14), curCSVv.getString(16), curCSVv.getString(26),
                                    curCSVv.getString(28), curCSVv.getString(29), curCSVv.getString(30), curCSVv.getString(31), curCSVv.getString(32), curCSVv.getString(33), curCSVv.getString(34), curCSVv.getString(35),
                                    curCSVv.getString(40), curCSVv.getString(41), curCSVv.getString(42), curCSVv.getString(43), curCSVv.getString(44), curCSVv.getString(45), curCSVv.getString(46), curCSVv.getString(47),
                                    curCSVv.getString(57), curCSVv.getString(58)};
                            csvWrite1.writeNext(arrStr);
                        }else {
                            String arrStr[] ={curCSVv.getString(0), curCSVv.getString(1), curCSVv.getString(2), curCSVv.getString(3), "0", curCSVv.getString(4), curCSVv.getString(5),
                                    "0", curCSVv.getString(13), curCSVv.getString(14), curCSVv.getString(16), curCSVv.getString(26),
                                    curCSVv.getString(28), curCSVv.getString(29), curCSVv.getString(30), curCSVv.getString(31), curCSVv.getString(32), curCSVv.getString(33), curCSVv.getString(34), curCSVv.getString(35),
                                    curCSVv.getString(40), curCSVv.getString(41), curCSVv.getString(42), curCSVv.getString(43), curCSVv.getString(44), curCSVv.getString(45), curCSVv.getString(46), curCSVv.getString(47),
                                    curCSVv.getString(57), curCSVv.getString(58)};
                            csvWrite1.writeNext(arrStr);
                        }
                        curCSV1.close();
                    }while (curCSVv.moveToNext());

                }
                curCSVv.close();
                csvWrite1.close();

                return true;

            }
            catch (IOException e){
                Log.e("MainActivity", e.getMessage(), e);
                return false;

            }

        }

        @Override
        protected void onPostExecute(final Boolean success)	{

            if (this.dialog.isShowing()){
                this.dialog.dismiss();
            }
            if (success){
                Toast.makeText(getActivity(), getString(R.string.export_successful), Toast.LENGTH_SHORT).show();
            }
            else {
                Toast.makeText(getActivity(), getString(R.string.export_failed), Toast.LENGTH_SHORT).show();
            }
        }
    }


    public void up_da(int requestCode, int resultCode, String data){
        if (data == null)

            return;
        filepath = data;
        System.out.println("File data "+filepath+"   "+data);
//                    controller = new DBController(getApplicationContext());
//                    SQLiteDatabase db = controller.getWritableDatabase();
//                String tableName = "Items";
//                db.execSQL("delete from " + tableName);

        try {

            if (resultCode == getActivity().RESULT_OK) {


                DownloadMusicfromInternet2 downloadMusicfromInternet = new DownloadMusicfromInternet2();
                downloadMusicfromInternet.execute();


            } else {
                Dialog d = new Dialog(getActivity());
                d.setTitle(getString(R.string.title15));
                d.show();
            }
        } catch (Exception ex) {
            Dialog d = new Dialog(getActivity());
            d.setTitle(ex.getMessage() + "second");
            d.show();

            // db.endTransaction();

        }
        requestCode_i = 0;
    }


    public ArrayList<String> getTableValues_rec() {
        ArrayList<String> my_array = new ArrayList<String>();
        try {
//            db =   openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
            Cursor allrows = db.rawQuery("SELECT * FROM Email_reccipient ", null);
            System.out.println("COUNT : " + allrows.getCount());
            my_array.add("None");
            if (allrows.moveToFirst()) {
                do {
                    String ID = allrows.getString(0);
                    String NAME = allrows.getString(3);
                    String PLACE = allrows.getString(2);
                    my_array.add(NAME);
                } while (allrows.moveToNext());
            }
            allrows.close();
        } catch (Exception e) {
            ////////Toast.makeText(getActivity(), "Error encountered.",
            //Toast.LENGTH_LONG);
        }
        return my_array;
    }


    private class MakeRequestTask extends AsyncTask<Void, Void, String> {
        private Gmail mService = null;
        private Exception mLastError = null;
//        private View view = sendFabButton;

        public MakeRequestTask(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
            mService = new Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName(getResources().getString(R.string.app_name))
                    .build();
        }

        @Override
        protected String doInBackground(Void... params) {
            try {
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                return null;
            }
        }

        private String getDataFromApi() throws IOException {
            // getting Values for to Address, from Address, Subject and Body

            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }
            getcom.close();

            String url = "www.intuitionsoftwares.com";

            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
                    "Powered by: " + Uri.parse(url);

            Cursor cursor1 = db.rawQuery("SELECT * FROM Email_recipient", null);
            if (cursor1.moveToFirst()) {
                do {
                    String unn = cursor1.getString(3);
                    TextView edtToAddress = new TextView(getActivity());
                    edtToAddress.setText(unn);

                    TextView edtSubject = new TextView(getActivity());
                    edtSubject.setText(strcompanyname);

                    TextView edtMessage = new TextView(getActivity());
                    edtMessage.setText(msg);

                    String user = "me";
                    String to = Utils.getString(edtToAddress);
                    String from = mCredential.getSelectedAccountName();
                    Log.v("sender email", from);
                    String subject = Utils.getString(edtSubject);
                    String body = Utils.getString(edtMessage);
                    MimeMessage mimeMessage;
                    response = "";
                    try {

//                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
                        String filename = Environment.getExternalStorageDirectory().toString()+"/Download/IvePOS_items_report"+currentDateandTimee1+"_"+timee1+".csv";
//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+"12May17"+"_"+"013048PM"+".csv";
//                String path = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_backup/";


                        File f = new File(filename);
//
                        mimeMessage = createEmailWithAttachment(to, from, subject, body, f);



//                        mimeMessage = createEmail(to, from, subject, body);
                        response = sendMessage(mService, user, mimeMessage);
                    } catch (MessagingException e) {
                        e.printStackTrace();
                    }

                } while (cursor1.moveToNext());
            }
            cursor1.close();
            return response;
        }

        // Method to send email
        private String sendMessage(Gmail service,
                                   String userId,
                                   MimeMessage email)
                throws MessagingException, IOException {
            com.google.api.services.gmail.model.Message message = createMessageWithEmail(email);
            // GMail's official method to send email with oauth2.0
            message = service.users().messages().send(userId, message).execute();

            System.out.println("user ID " + userId);

            System.out.println("Message id: " + message.getId());
            System.out.println(message.toPrettyString());
            return message.getId();
        }

        public MimeMessage createEmailWithAttachment(String to,
                                                     String from,
                                                     String subject,
                                                     String bodyText,
                                                     File file)
                throws MessagingException, IOException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);

            email.setFrom(new InternetAddress(from));
            email.addRecipient(javax.mail.Message.RecipientType.TO,
                    new InternetAddress(to));
            email.setSubject(subject);

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(bodyText, "text/plain");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            mimeBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);

            mimeBodyPart.setDataHandler(new DataHandler(source));
            mimeBodyPart.setFileName(file.getName());

            multipart.addBodyPart(mimeBodyPart);
            email.setContent(multipart);

            return email;
        }

        // Method to create email Params
        private MimeMessage createEmail(String to,
                                        String from,
                                        String subject,
                                        String bodyText) throws MessagingException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);
            InternetAddress tAddress = new InternetAddress(to);
            InternetAddress fAddress = new InternetAddress(from);


            System.out.println("From  " + from);
            System.out.println("To  " + to);


            email.setFrom(fAddress);
            email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);
            email.setSubject(subject);
            email.setText(bodyText);
            return email;
        }

        private com.google.api.services.gmail.model.Message createMessageWithEmail(MimeMessage email)
                throws MessagingException, IOException {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            email.writeTo(bytes);
            String encodedEmail = Base64.encodeBase64URLSafeString(bytes.toByteArray());
            com.google.api.services.gmail.model.Message message = new com.google.api.services.gmail.model.Message();
            message.setRaw(encodedEmail);
            return message;
        }

        @Override
        protected void onPreExecute() {
            mProgress.show();
        }

        @Override
        protected void onPostExecute(String output) {
            Log.d("post execute", "error");
            mProgress.hide();
            if (output == null || output.length() == 0) {
                Toast.makeText(getActivity(), "not success", Toast.LENGTH_SHORT).show();
//                showMessage(view, "No results returned.");
            } else {
                Toast.makeText(getActivity(), "success", Toast.LENGTH_SHORT).show();
//                showMessage(view, output);
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
//                Log.v("Errors3", mLastError.getMessage());
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
//                    Log.v("Errors1", mLastError.getMessage());
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
//                    Log.v("Errors2", mLastError.getMessage());
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            Utils.REQUEST_AUTHORIZATION);
                } else {
//                    showMessage(view, "The following error occurred:\n" + mLastError.getMessage());
//                    Log.v("Errors", mLastError.getMessage());
                }
            } else {
//                showMessage(view, "Request Cancelled.");
            }
        }
    }

    void showGooglePlayServicesAvailabilityErrorDialog(
            final int connectionStatusCode) {
        GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
        Dialog dialog = apiAvailability.getErrorDialog(
                getActivity(),
                connectionStatusCode,
                REQUEST_GOOGLE_PLAY_SERVICES);
        dialog.show();
    }

    private void getResultsFromApi() {

        Cursor cursorr = db.rawQuery("SELECT * FROM Email_setup", null);
        if (cursorr.moveToFirst()) {
            String unn = cursorr.getString(1);
//            Toast.makeText(getActivity(), "a4 " + unn, Toast.LENGTH_SHORT).show();

            TextView tvv = new TextView(getActivity());
            tvv.setText(unn);

            if (tvv.getText().toString().equals("")) {

            }else {
                mCredential.setSelectedAccountName(tvv.getText().toString());
            }
        }
        cursorr.close();

        if (! isGooglePlayServicesAvailable()) {
//            Toast.makeText(getActivity(), "1", Toast.LENGTH_SHORT).show();
            acquireGooglePlayServices();
        } else if (mCredential.getSelectedAccountName() == null) {
//            Toast.makeText(getActivity(), "2", Toast.LENGTH_SHORT).show();
//            chooseAccount();
        } else if (! isDeviceOnline()) {
//            Toast.makeText(getActivity(), "3", Toast.LENGTH_SHORT).show();
//            mOutputText.setText("No network connection available.");
        } else {
//            Toast.makeText(getActivity(), "4", Toast.LENGTH_SHORT).show();
            new MakeRequestTask1(mCredential).execute();
        }
    }

    /**
     * Checks whether the device currently has a network connection.
     * @return true if the device has a network connection, false otherwise.
     */
    private boolean isDeviceOnline() {
        ConnectivityManager connMgr =
                (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
        return (networkInfo != null && networkInfo.isConnected());
    }

    /**
     * Check that Google Play services APK is installed and up to date.
     * @return true if Google Play Services is available and up to
     *     date on this device; false otherwise.
     */
    private boolean isGooglePlayServicesAvailable() {
        GoogleApiAvailability apiAvailability =
                GoogleApiAvailability.getInstance();
        final int connectionStatusCode =
                apiAvailability.isGooglePlayServicesAvailable(getActivity());
        return connectionStatusCode == ConnectionResult.SUCCESS;
    }

    /**
     * Attempt to resolve a missing, out-of-date, invalid or disabled Google
     * Play Services installation via a user dialog, if possible.
     */
    private void acquireGooglePlayServices() {
        GoogleApiAvailability apiAvailability =
                GoogleApiAvailability.getInstance();
        final int connectionStatusCode =
                apiAvailability.isGooglePlayServicesAvailable(getActivity());
        if (apiAvailability.isUserResolvableError(connectionStatusCode)) {
            showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);
        }
    }


    /**
     * Attempts to set the account used with the API credentials. If an account
     * name was previously saved it will use that one; otherwise an account
     * picker dialog will be shown to the user. Note that the setting the
     * account to use with the credentials object requires the app to have the
     * GET_ACCOUNTS permission, which is requested here if it is not already
     * present. The AfterPermissionGranted annotation indicates that this
     * function will be rerun automatically whenever the GET_ACCOUNTS permission
     * is granted.
     */
    @AfterPermissionGranted(REQUEST_PERMISSION_GET_ACCOUNTS)
    private void chooseAccount() {
//        Toast.makeText(getActivity(), "s1", Toast.LENGTH_SHORT).show();
        if (EasyPermissions.hasPermissions(
                getActivity(), Manifest.permission.GET_ACCOUNTS)) {
            String accountName = getActivity().getPreferences(Context.MODE_PRIVATE)
                    .getString(PREF_ACCOUNT_NAME, null);
//            Toast.makeText(getActivity(), "s2", Toast.LENGTH_SHORT).show();
//            if (accountName != null) {
//                mCredential.setSelectedAccountName(accountName);
//                Toast.makeText(getActivity(), "s3", Toast.LENGTH_SHORT).show();
//                getResultsFromApi();
//            } else {
            // Start a dialog from which the user can choose an account
            startActivityForResult(
                    mCredential.newChooseAccountIntent(),
                    REQUEST_ACCOUNT_PICKER);
//            Toast.makeText(getActivity(), "s4", Toast.LENGTH_SHORT).show();
//            }
        } else {
            // Request the GET_ACCOUNTS permission via a user dialog
//            Toast.makeText(getActivity(), "s5", Toast.LENGTH_SHORT).show();
            EasyPermissions.requestPermissions(
                    this,
                    "This app needs to access your Google account (via Contacts).",
                    REQUEST_PERMISSION_GET_ACCOUNTS,
                    Manifest.permission.GET_ACCOUNTS);
        }
    }


    private class MakeRequestTask1 extends AsyncTask<Void, Void, List<String>> {
        private Gmail mService = null;
        private Exception mLastError = null;

        MakeRequestTask1(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

            System.out.println("labels mservice11 " + mService);

            mService = new Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName("Gmail API Android Quickstart")
                    .build();
            Log.d("labels credential", String.valueOf(credential));

            System.out.println("labels mservice " + mService);
        }

        /**
         * Background task to call Gmail API.
         * @param params no parameters needed for this task.
         */
        @Override
        protected List<String> doInBackground(Void... params) {
            Log.d("hiiiiii11", "error");

            try {
                Log.d("hiiiiii111", "error");
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                Log.d("hiiiiii1111", "error");
                return null;
            }
        }

        /**
         * Fetch a list of Gmail labels attached to the specified account.
         * @return List of Strings labels.
         * @throws IOException
         */
        private List<String> getDataFromApi() throws IOException {
            // Get the labels in the user's account.
            String user = "me";
            List<String> labels = new ArrayList<String>();
            ListLabelsResponse listResponse =
                    mService.users().labels().list(user).execute();
            System.out.println("ListLabelsResponse " + listResponse);
            for (Label label : listResponse.getLabels()) {
                labels.add(label.getName());

//                Log.d("labels", String.valueOf(labels));//will be displaying all the folders one by one by looping

//                System.out.println("user ID " + labels.add(label.getName()));
            }
            return labels;
        }


        @Override
        protected void onPreExecute() {
//            mOutputText.setText("");
            mProgress.show();
        }

        @Override
        protected void onPostExecute(List<String> output) {
//            System.out.println("labelsss " + output);//will be displaying details and folders in mail like inbox, sent, outbox, junk, etc
            mProgress.hide();
            if (output == null || output.size() == 0) {
//                mOutputText.setText("No results returned.");
            } else {
                output.add(0, "Data retrieved using the Gmail API:");
//                mOutputText.setText(TextUtils.join("\n", output));
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            EmailSetup_Google.REQUEST_AUTHORIZATION);
                } else {
//                    mOutputText.setText("The following error occurred:\n"
//                            + mLastError.getMessage());
                }
            } else {
//                mOutputText.setText("Request cancelled.");
            }
        }
    }

    private boolean runPrintCouponSequence(Dialog dialog) {
        if (!initializeObject()) {
            return false;
        }

        if (!createCouponData(dialog)) {
            finalizeObject();
            return false;
        }

        if (!printData()) {
            finalizeObject();
            return false;
        }

        return true;
    }

    private boolean runPrintCouponSequence_barcode(Dialog dialog) {
        if (!initializeObject()) {
            return false;
        }

        final EditText noofprints = (EditText) dialog.findViewById(R.id.editText1);
        int noofprints1 = Integer.parseInt(noofprints.getText().toString());
        for (int i = 0 ; i<noofprints1; i++){
            if (!createCouponData_barcode(dialog)) {
                finalizeObject();
                return false;
            }
        }
//        if (!createCouponData_barcode(dialog)) {
//            finalizeObject();
//            return false;
//        }

        if (!printData()) {
            finalizeObject();
            return false;
        }

        return true;
    }

    private boolean runPrintCouponSequence_barcode() {
        if (!initializeObject()) {
            return false;
        }

        if (!createCouponData_barcode()) {
            finalizeObject();
            return false;
        }

        if (!printData()) {
            finalizeObject();
            return false;
        }

        return true;
    }

    private boolean initializeObject() {
        try {
            mPrinter = new Printer(((SpnModelsItem) mSpnSeries.getSelectedItem()).getModelConstant(),
                    ((SpnModelsItem) mSpnLang.getSelectedItem()).getModelConstant(),
                    mContext);
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here3", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "Printer", mContext);
            return false;
        }

        mPrinter.setReceiveEventListener(this);

        return true;
    }

    private void finalizeObject() {
        if (mPrinter == null) {
            return;
        }

        mPrinter.clearCommandBuffer();

        mPrinter.setReceiveEventListener(null);

        mPrinter = null;
    }

    @Override
    public void onPtrReceive(final Printer printerObj, final int code, final PrinterStatusInfo status, final String printJobId) {
        getActivity().runOnUiThread(new Runnable() {
            @Override
            public synchronized void run() {
                ShowMsg.showResult(code, makeErrorMessage(status), mContext);

                dispPrinterWarnings(status);

//                updateButtonState(true);

                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        disconnectPrinter();
                    }
                }).start();
            }
        });
    }

    private String makeErrorMessage(PrinterStatusInfo status) {
        String msg = "";

        if (status.getOnline() == Printer.FALSE) {
            msg += getString(R.string.handlingmsg_err_offline);
        }
        if (status.getConnection() == Printer.FALSE) {
            msg += getString(R.string.handlingmsg_err_no_response);
        }
        if (status.getCoverOpen() == Printer.TRUE) {
            msg += getString(R.string.handlingmsg_err_cover_open);
        }
        if (status.getPaper() == Printer.PAPER_EMPTY) {
            msg += getString(R.string.handlingmsg_err_receipt_end);
        }
        if (status.getPaperFeed() == Printer.TRUE || status.getPanelSwitch() == Printer.SWITCH_ON) {
            msg += getString(R.string.handlingmsg_err_paper_feed);
        }
        if (status.getErrorStatus() == Printer.MECHANICAL_ERR || status.getErrorStatus() == Printer.AUTOCUTTER_ERR) {
            msg += getString(R.string.handlingmsg_err_autocutter);
            msg += getString(R.string.handlingmsg_err_need_recover);
        }
        if (status.getErrorStatus() == Printer.UNRECOVER_ERR) {
            msg += getString(R.string.handlingmsg_err_unrecover);
        }
        if (status.getErrorStatus() == Printer.AUTORECOVER_ERR) {
            if (status.getAutoRecoverError() == Printer.HEAD_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_head);
            }
            if (status.getAutoRecoverError() == Printer.MOTOR_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_motor);
            }
            if (status.getAutoRecoverError() == Printer.BATTERY_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_battery);
            }
            if (status.getAutoRecoverError() == Printer.WRONG_PAPER) {
                msg += getString(R.string.handlingmsg_err_wrong_paper);
            }
        }
        if (status.getBatteryLevel() == Printer.BATTERY_LEVEL_0) {
            msg += getString(R.string.handlingmsg_err_battery_real_end);
        }

        return msg;
    }

    private void dispPrinterWarnings(PrinterStatusInfo status) {
//        EditText edtWarnings = (EditText) findViewById(R.id.edtWarnings);
        String warningsMsg = "";

        if (status == null) {
            return;
        }

        if (status.getPaper() == Printer.PAPER_NEAR_END) {
            warningsMsg += getString(R.string.handlingmsg_warn_receipt_near_end);
        }

        if (status.getBatteryLevel() == Printer.BATTERY_LEVEL_1) {
            warningsMsg += getString(R.string.handlingmsg_warn_battery_near_end);
        }

//        edtWarnings.setText(warningsMsg);
    }

    private void disconnectPrinter() {
        if (mPrinter == null) {
            return;
        }

        try {
            mPrinter.endTransaction();
        } catch (final Exception e) {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public synchronized void run() {
//                    Toast.makeText(getActivity(), "Here6", Toast.LENGTH_SHORT).show();
                    ShowMsg.showException(e, "endTransaction", mContext);
                }
            });
        }

        try {
            mPrinter.disconnect();
        } catch (final Exception e) {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public synchronized void run() {
//                    Toast.makeText(getActivity(), "Here7", Toast.LENGTH_SHORT).show();
                    ShowMsg.showException(e, "disconnect", mContext);
                }
            });
        }

        finalizeObject();
    }

    private boolean printData() {
        if (mPrinter == null) {
            return false;
        }

        if (!connectPrinter()) {
            return false;
        }

        PrinterStatusInfo status = mPrinter.getStatus();

        dispPrinterWarnings(status);

        if (!isPrintable(status)) {
            ShowMsg.showMsg(makeErrorMessage(status), mContext);
            try {
                mPrinter.disconnect();
            } catch (Exception ex) {
//                Toast.makeText(getActivity(), "Here9", Toast.LENGTH_SHORT).show();
                // Do nothing
            }
            return false;
        }

        try {
            mPrinter.sendData(Printer.PARAM_DEFAULT);
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here10", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "sendData", mContext);
            try {
                mPrinter.disconnect();
            } catch (Exception ex) {
//                Toast.makeText(getActivity(), "Here11", Toast.LENGTH_SHORT).show();
                // Do nothing
            }
            return false;
        }

        return true;
    }

    private boolean isPrintable(PrinterStatusInfo status) {
        if (status == null) {
            return false;
        }

        if (status.getConnection() == Printer.FALSE) {
            return false;
        } else if (status.getOnline() == Printer.FALSE) {
            return false;
        } else {
            ;//print available
        }

        return true;
    }

    private boolean connectPrinter() {
        boolean isBeginTransaction = false;

        if (mPrinter == null) {
            return false;
        }

        try {
            mPrinter.connect(mEditTarget.getText().toString(), Printer.PARAM_DEFAULT);
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here4", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "connect", mContext);
            return false;
        }

        try {
            mPrinter.beginTransaction();
            isBeginTransaction = true;
        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here12", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "beginTransaction", mContext);
        }

        if (isBeginTransaction == false) {
            try {
                mPrinter.disconnect();
            } catch (Epos2Exception e) {
//                Toast.makeText(getActivity(), "Here5", Toast.LENGTH_SHORT).show();
                // Do nothing
                return false;
            }
        }

        return true;
    }


    private boolean createCouponData(Dialog dialog) {

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x25,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x06,0x20,0x29,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    charlength = 23;
                    charlength1 = 46;
                    charlength2 = 69;
                    quanlentha = 5;
                    str_line = "------------------------------------------------";
                    allbufline = new byte[][]{
                            left,un1, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
                    if (print_ty.moveToFirst()){
                        str_print_ty = print_ty.getString(1);
                    }
                    print_ty.close();
                    if (str_print_ty.equals("Generic")) {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "epson", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 16;
                        charlength1 = 32;
                        charlength2 = 48;
                        quanlentha = 5;
                        str_line = "------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------".getBytes(), LF
                        };
                    }
                }
            }while(cc.moveToNext());
        }
        cc.close();

        final int pageAreaHeight = 384;
        final int pageAreaWidth = 384;
//        final int fontAHeight = 24;
//        final int fontAWidth = 12;
//        final int barcodeWidthPos = 110;
//        final int barcodeHeightPos = 70;

        ArrayList<byte[]> list = new ArrayList<byte[]>();
        String method = "";
        String[] col = {"companylogo"};
        Cursor c = db.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
            yourBitmap = BitmapFactory.decodeByteArray(img, 0, img.length);
        }
        c.close();

//        String method = "";
//        Bitmap coffeeData = BitmapFactory.decodeResource(getResources(), R.drawable.coffee);
//        Bitmap wmarkData = BitmapFactory.decodeResource(getResources(), R.drawable.wmark);

        if (mPrinter == null) {
            return false;
        }
        try{
//            method = "addPageBegin";
//            mPrinter.addPageBegin();

            method = "addPageArea";
            mPrinter.addPageArea(0, 0, nPaperWidth, pageAreaHeight);

            method = "addPageDirection";
            mPrinter.addPageDirection(Printer.DIRECTION_TOP_TO_BOTTOM);

            method = "addFeedLine";
            mPrinter.addFeedLine(1);
            method = "addPagePosition";
            mPrinter.addPagePosition(0, nPaperWidth);

//            // RECEIPT BODY//

            mPrinter.addCommand(LF);


            Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
            if (connnet.moveToFirst()) {
                ipnamegets = connnet.getString(1);
                portgets = connnet.getString(2);
                statusnets = connnet.getString(3);
            }
            connnet.close();

            Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
            if (connnet_counter.moveToFirst()) {
                ipnamegets_counter = connnet_counter.getString(1);
                portgets_counter = connnet_counter.getString(2);
                statusnets_counter = connnet_counter.getString(3);
            }
            connnet_counter.close();

            Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
            if (connusb.moveToFirst()) {
                addgets = connusb.getString(1);
                namegets = connusb.getString(2);
                statussusbs = connusb.getString(3);
            }
            connusb.close();


            allbufrounded = new byte[][]{
                    left, bold, un1, "Items list".getBytes(), LF

            };
            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(bold);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Items list");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }
            getcom.close();

            tvkot = new TextView(getActivity());

            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, un1, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(bold);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strcompanyname);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            SimpleDateFormat normal11 = new SimpleDateFormat("dd MMM yyyy",Locale.US);
            final String normal1 = normal11.format(new Date());

            Date dt = new Date();
            SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa",Locale.US);
            final String time1 = sdf1.format(dt);

            allbufflinet = new byte[][]{
                    left, bold, un1, normal1.getBytes(), ",".getBytes(), time1.getBytes(), LF

            };
            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(bold);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(normal1+","+time1);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            Cursor cursor_a = db.rawQuery("SELECT * FROM Hotel", null);
            int cdv1 = cursor_a.getCount();
            String inttostring = String.valueOf(cdv1);
            allbuf1 = new byte[][]{
                    setHT32, left, un1, "No. of Categories".getBytes(), HT, inttostring.getBytes(), LF

            };
            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("No. of Categories");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(inttostring);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }
            cursor_a.close();

            Cursor cursor_b = db.rawQuery("SELECT * FROM Items", null);
            int cdv11 = cursor_b.getCount();
            String inttostring11 = String.valueOf(cdv11);

            allbufrounded = new byte[][]{
                    setHT32, left, "No. of Items".getBytes(), HT, inttostring11.getBytes(), LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("No. of Items");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(inttostring11);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }
            cursor_b.close();


            allbufrounded = new byte[][]{
//                                        setHT32,left,"00000X".getBytes(),"Item nameeeeeeeeeeeeee".getBytes(),HT,"Rs.".getBytes(),"999999".getBytes(),LF
                    setHT32, left, "Qty X ".getBytes(), "Item name".getBytes(), HT, "Price".getBytes(), LF
            };

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Qty X "+"Item name");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("Price");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor cursor = db.rawQuery("SELECT * FROM Hotel", null);
            if (cursor.moveToFirst()) {
                do {
                    String name = cursor.getString(1);

                    TextView tv = new TextView(getActivity());
                    tv.setText(name);

                    if (tv.getText().toString().equals("All") || tv.getText().toString().equals("Favourites")) {

                    } else {
                        allbuf1 = new byte[][]{
                                left, bold, tv.getText().toString().getBytes(), LF

                        };
                        if (statussusbs.equals("ok")) {
                            mPrinter.addCommand(left);
                            mPrinter.addCommand(bold);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append(tv.getText().toString());
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(LF); //LF
                        }
                        Cursor cursor2 = db.rawQuery("SELECT * FROM Items WHERE category = '" + tv.getText().toString() + "'", null);
                        if (cursor2.moveToFirst()) {
                            do {
                                String name1 = cursor2.getString(1);
                                String id = cursor2.getString(0);
                                String quan = cursor2.getString(3);
                                String price = cursor2.getString(2);
                                String barcode = cursor2.getString(16);

                                TextView tv1 = new TextView(getActivity());
                                tv1.setText(quan);

                                if (name1.length() > 44) {
                                    String string1 = name1.substring(0, 44);
                                    String string3 = name1.substring(44);
                                    allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                            setHT32, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), string1.getBytes(), HT, "Rs.".getBytes(), price.getBytes(), LF, "     ".getBytes(), string3.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT32);
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(un1);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(tv1.getText().toString()+" X "+string1);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(insert1_rs+price);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append("     ");
                                    mPrinter.addText(textData3.toString());
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(string3);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                } else {
                                    allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                            setHT32, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), name1.getBytes(), HT, "Rs.".getBytes(), price.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT32);
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(un1);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(tv1.getText().toString()+" X "+name1);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(insert1_rs+price);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(LF); //LF
                                }

                                if (statussusbs.equals("ok")) {
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(un1);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(str_line);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(LF); //LF
                                }

                            } while (cursor2.moveToNext());
                        }
                        cursor2.close();
                    }
                } while (cursor.moveToNext());
            }
            cursor.close();

            Cursor cursor3 = db.rawQuery("SELECT * FROM Items", null);
            if (cursor3.moveToFirst()) {
                do {
                    String cate = cursor3.getString(4);
                    TextView tv3 = new TextView(getActivity());
                    tv3.setText(cate);
                    if (tv3.getText().toString().equals("") || tv3.getText().toString().equals("None") || tv3.getText().toString().equals("NONE")) {
                        allbuf1 = new byte[][]{
                                left, bold, "non categorized items".getBytes(), LF

                        };
                        if (statussusbs.equals("ok")) {
                            mPrinter.addCommand(left);
                            mPrinter.addCommand(bold);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append("non categorized items");
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(LF); //LF
                        }
                        break;
                    }
                } while (cursor3.moveToNext());
            }
            cursor3.close();

            Cursor cursor2 = db.rawQuery("SELECT * FROM Items", null);
            if (cursor2.moveToFirst()) {
                do {
                    String cate = cursor2.getString(4);
                    String name1 = cursor2.getString(1);
                    String id = cursor2.getString(0);
                    String quan = cursor2.getString(3);
                    String price = cursor2.getString(2);
                    String barcode = cursor2.getString(16);

                    TextView tv3 = new TextView(getActivity());
                    tv3.setText(cate);

                    if (tv3.getText().toString().equals("") || tv3.getText().toString().equals("None") || tv3.getText().toString().equals("NONE")) {


                        TextView tv1 = new TextView(getActivity());
                        tv1.setText(quan);

                        if (name1.length() > 44) {
                            String string1 = name1.substring(0, 44);
                            String string3 = name1.substring(44);
                            allbuf1 = new byte[][]{
//                                                            setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                    setHT32, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), string1.getBytes(), HT, "Rs.".getBytes(), price.getBytes(), LF, "     ".getBytes(), string3.getBytes(), LF
                            };
                            mPrinter.addCommand(setHT32);
                            mPrinter.addCommand(left);
                            mPrinter.addCommand(un1);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append(tv1.getText().toString()+" X "+string1);
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(HT);
                            StringBuilder textData2 = new StringBuilder();
                            textData2.append(insert1_rs+price);
                            mPrinter.addText(textData2.toString());
                            mPrinter.addCommand(LF);
                            StringBuilder textData3 = new StringBuilder();
                            textData3.append("     ");
                            mPrinter.addText(textData3.toString());
                            StringBuilder textData4 = new StringBuilder();
                            textData4.append(string3);
                            mPrinter.addText(textData4.toString());
                            mPrinter.addCommand(LF); //LF
                        } else {
                            allbuf1 = new byte[][]{
//                                                    setHT32, left, un1, id.getBytes(), HT, tv1.getText().toString().getBytes(), LF
                                    setHT32, left, un1, tv1.getText().toString().getBytes(), " X ".getBytes(), name1.getBytes(), HT, "Rs.".getBytes(), price.getBytes(), LF
                            };
                            mPrinter.addCommand(setHT32);
                            mPrinter.addCommand(left);
                            mPrinter.addCommand(un1);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append(tv1.getText().toString()+" X "+name1);
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(HT);
                            StringBuilder textData2 = new StringBuilder();
                            textData2.append(insert1_rs+price);
                            mPrinter.addText(textData2.toString());
                            mPrinter.addCommand(LF); //LF
                        }

                        if (statussusbs.equals("ok")) {
                            mPrinter.addCommand(left);
                            mPrinter.addCommand(un1);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append(str_line);
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(LF); //LF
                        }
                    }

                } while (cursor2.moveToNext());
            }
            cursor2.close();

            Cursor acc=db.rawQuery("SELECT * FROM Printerreceiptsize", null);

            if(acc.moveToFirst()){
                acc.moveToFirst();
                do{
                    NAME = acc.getString(1);
                    if (NAME.equals("3 inch")) {
                        feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                    }
                    else {
                        feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                    }
                }while(acc.moveToNext());
            }
            acc.close();

            byte[][] allbuf = new byte[][]{
                    feedcut2
            };
            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(feedcut2);
            }

        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here2", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, method, mContext);
            return false;
        }

        return true;
    }

    private boolean createCouponData_barcode(Dialog dialog) {

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x25,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x06,0x20,0x29,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    charlength = 23;
                    charlength1 = 46;
                    charlength2 = 69;
                    quanlentha = 5;
                    str_line = "------------------------------------------------";
                    allbufline = new byte[][]{
                            left,un1, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
                    if (print_ty.moveToFirst()){
                        str_print_ty = print_ty.getString(1);
                    }
                    print_ty.close();
                    if (str_print_ty.equals("Generic")) {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "epson", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 16;
                        charlength1 = 32;
                        charlength2 = 48;
                        quanlentha = 5;
                        str_line = "------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------".getBytes(), LF
                        };
                    }
                }
            }while(cc.moveToNext());
        }
        cc.close();

        final int pageAreaHeight = 384;
        final int pageAreaWidth = 384;
//        final int fontAHeight = 24;
//        final int fontAWidth = 12;
//        final int barcodeWidthPos = 110;
//        final int barcodeHeightPos = 70;

        ArrayList<byte[]> list = new ArrayList<byte[]>();
        String method = "";
        String[] col = {"companylogo"};
        Cursor c = db.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
            yourBitmap = BitmapFactory.decodeByteArray(img, 0, img.length);
        }
        c.close();

//        String method = "";
//        Bitmap coffeeData = BitmapFactory.decodeResource(getResources(), R.drawable.coffee);
//        Bitmap wmarkData = BitmapFactory.decodeResource(getResources(), R.drawable.wmark);

        if (mPrinter == null) {
            return false;
        }
        try{
//            method = "addPageBegin";
//            mPrinter.addPageBegin();

            method = "addPageArea";
            mPrinter.addPageArea(0, 0, nPaperWidth, pageAreaHeight);

            method = "addPageDirection";
            mPrinter.addPageDirection(Printer.DIRECTION_TOP_TO_BOTTOM);

            method = "addFeedLine";
            mPrinter.addFeedLine(1);
            method = "addPagePosition";
            mPrinter.addPagePosition(0, nPaperWidth);

//            // RECEIPT BODY//

//            method = "addPagePosition";
//            mPrinter.addPagePosition(0, wmarkData.getHeight());
//            mPrinter.addPagePosition(0, logoData.getScaledHeight(0));

//            method = "addImage";
//            mPrinter.addImage(wmarkData, 0, 0, wmarkData.getWidth(), wmarkData.getHeight(),
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT,
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
//Free coffee text

//            method = "addTextSize";
//            mPrinter.addTextSize(3, 3);
//            method = "addTextStyle";
//            mPrinter.addTextStyle(Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.TRUE, Printer.PARAM_DEFAULT);
//            method = "addTextSmooth";
//            mPrinter.addTextSmooth(Printer.TRUE);
//            method = "addText";
//            mPrinter.addText("FREE Coffee\n");

            Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
            if (connnet.moveToFirst()) {
                ipnamegets = connnet.getString(1);
                portgets = connnet.getString(2);
                statusnets = connnet.getString(3);
            }
            connnet.close();

            Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
            if (connnet_counter.moveToFirst()) {
                ipnamegets_counter = connnet_counter.getString(1);
                portgets_counter = connnet_counter.getString(2);
                statusnets_counter = connnet_counter.getString(3);
            }
            connnet_counter.close();

            Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
            if (connusb.moveToFirst()) {
                addgets = connusb.getString(1);
                namegets = connusb.getString(2);
                statussusbs = connusb.getString(3);
            }
            connusb.close();

            tvkot = new TextView(getActivity());
            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }
            getcom.close();

            Cursor getcom1 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + dialogC1_id.getText().toString() + "'", null);
            if (getcom1.moveToFirst()) {
                do {
                    stritemname = getcom1.getString(1);
                    strbarcodeno = getcom1.getString(16);
                    strprice = getcom1.getString(2);
                } while (getcom1.moveToNext());
            }
            getcom1.close();

            allbuf1 = new byte[][]{
                    dotfeed
            };
            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(dotfeed);
            }

            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {
                allbuf1 = new byte[][]{
                        left, bold, setHT321, "".getBytes(), LF
                };
                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(bold);
                    mPrinter.addCommand(setHT321);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("");
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            } else {
                int len = strcompanyname.length();

                if (len >= 30) {
                    String string1 = strcompanyname.substring(0, 30);
                    allbuf1 = new byte[][]{
                            left, bold, setHT321, string1.getBytes(), "..".getBytes(), LF
                    };
//            allbuf1 = new byte[][]{
//                    bold,un1,cen,strcompanyname.getBytes(), LF
//
//            };
                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(bold);
                        mPrinter.addCommand(setHT321);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(string1+"..");
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                } else {
                    allbuf1 = new byte[][]{
                            left, bold, setHT321, strcompanyname.getBytes(), LF
                    };
//            allbuf1 = new byte[][]{
//                    bold,un1,cen,strcompanyname.getBytes(), LF
//
//            };
                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(bold);
                        mPrinter.addCommand(setHT321);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(strcompanyname);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                }
            }

            tvkot.setText(stritemname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                int len = stritemname.length();
                if (len >= 19) {
                    String string1 = stritemname.substring(0, 19);
                    allbuf2 = new byte[][]{
                            setHT32, left, string1.getBytes(), "..".getBytes(), HT, "Rs".getBytes(), strprice.getBytes(), "/-".getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(setHT32);
                        mPrinter.addCommand(left);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(string1+"..");
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        StringBuilder textData2 = new StringBuilder();
                        textData2.append(insert1_rs+strprice+"/-");
                        mPrinter.addText(textData2.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                } else {

                    allbuf2 = new byte[][]{
                            setHT32, left, stritemname.getBytes(), HT, "Rs".getBytes(), strprice.getBytes(), "/-".getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(setHT32);
                        mPrinter.addCommand(left);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(stritemname);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        StringBuilder textData2 = new StringBuilder();
                        textData2.append(insert1_rs+strprice+"/-");
                        mPrinter.addText(textData2.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                }
            }

            mPrinter.addCommand(cen);
            method = "addBarcode";

            int barcodeWidth, barcodeHeight, pageAreaHeight1, pageAreaWidth1;

            if (NAME.equals("3 inch")) {
                barcodeWidth = 4;
                barcodeHeight = 75;
                pageAreaHeight1 = 384;
                pageAreaWidth1 = 384;
            } else {
                barcodeWidth = 3;
                barcodeHeight = 50;
                pageAreaHeight1 = 384;
                pageAreaWidth1 = 384;
            }

            byte[] dotfeed1 = {0x1b, 0x4a, 0x17};

            tvkot.setText(strbarcodeno);
            if (tvkot.getText().toString().equals("")) {

            } else {

                if (statussusbs.equals("ok")) {

                } else {
                    if (statusnets_counter.equals("ok")) {

                    }else {
                        if (statusnets.equals("ok")) {

                        }
                    }
                }
            }


//            mPrinter.addCommand(dotfeed);


            String extention = "{B";
            String totalbarcod = extention + strbarcodeno;

            mPrinter.addCommand(left);
            mPrinter.addBarcode(totalbarcod,
                    Printer.BARCODE_CODE128,
                    Printer.HRI_BELOW,
                    Printer.FONT_A,
                    barcodeWidth,
                    barcodeHeight);
            mPrinter.addCommand(dotfeed);
            mPrinter.addCommand(dotfeed);
            mPrinter.addCommand(dotfeed);
            mPrinter.addCommand(dotfeed);

        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here2", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, method, mContext);
            return false;
        }

        return true;
    }

    private boolean createCouponData_barcode() {

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x25,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x06,0x20,0x29,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    charlength = 23;
                    charlength1 = 46;
                    charlength2 = 69;
                    quanlentha = 5;
                    str_line = "------------------------------------------------";
                    allbufline = new byte[][]{
                            left,un1, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
                    if (print_ty.moveToFirst()){
                        str_print_ty = print_ty.getString(1);
                    }
                    print_ty.close();
                    if (str_print_ty.equals("Generic")) {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "epson", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 16;
                        charlength1 = 32;
                        charlength2 = 48;
                        quanlentha = 5;
                        str_line = "------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------".getBytes(), LF
                        };
                    }
                }
            }while(cc.moveToNext());
        }
        cc.close();

        final int pageAreaHeight = 384;
        final int pageAreaWidth = 384;
//        final int fontAHeight = 24;
//        final int fontAWidth = 12;
//        final int barcodeWidthPos = 110;
//        final int barcodeHeightPos = 70;

        ArrayList<byte[]> list = new ArrayList<byte[]>();
        String method = "";
        String[] col = {"companylogo"};
        Cursor c = db.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
            yourBitmap = BitmapFactory.decodeByteArray(img, 0, img.length);
        }
        c.close();

//        String method = "";
//        Bitmap coffeeData = BitmapFactory.decodeResource(getResources(), R.drawable.coffee);
//        Bitmap wmarkData = BitmapFactory.decodeResource(getResources(), R.drawable.wmark);

        if (mPrinter == null) {
            return false;
        }
        try{
//            method = "addPageBegin";
//            mPrinter.addPageBegin();

            method = "addPageArea";
            mPrinter.addPageArea(0, 0, nPaperWidth, pageAreaHeight);

            method = "addPageDirection";
            mPrinter.addPageDirection(Printer.DIRECTION_TOP_TO_BOTTOM);

            method = "addFeedLine";
            mPrinter.addFeedLine(1);
            method = "addPagePosition";
            mPrinter.addPagePosition(0, nPaperWidth);

//            // RECEIPT BODY//

//            method = "addPagePosition";
//            mPrinter.addPagePosition(0, wmarkData.getHeight());
//            mPrinter.addPagePosition(0, logoData.getScaledHeight(0));

//            method = "addImage";
//            mPrinter.addImage(wmarkData, 0, 0, wmarkData.getWidth(), wmarkData.getHeight(),
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT,
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
//Free coffee text

//            method = "addTextSize";
//            mPrinter.addTextSize(3, 3);
//            method = "addTextStyle";
//            mPrinter.addTextStyle(Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.TRUE, Printer.PARAM_DEFAULT);
//            method = "addTextSmooth";
//            mPrinter.addTextSmooth(Printer.TRUE);
//            method = "addText";
//            mPrinter.addText("FREE Coffee\n");

            Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
            if (connnet.moveToFirst()) {
                ipnamegets = connnet.getString(1);
                portgets = connnet.getString(2);
                statusnets = connnet.getString(3);
            }
            connnet.close();

            Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
            if (connnet_counter.moveToFirst()) {
                ipnamegets_counter = connnet_counter.getString(1);
                portgets_counter = connnet_counter.getString(2);
                statusnets_counter = connnet_counter.getString(3);
            }
            connnet_counter.close();

            Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
            if (connusb.moveToFirst()) {
                addgets = connusb.getString(1);
                namegets = connusb.getString(2);
                statussusbs = connusb.getString(3);
            }
            connusb.close();
            tvkot = new TextView(getActivity());
            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }
            getcom.close();

            Cursor getcom1 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + text.getText().toString() + "'", null);
            if (getcom1.moveToFirst()) {
                do {
                    stritemname = getcom1.getString(1);
                    strbarcodeno = getcom1.getString(16);
                    strprice = getcom1.getString(2);
                } while (getcom1.moveToNext());
            }
            getcom1.close();

            allbuf1 = new byte[][]{
                    dotfeed
            };
            if (statussusbs.equals("ok")) {
                mPrinter.addCommand(dotfeed);
            }

            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {
                allbuf1 = new byte[][]{
                        left, bold, setHT321, "".getBytes(), LF
                };

                if (statussusbs.equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(bold);
                    mPrinter.addCommand(setHT321);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("");
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            } else {
                int len = strcompanyname.length();
                if (len >= 30) {

                    String string1 = strcompanyname.substring(0, 30);
                    allbuf1 = new byte[][]{
                            left, bold, setHT321, string1.getBytes(), "..".getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(bold);
                        mPrinter.addCommand(setHT321);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(string1+"..");
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                } else {
                    allbuf1 = new byte[][]{
                            left, bold, setHT321, strcompanyname.getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(bold);
                        mPrinter.addCommand(setHT321);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(strcompanyname);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                }
            }

            tvkot.setText(text.getText().toString());
            if (tvkot.getText().toString().equals("")) {

            } else {
                int len = text.length();

                if (len >= 19) {
                    String string = text.getText().toString().substring(0, 19);
                    allbuf2 = new byte[][]{
                            setHT32, left, string.getBytes(), "..".getBytes(), HT, "Rs".getBytes(), editText.getText().toString().getBytes(), "/-".getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(setHT32);
                        mPrinter.addCommand(left);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(string+"..");
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        StringBuilder textData2 = new StringBuilder();
                        textData2.append(insert1_rs+editText.getText().toString()+"/-");
                        mPrinter.addText(textData2.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                } else {
                    allbuf2 = new byte[][]{
                            setHT32, left, text.getText().toString().getBytes(), HT, "Rs".getBytes(), editText.getText().toString().getBytes(), "/-".getBytes(), LF
                    };

                    if (statussusbs.equals("ok")) {
                        mPrinter.addCommand(setHT32);
                        mPrinter.addCommand(left);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(text.getText().toString());
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        StringBuilder textData2 = new StringBuilder();
                        textData2.append(insert1_rs+editText.getText().toString()+"/-");
                        mPrinter.addText(textData2.toString());
                        mPrinter.addCommand(LF); //LF
                    }
                }
            }

            mPrinter.addCommand(cen);
            method = "addBarcode";

            int barcodeWidth, barcodeHeight, pageAreaHeight1, pageAreaWidth1;

            if (NAME.equals("3 inch")) {
                barcodeWidth = 4;
                barcodeHeight = 75;
                pageAreaHeight1 = 384;
                pageAreaWidth1 = 384;
            } else {
                barcodeWidth = 3;
                barcodeHeight = 50;
                pageAreaHeight1 = 384;
                pageAreaWidth1 = 384;
            }

            byte[] dotfeed1 = {0x1b, 0x4a, 0x17};

            tvkot.setText(barcode_no.getText().toString());
            if (tvkot.getText().toString().equals("")) {

            } else {

                if (statussusbs.equals("ok")) {

                } else {
                    if (statusnets_counter.equals("ok")) {

                    }else {
                        if (statusnets.equals("ok")) {

                        }
                    }
                }
            }

//            mPrinter.addCommand(dotfeed);

            String extention = "{B";
            String totalbarcod = extention + barcode_no.getText().toString();

            mPrinter.addCommand(left);
            mPrinter.addBarcode(totalbarcod,
                    Printer.BARCODE_CODE128,
                    Printer.HRI_BELOW,
                    Printer.FONT_A,
                    barcodeWidth,
                    barcodeHeight);
            mPrinter.addCommand(dotfeed);
            mPrinter.addCommand(dotfeed);
            mPrinter.addCommand(dotfeed);
            mPrinter.addCommand(dotfeed);

        } catch (Exception e) {
//            Toast.makeText(getActivity(), "Here2", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, method, mContext);
            return false;
        }

        return true;
    }

    public boolean databaseExist() {
        File DATA_DIRECTORY_DATABASE =
                new File(Environment.getDataDirectory() +
                        "/data/" + "com.intuition.ivepos" +
                        "/databases/" + "amazoninapp");

        return DATA_DIRECTORY_DATABASE.exists();
    }


    public void deleteAllItems(){


        SharedPreferences sharedpreferences =  getDefaultSharedPreferencesMultiProcess(getActivity());
        String company= sharedpreferences.getString("companyname", null);
        String store= sharedpreferences.getString("storename", null);
        String device= sharedpreferences.getString("devicename", null);



        JSONObject params = new JSONObject();

        try {
            params.put("device",device);
            params.put("store",store);
            params.put("company",company);
        } catch (JSONException e) {
            e.printStackTrace();
        }


        RequestQueue queue = Volley.newRequestQueue(getActivity());
        JsonObjectRequest sr = new JsonObjectRequest(
                com.android.volley.Request.Method.POST,
                WebserviceUrl+"csvitemsdelete.php",params,
                new com.android.volley.Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject responseString) {
                        String response= "";
                        JSONObject jsonObject=null;
                        try {
                            jsonObject=responseString;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            response = jsonObject.getString("status");
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if(response.equalsIgnoreCase("success")){


                        }else{
                            Toast.makeText(getActivity(), "delete failed", Toast.LENGTH_SHORT).show();
                        }

                    }
                },
                new com.android.volley.Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.d("Signup confirm", "Error: " + error.getMessage());
                    }
                })  {

        };
/*    sr.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
            DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));*/
        sr.setRetryPolicy(new DefaultRetryPolicy(0,-1,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(sr);
    }

    public void deleteAllCategories(){



        SharedPreferences sharedpreferences = getDefaultSharedPreferencesMultiProcess(getContext());
        String company= sharedpreferences.getString("companyname", null);
        String store= sharedpreferences.getString("storename", null);
        String device= sharedpreferences.getString("devicename", null);



        JSONObject params = new JSONObject();

        try {
            params.put("device",device);
            params.put("store",store);
            params.put("company",company);
        } catch (JSONException e) {
            e.printStackTrace();
        }


        RequestQueue queue = Volley.newRequestQueue(getActivity());
        JsonObjectRequest sr = new JsonObjectRequest(
                com.android.volley.Request.Method.POST,
                WebserviceUrl+"csvdeletecategories.php",params,
                new com.android.volley.Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject responseString) {
                        String response= "";
                        JSONObject jsonObject=null;
                        try {
                            jsonObject=responseString;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            response = jsonObject.getString("status");
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if(response.equalsIgnoreCase("success")){


                        }else{
                            Toast.makeText(getActivity(), "delete failed", Toast.LENGTH_SHORT).show();
                        }

                    }
                },
                new com.android.volley.Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.d("Signup confirm", "Error: " + error.getMessage());
                    }
                })  {

        };
/*    sr.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
            DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));*/
        sr.setRetryPolicy(new DefaultRetryPolicy(0,-1,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(sr);
    }


    public void webservicequery(final String webserviceQuery){


        SharedPreferences sharedpreferences = getDefaultSharedPreferencesMultiProcess(getContext());
        final String company = sharedpreferences.getString("companyname", null);
        final String store = sharedpreferences.getString("storename", null);
        final String device = sharedpreferences.getString("devicename", null);
        RequestQueue queue;
        StringRequest sr1;
        // queue = Volley.newRequestQueue(getActivity());

        queue= RequestSingleton.getInstance(getActivity()).getInstance();

        sr1 = new StringRequest(
                com.android.volley.Request.Method.POST,
                WebserviceUrl + "webservicequery.php",
                new com.android.volley.Response.Listener<String>() {
                    @Override
                    public void onResponse(String responseString) {

                    }
                },
                new com.android.volley.Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.d("Signup confirm", "Error: " + error.getMessage());
                    }
                }) {
            @Override
            protected Map<String, String> getParams() {
                Map<String, String> params = new HashMap<String, String>();
                               /*     params.put("email", email + "");
                                    params.put("password", password + "");*/


//                            final String email = prefs.getString("emailid", "");
//                            final String pwd = prefs.getString("password", "");
                params.put("device", device);
                params.put("store", store);
                params.put("company", company);
                params.put("data", webserviceQuery);
                return params;
            }
        };
    /*    sr.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));*/
        sr1.setRetryPolicy(new DefaultRetryPolicy(0, 0,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(sr1);
    }


    public void check() {


        dialog_pro = new Dialog(getActivity(), R.style.notitle);
        dialog_pro.setContentView(R.layout.dialog_pro_purchase);
        dialog_pro.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        dialog_pro.show();

        final RadioGroup radioGroupSplit = (RadioGroup) dialog_pro.findViewById(R.id.splitgroup);

        final RadioButton one_demo = (RadioButton) dialog_pro.findViewById(R.id.btnone);
        final RadioButton two_buy = (RadioButton) dialog_pro.findViewById(R.id.btntwo);
        final RadioButton three_coupon = (RadioButton) dialog_pro.findViewById(R.id.btnthree);



        Cursor cursor_pro=db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
        if(cursor_pro.moveToFirst()){
            String status=cursor_pro.getString(1);
            String status_da=cursor_pro.getString(3);
            if(status.equalsIgnoreCase("Activated")){
                if (Integer.parseInt(status_da) > Integer.parseInt(currentDateandTime1_pro)) {
                    one_demo.setVisibility(View.GONE);
                    two_buy.setChecked(true);
                }else {
                    one_demo.setVisibility(View.GONE);
                    two_buy.setChecked(true);
                }
            }else{
                one_demo.setVisibility(View.VISIBLE);
                one_demo.setChecked(true);
            }
        }

        Button procancel = (Button) dialog_pro.findViewById(R.id.procancel);
        procancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                dialog_pro.dismiss();
            }
        });

        ImageView closetext = (ImageView) dialog_pro.findViewById(R.id.closetext);
        closetext.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                dialog_pro.dismiss();
            }
        });

        Button proapply = (Button) dialog_pro.findViewById(R.id.proapply);
        proapply.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final int selected1 = radioGroupSplit.getCheckedRadioButtonId();
                RadioButton radioBtnSplit = (RadioButton) dialog_pro.findViewById(selected1);

                if (one_demo.isChecked()) {
//                            Toast.makeText(CloudSubscritionActivity.this, "demo", Toast.LENGTH_LONG).show();

                    i_pro_sel = 1;
                    checking="123";
                    updateProCloud("");

                }else {
                    if (two_buy.isChecked()){
//                                Toast.makeText(CloudSubscritionActivity.this, "buy", Toast.LENGTH_LONG).show();
                        dialog_pro.dismiss();

                        mSelectedProSubscription=SKU_DELAROY_PRO_UPGRADE;


                        try {
                            mHelperPro.launchPurchaseFlow(getActivity(), mSelectedProSubscription, REQ_CODE,
                                    mPurchaseFinishedListenerPro, mSelectedProSubscription);
                        } catch (IabHelper.IabAsyncInProgressException e) {
                            //  complain("Error launching purchase flow. Another async operation in progress.");
                            // setWaitScreen(false);
                        }


                    }else {
                        if (three_coupon.isChecked()){
//                                    Toast.makeText(CloudSubscritionActivity.this, "coupon", Toast.LENGTH_LONG).show();

                            android.app.AlertDialog.Builder alertDialog = new android.app.AlertDialog.Builder(getActivity());
                            alertDialog.setTitle(getString(R.string.title13));
                            alertDialog.setMessage(getString(R.string.setmessage15));
                            final EditText input = new EditText(getActivity());
                            LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                                    LinearLayout.LayoutParams.MATCH_PARENT,
                                    LinearLayout.LayoutParams.MATCH_PARENT);
                            input.setLayoutParams(lp);
                            alertDialog.setView(input);

                            alertDialog.setPositiveButton("Submit",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int which) {
                                            String code = input.getText().toString();

                                            i_pro_sel = 3;
                                            checking=code;
                                            updateProCloud(code);

                                        }
                                    });

                            alertDialog.setNegativeButton("NO",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int which) {
                                            dialog.cancel();
                                        }
                                    });
                            alertDialog.show();

                        }
                    }
                }
            }
        });

    }


    @Override
    public void onResume() {
        LocalBroadcastManager.getInstance(getActivity()).registerReceiver(mMessageReceiver,
                new IntentFilter("myFunction"));

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
//            registerReceiver(receiver, new IntentFilter(
//                    "com.intuition.ivepos.Checking_Store.receiver"), RECEIVER_EXPORTED);
            getActivity().registerReceiver(receiverapp, new IntentFilter(
                    "com.intuition.ivepos.DatabaseitemActivity.receiverapp"), getActivity().RECEIVER_EXPORTED);

            IntentFilter intentFilter = new IntentFilter();
            getActivity().registerReceiver(broadcastReceiver, intentFilter);
        }else {
            getActivity().registerReceiver(receiverapp, new IntentFilter(
                    "com.intuition.ivepos.DatabaseitemActivity.receiverapp"));

            IntentFilter intentFilter = new IntentFilter();
            getActivity().registerReceiver(broadcastReceiver, intentFilter);
        }



        super.onResume();
    }

    @Override
    public void onPause() {
        LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(mMessageReceiver);

        getActivity().unregisterReceiver(broadcastReceiver);//delete

        getActivity().unregisterReceiver(receiverapp);//manual Sync

        super.onPause();
    }

    private BroadcastReceiver receiverapp = new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {

            new syncTaskApp().execute();

        }
    };

    class syncTaskApp extends AsyncTask<String, Void, Integer> {


        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            SyncDatabase syncdatabase=new SyncDatabase();
            syncdatabase.updateSyncDbApp(getContext());

        }

        @Override
        protected Integer doInBackground(String... strings) {
            return null;
        }

        @Override
        protected void onPostExecute(Integer integer) {
            super.onPostExecute(integer);


            action.setVisibility(View.VISIBLE);

            action1.setVisibility(View.VISIBLE);

            if (selected.equals("All")){
//                    Toast.makeText(getActivity(), "inside "+selected, Toast.LENGTH_SHORT).show();
                countryList = new ArrayList<Country_items>();
                try {
                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                    System.out.println("COUNT : " + allrows.getCount());


                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                        db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            }




            dataAdapter = new MyCustomAdapter(getActivity(),
                    R.layout.items_list_details, countryList);
//            listView = (ListView) rootview.findViewById(R.id.listView);
            // Assign adapter to ListView
            listView.setAdapter(dataAdapter);

//            pullToRefresh.setRefreshing(false);

        }
    }

    private BroadcastReceiver mMessageReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {

            if(intent.getExtras().getString("items")!=null){
                alertDialogItems = new AlertDialog.Builder(getActivity()).create();
                alertDialogItems.setTitle("Items Updating");
                alertDialogItems.setMessage(getString(R.string.setmessage12));
                alertDialogItems.show();

                db.execSQL("delete from Items_Virtual");

            }else if(intent.getExtras().getString("stop")!=null){
                alertDialogItems.dismiss();
            }



        }
    };

    @Override
    public void onProgressUpdate(int progress) {
        // Do update your progress...

        updateBar.setVisibility(View.VISIBLE);
        updateBar.setProgress(updateBar.getProgress()+progress);

        float perc= ((float)updateBar.getProgress()/(float)updateBar.getMax())*100;
        int p=(int) perc;
        tv_perc.setText(p+"%");
    }

    class DeleteData extends AsyncTask<String, Void, Integer> {


        @Override
        protected Integer doInBackground(String... strings) {
            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
            Cursor c = db.rawQuery("SELECT name FROM sqlite_master WHERE type='table'", null);
            if (c.moveToFirst()) {
                while ( !c.isAfterLast() ) {
                    String tablename=c.getString(0);
                    if (tablename.equalsIgnoreCase("items") || tablename.equalsIgnoreCase("hotel")
                            || tablename.equalsIgnoreCase("taxes") || tablename.equalsIgnoreCase("discount_details")) {
                        db.execSQL("delete from " + tablename);
                    }
                    c.moveToNext();
                }
            }
            c.close();
            return null;
        }

        @Override
        protected void onPostExecute(Integer integer) {
            super.onPostExecute(integer);
            startDownload();
//            Intent serviceIntent = new Intent(getActivity(), ForegroundService.class);
//            serviceIntent.putExtra("inputExtra", "Processing");
//
//            ContextCompat.startForegroundService(getActivity(), serviceIntent);
        }
    }


    class DownloadMusicfromInternet1_display extends AsyncTask<String, Void, Integer> {

        @Override
        protected Integer doInBackground(String... params) {
            System.out.println("selected category is "+selected);

            if (!selected.equals("All")){
                //  Toast.makeText(getActivity(), " "+selected, Toast.LENGTH_SHORT).show();
                countryList = new ArrayList<Country_items>();
                try {
                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '"+selected+"'", null);
                    System.out.println("COUNT : " + allrows.getCount());


                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                        db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            }
            if (selected.equals("All")){
//                    Toast.makeText(getActivity(), "inside "+selected, Toast.LENGTH_SHORT).show();
                countryList = new ArrayList<Country_items>();
                try {
                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                    System.out.println("COUNT : " + allrows.getCount());


                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                        db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            }





            return null;
        }

        // Show Progress bar before downloading Music
        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            progressbar.setVisibility(View.VISIBLE);
            progress_text.setText("Loading...");


        }


        @Override
        protected void onPostExecute(Integer file_url) {

            dataAdapter = new MyCustomAdapter(getActivity(),
                    R.layout.items_list_details, countryList);
            listView = (ListView) rootview.findViewById(R.id.listView);
            // Assign adapter to ListView
            listView.setAdapter(dataAdapter);

            //enables filtering for the contents of the given ListView
            listView.setTextFilterEnabled(true);


            progressbar.setVisibility(View.GONE);
            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                public void onItemClick(AdapterView<?> parent, View view,
                                        final int position, long id) {
                    // When clicked, show a toast with the TextView text
                    final Country_items country = (Country_items) parent.getItemAtPosition(position);

//                    dialog = new Dialog(getActivity(), R.style.timepicker_date_dialog);
//                    dialog.setContentView(R.layout.fragment_update_item);
////                    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
////                    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
//                    dialog.show();
//
//                    progressbar_dialog = dialog.findViewById(R.id.progressbar);
//                    header_dialog = dialog.findViewById(R.id.header);
//                    content_dialog = dialog.findViewById(R.id.content);
//
//                    progressbar_dialog.setVisibility(View.VISIBLE);
//                    header_dialog.setVisibility(View.INVISIBLE);
//                    content_dialog.setVisibility(View.INVISIBLE);
//
////                    final Handler handler = new Handler();
////                    handler.postDelayed(new Runnable() {
////                        @Override
////                        public void run() {
////                            progressbar_dialog.setVisibility(View.GONE);
////
////                        }
////                    }, 2000); //3000 L = 3 detik
//
//                    selectedImagePath = null;
//                    selectedImageUri = null;
//
////                        alertDialogItems1 = new AlertDialog.Builder(getActivity()).create();
////                        alertDialogItems1.setMessage(getString(R.string.setmessage12));
////                        alertDialogItems1.show();
////
////                        final Handler handler = new Handler();
////                        handler.postDelayed(new Runnable() {
////                            @Override
////                            public void run() {
////                                alertDialogItems1.dismiss();
////                            }
////                        }, 4000); //3000 L = 3 detik
//
////                    Cursor cursor1_1 = db.rawQuery("SELECT * FROM Taxes", null);
////                    if (cursor1_1.moveToFirst()) {
////                        do {
////                            String idz = cursor1_1.getString(0);
////                            ContentValues contentValues = new ContentValues();
////                            contentValues.put("checked", "");
////                            String where1 = "_id = '" + idz + "' ";
////
////                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
////                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
////                            resultUri = new Uri.Builder()
////                                    .scheme("content")
////                                    .authority(StubProviderApp.AUTHORITY)
////                                    .path("Taxes")
////                                    .appendQueryParameter("operation", "update")
////                                    .appendQueryParameter("_id", idz)
////                                    .build();
////                            getActivity().getContentResolver().notifyChange(resultUri, null);
////
//////                                db.update("Taxes", contentValues, where1, new String[]{});
////                        } while (cursor1_1.moveToNext());
////                    }
////                    cursor1_1.close();
//
//                    db.execSQL("UPDATE Taxes set checked = ''");
//                    db.execSQL("DELETE FROM variants_temp");

                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows1 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + country.getName() + "' AND _id = '" + country.getCode() + "' ", null);
                    if (allrows1.moveToFirst()) {
                        do {
                            ID = allrows1.getString(0);
                            NAme = allrows1.getString(1);
                            NAme1 = allrows1.getString(1);
                            iddd = allrows1.getString(0);
                            PRice = allrows1.getString(2);
                            QUan = allrows1.getString(3);
                            CAte = allrows1.getString(4);
                            ITemTax = allrows1.getString(5);
                            switchstate = allrows1.getString(12);
                            String disva = allrows1.getString(14);
                            String disty = allrows1.getString(13);
                            byte[] byteImage1 = allrows1.getBlob(6);
                            final String image_text = allrows1.getString(15);
                            final String barcoden = allrows1.getString(16);
                            final String UnIT = allrows1.getString(26);

                            final String var0 = country.getName();
                            final String var1 = allrows1.getString(38);
                            final String var2 = allrows1.getString(40);
                            final String var3 = allrows1.getString(42);
                            final String var4 = allrows1.getString(44);
                            final String var5 = allrows1.getString(46);

                            final String varp0 = allrows1.getString(2);
                            final String varp1 = allrows1.getString(39);
                            final String varp2 = allrows1.getString(41);
                            final String varp3 = allrows1.getString(43);
                            final String varp4 = allrows1.getString(45);
                            final String varp5 = allrows1.getString(47);

                            TextView value_1 = new TextView(getActivity());
                            value_1.setText(country.getbarvalue());
                            TextView value_11 = new TextView(getActivity());
                            value_11.setText(barcoden);
                            TextView value_2 = new TextView(getActivity());
                            value_2.setText(country.getqty());
                            TextView value_22 = new TextView(getActivity());
                            value_22.setText(QUan);
                            TextView value_3 = new TextView(getActivity());
                            value_3.setText(country.getprice());
                            TextView value_33 = new TextView(getActivity());
                            value_33.setText(PRice);

                            if (!value_1.getText().toString().equals(value_11.getText().toString()) ||
                                    !value_2.getText().toString().equals(value_22.getText().toString()) ||
                                    !value_3.getText().toString().equals(value_33.getText().toString())) {
//                                Toast.makeText(getActivity(), "not equal", Toast.LENGTH_SHORT).show();

                                DownloadMusicfromInternet1_display downloadMusicfromInternet1_display = new DownloadMusicfromInternet1_display();
                                downloadMusicfromInternet1_display.execute();

                            }else {
//                                Toast.makeText(getActivity(), "equal", Toast.LENGTH_SHORT).show();

                                dialog = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                                dialog.setContentView(R.layout.fragment_update_item);
//                    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                dialog.show();

                                progressbar_dialog = dialog.findViewById(R.id.progressbar);
                                header_dialog = dialog.findViewById(R.id.header);
                                content_dialog = dialog.findViewById(R.id.content);

                                progressbar_dialog.setVisibility(View.VISIBLE);
                                header_dialog.setVisibility(View.INVISIBLE);
                                content_dialog.setVisibility(View.INVISIBLE);

                                selectedImagePath = null;
                                selectedImageUri = null;


                                db.execSQL("UPDATE Taxes set checked = ''");
                                db.execSQL("DELETE FROM variants_temp");

                                final TextView dialogTxt_id = (TextView) dialog.findViewById(R.id.editText4);
                                dialogTxt_id.setText(String.valueOf(ID));

                                dialogC1_id = (EditText) dialog.findViewById(R.id.editText1);
                                dialogC1_id.requestFocus();
                                layoutitemname_dialog = (TextInputLayout) dialog.findViewById(R.id.layout_itemname);
                                dialogC1_id.setText(NAme);

                                dialog_columnvalue = NAme;
                                if (NAme.toString().contains("'")) {
                                    dialog_columnvalue = NAme.toString().replaceAll("'", " ");
                                }

                                dialogC1_id.addTextChangedListener(new TextWatcher() {

                                    public void afterTextChanged(Editable s) {
                                    }

                                    public void beforeTextChanged(CharSequence s, int start,
                                                                  int count, int after) {
                                    }

                                    public void onTextChanged(CharSequence s, int start,
                                                              int before, int count) {
                                        layoutitemname_dialog.setError(null);
                                    }
                                });

                                dialogC2_id = (EditText) dialog.findViewById(R.id.editText2);
                                layoutprice_dialog = (TextInputLayout) dialog.findViewById(R.id.layout_price);
                                dialogC2_id.setText(String.valueOf(PRice));

                                dialogC2_id.addTextChangedListener(new TextWatcher() {

                                    public void afterTextChanged(Editable s) {
                                    }

                                    public void beforeTextChanged(CharSequence s, int start,
                                                                  int count, int after) {
                                    }

                                    public void onTextChanged(CharSequence s, int start,
                                                              int before, int count) {
                                        layoutprice_dialog.setError(null);
                                    }
                                });

                                layoutbarcode_dialog = (TextInputLayout) dialog.findViewById(R.id.layout_barcode);

                                dialogC3_id = (EditText) dialog.findViewById(R.id.editText3);
                                dialogC3_id.setText(String.valueOf(QUan));

                                dialogC3_myswitch = (CheckBox) dialog.findViewById(R.id.mySwitch);
                                if (switchstate.toString().equals("yes")) {
                                    dialogC3_myswitch.setChecked(true);
                                } else {
                                    dialogC3_myswitch.setChecked(false);
                                }

                                dialogC3_dis = (EditText) dialog.findViewById(R.id.discountvalue1);
                                TextView te = new TextView(getActivity());
                                te.setText(disva);
                                if (te.getText().toString().equals("")) {
                                    dialogC3_dis.setText("0");
                                } else {
                                    dialogC3_dis.setText(String.valueOf(disva));
                                }

                                RelativeLayout barrr = (RelativeLayout) dialog.findViewById(R.id.barr);
//                                RelativeLayout barrrtv = (RelativeLayout) dialog.findViewById(R.id.barrtv);

//                                dialogC3_barcodetv = (TextView) dialog.findViewById(R.id.barcodenumtv);
                                dialogC3_barcode = (EditText) dialog.findViewById(R.id.barcodenum);

//                                printbarcode_tv = (ImageButton) dialog.findViewById(R.id.barcode_printtv);
                                printbarcode = (ImageButton) dialog.findViewById(R.id.barcode_print);

                                dialogC3_barcode.addTextChangedListener(new TextWatcher() {

                                    public void afterTextChanged(Editable s) {
                                    }

                                    public void beforeTextChanged(CharSequence s, int start,
                                                                  int count, int after) {
                                    }

                                    public void onTextChanged(CharSequence s, int start,
                                                              int before, int count) {
                                        layoutbarcode_dialog.setError(null);
                                    }
                                });

//                                if (NAME3.toString().equals("On") || NAME3.toString().equals("Off")) {
                                //////generate some barcode value
//                                    barrrtv.setVisibility(View.VISIBLE);
                                barrr.setVisibility(View.VISIBLE);
                                dialogC3_barcode.setVisibility(View.VISIBLE);
//                                    dialogC3_barcodetv.setVisibility(View.GONE);
                                TextView te2 = new TextView(getActivity());
                                te2.setText(barcoden);
                                if (te2.getText().toString().equals("")) {
                                    dialogC3_barcode.setText("");
                                } else {
                                    dialogC3_barcode.setText(String.valueOf(barcoden));
                                }

                                printbarcode.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View view) {
//                                            mHandler = new MHandler(getActivity());
//                                            DrawerService.addHandler(mHandler);
//
//                                            mHandler1 = new MHandler1(getActivity());
//                                            DrawerService1.addHandler(mHandler1);

                                        Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
                                        if (connnet.moveToFirst()) {
                                            ipnameget = connnet.getString(1);
                                            portget = connnet.getString(2);
                                            statusnet = connnet.getString(3);
                                        }
                                        connnet.close();

                                        Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
                                        if (connnet_counter.moveToFirst()) {
                                            ipnameget_counter = connnet_counter.getString(1);
                                            portget_counter = connnet_counter.getString(2);
                                            statusnet_counter = connnet_counter.getString(3);
                                        }
                                        connnet_counter.close();

                                        Cursor conn = db.rawQuery("SELECT * FROM BTConn", null);
                                        if (conn.moveToFirst()) {
                                            nameget = conn.getString(1);
                                            addget = conn.getString(2);
                                            statussusb = conn.getString(3);
                                        }
                                        conn.close();

                                        if (statusnet.equals("ok") || statusnet_counter.equals("ok") || statussusb.equals("ok")) {
//                                                Toast.makeText(getActivity(), "printer connected", Toast.LENGTH_SHORT).show();//printbill
//                                                Toast.makeText(getActivity(), "printer connected "+dialogC3_barcodetv.getText().toString() , Toast.LENGTH_SHORT).show();
                                            if (dialogC3_barcode.getText().toString().equals("") || dialogC3_barcode.getText().toString().equals(" ") ||
                                                    dialogC3_barcode.getText().toString().equals("-")) {
                                                Toast.makeText(getActivity(), "no barcode to generate", Toast.LENGTH_SHORT).show();//printbill
                                            } else {

                                                Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
                                                if (getcom.moveToFirst()) {
                                                    do {
                                                        strcompanyname = getcom.getString(1);
                                                        straddress1 = getcom.getString(14);
                                                    } while (getcom.moveToNext());
                                                }
                                                getcom.close();

                                                Cursor getcom1 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + dialogC1_id.getText().toString() + "'", null);
                                                if (getcom1.moveToFirst()) {
                                                    do {
                                                        stritemname = getcom1.getString(1);
                                                        strbarcodeno = getcom1.getString(16);
                                                        strprice = getcom1.getString(2);
                                                    } while (getcom1.moveToNext());
                                                }
                                                getcom1.close();

                                                dialog_print = new Dialog(getActivity(), R.style.timepicker_date_dialog);
                                                dialog_print.setContentView(R.layout.dialog_print_item_barcode);
                                                dialog_print.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                dialog_print.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                dialog_print.show();

                                                TextView rs = (TextView) dialog_print.findViewById(R.id.rs);
                                                rs.setText(insert1_cc);

                                                ImageButton btncancel = (ImageButton) dialog_print.findViewById(R.id.btncancel);
                                                btncancel.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View view) {
                                                        dialog_print.dismiss();
                                                    }
                                                });

                                                TextView tv = new TextView(getActivity());
                                                tv.setText(strcompanyname);
                                                TextView compname = (TextView) dialog_print.findViewById(R.id.compname);
                                                if (tv.getText().toString().equals("")) {

                                                } else {
                                                    compname.setText(strcompanyname);
                                                }

                                                TextView itemname = (TextView) dialog_print.findViewById(R.id.itemname);
                                                itemname.setText(stritemname);

                                                TextView itemnameprice = (TextView) dialog_print.findViewById(R.id.bar_price);
                                                itemnameprice.setText(strprice);

                                                TextView barvalue = (TextView) dialog_print.findViewById(R.id.barvalue);
                                                barvalue.setText(strbarcodeno);

                                                final EditText noofprints = (EditText) dialog_print.findViewById(R.id.editText1);
                                                final TextInputLayout layoutitemname_dialog = (TextInputLayout) dialog_print.findViewById(R.id.layoutcatname_dialog);
                                                noofprints.setText("1");

                                                Bitmap bitmap = null;
                                                ImageView iv = (ImageView) dialog_print.findViewById(R.id.barCodeImage);

                                                try {

                                                    bitmap = encodeAsBitmap(strbarcodeno, BarcodeFormat.CODE_128, 240, 48);
                                                    iv.setImageBitmap(bitmap);

                                                } catch (WriterException e) {
                                                    e.printStackTrace();
                                                }


                                                noofprints.addTextChangedListener(new TextWatcher() {

                                                    public void afterTextChanged(Editable s) {
                                                    }

                                                    public void beforeTextChanged(CharSequence s, int start,
                                                                                  int count, int after) {
                                                    }

                                                    public void onTextChanged(CharSequence s, int start,
                                                                              int before, int count) {
                                                        layoutitemname_dialog.setError(null);
                                                    }
                                                });


                                                Button btnsave = (Button) dialog_print.findViewById(R.id.btnsave);
                                                btnsave.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View view) {
                                                        if (noofprints.getText().toString().equals("") || noofprints.getText().toString().equals("0")) {
                                                            layoutitemname_dialog.setError("Enter value");
                                                        } else {

//                                                            LinearLayout l = new LinearLayout(getActivity());
//                                                            l.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
//                                                            l.setOrientation(LinearLayout.VERTICAL);
//
//                                                            // barcode data
//                                                            String barcode_data = "123456";
//
//                                                            // barcode image
//                                                            Bitmap bitmap = null;
//                                                            ImageView iv = new ImageView(getActivity());
//
//                                                            try {
//
//                                                                bitmap = encodeAsBitmap(barcode_data, BarcodeFormat.CODE_128, 600, 300);
//                                                                iv.setImageBitmap(bitmap);
//
//                                                            } catch (WriterException e) {
//                                                                e.printStackTrace();
//                                                            }
//
//                                                            l.addView(iv);

                                                            int noofprints1 = Integer.parseInt(noofprints.getText().toString());
                                                            for (int i = 0; i < noofprints1; i++) {
                                                                printbarcode_bill(dialog_print);
                                                            }
                                                        }
                                                    }
                                                });

                                            }

                                        } else {
                                            Toast.makeText(getActivity(), "printer not connected", Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                });

                                dialog_no_of_items = (TextView) dialog.findViewById(R.id.no_of_items);

                                Cursor cursor2 = db.rawQuery("SELECT COUNT(itemname) FROM Ingredient_items_list WHERE itemname = '" + NAme + "'", null);
                                if (cursor2.moveToFirst()) {
                                    int leveliss = cursor2.getInt(0);
                                    String totalbillis = String.valueOf(leveliss);
                                    dialog_no_of_items.setText(totalbillis);
                                }
                                cursor2.close();

                                SimpleDateFormat sdf2_pro = new SimpleDateFormat("yyyyMMdd");
                                String currentDateandTime1_pro = sdf2_pro.format(new Date());

                                LinearLayout add_ingredient = (LinearLayout) dialog.findViewById(R.id.add_ingredient);
                                Cursor cursor1 = db_inapp.rawQuery("SELECT * FROM Pro_upgrade", null);
                                if (cursor1.moveToFirst()) {
                                    String st = cursor1.getString(1);
                                    String st_da = cursor1.getString(3);

                                    TextView tv = new TextView(getActivity());
                                    tv.setText(st);
                                    TextView tv_da = new TextView(getActivity());
                                    tv_da.setText(st_da);

                                    if (tv.getText().toString().equals("Activated")) {
                                        if (Integer.parseInt(tv_da.getText().toString()) > Integer.parseInt(currentDateandTime1_pro)) {
                                            add_ingredient.setVisibility(View.VISIBLE);
                                        }
                                    }
                                }
                                cursor1.close();

                                add_ingredient.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View view) {

                                        image = "2";
                                        Intent intent = new Intent(getActivity(), Add_ingredient_to_item.class);
                                        intent.putExtra("PLAYER1NAME", NAme);
                                        intent.putExtra("PLAYER2NAME", dialog_no_of_items.getText().toString());
                                        startActivityForResult(intent, 1);

//                                        if (dialog_no_of_items.getText().toString().equals("") || dialog_no_of_items.getText().toString().equals("0")) {
//
//                                        }else {
//                                            image = "2";
//                                            Intent intent = new Intent(getActivity(), Add_ingredient_to_item.class);
//                                            intent.putExtra("PLAYER1NAME", NAme);
//                                            intent.putExtra("PLAYER2NAME", dialog_no_of_items.getText().toString());
//                                            startActivityForResult(intent, 1);
//                                        }


                                    }
                                });

                                dialogC3_dis_spin = (Spinner) dialog.findViewById(R.id.rspercent1);

                                ArrayList<String> my_array = new ArrayList<String>();
                                my_array.add("%");
                                my_array.add(insert1_cc);
                                final ArrayAdapter my_Adapterr1 = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                                        my_array);
                                dialogC3_dis_spin.setAdapter(my_Adapterr1);

                                if (disty.equals("%")) {
                                    dialogC3_dis_spin.setSelection(0);
                                } else {
                                    dialogC3_dis_spin.setSelection(1);
                                }

                                dialogC4_id = (TextView) dialog.findViewById(R.id.chocolate_spinner);
                                dialogC4_id.setText(String.valueOf(CAte));
                                LinearLayout linearLayout1 = (LinearLayout) dialog.findViewById(R.id.click);
                                dialogC4_id.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        final Dialog dialog1 = new Dialog(getActivity(), R.style.notitle);
                                        dialog1.setContentView(R.layout.spinnerlist);
                                        dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

                                        popupSpinner = (ListView) dialog1.findViewById(R.id.listView5);
                                        ArrayList<String> my_arrayy = getTableValuesall();
                                        final ArrayAdapter my_Adapterr = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                                                my_arrayy);
                                        popupSpinner.setAdapter(my_Adapterr);

                                        myFilter = (EditText) dialog1.findViewById(R.id.searchView);
                                        myFilter.addTextChangedListener(new TextWatcher() {

                                            public void afterTextChanged(Editable s) {
                                            }

                                            public void beforeTextChanged(CharSequence s, int start,
                                                                          int count, int after) {
                                            }

                                            public void onTextChanged(CharSequence s, int start,
                                                                      int before, int count) {
                                                my_Adapterr.getFilter().filter(s.toString());
                                            }
                                        });

                                        LinearLayout cancelletter = (LinearLayout) dialog1.findViewById(R.id.custombar_del_wrapper);
                                        cancelletter.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                myFilter.setText("");
                                            }
                                        });

                                        LinearLayout cancelletter1 = (LinearLayout) dialog1.findViewById(R.id.custombar_return_wrapper);
                                        cancelletter1.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                dialog1.dismiss();
                                            }
                                        });


                                        //selectionCurrent = String.valueOf(popupSpinner.getSelectedItemPosition());

                                        popupSpinner.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                                            @Override
                                            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                                                String selectedSweet = popupSpinner.getItemAtPosition(position).toString();


                                                dialogC4_id.setText(selectedSweet);
                                                dialog1.dismiss();
                                                //String text = dialogC4_id.getText().toString();
                                                //Toast.makeText(getActivity(), "Selected item: " + selectedSweet + " - " + position, Toast.LENGTH_SHORT).show();
                                            }
                                        });

                                        dialog1.show();

                                    }
                                });

                                dialogC4_id1 = (TextView) dialog.findViewById(R.id.tax);
                                TextView tv_tax = new TextView(getActivity());
                                tv_tax.setText(ITemTax);
                                if (tv_tax.getText().toString().equals("")) {
                                    dialogC4_id1.setText("None");
                                }else {
                                    dialogC4_id1.setText(String.valueOf(ITemTax));
                                }
                                LinearLayout linearLayout2 = (LinearLayout) dialog.findViewById(R.id.clicktax);


                                Cursor cursorq = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + NAme + "'", null);
                                if (cursorq.moveToFirst()) {
                                    do {
                                        String tax_na = cursorq.getString(5);
                                        String tax_val = cursorq.getString(27);
                                        String tax_na2 = cursorq.getString(28);
                                        String tax_va12 = cursorq.getString(29);
                                        String tax_na3 = cursorq.getString(30);
                                        String tax_va13 = cursorq.getString(31);
                                        String tax_na4 = cursorq.getString(32);
                                        String tax_va14 = cursorq.getString(33);
                                        String tax_na5 = cursorq.getString(34);
                                        String tax_va15 = cursorq.getString(35);

                                        Cursor cursor21 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + tax_na + "'", null);
                                        if (cursor21.moveToFirst()) {
                                            String idz = cursor21.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "checked");
                                            String wherecu = "_id = '" + idz + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", idz)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }
                                        cursor21.close();

                                        Cursor cursor22 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + tax_na2 + "'", null);
                                        if (cursor22.moveToFirst()) {
                                            String idz = cursor22.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "checked");
                                            String wherecu = "_id = '" + idz + "'";


                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", idz)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }
                                        cursor22.close();

                                        Cursor cursor23 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + tax_na3 + "'", null);
                                        if (cursor23.moveToFirst()) {
                                            String idz = cursor23.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "checked");
                                            String wherecu = "_id = '" + idz + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", idz)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }
                                        cursor23.close();

                                        Cursor cursor24 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + tax_na4 + "'", null);
                                        if (cursor24.moveToFirst()) {
                                            String idz = cursor24.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "checked");
                                            String wherecu = "_id = '" + idz + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", idz)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }
                                        cursor24.close();

                                        Cursor cursor25 = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + tax_na5 + "'", null);
                                        if (cursor25.moveToFirst()) {
                                            String idz = cursor25.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("checked", "checked");
                                            String wherecu = "_id = '" + idz + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Taxes")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", idz)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                        }
                                        cursor25.close();

                                    } while (cursorq.moveToNext());
                                }
                                cursorq.close();


                                int i1 = 0;
                                Cursor cursor1_11 = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                if (cursor1_11.moveToFirst()) {
                                    do {
                                        i1++;
                                    } while (cursor1_11.moveToNext());

//                                    Toast.makeText(getActivity(), "selected "+i1, Toast.LENGTH_LONG).show();
                                    dialogC4_id1.setText(i1 + " taxes selected");
                                }
                                cursor1_11.close();

                                dialogC4_id1.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        final Dialog dialog1 = new Dialog(getActivity(), R.style.notitle);
                                        dialog1.setContentView(R.layout.dialog_tax_multiselection);
                                        dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

                                        ImageButton btncancel = (ImageButton) dialog1.findViewById(R.id.btncancel);
                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View view) {
                                                dialog1.dismiss();
                                            }
                                        });

                                        popupSpinner = (ListView) dialog1.findViewById(R.id.listView5);

                                        list_tax = new ArrayList<Country_tax>();
                                        String statement = "SELECT * FROM Taxes WHERE taxtype = 'Itemtax'";
                                        //Execute the query
                                        Cursor aallrows = db.rawQuery(statement, null);
                                        System.out.println("COUNT : " + aallrows.getCount());
                                        ////Toast.makeText(getActivity(), "limit is a " + limit, Toast.LENGTH_SHORT).show();
                                        if (aallrows.moveToFirst()) {
                                            do {
                                                String ID = aallrows.getString(0);
                                                String NAme = aallrows.getString(1);

                                                Country_tax NAME = new Country_tax(NAme);
                                                list_tax.add(NAME);

                                            } while (aallrows.moveToNext());
                                        }
                                        aallrows.close();

                                        adapter_tax = new MyAdapter_tax(getActivity(), list_tax);
                                        popupSpinner.setAdapter(adapter_tax);


                                        Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + NAme + "'", null);
                                        if (cursor.moveToFirst()) {
                                            do {
                                                String tax_na = cursor.getString(5);
                                                String tax_val = cursor.getString(27);
                                                String tax_na2 = cursor.getString(28);
                                                String tax_va12 = cursor.getString(29);
                                                String tax_na3 = cursor.getString(30);
                                                String tax_va13 = cursor.getString(31);
                                                String tax_na4 = cursor.getString(32);
                                                String tax_va14 = cursor.getString(33);
                                                String tax_na5 = cursor.getString(34);
                                                String tax_va15 = cursor.getString(35);

                                                for (int i = 0; i < popupSpinner.getCount(); i++) {
                                                    v = popupSpinner.getAdapter().getView(i, null, null);
                                                    TextView cb = (TextView) v.findViewById(R.id.label);
                                                    CheckBox cb1 = (CheckBox) v.findViewById(R.id.check);

                                                    if (cb.getText().toString().equals(tax_na)) {
                                                        cb1.setChecked(true);
                                                    }
                                                    if (cb.getText().toString().equals(tax_na2)) {
                                                        cb1.setChecked(true);
                                                    }
                                                    if (cb.getText().toString().equals(tax_na3)) {
                                                        cb1.setChecked(true);
                                                    }
                                                    if (cb.getText().toString().equals(tax_na4)) {
                                                        cb1.setChecked(true);
                                                    }
                                                    if (cb.getText().toString().equals(tax_na5)) {
                                                        cb1.setChecked(true);
                                                    }
                                                }
                                            } while (cursor.moveToNext());
                                        }
                                        cursor.close();


                                        final EditText myFilter = (EditText) dialog1.findViewById(R.id.search_selecteditem);
                                        myFilter.addTextChangedListener(new TextWatcher() {

                                            public void afterTextChanged(Editable s) {
                                            }

                                            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                                            }

                                            public void onTextChanged(CharSequence s, int start, int before, int count) {
                                                adapter_tax.getFilter().filter(s.toString());
                                            }
                                        });

                                        final CheckBox chkAll = (CheckBox) dialog1.findViewById(R.id.chkAll);

                                        chkAll.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View view) {
//                                Toast.makeText(Customer_Info_Activity.this, "clicked", Toast.LENGTH_SHORT).show();
                                                View v;
                                                CheckBox chBox;

                                                if (chkAll.isChecked()) {
//                                    Toast.makeText(Customer_Info_Activity.this, "checked", Toast.LENGTH_SHORT).show();
                                                    for (int i = 0; i < popupSpinner.getCount(); i++) {
                                                        v = popupSpinner.getAdapter().getView(i, null, null);

                                                        CheckBox cb = (CheckBox) v.findViewById(R.id.check);
                                                        cb.setChecked(true);
                                                        adapter_tax.notifyDataSetChanged();
                                                    }
                                                    Cursor del = db.rawQuery("SELECT * FROM Taxes WHERE taxtype = 'Itemtax'", null);
                                                    if (del.moveToFirst()) {
                                                        do {
                                                            String na = del.getString(1);
                                                            String id = del.getString(0);
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("checked", "checked");
                                                            String wherecu = "_id = '" + id + "'";

                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Taxes")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                                        } while (del.moveToNext());
                                                    }
                                                    del.close();
                                                } else {
//                                    Toast.makeText(Customer_Info_Activity.this, "not checked", Toast.LENGTH_SHORT).show();
                                                    for (int i = 0; i < popupSpinner.getCount(); i++) {
                                                        v = popupSpinner.getAdapter().getView(i, null, null);

                                                        CheckBox cb = (CheckBox) v.findViewById(R.id.check);
                                                        cb.setChecked(false);
                                                        adapter_tax.notifyDataSetChanged();
                                                    }
                                                    Cursor del = db.rawQuery("SELECT * FROM Taxes WHERE taxtype = 'Itemtax'", null);
                                                    if (del.moveToFirst()) {
                                                        do {
                                                            String na = del.getString(1);
                                                            String id = del.getString(0);
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("checked", "");
                                                            String wherecu = "_id = '" + id + "'";

                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Taxes")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);


//                                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                                        } while (del.moveToNext());
                                                    }
                                                    del.close();
                                                }

                                                int count = 0;
                                                int size = list_tax.size();
                                                for (int i1 = 0; i1 < size; i1++) {
                                                    if (list_tax.get(i1).isSelected()) {
                                                        count++;
                                                    }
                                                }

                                                if (popupSpinner.getCount() == count)
                                                    chkAll.setChecked(true);
                                                else
                                                    chkAll.setChecked(false);
                                            }
                                        });

                                        popupSpinner.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                                            @Override
                                            public void onItemClick(final AdapterView<?> adapterView, View view, final int position, long l) {
                                                TextView txtview = (TextView) view.findViewById(R.id.label);
                                                final String item = txtview.getText().toString();

                                                final CheckBox checkbox = (CheckBox) view.getTag(R.id.check);

                                                if (checkbox.isChecked()) {
                                                    checkbox.setChecked(false);
                                                    Cursor del = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + txtview.getText().toString() + "'", null);
                                                    if (del.moveToFirst()) {
                                                        do {
                                                            String na = del.getString(1);
                                                            String id = del.getString(0);
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("checked", "");
                                                            String wherecu = "_id = '" + id + "'";

                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Taxes")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                                        } while (del.moveToNext());
                                                    }
                                                    del.close();
                                                } else {
                                                    checkbox.setChecked(true);
                                                    Cursor del = db.rawQuery("SELECT * FROM Taxes WHERE taxname = '" + txtview.getText().toString() + "'", null);
                                                    if (del.moveToFirst()) {
                                                        do {
                                                            String na = del.getString(1);
                                                            String id = del.getString(0);
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("checked", "checked");
                                                            String wherecu = "_id = '" + id + "'";

                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                                                            getActivity().getContentResolver().update(contentUri, contentValues, wherecu, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Taxes")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                            db.update("Taxes", contentValues, wherecu, new String[]{});
                                                        } while (del.moveToNext());
                                                    }
                                                    del.close();
                                                }

                                                int count = 0;
                                                int size = list_tax.size();
                                                for (int i1 = 0; i1 < size; i1++) {
                                                    if (list_tax.get(i1).isSelected()) {
                                                        count++;
                                                    }
                                                }

                                                if (popupSpinner.getCount() == count)
                                                    chkAll.setChecked(true);
                                                else
                                                    chkAll.setChecked(false);

                                                adapter_tax.notifyDataSetChanged();
                                            }
                                        });

                                        int count = 0;
                                        int size = list_tax.size();
                                        for (int i1 = 0; i1 < size; i1++) {
                                            if (list_tax.get(i1).isSelected()) {
                                                count++;
                                            }
                                        }

                                        if (popupSpinner.getCount() == count)
                                            chkAll.setChecked(true);
                                        else
                                            chkAll.setChecked(false);

                                        adapter_tax.notifyDataSetChanged();


                                        Button save = (Button) dialog1.findViewById(R.id.btnsave);
                                        save.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View view) {
                                                int i = 0;
                                                Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                                if (cursor.moveToFirst()) {
                                                    do {
                                                        String na = cursor.getString(1);
                                                        i++;
                                                    } while (cursor.moveToNext());

                                                    if (i > 5) {
                                                        Toast.makeText(getActivity(), "Max 5 taxes can be applied", Toast.LENGTH_LONG).show();
                                                    } else {
                                                        dialog1.dismiss();
//                                                        Toast.makeText(getActivity(), "selected "+i, Toast.LENGTH_LONG).show();
                                                        dialogC4_id1.setText(i + " taxes selected");
                                                    }
                                                } else {
                                                    dialog1.dismiss();
                                                    dialogC4_id1.setText("0 taxes selected");
                                                }
                                                cursor.close();
                                            }
                                        });

                                        dialog1.show();
                                    }
                                });

                                spinnervariants_dialog = (TextView) dialog.findViewById(R.id.variants);

                                final TextView tv_var0 = new TextView(getActivity());
                                tv_var0.setText(var0);
                                final TextView tv_var1 = new TextView(getActivity());
                                tv_var1.setText(var1);
                                final TextView tv_var2 = new TextView(getActivity());
                                tv_var2.setText(var2);
                                final TextView tv_var3 = new TextView(getActivity());
                                tv_var3.setText(var3);
                                final TextView tv_var4 = new TextView(getActivity());
                                tv_var4.setText(var4);
                                final TextView tv_var5 = new TextView(getActivity());
                                tv_var5.setText(var5);


                                int i = 0;
                                if (!tv_var1.getText().toString().equals("")) {
                                    i++;
                                }
                                if (!tv_var2.getText().toString().equals("")) {
                                    i++;
                                }
                                if (!tv_var3.getText().toString().equals("")) {
                                    i++;
                                }
                                if (!tv_var4.getText().toString().equals("")) {
                                    i++;
                                }
                                if (!tv_var5.getText().toString().equals("")) {
                                    i++;
                                }
                                spinnervariants_dialog.setText(i + " types");

                                if (!tv_var1.getText().toString().equals("") || !tv_var2.getText().toString().equals("") || !tv_var3.getText().toString().equals("") ||
                                        !tv_var4.getText().toString().equals("") || !tv_var5.getText().toString().equals("")) {
                                    final ContentValues contentValues = new ContentValues();

                                    TextView tv1 = new TextView(getActivity());
                                    tv1.setText(var1);
                                    if (tv1.getText().toString().equals("")) {

                                    } else {
                                        contentValues.put("vari1", var1);
                                        contentValues.put("varprice1", varp1);

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                        resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                        db.insert("variants_temp", null, contentValues);
                                    }

                                    TextView tv2 = new TextView(getActivity());
                                    tv2.setText(var2);
                                    if (tv2.getText().toString().equals("")) {

                                    } else {
                                        contentValues.put("vari1", var2);
                                        contentValues.put("varprice1", varp2);

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                        resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                        db.insert("variants_temp", null, contentValues);
                                    }

                                    TextView tv3 = new TextView(getActivity());
                                    tv3.setText(var3);
                                    if (tv3.getText().toString().equals("")) {

                                    } else {
                                        contentValues.put("vari1", var3);
                                        contentValues.put("varprice1", varp3);

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                        resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                        db.insert("variants_temp", null, contentValues);
                                    }

                                    TextView tv4 = new TextView(getActivity());
                                    tv4.setText(var4);
                                    if (tv4.getText().toString().equals("")) {

                                    } else {
                                        contentValues.put("vari1", var4);
                                        contentValues.put("varprice1", varp4);

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                        resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                        db.insert("variants_temp", null, contentValues);
                                    }

                                    TextView tv5 = new TextView(getActivity());
                                    tv5.setText(var5);
                                    if (tv5.getText().toString().equals("")) {

                                    } else {
                                        contentValues.put("vari1", var5);
                                        contentValues.put("varprice1", varp5);

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                        resultUri = getActivity().getContentResolver().insert(contentUri, contentValues);
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                        db.insert("variants_temp", null, contentValues);
                                    }
                                }


                                spinnervariants_dialog.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View view) {
                                        final Dialog dialog1 = new Dialog(getActivity(), R.style.notitle);
                                        dialog1.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                        dialog1.setContentView(R.layout.spinnerlist_variants);
                                        dialog1.show();

                                        ImageButton btncancel = (ImageButton) dialog1.findViewById(R.id.btncancel);
                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View view) {
                                                dialog1.dismiss();
                                            }
                                        });

                                        TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                        final ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                        final String selectQuery = "SELECT * FROM variants_temp";

                                        Cursor cursor = db.rawQuery(selectQuery, null);
                                        final String[] fromFieldNames = {"vari1", "varprice1"};
                                        final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                        BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                        listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                        if (listView5.getAdapter().getCount() == 0) {
                                            variants_null.setVisibility(View.VISIBLE);
                                            listView5.setVisibility(View.GONE);
                                        } else {
                                            variants_null.setVisibility(View.GONE);
                                            listView5.setVisibility(View.VISIBLE);
                                        }

                                        listView5.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                                            @Override
                                            public void onItemClick(AdapterView<?> parent, View view, int position, long l) {
                                                final Cursor cursor = (Cursor) parent.getItemAtPosition(position);
                                                final String _id = cursor.getString(cursor.getColumnIndex("_id"));
                                                final String item_content1 = cursor.getString(cursor.getColumnIndex("vari1"));
                                                final String item_content2 = cursor.getString(cursor.getColumnIndex("varprice1"));

                                                if (item_content1.toString().equals("Regular")) {
                                                    Toast.makeText(getActivity(), "Cannot edit", Toast.LENGTH_LONG).show();
                                                } else {
                                                    final Dialog dialog_add = new Dialog(getActivity(), R.style.notitle);
                                                    dialog_add.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                    dialog_add.setContentView(R.layout.variants_add_modify);
                                                    dialog_add.show();

                                                    ImageButton btncancel = (ImageButton) dialog_add.findViewById(R.id.btncancel);
                                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View view) {
                                                            dialog_add.dismiss();
                                                        }
                                                    });


                                                    final EditText v_n = (EditText) dialog_add.findViewById(R.id.var_name);
                                                    final EditText v_p = (EditText) dialog_add.findViewById(R.id.var_price);

                                                    v_n.setText(item_content1);
                                                    v_p.setText(item_content2);

                                                    Button btndelete = (Button) dialog_add.findViewById(R.id.btndelete);
                                                    btndelete.setVisibility(View.VISIBLE);

                                                    btndelete.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View view) {
                                                            String where = "_id = '" + _id + "' ";

                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                            getActivity().getContentResolver().delete(contentUri, where, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("variants_temp")
                                                                    .appendQueryParameter("operation", "delete")
                                                                    .appendQueryParameter("_id", _id)
                                                                    .build();
                                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                                            db.delete("variants_temp", where, new String[]{});

                                                            listView5.setAdapter(null);


                                                            TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                                            ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                                            final String selectQuery = "SELECT * FROM variants_temp";

                                                            Cursor cursor = db.rawQuery(selectQuery, null);
                                                            final String[] fromFieldNames = {"vari1", "varprice1"};
                                                            final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                                            BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                                            listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                                            if (listView5.getAdapter().getCount() == 0) {
                                                                variants_null.setVisibility(View.VISIBLE);
                                                                listView5.setVisibility(View.GONE);
                                                            } else {
                                                                variants_null.setVisibility(View.GONE);
                                                                listView5.setVisibility(View.VISIBLE);
                                                            }
                                                            dialog_add.dismiss();
                                                        }
                                                    });

                                                    Button btnsave = (Button) dialog_add.findViewById(R.id.btnsave);
                                                    btnsave.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View view) {
                                                            final EditText v_n = (EditText) dialog_add.findViewById(R.id.var_name);
                                                            final EditText v_p = (EditText) dialog_add.findViewById(R.id.var_price);
                                                            if (v_n.getText().toString().equals("") || v_p.getText().toString().equals("") ||
                                                                    v_n.getText().toString().equals("Regular") || v_n.getText().toString().equals("regular")) {
                                                                if (v_n.getText().toString().equals("")) {
                                                                    v_n.setError("Enter variant name");
                                                                }
                                                                if (v_p.getText().toString().equals("")) {
                                                                    v_p.setError("Enter variant price");
                                                                }
                                                                if (v_n.getText().toString().equals("Regular") || v_n.getText().toString().equals("regular")) {
                                                                    v_n.setError("Enter another variant name");
                                                                }
                                                            } else {
//                                                            Cursor cursor21 = db.rawQuery("SELECT * FROM variants_temp WHERE vari1 = '"+item_content1+"'", null);
                                                                if (v_n.getText().toString().equals(item_content1)) {
                                                                    ContentValues contentValues1 = new ContentValues();
                                                                    contentValues1.put("vari1", v_n.getText().toString());
                                                                    contentValues1.put("varprice1", v_p.getText().toString());
                                                                    String where = "_id = '" + _id + "' ";

                                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                                    getActivity().getContentResolver().update(contentUri, contentValues1, where, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProviderApp.AUTHORITY)
                                                                            .path("variants_temp")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", _id)
                                                                            .build();
                                                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                                    db.update("variants_temp", contentValues1, where, new String[]{});

                                                                    listView5.setAdapter(null);


                                                                    TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                                                    ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                                                    final String selectQuery = "SELECT * FROM variants_temp";

                                                                    Cursor cursor = db.rawQuery(selectQuery, null);
                                                                    final String[] fromFieldNames = {"vari1", "varprice1"};
                                                                    final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                                                    BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                                                    listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                                                    if (listView5.getAdapter().getCount() == 0) {
                                                                        variants_null.setVisibility(View.VISIBLE);
                                                                        listView5.setVisibility(View.GONE);
                                                                    } else {
                                                                        variants_null.setVisibility(View.GONE);
                                                                        listView5.setVisibility(View.VISIBLE);
                                                                    }
                                                                    dialog_add.dismiss();
                                                                } else {
                                                                    Cursor cursor2 = db.rawQuery("SELECT * FROM variants_temp WHERE vari1 = '" + v_n.getText().toString() + "'", null);
                                                                    if (cursor2.moveToFirst()) {
                                                                        do {
                                                                            v_n.setError("Variant name already used");
                                                                        }
                                                                        while (cursor2.moveToNext());
                                                                    } else {
                                                                        ContentValues contentValues1 = new ContentValues();
                                                                        contentValues1.put("vari1", v_n.getText().toString());
                                                                        contentValues1.put("varprice1", v_p.getText().toString());
                                                                        String where = "_id = '" + _id + "' ";

                                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                                        getActivity().getContentResolver().update(contentUri, contentValues1, where, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProviderApp.AUTHORITY)
                                                                                .path("variants_temp")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("_id", _id)
                                                                                .build();
                                                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                                        db.update("variants_temp", contentValues1, where, new String[]{});

                                                                        listView5.setAdapter(null);


                                                                        TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                                                        ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                                                        final String selectQuery = "SELECT * FROM variants_temp";

                                                                        Cursor cursor = db.rawQuery(selectQuery, null);
                                                                        final String[] fromFieldNames = {"vari1", "varprice1"};
                                                                        final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                                                        BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                                                        listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                                                        if (listView5.getAdapter().getCount() == 0) {
                                                                            variants_null.setVisibility(View.VISIBLE);
                                                                            listView5.setVisibility(View.GONE);
                                                                        } else {
                                                                            variants_null.setVisibility(View.GONE);
                                                                            listView5.setVisibility(View.VISIBLE);
                                                                        }
                                                                        dialog_add.dismiss();
                                                                    }
                                                                    cursor2.close();
                                                                }
                                                            }

                                                        }
                                                    });
                                                }

                                            }
                                        });


                                        ImageView btnadd = (ImageView) dialog1.findViewById(R.id.btnadd);
                                        btnadd.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View view) {
                                                int i = 0;
                                                Cursor allrows1 = db.rawQuery("SELECT * FROM variants_temp", null);
                                                if (allrows1.moveToFirst()) {
                                                    do {
                                                        final String var1 = allrows1.getString(1);
                                                        final TextView tv_var1 = new TextView(getActivity());
                                                        tv_var1.setText(var1);

                                                        if (!tv_var1.getText().toString().equals("")) {
                                                            i++;
                                                        }
                                                    } while (allrows1.moveToNext());
                                                }
                                                allrows1.close();

                                                if (i >= 5) {
                                                    Toast.makeText(getActivity(), "5 variants added", Toast.LENGTH_LONG).show();
                                                } else {
                                                    if (tv_var1.getText().toString().equals("") || tv_var2.getText().toString().equals("") || tv_var3.getText().toString().equals("") ||
                                                            tv_var4.getText().toString().equals("") || tv_var5.getText().toString().equals("")) {
                                                        final Dialog dialog_add = new Dialog(getActivity(), R.style.notitle);
                                                        dialog_add.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                        dialog_add.setContentView(R.layout.variants_add_modify);
                                                        dialog_add.show();

                                                        ImageButton btncancel = (ImageButton) dialog_add.findViewById(R.id.btncancel);
                                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View view) {
                                                                dialog_add.dismiss();
                                                            }
                                                        });

                                                        final EditText v_n = (EditText) dialog_add.findViewById(R.id.var_name);
                                                        final EditText v_p = (EditText) dialog_add.findViewById(R.id.var_price);

                                                        Button btndelete = (Button) dialog_add.findViewById(R.id.btndelete);
                                                        btndelete.setVisibility(View.GONE);

                                                        Button btnsave = (Button) dialog_add.findViewById(R.id.btnsave);
                                                        btnsave.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View view) {
                                                                final EditText v_n = (EditText) dialog_add.findViewById(R.id.var_name);
                                                                final EditText v_p = (EditText) dialog_add.findViewById(R.id.var_price);
                                                                Cursor cursor22 = db.rawQuery("SELECT * FROM variants_temp", null);
                                                                if (cursor22.moveToFirst()) {

                                                                } else {
                                                                    ContentValues contentValues1 = new ContentValues();
                                                                    contentValues1.put("vari1", "Regular");
                                                                    contentValues1.put("varprice1", PRice);

                                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                                    resultUri = getActivity().getContentResolver().insert(contentUri, contentValues1);
                                                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                                    db.insert("variants_temp", null, contentValues1);
                                                                }
                                                                cursor22.close();
                                                                if (v_n.getText().toString().equals("") || v_p.getText().toString().equals("") ||
                                                                        v_n.getText().toString().equals("Regular") || v_n.getText().toString().equals("regular")) {
                                                                    if (v_n.getText().toString().equals("")) {
                                                                        v_n.setError("Enter variant name");
                                                                    }
                                                                    if (v_p.getText().toString().equals("")) {
                                                                        v_p.setError("Enter variant price");
                                                                    }
                                                                    if (v_n.getText().toString().equals("Regular") || v_n.getText().toString().equals("regular")) {
                                                                        v_n.setError("Enter another variant name");
                                                                    }
                                                                } else {
                                                                    Cursor cursor2 = db.rawQuery("SELECT * FROM variants_temp WHERE vari1 = '" + v_n.getText().toString() + "'", null);
                                                                    if (cursor2.moveToFirst()) {
                                                                        v_n.setError("Variant name already used");
                                                                    } else {
                                                                        ContentValues contentValues1 = new ContentValues();
                                                                        contentValues1.put("vari1", v_n.getText().toString());
                                                                        contentValues1.put("varprice1", v_p.getText().toString());

                                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                                                                        resultUri = getActivity().getContentResolver().insert(contentUri, contentValues1);
                                                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                                                                        db.insert("variants_temp", null, contentValues1);

                                                                        listView5.setAdapter(null);


                                                                        TextView variants_null = (TextView) dialog1.findViewById(R.id.variants_null);

                                                                        ListView listView5 = (ListView) dialog1.findViewById(R.id.listView5);
                                                                        final String selectQuery = "SELECT * FROM variants_temp";

                                                                        Cursor cursor = db.rawQuery(selectQuery, null);
                                                                        final String[] fromFieldNames = {"vari1", "varprice1"};
                                                                        final int[] toViewsID = {R.id.var_name, R.id.var_price};
                                                                        BaseAdapter adapter = new ImageCursorAdapter_variants(getActivity(), R.layout.variants_listview, cursor, fromFieldNames, toViewsID);
                                                                        listView5.setAdapter(adapter);// Assign adapter to ListView.... here... the bitch error

                                                                        if (listView5.getAdapter().getCount() == 0) {
                                                                            variants_null.setVisibility(View.VISIBLE);
                                                                            listView5.setVisibility(View.GONE);
                                                                        } else {
                                                                            variants_null.setVisibility(View.GONE);
                                                                            listView5.setVisibility(View.VISIBLE);
                                                                        }
                                                                        dialog_add.dismiss();
                                                                    }
                                                                    cursor2.close();
                                                                }

                                                            }
                                                        });

                                                    } else {
                                                        Toast.makeText(getActivity(), "No variants to add", Toast.LENGTH_LONG).show();
                                                    }
                                                }


                                            }
                                        });

                                        Button btnsave = (Button) dialog1.findViewById(R.id.btnsave);
                                        btnsave.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View view) {
                                                int i = 0;
                                                Cursor allrows1 = db.rawQuery("SELECT * FROM variants_temp ", null);
                                                if (allrows1.moveToFirst()) {
                                                    do {
                                                        final String var1 = allrows1.getString(1);
                                                        final TextView tv_var1 = new TextView(getActivity());
                                                        tv_var1.setText(var1);

                                                        if (!tv_var1.getText().toString().equals("")) {
                                                            i++;
                                                        }
                                                    } while (allrows1.moveToNext());

                                                    spinnervariants_dialog.setText(i + " types");
                                                }
                                                allrows1.close();
                                                dialog1.dismiss();
                                            }
                                        });
                                    }
                                });


                                imageclick = (RelativeLayout) dialog.findViewById(R.id.image_click);

                                get_image = (de.hdodenhof.circleimageview.CircleImageView) dialog.findViewById(R.id.get_image);
                                final TextView imagetext = (TextView) dialog.findViewById(R.id.imagetext);
                                //byte[] byteImage1 = null;
                                //byteImage1 = cursor.getBlob(cursor.getColumnIndex("image"));
                                TextView cv = new TextView(getActivity());
                                cv.setText(image_text);

                                Bitmap bmPicture = BitmapFactory.decodeByteArray(byteImage1, 0, byteImage1.length);
                                if (bmPicture == null) {
//                                    Toast.makeText(getActivity(), "image not there", Toast.LENGTH_SHORT).show();
                                    imagetext.setVisibility(View.VISIBLE);
                                    get_image.setVisibility(View.INVISIBLE);
                                    imagetext.setText(cv.getText().toString());
                                } else {
//                                    Toast.makeText(getActivity(), "image there", Toast.LENGTH_SHORT).show();
                                    imagetext.setVisibility(View.INVISIBLE);
                                    get_image.setVisibility(View.VISIBLE);
                                    setImage(byteImage1);
                                }


                                imagetext.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        //Toast.makeText(getActivity(), "ssssssselecting", Toast.LENGTH_SHORT).show();

                                        // Create intent to Open Image applications like Gallery, Google Photos
                                        image = "1";
                                        Intent galleryIntent = new Intent(Intent.ACTION_PICK,
                                                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                                        // Start the Intent
                                        startActivityForResult(galleryIntent, SELECT_PICTURE);


                                    }
                                });

                                get_image.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        image = "1";
                                        Intent galleryIntent = new Intent(Intent.ACTION_PICK,
                                                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                                        // Start the Intent
                                        startActivityForResult(galleryIntent, SELECT_PICTURE);
                                    }
                                });

                                Button removelogo = (Button) dialog.findViewById(R.id.btnremovelogo);
                                removelogo.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        String str1 = dialogC1_id.getText().toString().substring(0, 2);
                                        String str2 = str1.toUpperCase();

                                        get_image.setVisibility(View.INVISIBLE);
                                        imagetext.setVisibility(View.VISIBLE);
                                        imagetext.setText(str2);

                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("image", "");
                                        contentValues.put("image_text", str2);
                                        String where = "_id = '" + ID + "' ";

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id", ID)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
                                        //  db.update("Items", contentValues, where, new String[]{});
                                        String where1_v1 = "itemname = '" + NAme + "'";

                                        db.update("Items_Virtual", contentValues, where1_v1, new String[]{});

//                                        db.update("Items", contentValues, where, new String[]{});
                                    }
                                });

                                Button delete = (Button) dialog.findViewById(R.id.btndelete);
                                delete.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {


                                        final Dialog dd = new Dialog(getActivity(), R.style.notitle);
                                        dd.setContentView(R.layout.delete_item_selected);


                                        ImageView imageVieww = (ImageView) dd.findViewById(R.id.closetext);
                                        imageVieww.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                dd.dismiss();
                                            }
                                        });

                                        Button buttonn = (Button) dd.findViewById(R.id.cancel);
                                        buttonn.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                dd.dismiss();
                                            }
                                        });

                                        Button buttonnn = (Button) dd.findViewById(R.id.ok);
                                        buttonnn.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {

                                                String where = "_id = '" + ID + "' ";

                                                webservicequery("delete from Items WHERE _id = '" + ID + "'");
                                                db.execSQL("delete from Items WHERE _id = '" + ID + "'");

//                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
//                                                getActivity().getContentResolver().delete(contentUri, where, new String[]{});
//                                                resultUri = new Uri.Builder()
//                                                        .scheme("content")
//                                                        .authority(StubProviderApp.AUTHORITY)
//                                                        .path("Items")
//                                                        .appendQueryParameter("operation", "delete")
//                                                        .appendQueryParameter("_id", ID)
//                                                        .build();
//                                                getActivity().getContentResolver().notifyChange(resultUri, null);
////                                                db.delete("Items", where, new String[]{});

                                                String where1_v1 = "itemname = '" + NAme + "' ";
                                                db.delete("Items_Virtual", where1_v1, new String[]{});

                                                webservicequery("delete from Ingredient_items_list WHERE itemname = '" + NAme1 + "'");
                                                db.execSQL("delete from Ingredient_items_list WHERE itemname = '" + NAme1 + "'");

//                                                Cursor cursor21 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + NAme1 + "'", null);
//                                                if (cursor21.moveToFirst()) {
//                                                    do {
//                                                        String id = cursor21.getString(0);
//                                                        String ingr_na = cursor21.getString(1);
//                                                        String where1 = "_id = '" + id + "'";
//                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
//                                                        getActivity().getContentResolver().delete(contentUri, where1, new String[]{});
//                                                        resultUri = new Uri.Builder()
//                                                                .scheme("content")
//                                                                .authority(StubProviderApp.AUTHORITY)
//                                                                .path("Ingredient_items_list")
//                                                                .appendQueryParameter("operation", "delete")
//                                                                .appendQueryParameter("_id", id)
//                                                                .build();
//                                                        getActivity().getContentResolver().notifyChange(resultUri, null);
////                                                        db.delete("Ingredient_items_list", where1, new String[]{});
//                                                    } while (cursor21.moveToNext());
//                                                }
//                                                cursor21.close();



                                                if (spinner.getSelectedItem().toString().equals("All")) {
                                                    countryList = new ArrayList<Country_items>();
                                                    try {
                                                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                        Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                                                        System.out.println("COUNT : " + allrows.getCount());
                                                        //Toast.makeText(getActivity(), "deletingggggggggggg2222", Toast.LENGTH_SHORT).show();


                                                        //Country_items country = new Country_items(name, name, name, name);

                                                        if (allrows.moveToFirst()) {
                                                            do {
                                                                String ID = allrows.getString(0);
                                                                String NAme = allrows.getString(1);
                                                                String BAr = allrows.getString(16);
                                                                String PRiCe = allrows.getString(2);
                                                                String QtY = allrows.getString(3);
                                                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                                countryList.add(NAME);
                                                                //countryList.add(PLACE);
                                                            } while (allrows.moveToNext());
                                                        }
                                                        allrows.close();
//                                                        db.close();
                                                    } catch (Exception e) {
                                                        Toast.makeText(getActivity(), "Error encountered.",
                                                                Toast.LENGTH_LONG);
                                                    }
                                                } else {
                                                    if (!spinner.getSelectedItem().toString().equals("All")) {
                                                        countryList = new ArrayList<Country_items>();
                                                        try {
                                                            //Toast.makeText(getActivity(), "deletingggggggggggg3333", Toast.LENGTH_SHORT).show();
                                                            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                            Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "' ", null);
                                                            System.out.println("COUNT : " + allrows.getCount());


                                                            //Country_items country = new Country_items(name, name, name, name);

                                                            if (allrows.moveToFirst()) {
                                                                do {
                                                                    String ID = allrows.getString(0);
                                                                    String NAme = allrows.getString(1);
                                                                    String BAr = allrows.getString(16);
                                                                    String PRiCe = allrows.getString(2);
                                                                    String QtY = allrows.getString(3);
                                                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                                    countryList.add(NAME);
                                                                    //countryList.add(PLACE);
                                                                } while (allrows.moveToNext());
                                                            }
                                                            allrows.close();
//                                                            db.close();
                                                        } catch (Exception e) {
                                                            Toast.makeText(getActivity(), "Error encountered.",
                                                                    Toast.LENGTH_LONG);
                                                        }
                                                    }
                                                }


                                                dataAdapter = new MyCustomAdapter(getActivity(),
                                                        R.layout.items_list_details, countryList);
                                                final ListView listView = (ListView) rootview.findViewById(R.id.listView);
                                                // Assign adapter to ListView
                                                listView.setAdapter(dataAdapter);
                                                dd.dismiss();
                                                dialog.dismiss();

//                                                country.moveToPosition(position);
//                                                //String rowId = cursor.getString(0); //Column 0 of the cursor is the id
//                                                country.requery();
//                                                dataAdapter.notifyDataSetChanged();
                                            }
                                        });

                                        dd.show();


                                    }
                                });


                                ImageButton frameLayout1 = (ImageButton) dialog.findViewById(R.id.btncancel);
                                frameLayout1.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        dialog.dismiss();
                                        hideKeyboard(getContext());
                                        donotshowKeyboard(getActivity());
                                    }
                                });

                                unit_sav_dialog = (RadioButton) dialog.findViewById(R.id.unit_sav_dialog);
                                weight_sav_dialog = (RadioButton) dialog.findViewById(R.id.weight_sav_dialog);

                                if (UnIT.toString().equalsIgnoreCase("Unit")) {
                                    unit_sav_dialog.setChecked(true);
                                } else {
                                    weight_sav_dialog.setChecked(true);
                                }

                                dialogC3_dis.addTextChangedListener(new TextWatcher() {

                                    public void afterTextChanged(Editable s) {
                                    }

                                    public void beforeTextChanged(CharSequence s, int start,
                                                                  int count, int after) {
                                    }

                                    public void onTextChanged(CharSequence s, int start,
                                                              int before, int count) {
                                        dialogC3_dis.setError(null);
                                    }
                                });


                                Button save = (Button) dialog.findViewById(R.id.btnsave);
                                save.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                        //Toast.makeText(getActivity(), "image1", Toast.LENGTH_SHORT).show();
//                                    db.execSQL("UPDATE Items SET itemtax = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET tax_value = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET itemtax2 = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET tax_value2 = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET itemtax3 = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET tax_value3 = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET itemtax4 = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET tax_value4 = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET itemtax5 = '' WHERE itemname = '" + NAme1 + "'");
//                                    db.execSQL("UPDATE Items SET tax_value5 = '' WHERE itemname = '" + NAme1 + "'");
                                        db.execSQL("UPDATE Items SET itemtax = '', tax_value = '', itemtax2 = '', tax_value2 = '', itemtax3 = '', tax_value3 = '', itemtax4 = '', tax_value4 = '', itemtax5 = '', tax_value5 = '' WHERE itemname = '" + NAme1 + "'");

                                        if (NAme1.equals(dialogC1_id.getText().toString())) {
                                            TextView vbg1 = new TextView(getActivity());
                                            vbg1.setText(barcoden);
                                            if (dialogC3_barcode.getText().toString().equals("") || vbg1.getText().toString().equals(dialogC3_barcode.getText().toString())) {
                                                if (dialogC3_dis.getText().toString().equals("")) {
//                                                saveInDBup(Integer.parseInt(ID));
                                                    DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                    downloadMusicfromInternetde_update01.execute();
                                                } else {
                                                    if (dialogC3_dis_spin.getSelectedItem().toString().equals("%")) {
                                                        if (Float.parseFloat(dialogC3_dis.getText().toString()) > 100) {
                                                            dialogC3_dis.setError("Enter less than 100");
                                                        } else {
//                                                        saveInDBup(Integer.parseInt(ID));
                                                            DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                            downloadMusicfromInternetde_update01.execute();
                                                        }
                                                    } else {
                                                        if (Float.parseFloat(dialogC3_dis.getText().toString()) > Float.parseFloat(dialogC2_id.getText().toString())) {
                                                            dialogC3_dis.setError("Enter less than price");
                                                        } else {
//                                                        saveInDBup(Integer.parseInt(ID));
                                                            DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                            downloadMusicfromInternetde_update01.execute();
                                                        }
                                                    }
                                                }

                                            } else {
                                                TextView vbg = new TextView(getActivity());
                                                vbg.setText(barcoden);
                                                if (vbg.getText().toString().equals("") || vbg.getText().toString().equals(dialogC3_barcode.getText().toString())) {
                                                    Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + dialogC3_barcode.getText().toString() + "'", null);
                                                    if (cursor4.moveToFirst()) {
                                                        layoutbarcode_dialog.setError("barcode value already used");
                                                    } else {
                                                        if (dialogC3_dis.getText().toString().equals("")) {
//                                                        saveInDBup(Integer.parseInt(ID));
                                                            DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                            downloadMusicfromInternetde_update01.execute();
                                                        } else {
                                                            if (dialogC3_dis_spin.getSelectedItem().toString().equals("%")) {
                                                                if (Float.parseFloat(dialogC3_dis.getText().toString()) > 100) {
                                                                    dialogC3_dis.setError("Enter less than 100");
                                                                } else {
//                                                                saveInDBup(Integer.parseInt(ID));
                                                                    DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                    downloadMusicfromInternetde_update01.execute();
                                                                }
                                                            } else {
                                                                if (Float.parseFloat(dialogC3_dis.getText().toString()) > Float.parseFloat(dialogC2_id.getText().toString())) {
                                                                    dialogC3_dis.setError("Enter less than price");
                                                                } else {
//                                                                saveInDBup(Integer.parseInt(ID));
                                                                    DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                    downloadMusicfromInternetde_update01.execute();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    cursor4.close();
                                                } else {
                                                    Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + dialogC3_barcode.getText().toString() + "'", null);
                                                    if (cursor4.moveToFirst()) {
                                                        layoutbarcode_dialog.setError("barcode value already used");
                                                    } else {
                                                        if (dialogC3_dis.getText().toString().equals("")) {
//                                                        saveInDBup(Integer.parseInt(ID));
                                                            DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                            downloadMusicfromInternetde_update01.execute();
                                                        } else {
                                                            if (dialogC3_dis_spin.getSelectedItem().toString().equals("%")) {
                                                                if (Float.parseFloat(dialogC3_dis.getText().toString()) > 100) {
                                                                    dialogC3_dis.setError("Enter less than 100");
                                                                } else {
//                                                                saveInDBup(Integer.parseInt(ID));
                                                                    DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                    downloadMusicfromInternetde_update01.execute();
                                                                }
                                                            } else {
                                                                if (Float.parseFloat(dialogC3_dis.getText().toString()) > Float.parseFloat(dialogC2_id.getText().toString())) {
                                                                    dialogC3_dis.setError("Enter less than price");
                                                                } else {
//                                                                saveInDBup(Integer.parseInt(ID));
                                                                    DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                    downloadMusicfromInternetde_update01.execute();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    cursor4.close();
                                                }
                                            }
                                        } else {
                                            dialog_columnvalue = dialogC1_id.getText().toString();
                                            if (dialog_columnvalue.contains("'")) {
                                                dialog_columnvalue = dialog_columnvalue.replaceAll("'", " ");
                                            }
                                            Cursor itemnamecheck = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + dialog_columnvalue + "'", null);
                                            if (itemnamecheck.moveToFirst()) {
                                                layoutitemname_dialog.setError("Itemname already in use");
                                            } else {
                                                TextView vbg1 = new TextView(getActivity());
                                                vbg1.setText(barcoden);
                                                if (dialogC3_barcode.getText().toString().equals("") || vbg1.getText().toString().equals(dialogC3_barcode.getText().toString())) {
                                                    if (dialogC3_dis.getText().toString().equals("")) {
//                                                    saveInDBup(Integer.parseInt(ID));
                                                        DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                        downloadMusicfromInternetde_update01.execute();
                                                    } else {
                                                        if (dialogC3_dis_spin.getSelectedItem().toString().equals("%")) {
                                                            if (Float.parseFloat(dialogC3_dis.getText().toString()) > 100) {
                                                                dialogC3_dis.setError("Enter less than 100");
                                                            } else {
//                                                            saveInDBup(Integer.parseInt(ID));
                                                                DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                downloadMusicfromInternetde_update01.execute();
                                                            }
                                                        } else {
                                                            if (Float.parseFloat(dialogC3_dis.getText().toString()) > Float.parseFloat(dialogC2_id.getText().toString())) {
                                                                dialogC3_dis.setError("Enter less than price");
                                                            } else {
//                                                            saveInDBup(Integer.parseInt(ID));
                                                                DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                downloadMusicfromInternetde_update01.execute();
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    TextView vbg = new TextView(getActivity());
                                                    vbg.setText(barcoden);
                                                    if (vbg.getText().toString().equals("") || vbg.getText().toString().equals(dialogC3_barcode.getText().toString())) {
                                                        Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + dialogC3_barcode.getText().toString() + "'", null);
                                                        if (cursor4.moveToFirst()) {
                                                            layoutbarcode_dialog.setError("barcode value already used");
                                                        } else {
                                                            if (dialogC3_dis.getText().toString().equals("")) {
//                                                            saveInDBup(Integer.parseInt(ID));
                                                                DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                downloadMusicfromInternetde_update01.execute();
                                                            } else {
                                                                if (dialogC3_dis_spin.getSelectedItem().toString().equals("%")) {
                                                                    if (Float.parseFloat(dialogC3_dis.getText().toString()) > 100) {
                                                                        dialogC3_dis.setError("Enter less than 100");
                                                                    } else {
//                                                                    saveInDBup(Integer.parseInt(ID));
                                                                        DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                        downloadMusicfromInternetde_update01.execute();
                                                                    }
                                                                } else {
                                                                    if (Float.parseFloat(dialogC3_dis.getText().toString()) > Float.parseFloat(dialogC2_id.getText().toString())) {
                                                                        dialogC3_dis.setError("Enter less than price");
                                                                    } else {
//                                                                    saveInDBup(Integer.parseInt(ID));
                                                                        DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                        downloadMusicfromInternetde_update01.execute();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        cursor4.close();
                                                    } else {
                                                        Cursor cursor4 = db.rawQuery("SELECT * FROM Items WHERE barcode_value = '" + dialogC3_barcode.getText().toString() + "'", null);
                                                        if (cursor4.moveToFirst()) {
                                                            layoutbarcode_dialog.setError("barcode value already used");
                                                        } else {
                                                            if (dialogC3_dis.getText().toString().equals("")) {
//                                                            saveInDBup(Integer.parseInt(ID));
                                                                DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                downloadMusicfromInternetde_update01.execute();
                                                            } else {
                                                                if (dialogC3_dis_spin.getSelectedItem().toString().equals("%")) {
                                                                    if (Float.parseFloat(dialogC3_dis.getText().toString()) > 100) {
                                                                        dialogC3_dis.setError("Enter less than 100");
                                                                    } else {
//                                                                    saveInDBup(Integer.parseInt(ID));
                                                                        DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                        downloadMusicfromInternetde_update01.execute();
                                                                    }
                                                                } else {
                                                                    if (Float.parseFloat(dialogC3_dis.getText().toString()) > Float.parseFloat(dialogC2_id.getText().toString())) {
                                                                        dialogC3_dis.setError("Enter less than price");
                                                                    } else {
//                                                                    saveInDBup(Integer.parseInt(ID));
                                                                        DownloadMusicfromInternetde_update01 downloadMusicfromInternetde_update01 = new DownloadMusicfromInternetde_update01();
                                                                        downloadMusicfromInternetde_update01.execute();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        cursor4.close();
                                                    }
                                                }
//                                                saveInDBup(Integer.parseInt(ID));
                                            }
                                            itemnamecheck.close();
                                        }

//                                    final Handler handler = new Handler();
//                                    handler.postDelayed(new Runnable() {
//                                        @Override
//                                        public void run() {
//
//                                            if (spinner.getSelectedItem().toString().equals("All")) {
//                                                countryList = new ArrayList<Country_items>();
//                                                try {
//                                                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//                                                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
//                                                    System.out.println("COUNT : " + allrows.getCount());
//                                                    //Toast.makeText(getActivity(), "deletingggggggggggg2222", Toast.LENGTH_SHORT).show();
//
//
//                                                    //Country_items country = new Country_items(name, name, name, name);
//
//                                                    if (allrows.moveToFirst()) {
//                                                        do {
//                                                            String ID = allrows.getString(0);
//                                                            String NAme = allrows.getString(1);
//                                                            String BAr = allrows.getString(16);
//                                                            String PRiCe = allrows.getString(2);
//                                                            String QtY = allrows.getString(3);
//                                                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
//                                                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
//                                                            countryList.add(NAME);
//                                                            //countryList.add(PLACE);
//                                                        } while (allrows.moveToNext());
//                                                    }
//                                                    allrows.close();
//                        //                                                db.close();
//                                                } catch (Exception e) {
//                                                    Toast.makeText(getActivity(), "Error encountered.",
//                                                            Toast.LENGTH_LONG);
//                                                }
//                                            } else {
//                                                if (!spinner.getSelectedItem().toString().equals("All")) {
//                                                    countryList = new ArrayList<Country_items>();
//                                                    try {
//                                                        //Toast.makeText(getActivity(), "deletingggggggggggg3333", Toast.LENGTH_SHORT).show();
//                                                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
//                                                        Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "' ", null);
//                                                        System.out.println("COUNT : " + allrows.getCount());
//
//
//                                                        //Country_items country = new Country_items(name, name, name, name);
//
//                                                        if (allrows.moveToFirst()) {
//                                                            do {
//                                                                String ID = allrows.getString(0);
//                                                                String NAme = allrows.getString(1);
//                                                                String BAr = allrows.getString(16);
//                                                                String PRiCe = allrows.getString(2);
//                                                                String QtY = allrows.getString(3);
//                                                                String PlaCe = allrows.getString(2);
//                                                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
//                                                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
//                                                                countryList.add(NAME);
//                                                                //countryList.add(PLACE);
//                                                            } while (allrows.moveToNext());
//                                                        }
//                                                        allrows.close();
//                        //                                                    db.close();
//                                                    } catch (Exception e) {
//                                                        Toast.makeText(getActivity(), "Error encountered.",
//                                                                Toast.LENGTH_LONG);
//                                                    }
//                                                }
//                                            }
//
//
//                                            dataAdapter = new MyCustomAdapter(getActivity(),
//                                                    R.layout.items_list_details, countryList);
//                                            final ListView listView = (ListView) rootview.findViewById(R.id.listView);
//                                            // Assign adapter to ListView
//                                            listView.setAdapter(dataAdapter);
//
//                                            progressbar.setVisibility(View.GONE);
//
//                                        }
//                                    }, 800); //3000 L = 3 detik

                                    }
                                });
                                //dialogC4_id.setSelection(getIndex(dialogC4_id, CAte));

                                final Handler handler = new Handler();
                                handler.postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        progressbar_dialog.setVisibility(View.GONE);
                                        header_dialog.setVisibility(View.VISIBLE);
                                        content_dialog.setVisibility(View.VISIBLE);

                                        dialogC1_id.selectAll();

                                    }
                                }, 1000); //3000 L = 3 detik

                            }




                        } while (allrows1.moveToNext());
                    }else {
                        DownloadMusicfromInternet1_display downloadMusicfromInternet1_display = new DownloadMusicfromInternet1_display();
                        downloadMusicfromInternet1_display.execute();
                    }
                    allrows1.close();

//                        dialog.setCanceledOnTouchOutside(false);


                }
            });

            listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
            listView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {

                @Override
                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
                    // TODO  Auto-generated method stub
                    return false;
                }

                @Override
                public void onDestroyActionMode(ActionMode mode) {
//                        Toast.makeText(getActivity(), " destroy ", Toast.LENGTH_SHORT).show();
                    mode.invalidate();
                    // TODO  Auto-generated method stub
                }

                @Override
                public boolean onCreateActionMode(ActionMode mode, Menu menu) {
                    // TODO  Auto-generated method stub
                    mode.getMenuInflater().inflate(R.menu.multiple_delete, menu);
//                        if (mode != null)
//                        {
//                            mode.finish();
//                        }
                    return true;

                }

                @Override
                public boolean onActionItemClicked(final ActionMode mode,
                                                   MenuItem item) {
                    mode1 = mode;
                    // TODO  Auto-generated method stub
                    switch (item.getItemId()) {
                        case R.id.selectAll:
                            //
                            final int checkedCount = countryList.size();
                            // If item  is already selected or checked then remove or
                            // unchecked  and again select all
                            //adapter.removeSelection();
                            for (int i = 0; i < checkedCount; i++) {
                                listView.setItemChecked(i, true);
                            }
                            // Set the  CAB title according to total checked items

                            // Calls  toggleSelection method from ListViewAdapter Class

                            // Count no.  of selected item and print it

                            mode.setTitle(checkedCount + " Selected items ");
                            return true;

                        case R.id.move:
                            final Dialog dialog = new Dialog(getActivity(), R.style.notitle);
                            dialog.setContentView(R.layout.move1);
                            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

                            listView1 = (ListView) dialog.findViewById(R.id.listView);
                            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);

                            final ArrayList<String> my_array = new ArrayList<String>();
                            my_array.add("None");
                            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                            Cursor allrows = db.rawQuery("SELECT * FROM Hotel", null);
                            if (allrows.moveToFirst()) {
                                do {

                                    String ID = allrows.getString(0);
                                    String NAME = allrows.getString(1);
                                    String PLACE = allrows.getString(2);
                                    if (NAME.equals("All") || NAME.equals("Favourites")) {

                                    } else {
                                        my_array.add(NAME);
                                    }

                                } while (allrows.moveToNext());
                            }
                            allrows.close();
                            final ArrayAdapter my_Adapter = new ArrayAdapter(getActivity(), R.layout.spinner_row,
                                    my_array);
                            listView1.setAdapter(my_Adapter);

                            EditText myFilter = (EditText) dialog.findViewById(R.id.editText1);
                            myFilter.addTextChangedListener(new TextWatcher() {

                                public void afterTextChanged(Editable s) {
                                }

                                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                                }

                                public void onTextChanged(CharSequence s, int start, int before, int count) {
                                    my_Adapter.getFilter().filter(s.toString());
                                    my_Adapter.notifyDataSetChanged();
                                }
                            });

                            final int[] save = {-1};
                            listView1.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                                @Override
                                public void onItemClick(AdapterView<?> parent, final View view, int position, long id) {

                                    final String ItemIDDD = parent.getItemAtPosition(position).toString();
                                    //String value= selItem.getTheValue(); //getter method

                                    final Dialog dialog1 = new Dialog(getActivity(), R.style.notitle);
                                    dialog1.setContentView(R.layout.moveto_confirm_dialog);

                                    TextView can = (TextView) dialog1.findViewById(R.id.cat_name);
                                    can.setText(ItemIDDD);

                                    Button cana = (Button) dialog1.findViewById(R.id.cancel);
                                    cana.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            dialog1.dismiss();
                                        }
                                    });

                                    ImageView closetext = (ImageView) dialog1.findViewById(R.id.closetext);
                                    closetext.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            dialog1.dismiss();
                                        }
                                    });

                                    class DownloadMusicfromInternet extends AsyncTask<String, Void, Integer> {

                                        @Override
                                        protected Integer doInBackground(String... params) {
                                            try {

                                                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                int len = listView.getCount();
                                                SparseBooleanArray checked = listView.getCheckedItemPositions();
                                                for (int i = 0; i < len; i++) {
                                                    if (checked.get(i)) {
                                                        Country_items country = countryList.get(i);
                                                        String an = country.getCode();
                                                        String an_name = country.getName();
                                                        /* do whatever you want with the checked item */


                                                        db.execSQL("UPDATE Items SET category = '" + ItemIDDD + "' WHERE itemname = '" + an_name + "'");
                                                        db.execSQL("UPDATE Items_Virtual SET category = '" + ItemIDDD + "' WHERE itemname = '" + an_name + "'");
                                                        if (isDeviceOnline()) {
                                                            webservicequery("UPDATE Items SET category = '" + ItemIDDD + "' WHERE itemname = '" + an_name + "'");
                                                        } else {

                                                            Bundle extras = new Bundle();
                                                            extras.putString("query", "UPDATE Items SET category = '" + ItemIDDD + "' WHERE itemname = '" + an_name + "'");

                                                            extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
                                                            ContentResolver.setSyncAutomatically(mAccount, AUTHORITY, true);
                                                            ContentResolver.requestSync(null, AUTHORITY, extras);
                                                        }

//                                                            Cursor qqq = db.rawQuery("SELECT * from Items WHERE _id = '" + an + "' ", null);
//                                                            while (qqq.moveToNext()) {
//
//                                                                ContentValues contentValues1 = new ContentValues();
//                                                                contentValues1.put("category", String.valueOf(ItemIDDD));
//
////                                                            String qqqq = qqq.getString(7);
//                                                                String where = "_id = '" + an + "' ";
//
//
//                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
//                                                                getActivity().getContentResolver().update(contentUri, contentValues1,where,new String[]{});
//                                                                resultUri = new Uri.Builder()
//                                                                        .scheme("content")
//                                                                        .authority(StubProviderApp.AUTHORITY)
//                                                                        .path("Items")
//                                                                        .appendQueryParameter("operation", "update")
//                                                                        .appendQueryParameter("_id", an)
//                                                                        .build();
//                                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//
////                                                                db.update("Items", contentValues1, where, new String[]{});
//
//                                                                String where1_v1 = "itemname = '" + an_name + "' ";
//                                                                db.update("Items_Virtual", contentValues1, where1_v1, new String[]{});
//
//
//                                                            }
////                                                            qqq.requery();
//                                                            qqq.close();
////                                                            my_Adapter.notifyDataSetChanged();

                                                    }
                                                }

                                            } catch (NumberFormatException e) {
                                                e.printStackTrace();
                                            } catch (SQLException e) {
                                                e.printStackTrace();
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }

                                            return null;
                                        }

                                        // Show Progress bar before downloading Music
                                        @Override
                                        protected void onPreExecute() {
                                            super.onPreExecute();
                                            dialog1.dismiss();

                                            dialog.dismiss();

                                            progressbar.setVisibility(View.VISIBLE);
                                            progress_text.setText("Moving...");

                                        }


                                        @Override
                                        protected void onPostExecute(Integer file_url) {

                                            mode.finish();
                                            progressbar.setVisibility(View.GONE);
                                            listView.invalidateViews();
                                            Toast.makeText(getActivity(), "moved to " + ItemIDDD, Toast.LENGTH_SHORT).show();

                                            if (spinner.getSelectedItem().toString().equals("All")) {
                                                countryList = new ArrayList<Country_items>();
                                                try {
                                                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                                                    System.out.println("COUNT : " + allrows.getCount());


                                                    //Country_items country = new Country_items(name, name, name, name);

                                                    if (allrows.moveToFirst()) {
                                                        do {
                                                            String ID = allrows.getString(0);
                                                            String NAme = allrows.getString(1);
                                                            String BAr = allrows.getString(16);
                                                            String PRiCe = allrows.getString(2);
                                                            String QtY = allrows.getString(3);
                                                            String PlaCe = allrows.getString(2);
                                                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                            countryList.add(NAME);
                                                            //countryList.add(PLACE);
                                                        } while (allrows.moveToNext());
                                                    }
                                                    allrows.close();
//                                                        db.close();
                                                } catch (Exception e) {
                                                    Toast.makeText(getActivity(), "Error encountered.",
                                                            Toast.LENGTH_LONG);
                                                }
                                            } else {
                                                if (!spinner.getSelectedItem().toString().equals("All")) {
                                                    countryList = new ArrayList<Country_items>();
                                                    try {
                                                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                        Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + selected + "' ", null);
                                                        System.out.println("COUNT : " + allrows.getCount());


                                                        //Country_items country = new Country_items(name, name, name, name);

                                                        if (allrows.moveToFirst()) {
                                                            do {
                                                                String ID = allrows.getString(0);
                                                                String NAme = allrows.getString(1);
                                                                String BAr = allrows.getString(16);
                                                                String PRiCe = allrows.getString(2);
                                                                String QtY = allrows.getString(3);
                                                                String PlaCe = allrows.getString(2);
                                                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                                countryList.add(NAME);
                                                                //countryList.add(PLACE);
                                                            } while (allrows.moveToNext());
                                                        }
                                                        allrows.close();
//                                                            db.close();
                                                    } catch (Exception e) {
                                                        Toast.makeText(getActivity(), "Error encountered.",
                                                                Toast.LENGTH_LONG);
                                                    }
                                                }
                                            }

                                            dataAdapter = new MyCustomAdapter(getActivity(),
                                                    R.layout.items_list_details, countryList);
                                            final ListView listView = (ListView) rootview.findViewById(R.id.listView);
                                            // Assign adapter to ListView
                                            listView.setAdapter(dataAdapter);


                                        }
                                    }


                                    Button button1 = (Button) dialog1.findViewById(R.id.ok);
                                    button1.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
//                                                Toast.makeText(getActivity(), "moved to " + ItemIDDD, Toast.LENGTH_SHORT).show();

                                            DownloadMusicfromInternet downloadMusicfromInternet = new DownloadMusicfromInternet();
                                            downloadMusicfromInternet.execute();


                                        }
                                    });
                                    dialog1.show();

                                }
                            });

                            ImageView imageView = (ImageView) dialog.findViewById(R.id.closetext);
                            imageView.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialog.dismiss();
                                }
                            });


                            dialog.show();
                            return true;

                        case R.id.delete:
                            // Add  dialog for confirmation to delete selected item
                            // record.

                            final Dialog dialogq = new Dialog(getActivity(), R.style.notitle);
                            dialogq.setContentView(R.layout.delete_item_selected);

                            ImageView imageVieww = (ImageView) dialogq.findViewById(R.id.closetext);
                            imageVieww.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialogq.dismiss();
                                }
                            });

                            Button buttonn = (Button) dialogq.findViewById(R.id.cancel);
                            buttonn.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    dialogq.dismiss();
                                }
                            });

                            class DownloadMusicfromInternetdel extends AsyncTask<String, Void, Integer> {

                                @Override
                                protected Integer doInBackground(String... params) {
                                    try {

                                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                        int len = listView.getCount();
                                        SparseBooleanArray checked = listView.getCheckedItemPositions();
                                        for (int i = 0; i < len; i++) {
                                            if (checked.get(i)) {

                                                Country_items country = countryList.get(i);
                                                String an = country.getCode();
                                                String an_name = country.getName();

                                                System.out.println("itemname selected is " + an_name);

                                                db.execSQL("delete from items WHERE itemname = '" + an_name + "'");
                                                db.execSQL("delete from Items_Virtual WHERE itemname = '" + an_name + "'");
                                                if (isDeviceOnline()) {
                                                    webservicequery("delete from items WHERE itemname = '" + an_name + "'");
                                                } else {

                                                    Bundle extras = new Bundle();
                                                    extras.putString("query", "delete from items WHERE itemname = '" + an_name + "'");

                                                    extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
                                                    ContentResolver.setSyncAutomatically(mAccount, AUTHORITY, true);
                                                    ContentResolver.requestSync(null, AUTHORITY, extras);
                                                }

                                                /* do whatever you want with the checked item */
//                                                    String where = "_id = '" + an + "' ";
//
//                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
//                                                    getActivity().getContentResolver().delete(contentUri, where, new String[]{});
//                                                    resultUri = new Uri.Builder()
//                                                            .scheme("content")
//                                                            .authority(StubProviderApp.AUTHORITY)
//                                                            .path("Items")
//                                                            .appendQueryParameter("operation", "delete")
//                                                            .appendQueryParameter("_id", an)
//                                                            .build();
//                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
////                                                    db.delete("Items", where, new String[]{});
//
//                                                    String where1_v1 = "itemname = '" + an_name + "' ";
//                                                    db.delete("Items_Virtual", where1_v1, new String[]{});

                                            }
                                        }

                                    } catch (NumberFormatException e) {
                                        e.printStackTrace();
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    return null;
                                }

                                // Show Progress bar before downloading Music
                                @Override
                                protected void onPreExecute() {
                                    super.onPreExecute();

                                    dialogq.dismiss();

                                    progressbar.setVisibility(View.VISIBLE);
                                    progress_text.setText("Deleting...");

                                }


                                @Override
                                protected void onPostExecute(Integer file_url) {

                                    mode.finish();
                                    listView.invalidateViews();
                                    progressbar.setVisibility(View.GONE);
                                    Toast.makeText(getActivity(), "Deleted", Toast.LENGTH_SHORT).show();

                                    if (spinner.getSelectedItem().toString().equals("All")) {
                                        countryList = new ArrayList<Country_items>();
                                        try {
                                            db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                            Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                                            System.out.println("COUNT : " + allrows.getCount());


                                            //Country_items country = new Country_items(name, name, name, name);

                                            if (allrows.moveToFirst()) {
                                                do {
                                                    String ID = allrows.getString(0);
                                                    String NAme = allrows.getString(1);
                                                    String BAr = allrows.getString(16);
                                                    String PRiCe = allrows.getString(2);
                                                    String QtY = allrows.getString(3);
                                                    String PlaCe = allrows.getString(2);
                                                    Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                    //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                    countryList.add(NAME);
                                                    //countryList.add(PLACE);
                                                } while (allrows.moveToNext());
                                            }
                                            allrows.close();
//                                                db.close();
                                        } catch (Exception e) {
                                            Toast.makeText(getActivity(), "Error encountered.",
                                                    Toast.LENGTH_LONG);
                                        }
                                    } else {
                                        if (!spinner.getSelectedItem().toString().equals("All")) {
                                            countryList = new ArrayList<Country_items>();
                                            try {
                                                db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                                                Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + selected + "' ", null);
                                                System.out.println("COUNT : " + allrows.getCount());

                                                //Country_items country = new Country_items(name, name, name, name);

                                                if (allrows.moveToFirst()) {
                                                    do {
                                                        String ID = allrows.getString(0);
                                                        String NAme = allrows.getString(1);
                                                        String BAr = allrows.getString(16);
                                                        String PRiCe = allrows.getString(2);
                                                        String QtY = allrows.getString(3);
                                                        String PlaCe = allrows.getString(2);
                                                        Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                                        //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                                        countryList.add(NAME);
                                                        //countryList.add(PLACE);
                                                    } while (allrows.moveToNext());
                                                }
                                                allrows.close();
//                                                    db.close();
                                            } catch (Exception e) {
                                                Toast.makeText(getActivity(), "Error encountered.",
                                                        Toast.LENGTH_LONG);
                                            }
                                        }
                                    }

                                    dataAdapter = new MyCustomAdapter(getActivity(),
                                            R.layout.items_list_details, countryList);
                                    final ListView listView = (ListView) rootview.findViewById(R.id.listView);
                                    // Assign adapter to ListView
                                    listView.setAdapter(dataAdapter);


                                }
                            }

                            Button buttonnn = (Button) dialogq.findViewById(R.id.ok);
                            buttonnn.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

//                                        DownloadMusicfromInternetdel DownloadMusicfromInternetdel = new DownloadMusicfromInternetdel();
//                                        DownloadMusicfromInternetdel.execute();

                                    dialogq.dismiss();
                                    progressbar.setVisibility(View.VISIBLE);
                                    progress_text.setText("Deleting...");

                                    SparseBooleanArray checked = listView.getCheckedItemPositions();
                                    Log.e("before service start", "before service start");

                                    MyWorker.sbarray = new SparseBooleanArrayParcelable(checked);
                                    MyWorker.countryList = countryList;
                                    MyWorker.count = listView.getCount();


                                    final OneTimeWorkRequest workRequest = new OneTimeWorkRequest.Builder(MyWorker.class).build();
                                    WorkManager.getInstance().enqueue(workRequest);

                                    WorkManager.getInstance().getWorkInfoByIdLiveData(workRequest.getId())
                                            .observe(getActivity(), new Observer<WorkInfo>() {
                                                @Override
                                                public void onChanged(@Nullable WorkInfo workInfo) {

                                                    if (workInfo.getState() == WorkInfo.State.SUCCEEDED) {
                                                        postDelete();
                                                    }

                                                }
                                            });

                                }
                            });

                            dialogq.show();


                            return true;
                        default:
                            return false;
                    }

                }

                @Override
                public void onItemCheckedStateChanged(ActionMode mode,
                                                      int position, long id, boolean checked) {
                    // TODO  Auto-generated method stub
                    final int checkedCount = listView.getCheckedItemCount();
                    String st = dataAdapter.toString();
                    // Set the  CAB title according to total checked items
                    //Toast.makeText(getActivity(), "  Selected44", Toast.LENGTH_SHORT).show();
                    if (listView.isItemChecked(position)) {

                    }
                    mode.setTitle(checkedCount + " Selected items ");
                    // Calls  toggleSelection method from ListViewAdapter Class
                    //adapter.toggleSelection(position);
                }
            });


            final EditText myFilter = (EditText) rootview.findViewById(R.id.searchView);
            myFilter.addTextChangedListener(new TextWatcher() {

                public void afterTextChanged(Editable s) {
                }

                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    dataAdapter.getFilter().filter(s.toString());
                }
            });

            ImageView deleteicon = (ImageView) rootview.findViewById(R.id.delete_icon);
            deleteicon.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    myFilter.setText("");
                }
            });
        }
    }

    class DownloadMusicfromInternetde_update01 extends AsyncTask<String, Void, Integer> {
        private final ProgressDialog dialog1_c = new ProgressDialog(getActivity(), R.style.timepicker_date_dialog);

        @Override
        protected Integer doInBackground(String... params) {


            return null;
        }

        // Show Progress bar before downloading Music
        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            this.dialog1_c.setMessage("Loading...");
            this.dialog1_c.show();

//            progressbar_dialog.setVisibility(View.VISIBLE);
//            header_dialog.setVisibility(View.INVISIBLE);
//            content_dialog.setVisibility(View.INVISIBLE);
        }

        @Override
        protected void onPostExecute(Integer file_url) {


            try {

                if (dialogC1_id.getText().toString().length() <= 1) {
                    layoutitemname_dialog.setError("Enter min 2 characters");
                }else {
                    Cursor mcursor = db.rawQuery("SELECT count(*) FROM variants_temp", null);
                    mcursor.moveToFirst();
                    int icount = mcursor.getInt(0);
                    if (icount == 1) {
                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                        getActivity().getContentResolver().delete(contentUri, null, null);
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("variants_temp")
                                .appendQueryParameter("operation", "delete")
                                .appendQueryParameter("1", "1")
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);
//            db.delete("variants_temp", null, null);
//            linearLayouthi.setBackgroundDrawable(getResources().getDrawable(R.drawable.table_back_green));
                    } else {
//            linearLayouthi.setBackgroundDrawable(getResources().getDrawable(R.drawable.table_back_gr));
                    }
                    mcursor.close();

                    SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy MM dd", Locale.US);
                    final String currentDateandTime1 = sdf2.format(new Date());

                    SimpleDateFormat sdf3 = new SimpleDateFormat("dd MMM yyyy", Locale.US);
                    final String currentDateandTime2 = sdf3.format(new Date());

                    Date dt = new Date();
                    SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa", Locale.US);
                    final String time1 = sdf1.format(dt);

                    Date dt1 = new Date();
                    SimpleDateFormat sdf11 = new SimpleDateFormat("kkmm", Locale.US);
                    final String time11 = sdf11.format(dt1);

                    Date dtt_new = new Date();
                    SimpleDateFormat sdf1t_new = new SimpleDateFormat("yyyyMMddkkmm", Locale.US);
                    final String time24_new = sdf1t_new.format(dtt_new);

                    SQLiteDatabase db = getActivity().openOrCreateDatabase("mydb_Appdata",
                            Context.MODE_PRIVATE, null);
                    byte[] byteImage1;
                    byte[] img;
                    String s = db.getPath();
                    ContentValues newValues = new ContentValues();
//        Cursor itemnamecheck = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+NAme1+"' AND _id != '"+iddd+"'", null);
//        if (itemnamecheck.moveToFirst()){
//            dialogC1_id.setError("Itemname already in use");
//        } else {


                    dialog_columnvalue = dialogC1_id.getText().toString();
                    if (dialogC1_id.getText().toString().contains("'")) {
                        dialog_columnvalue = dialogC1_id.getText().toString().replaceAll("'", " ");
                    }


                    if (selectedImagePath != null && !dialogC2_id.getText().toString().equals("") && !dialogC1_id.getText().toString().equals("") && !dialogC3_id.getText().toString().equals("")
                            && !dialogC3_dis.getText().toString().equals("")) {


                        Bitmap thePic = extras.getParcelable("data");
                        get_image.setImageBitmap(thePic);


                        ByteArrayOutputStream bos = new ByteArrayOutputStream();
                        thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
                        img = bos.toByteArray();
                        newValues.put("image", img);
                        newValues.put("image_text", "");
                        newValues.put("itemname", dialog_columnvalue);
                        newValues.put("price", dialogC2_id.getText().toString());
                        newValues.put("stockquan", dialogC3_id.getText().toString());

                        if (NAME3.equals("On")) {
                            newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                        } else {
                            newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                        }

                        newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                        if (dialogC3_dis.getText().toString().equals("")) {
                            newValues.put("disc_value", "0");
                        } else {
                            newValues.put("disc_value", dialogC3_dis.getText().toString());
                        }
                        //newValues.put("disc_value", dialogC3_dis.getText().toString());
                        newValues.put("category", dialogC4_id.getText().toString());
//            newValues.put("itemtax", dialogC4_id1.getText().toString());
                        if (dialogC4_id1.getText().toString().contains("taxes selected")) {
                            newValues.put("itemtax", "None");
                        } else {
                            newValues.put("itemtax", dialogC4_id1.getText().toString());
                        }
                        if (dialogC3_myswitch.isChecked()) {
                            newValues.put("favourites", "yes");
                        } else {
                            newValues.put("favourites", "no");
                        }
                        if (unit_sav_dialog.isChecked()) {
                            newValues.put("unit_type", "Unit");
                        } else {
                            newValues.put("unit_type", "Weight");
                        }

                        String where = "_id = ?";
                        //   db.update("Items", newValues, where, new String[]{Integer.toString(_id)});
                        String where1_ssvv = "itemname = '" + NAme1 + "'";
                        db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});


                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                        getActivity().getContentResolver().update(contentUri, newValues, where, new String[]{ID});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Items")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", ID)
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//            db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                        int i = 1;
                        Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                        if (cursor.moveToFirst()) {
                            do {
                                String tax_na = cursor.getString(1);
                                String tax_va = cursor.getString(2);

                                if (i == 1) {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("itemtax", tax_na);
                                    contentValues.put("tax_value", tax_va);
                                    String where1 = "_id = ?";

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", ID)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
                                    String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                    //  db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                    db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});

//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                    // db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                    //  db.update("Items_Virtual", contentValues, where1_ssv, new String[]{Integer.toString(_id)});
                                } else {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("itemtax" + i, tax_na);
                                    contentValues.put("tax_value" + i, tax_va);
                                    String where1 = "_id = ?";
                                    String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                    //  db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                    db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", ID)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                        Toast.makeText(getActivity(), "selected2 "+tax_na, Toast.LENGTH_LONG).show();
//                        db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                }
                                i++;
                            } while (cursor.moveToNext());
                        }
                        cursor.close();

//            Toast.makeText(getActivity().getBaseContext(),
//                    "Item saved", Toast.LENGTH_SHORT).show();
//            db.close();
                        dialog.dismiss();
//                    donotshowKeyboard(getActivity());
                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                        getActivity().getContentResolver().delete(contentUri, null, null);
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Ingredients_item_selection_temp")
                                .appendQueryParameter("operation", "delete")
                                .appendQueryParameter("1", "1")
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);
//            db.delete("Ingredients_item_selection_temp", null, null);

                        Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + NAme1 + "'", null);
                        if (cursor2.moveToFirst()) {
                            do {
                                String id = cursor2.getString(0);
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemname", dialog_columnvalue);
                                String where1 = "_id = '" + id + "'";

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Ingredient_items_list")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id", ID)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                            } while (cursor2.moveToNext());
                        }
                        cursor2.close();

                        Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '" + NAme1 + "'", null);
                        if (cursor3.moveToFirst()) {
                            do {
                                String id = cursor3.getString(0);
                                ContentValues contentValues = new ContentValues();
                                contentValues.put("itemname", dialog_columnvalue);
                                String where1 = "_id = '" + id + "'";

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Vendor_sold_item_details")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id", id)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                            } while (cursor3.moveToNext());
                        }
                        cursor3.close();

                    } else {

                        if (dialogC1_id.getText().toString().equals("")) {
                            //Toast.makeText(getActivity(),"Fill Item name", Toast.LENGTH_SHORT).show();
                            layoutitemname_dialog.setError("Fill itemname");
                        }
                        if (dialogC2_id.getText().toString().equals("")) {
                            //Toast.makeText(getActivity(),"Fill Price", Toast.LENGTH_SHORT).show();
                            layoutprice_dialog.setError("Fill price");
                        }
                        if (!dialogC1_id.getText().toString().equals("") && !dialogC2_id.getText().toString().equals("") && !dialogC3_id.getText().toString().equals("")) {
                            if (selectedImagePath != null) {
                                Bitmap thePic = extras.getParcelable("data");
                                get_image.setImageBitmap(thePic);

                                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                                thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
                                img = bos.toByteArray();

                                newValues.put("image", img);
                                newValues.put("image_text", "");
                                newValues.put("itemname", dialog_columnvalue);
                                newValues.put("price", dialogC2_id.getText().toString());
                                newValues.put("stockquan", dialogC3_id.getText().toString());

                                if (NAME3.equals("On")) {
                                    newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                                } else {
                                    newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                                }

                                newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                                if (dialogC3_dis.getText().toString().equals("")) {
                                    newValues.put("disc_value", "0");
                                } else {
                                    newValues.put("disc_value", dialogC3_dis.getText().toString());
                                }
                                newValues.put("category", dialogC4_id.getText().toString());
//                    newValues.put("itemtax", dialogC4_id1.getText().toString());
                                if (dialogC4_id1.getText().toString().contains("taxes selected")) {
                                    newValues.put("itemtax", "None");
                                } else {
                                    newValues.put("itemtax", dialogC4_id1.getText().toString());
                                }
                                if (dialogC3_myswitch.isChecked()) {
                                    newValues.put("favourites", "yes");
                                } else {
                                    newValues.put("favourites", "no");
                                }
                                if (unit_sav_dialog.isChecked()) {
                                    newValues.put("unit_type", "Unit");
                                } else {
                                    newValues.put("unit_type", "Weight");
                                }

                                String where = "_id = ?";


                                // db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                                String where1_ssvv = "itemname = '" + NAme1 + "'";
                                db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});


                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                getActivity().getContentResolver().update(contentUri, newValues, where, new String[]{ID});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Items")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id", ID)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                                int i = 1;
                                Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                if (cursor.moveToFirst()) {
                                    do {
                                        String tax_na = cursor.getString(1);
                                        String tax_va = cursor.getString(2);

                                        if (i == 1) {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemtax", tax_na);
                                            contentValues.put("tax_value", tax_va);
                                            String where1 = "_id = ?";

                                            String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                            //    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                            db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", ID)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                Toast.makeText(getActivity(), "selected3 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                        } else {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemtax" + i, tax_na);
                                            contentValues.put("tax_value" + i, tax_va);
                                            String where1 = "_id = ?";
                                            String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                            //    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                            db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", ID)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                Toast.makeText(getActivity(), "selected4 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                        }
                                        i++;
                                    } while (cursor.moveToNext());
                                }
                                cursor.close();

//                    Toast.makeText(getActivity().getBaseContext(),
//                            "Item saved", Toast.LENGTH_SHORT).show();
                                dialog.dismiss();
//                            donotshowKeyboard(getActivity());
                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                                getActivity().getContentResolver().delete(contentUri, null, null);
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Ingredients_item_selection_temp")
                                        .appendQueryParameter("operation", "delete")
                                        .appendQueryParameter("1", "1")
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.delete("Ingredients_item_selection_temp", null, null);
                                Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + NAme1 + "'", null);
                                if (cursor2.moveToFirst()) {
                                    do {
                                        String id = cursor2.getString(0);
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("itemname", dialog_columnvalue);
                                        String where1 = "_id = '" + id + "'";

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Ingredient_items_list")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id", id)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                                    } while (cursor2.moveToNext());
                                }
                                cursor2.close();

                                Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '" + NAme1 + "'", null);
                                if (cursor3.moveToFirst()) {
                                    do {
                                        String id = cursor3.getString(0);
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("itemname", dialog_columnvalue);
                                        String where1 = "_id = '" + id + "'";

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Vendor_sold_item_details")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id", id)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                                    } while (cursor3.moveToNext());
                                }
                                cursor3.close();

//                linearLayout.setVisibility(View.GONE);
                            } else {

                                String str1 = dialog_columnvalue.substring(0, 2);
                                String str2 = str1.toUpperCase();
                                newValues.put("image_text", str2);
                                newValues.put("itemname", dialog_columnvalue);
                                newValues.put("price", dialogC2_id.getText().toString());
                                newValues.put("stockquan", dialogC3_id.getText().toString());

                                if (NAME3.equals("On")) {
                                    newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                                } else {
                                    newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                                }

                                newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                                if (dialogC3_dis.getText().toString().equals("")) {
                                    newValues.put("disc_value", "0");
                                } else {
                                    newValues.put("disc_value", dialogC3_dis.getText().toString());
                                }
                                newValues.put("category", dialogC4_id.getText().toString());
//                    newValues.put("itemtax", dialogC4_id1.getText().toString());
                                if (dialogC4_id1.getText().toString().contains("taxes selected")) {
                                    newValues.put("itemtax", "None");
                                } else {
                                    newValues.put("itemtax", dialogC4_id1.getText().toString());
                                }
                                if (dialogC3_myswitch.isChecked()) {
                                    newValues.put("favourites", "yes");
                                } else {
                                    newValues.put("favourites", "no");
                                }
                                if (unit_sav_dialog.isChecked()) {
                                    newValues.put("unit_type", "Unit");
                                } else {
                                    newValues.put("unit_type", "Weight");
                                }

                                String where = "_id = ?";
                                //   db.update("Items", newValues, where, new String[]{Integer.toString(_id)});
                                String where1_ssvv = "itemname = '" + NAme1 + "'";
                                db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});

                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                getActivity().getContentResolver().update(contentUri, newValues, where, new String[]{ID});
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Items")
                                        .appendQueryParameter("operation", "update")
                                        .appendQueryParameter("_id", ID)
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                    db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                                int i = 1;
                                Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                if (cursor.moveToFirst()) {
                                    do {
                                        String tax_na = cursor.getString(1);
                                        String tax_va = cursor.getString(2);
                                        if (i == 1) {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemtax", tax_na);
                                            contentValues.put("tax_value", tax_va);
                                            String where1 = "_id = ?";


                                            String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                            //     db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                            db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", ID)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                Toast.makeText(getActivity(), "selected5 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                        } else {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemtax" + i, tax_na);
                                            contentValues.put("tax_value" + i, tax_va);
                                            String where1 = "_id = ?";

                                            String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                            //   db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                            db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", ID)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                Toast.makeText(getActivity(), "selected6 "+tax_na, Toast.LENGTH_LONG).show();
//                                db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                        }
                                        i++;
                                    } while (cursor.moveToNext());
                                }
                                cursor.close();

//                    Toast.makeText(getActivity().getBaseContext(),
//                            "Item saved", Toast.LENGTH_SHORT).show();
                                dialog.dismiss();
//                            donotshowKeyboard(getActivity());
                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                                getActivity().getContentResolver().delete(contentUri, null, null);
                                resultUri = new Uri.Builder()
                                        .scheme("content")
                                        .authority(StubProviderApp.AUTHORITY)
                                        .path("Ingredients_item_selection_temp")
                                        .appendQueryParameter("operation", "delete")
                                        .appendQueryParameter("1", "1")
                                        .build();
                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                    db.delete("Ingredients_item_selection_temp", null, null);
                                Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + NAme1 + "'", null);
                                if (cursor2.moveToFirst()) {
                                    do {
                                        String id = cursor2.getString(0);
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("itemname", dialog_columnvalue);
                                        String where1 = "_id = '" + id + "'";
                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Ingredient_items_list")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id", ID)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);
//                            db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                                    } while (cursor2.moveToNext());
                                }
                                cursor2.close();

                                Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '" + NAme1 + "'", null);
                                if (cursor3.moveToFirst()) {
                                    do {
                                        String id = cursor3.getString(0);
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("itemname", dialog_columnvalue);
                                        String where1 = "_id = '" + id + "'";

                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Vendor_sold_item_details")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id", id)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                                    } while (cursor3.moveToNext());
                                }
                                cursor3.close();

//                linearLayout.setVisibility(View.GONE);
                            }

                        } else {
                            if (!dialogC1_id.getText().toString().equals("") && !dialogC2_id.getText().toString().equals("")) {
                                if (selectedImagePath != null) {

                                    Bitmap thePic = extras.getParcelable("data");
                                    get_image.setImageBitmap(thePic);

                                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
                                    thePic.compress(Bitmap.CompressFormat.PNG, 100, bos);
                                    img = bos.toByteArray();

                                    newValues.put("image", img);
                                    newValues.put("image_text", "");
                                    newValues.put("itemname", dialog_columnvalue);
                                    newValues.put("price", dialogC2_id.getText().toString());
                                    newValues.put("stockquan", "0");

                                    if (NAME3.equals("On")) {
                                        newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                                    } else {
                                        newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                                    }

                                    newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                                    if (dialogC3_dis.getText().toString().equals("")) {
                                        newValues.put("disc_value", "0");
                                    } else {
                                        newValues.put("disc_value", dialogC3_dis.getText().toString());
                                    }
                                    newValues.put("category", dialogC4_id.getText().toString());
//                        newValues.put("itemtax", dialogC4_id1.getText().toString());
                                    if (dialogC4_id1.getText().toString().contains("taxes selected")) {
                                        newValues.put("itemtax", "None");
                                    } else {
                                        newValues.put("itemtax", dialogC4_id1.getText().toString());
                                    }
                                    if (dialogC3_myswitch.isChecked()) {
                                        newValues.put("favourites", "yes");
                                    } else {
                                        newValues.put("favourites", "no");
                                    }
                                    if (unit_sav_dialog.isChecked()) {
                                        newValues.put("unit_type", "Unit");
                                    } else {
                                        newValues.put("unit_type", "Weight");
                                    }

                                    String where = "_id = ?";
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, newValues, where, new String[]{ID});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", ID)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

                                    String where1_ssvv = "itemname = '" + NAme1 + "'";
                                    db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});


                                    int i = 1;
                                    Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                    if (cursor.moveToFirst()) {
                                        do {
                                            String tax_na = cursor.getString(1);
                                            String tax_va = cursor.getString(2);

                                            if (i == 1) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax", tax_na);
                                                contentValues.put("tax_value", tax_va);
                                                String where1 = "_id = ?";
                                                String where1_ssv = "itemname = '" + NAme1 + "'";
                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id", ID)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    Toast.makeText(getActivity(), "selected7 "+tax_na, Toast.LENGTH_LONG).show();
                                                //    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                                db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});
                                            } else {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax" + i, tax_na);
                                                contentValues.put("tax_value" + i, tax_va);
                                                String where1 = "_id = ?";
                                                String where1_ssv = "itemname = '" + NAme1 + "'";
                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id", ID)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    Toast.makeText(getActivity(), "selected8 "+tax_na, Toast.LENGTH_LONG).show();
                                                //   db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                                db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});
                                            }
                                            i++;
                                        } while (cursor.moveToNext());
                                    }
                                    cursor.close();

//                        Toast.makeText(getActivity().getBaseContext(),
//                                "Item saved", Toast.LENGTH_SHORT).show();
                                    dialog.dismiss();
//                                donotshowKeyboard(getActivity());
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                                    getActivity().getContentResolver().delete(contentUri, null, null);
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Ingredients_item_selection_temp")
                                            .appendQueryParameter("operation", "delete")
                                            .appendQueryParameter("1", "1")
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                        db.delete("Ingredients_item_selection_temp", null, null);
                                    Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + NAme1 + "'", null);
                                    if (cursor2.moveToFirst()) {
                                        do {
                                            String id = cursor2.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemname", dialog_columnvalue);
                                            String where1 = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Ingredient_items_list")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                                        } while (cursor2.moveToNext());
                                    }
                                    cursor2.close();

                                    Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '" + NAme1 + "'", null);
                                    if (cursor3.moveToFirst()) {
                                        do {
                                            String id = cursor3.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemname", dialog_columnvalue);
                                            String where1 = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Vendor_sold_item_details")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

                                            db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                                        } while (cursor3.moveToNext());
                                    }
                                    cursor3.close();
//                    linearLayout.setVisibility(View.GONE);

                                } else {

                                    String str1 = dialog_columnvalue.substring(0, 2);
                                    String str2 = str1.toUpperCase();
                                    newValues.put("image_text", str2);
                                    newValues.put("itemname", dialog_columnvalue);
                                    newValues.put("price", dialogC2_id.getText().toString());
                                    newValues.put("stockquan", "0");

                                    if (NAME3.equals("On")) {
                                        newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                                    } else {
                                        newValues.put("barcode_value", dialogC3_barcode.getText().toString());
                                    }

                                    newValues.put("disc_type", dialogC3_dis_spin.getSelectedItem().toString());
                                    if (dialogC3_dis.getText().toString().equals("")) {
                                        newValues.put("disc_value", "0");
                                    } else {
                                        newValues.put("disc_value", dialogC3_dis.getText().toString());
                                    }
                                    newValues.put("category", dialogC4_id.getText().toString());
//                        newValues.put("itemtax", dialogC4_id1.getText().toString());
                                    if (dialogC4_id1.getText().toString().contains("taxes selected")) {
                                        newValues.put("itemtax", "None");
                                    } else {
                                        newValues.put("itemtax", dialogC4_id1.getText().toString());
                                    }
                                    if (dialogC3_myswitch.isChecked()) {
                                        newValues.put("favourites", "yes");
                                    } else {
                                        newValues.put("favourites", "no");
                                    }
                                    if (unit_sav_dialog.isChecked()) {
                                        newValues.put("unit_type", "Unit");
                                    } else {
                                        newValues.put("unit_type", "Weight");
                                    }

                                    String where = "_id = ?";
                                    //   db.update("Items", newValues, where, new String[]{Integer.toString(_id)});

                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, newValues, where, new String[]{ID});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", ID)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

                                    String where1_ssvv = "itemname = '" + NAme1 + "'";
                                    db.update("Items_Virtual", newValues, where1_ssvv, new String[]{});


                                    int i = 1;
                                    Cursor cursor = db.rawQuery("SELECT * FROM Taxes WHERE checked = 'checked'", null);
                                    if (cursor.moveToFirst()) {
                                        do {
                                            String tax_na = cursor.getString(1);
                                            String tax_va = cursor.getString(2);

                                            if (i == 1) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax", tax_na);
                                                contentValues.put("tax_value", tax_va);
                                                String where1 = "_id = ?";

                                                String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                //     db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                                db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id", ID)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                    Toast.makeText(getActivity(), "selected9 "+tax_na, Toast.LENGTH_LONG).show();
//                                    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                            } else {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("itemtax" + i, tax_na);
                                                contentValues.put("tax_value" + i, tax_va);
                                                String where1 = "_id = ?";

                                                String where1_ssv = "itemname = '" + NAme1 + "'";
//                        Toast.makeText(getActivity(), "selected1 "+tax_na, Toast.LENGTH_LONG).show();
                                                //     db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                                db.update("Items_Virtual", contentValues, where1_ssv, new String[]{});


                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{ID});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id", ID)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);
//                                    Toast.makeText(getActivity(), "selected10 "+tax_na, Toast.LENGTH_LONG).show();
//                                    db.update("Items", contentValues, where1, new String[]{Integer.toString(_id)});
                                            }
                                            i++;
                                        } while (cursor.moveToNext());
                                    }
                                    cursor.close();

//                        Toast.makeText(getActivity().getBaseContext(),
//                                "Item saved", Toast.LENGTH_SHORT).show();
                                    dialog.dismiss();
//                                donotshowKeyboard(getActivity());
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients_item_selection_temp");
                                    getActivity().getContentResolver().delete(contentUri, null, null);
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Ingredients_item_selection_temp")
                                            .appendQueryParameter("operation", "delete")
                                            .appendQueryParameter("1", "1")
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//                        db.delete("Ingredients_item_selection_temp", null, null);
                                    Cursor cursor2 = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + NAme1 + "'", null);
                                    if (cursor2.moveToFirst()) {
                                        do {
                                            String id = cursor2.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemname", dialog_columnvalue);
                                            String where1 = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Ingredient_items_list")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                db.update("Ingredient_items_list", contentValues, where1, new String[]{});
                                        } while (cursor2.moveToNext());
                                    }
                                    cursor2.close();

                                    Cursor cursor3 = db.rawQuery("SELECT * FROM Vendor_sold_item_details WHERE itemname = '" + NAme1 + "'", null);
                                    if (cursor3.moveToFirst()) {
                                        do {
                                            String id = cursor3.getString(0);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("itemname", dialog_columnvalue);
                                            String where1 = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Vendor_sold_item_details");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Vendor_sold_item_details")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);
//                                db.update("Vendor_sold_item_details", contentValues, where1, new String[]{});
                                        } while (cursor3.moveToNext());
                                    }
                                    cursor3.close();
//                    linearLayout.setVisibility(View.GONE);

                                }
                            }
                        }

                    }

                    //insert variants here

                    Cursor cursor3 = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + dialog_columnvalue + "'", null);
                    if (cursor3.moveToFirst()) {
                        String id = cursor3.getString(0);
                        ContentValues contentValues = new ContentValues();
                        contentValues.put("variant1", "");
                        contentValues.put("variant_price1", "");
                        contentValues.put("variant2", "");
                        contentValues.put("variant_price2", "");
                        contentValues.put("variant3", "");
                        contentValues.put("variant_price3", "");
                        contentValues.put("variant4", "");
                        contentValues.put("variant_price4", "");
                        contentValues.put("variant5", "");
                        contentValues.put("variant_price5", "");
                        String where1 = "_id = '" + id + "'";

                        String where1_v = "itemname = '" + dialog_columnvalue + "'";
                        //    db.update("Items", contentValues, where1, new String[]{});
                        db.update("Items_Virtual", contentValues, where1_v, new String[]{});

                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProviderApp.AUTHORITY)
                                .path("Items")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id", id)
                                .build();
                        getActivity().getContentResolver().notifyChange(resultUri, null);

//            db.update("Items", contentValues, where1, new String[]{});
                    }
                    cursor3.close();

                    Cursor cursor_1 = db.rawQuery("SELECT * FROM variants_temp", null);
                    if (cursor_1.moveToFirst()) {
                        do {
                            String v_na = cursor_1.getString(1);
                            String v_pa = cursor_1.getString(2);

                            Cursor cursor = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + dialog_columnvalue + "'", null);
                            if (cursor.moveToFirst()) {
                                String id = cursor.getString(0);
                                String v_na1 = cursor.getString(38);
                                String v_na2 = cursor.getString(40);
                                String v_na3 = cursor.getString(42);
                                String v_na4 = cursor.getString(44);
                                String v_na5 = cursor.getString(46);

                                TextView textView = new TextView(getActivity());
                                textView.setText(v_na1);
                                TextView textView2 = new TextView(getActivity());
                                textView2.setText(v_na2);
                                TextView textView3 = new TextView(getActivity());
                                textView3.setText(v_na3);
                                TextView textView4 = new TextView(getActivity());
                                textView4.setText(v_na4);
                                TextView textView5 = new TextView(getActivity());
                                textView5.setText(v_na5);

                                if (textView.getText().toString().equals("")) {
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("variant1", v_na);
                                    contentValues.put("variant_price1", dialogC2_id.getText().toString());
                                    String where1 = "_id = '" + id + "'";
                                    String where1_v = "itemname = '" + dialog_columnvalue + "'";
                                    //    db.update("Items", contentValues, where1, new String[]{});
                                    db.update("Items_Virtual", contentValues, where1_v, new String[]{});

                                    // String where1 = "_id = '"+id+"'";
                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProviderApp.AUTHORITY)
                                            .path("Items")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("_id", id)
                                            .build();
                                    getActivity().getContentResolver().notifyChange(resultUri, null);

//                        db.update("Items", contentValues, where1, new String[]{});
                                } else {
                                    if (textView2.getText().toString().equals("")) {
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("variant2", v_na);
                                        contentValues.put("variant_price2", v_pa);
                                        String where1 = "_id = '" + id + "'";

                                        //  String where1 = "_id = '" + id + "'";
                                        String where1_v = "itemname = '" + dialog_columnvalue + "'";
                                        // db.update("Items", contentValues, where1, new String[]{});
                                        db.update("Items_Virtual", contentValues, where1_v, new String[]{});


                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                        getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProviderApp.AUTHORITY)
                                                .path("Items")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id", id)
                                                .build();
                                        getActivity().getContentResolver().notifyChange(resultUri, null);

//                            db.update("Items", contentValues, where1, new String[]{});
                                    } else {
                                        if (textView3.getText().toString().equals("")) {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("variant3", v_na);
                                            contentValues.put("variant_price3", v_pa);
                                            String where1 = "_id = '" + id + "'";
                                            //   String where1 = "_id = '" + id + "'";
                                            String where1_v = "itemname = '" + dialog_columnvalue + "'";
                                            //  db.update("Items", contentValues, where1, new String[]{});
                                            db.update("Items_Virtual", contentValues, where1_v, new String[]{});


                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                                db.update("Items", contentValues, where1, new String[]{});
                                        } else {
                                            if (textView4.getText().toString().equals("")) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("variant4", v_na);
                                                contentValues.put("variant_price4", v_pa);
                                                String where1 = "_id = '" + id + "'";

                                                //   String where1 = "_id = '" + id + "'";
                                                String where1_v = "itemname = '" + dialog_columnvalue + "'";
                                                //     db.update("Items", contentValues, where1, new String[]{});
                                                db.update("Items_Virtual", contentValues, where1_v, new String[]{});


                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id", id)
                                                        .build();
                                                getActivity().getContentResolver().notifyChange(resultUri, null);

//                                    db.update("Items", contentValues, where1, new String[]{});
                                            } else {
                                                if (textView5.getText().toString().equals("")) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("variant5", v_na);
                                                    contentValues.put("variant_price5", v_pa);
                                                    String where1 = "_id = '" + id + "'";

                                                    //  String where1 = "_id = '" + id + "'";
                                                    String where1_v = "itemname = '" + dialog_columnvalue + "'";
                                                    //  db.update("Items", contentValues, where1, new String[]{});
                                                    db.update("Items_Virtual", contentValues, where1_v, new String[]{});


                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getActivity().getContentResolver().notifyChange(resultUri, null);
//
//                                        db.update("Items", contentValues, where1, new String[]{});
                                                } else {

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            cursor.close();

                        } while (cursor_1.moveToNext());
                    }
                    cursor_1.close();
                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "variants_temp");
                    getActivity().getContentResolver().delete(contentUri, null, null);
                    resultUri = new Uri.Builder()
                            .scheme("content")
                            .authority(StubProviderApp.AUTHORITY)
                            .path("variants_temp")
                            .appendQueryParameter("operation", "delete")
                            .appendQueryParameter("1", "1")
                            .build();
                    getActivity().getContentResolver().notifyChange(resultUri, null);
//        db.delete("variants_temp", null, null);

                    //}

                    Cursor cursor1_1 = db.rawQuery("SELECT * FROM Taxes", null);
                    if (cursor1_1.moveToFirst()) {
                        do {
                            String ida = cursor1_1.getString(0);
                            ContentValues contentValues = new ContentValues();
                            contentValues.put("checked", "");
                            String where1 = "_id = '" + ida + "' ";

                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Taxes");
                            getActivity().getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProviderApp.AUTHORITY)
                                    .path("Taxes")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("_id", ida)
                                    .build();
                            getActivity().getContentResolver().notifyChange(resultUri, null);

//                db.update("Taxes", contentValues, where1, new String[]{});
                        } while (cursor1_1.moveToNext());
                    }
                    cursor1_1.close();
                }

            } catch (NumberFormatException e) {
                e.printStackTrace();
            } catch (SQLException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }


//            final Handler handler = new Handler();
//            handler.postDelayed(new Runnable() {
//                @Override
//                public void run() {

            if (spinner.getSelectedItem().toString().equals("All")) {
                countryList = new ArrayList<Country_items>();
                try {
                    db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                    Cursor allrows = db.rawQuery("SELECT * FROM Items ", null);
                    System.out.println("COUNT : " + allrows.getCount());
                    //Toast.makeText(getActivity(), "deletingggggggggggg2222", Toast.LENGTH_SHORT).show();


                    //Country_items country = new Country_items(name, name, name, name);

                    if (allrows.moveToFirst()) {
                        do {
                            String ID = allrows.getString(0);
                            String NAme = allrows.getString(1);
                            String BAr = allrows.getString(16);
                            String PRiCe = allrows.getString(2);
                            String QtY = allrows.getString(3);
                            Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                            //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                            countryList.add(NAME);
                            //countryList.add(PLACE);
                        } while (allrows.moveToNext());
                    }
                    allrows.close();
//                                                db.close();
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "Error encountered.",
                            Toast.LENGTH_LONG);
                }
            } else {
                if (!spinner.getSelectedItem().toString().equals("All")) {
                    countryList = new ArrayList<Country_items>();
                    try {
                        //Toast.makeText(getActivity(), "deletingggggggggggg3333", Toast.LENGTH_SHORT).show();
                        db = getActivity().openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
                        Cursor allrows = db.rawQuery("SELECT * FROM Items WHERE category = '" + spinner.getSelectedItem().toString() + "' ", null);
                        System.out.println("COUNT : " + allrows.getCount());


                        //Country_items country = new Country_items(name, name, name, name);

                        if (allrows.moveToFirst()) {
                            do {
                                String ID = allrows.getString(0);
                                String NAme = allrows.getString(1);
                                String BAr = allrows.getString(16);
                                String PRiCe = allrows.getString(2);
                                String QtY = allrows.getString(3);
                                String PlaCe = allrows.getString(2);
                                Country_items NAME = new Country_items(ID, NAme, BAr, QtY, PRiCe);
                                //Country_items PLACE = new Country_items(PlaCe, PlaCe, PlaCe, PlaCe);
                                countryList.add(NAME);
                                //countryList.add(PLACE);
                            } while (allrows.moveToNext());
                        }
                        allrows.close();
//                                                    db.close();
                    } catch (Exception e) {
                        Toast.makeText(getActivity(), "Error encountered.",
                                Toast.LENGTH_LONG);
                    }
                }
            }


            dataAdapter = new MyCustomAdapter(getActivity(),
                    R.layout.items_list_details, countryList);
//                    final ListView listView = (ListView) rootview.findViewById(R.id.listView);
            // Assign adapter to ListView
            listView.setAdapter(dataAdapter);

            dialog1_c.dismiss();

            displayKeyboard();
            donotshowKeyboard(getActivity());

//                }
//            }, 1000); //3000 L = 3 detik

//            DownloadMusicfromInternet1_display downloadMusicfromInternet1_display = new DownloadMusicfromInternet1_display();
//            downloadMusicfromInternet1_display.execute();

//            dataAdapter.notifyDataSetChanged();
//            listView.setAdapter(dataAdapter);

//            this.dialog1_c.dismiss();
        }
    }
}
