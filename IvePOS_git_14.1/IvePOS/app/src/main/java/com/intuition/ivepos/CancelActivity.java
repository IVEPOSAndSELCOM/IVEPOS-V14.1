package com.intuition.ivepos;

import android.Manifest;
import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothDevice;
import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.text.Editable;
import android.text.Html;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.RequestQueue;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.epson.epos2.Epos2Exception;
import com.epson.epos2.printer.Printer;
import com.epson.epos2.printer.PrinterStatusInfo;
import com.epson.epos2.printer.ReceiveListener;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.material.textfield.TextInputLayout;
import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
import com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException;
import com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.repackaged.org.apache.commons.codec.binary.Base64;
import com.google.api.client.util.ExponentialBackOff;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.GmailScopes;
import com.google.api.services.gmail.model.Label;
import com.google.api.services.gmail.model.ListLabelsResponse;
import com.intuition.ivepos.A4.A4_Printer_Cancel_new;
import com.intuition.ivepos.csv.RequestSingleton;
import com.intuition.ivepos.mSwipe.ApplicationData;
import com.intuition.ivepos.mSwipe.Logs;
import com.intuition.ivepos.sync.StubProvider;
import com.intuition.ivepos.syncapp.StubProviderApp;
import com.intuition.ivepos.wisepos.ReceiptBitmap;
import com.mswipetech.wisepad.sdk.Print;
import com.mswipetech.wisepad.sdk.device.MSWisepadDeviceController;
import com.mswipetech.wisepad.sdk.device.MSWisepadDeviceControllerResponseListener;
import com.mswipetech.wisepad.sdk.device.WisePadConnection;
import com.socsi.smartposapi.printer.Align;
import com.socsi.smartposapi.printer.FontLattice;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import pub.devrel.easypermissions.AfterPermissionGranted;
import pub.devrel.easypermissions.EasyPermissions;

import static com.intuition.ivepos.BluetoothPrintDriver.BT_Write;
import static com.intuition.ivepos.SplashScreenActivity.getDefaultSharedPreferencesMultiProcess;

/**
 * Created by Rohithkumar on 12/8/2015.
 */
public class CancelActivity extends AppCompatActivity implements ReceiveListener {


    public SQLiteDatabase db = null; EditText email_id_send; String emailPattern = "[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
    public SQLiteDatabase db1 = null; String str_round_off;
    //public SQLiteDatabase db1 = null;
    String assa, assa1, assa2;
    String username, password;
    Button cancel; TextView cz, cz1;
    EditText billno;
    RadioGroup reasonfrorefund;
    RadioButton radioBtncash;
    FrameLayout frameLayout;
    EditText editText;
    LinearLayout returns_tab, returns_page, returns_pack, edit_tab, edit_page, edit_pack;
    int selected;
    String total_disc_print_q;

    int level, qw, az, azz; float levelf, qwf, azf, azzf;
    String tat, oldtax, oldround, oldtotal, olddiscount, oldtax1, olddiscount1, olddiscvalue, olddiscvalue1, tatt, za, zaa, zzaa;
    String tat1, za1;



    String Itemtype, price, name, total, del, delItemtype;
    float total1, ref_cu;
    TextView disc_tv;

    int levelel; float levelelf;
    String tatat, tatatata, tatatata1;

    String taxperc, newv;
    float newvv;

    String oorr, nnaa;
    Dialog dialog;

    float cal, cal1;
    float ror;

    String raww, raw1, ra;

    TableLayout tableLayout, tableLayout2;

    LinearLayout paneone, panetwo, panethree;


    ImageView imageViewPicture;
    View mView;
    String datee, timee;
    byte[] img;
    String statussusbs, statusnets, ipnamegets, portgets, addgets, namegets, papersizeget;
    String statusnets_counter, ipnamegets_counter, portgets_counter;
    String billnoget;
    float sub1, sub2;
    TextView alltotal, refundamount;
    SimpleDateFormat sdff2, sdff1;
    String currentDateandTimee1;
    String timee1, sub, compna;
    File file=null;
    TextView refundamout;
    int size_in_10px;

    TextView tv8;
    float sub2a;
    float ss;


    String ipnameget, portget, statusnet, nameget, addget, statussusb;
    String ipnameget_counter, portget_counter, statusnet_counter;
    String tableida, billtypea, paymmethoda, tableidaa, billtypeaa, paymmethodaa;
    byte[][] allbuf, allbuf1, allbuf2, allbuf3, allbuf4, allbuf5, allbuf6, allbuf7, allbuf8, allbuf9, allbuf10, allbuf11, allbufqty, allbufitems, allbufmodifiers, allbufsubtot,
            allbuftax, allbufdisc, allbufrounded, allbuffulltot, allbuf12, allbuf13, allbuf14,allbufbillno,allbuftime,allbufline1,allbufline,allbufcust,allbufcustname,
            allbufcustadd,allbufcustph,allbufcustemail, allbuftaxestype2, allbuftaxestype1, allbuf1122, allbufKOT;
    TextView tvkot;
    String aqq2, ss1;
    float aqq1;
    byte[] setHT32, setHT321, setHT33, setHT34, setHT3212, setHTKOT, feedcut2;
    int nPaperWidth;
    String strcompanyname, straddress1, straddress2, straddress3, strphone, stremailid, strwebsite, strtaxone, strbillone;
    String NAME;
    int charlength, charlength1, charlength2, quanlentha;
    String taxpe, dsirs, dsirs1, alltotal1;
    String refundamounta, on1;

    List toEmailList;

    String response;
    GoogleAccountCredential mCredential;
    ProgressDialog mProgress;
    ProgressDialog mProgress1;

    static final int REQUEST_ACCOUNT_PICKER = 1000;
    static final int REQUEST_AUTHORIZATION = 1001;
    static final int REQUEST_GOOGLE_PLAY_SERVICES = 1002;
    static final int REQUEST_PERMISSION_GET_ACCOUNTS = 1003;

    private static final String BUTTON_TEXT = "Call Gmail API";
    private static final String PREF_ACCOUNT_NAME = "accountName";
    private static final String[] SCOPES = { GmailScopes.GMAIL_SEND };

    String str_print_ty;

    private Context mContext = null;

    private Printer mPrinter = null;
    int barcodeWidth, barcodeHeight, pageAreaHeight, pageAreaWidth;

    private EditText mEditTarget = null;
    private Spinner mSpnSeries = null;
    private Spinner mSpnLang = null;
    Bitmap logoData, yourBitmap;

    private WifiPrintDriver wifiSocket = null;
    private WifiPrintDriver2 wifiSocket2 = null;

    TextView mTextView1, mTextView2;
    Uri contentUri,resultUri;
    String insert1_cc = "", insert1_rs = "", str_country;

    String WebserviceUrl;

    public MSWisepadDeviceController mMSWisepadDeviceController = null;
    private ArrayList<byte[]> mPrintData;

    boolean mswipe_text = true;

    byte[] testBytes;
    byte[] command;
    private UsbManager mUsbManager;
    private UsbDevice mDevice;
    private UsbDeviceConnection mConnection;
    private UsbInterface mInterface;
    private UsbEndpoint mEndPoint;
    private static Boolean forceCLaim = true;
    HashMap<String, UsbDevice> mDeviceList;
    Iterator<UsbDevice> mDeviceIterator;

    Formatter fmt;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_multi_cancelorder1);

//        final ActionBar actionBar = this.getActionBar();
//        actionBar.setTitle("Returns/Refunds");
//
//        getActionBar().setDisplayHomeAsUpEnabled(true);

        mContext = this;

        SharedPreferences sharedpreferences_select =  SplashScreenActivity_Selection.getDefaultSharedPreferencesMultiProcess(CancelActivity.this);
        String account_selection= sharedpreferences_select.getString("account_selection", null);

        if (account_selection.toString().equals("Dine")) {
            WebserviceUrl = "https://theandroidpos.com/IVEPOS_NEW/";
        }else {
            if (account_selection.toString().equals("Qsr")) {
                WebserviceUrl = "https://theandroidpos.com/IVEPOS_NEW/";
            }else {
                WebserviceUrl = "https://theandroidpos.com/IVEPOSRETAIL_NEW/";
            }
        }

        mSpnSeries = (Spinner) findViewById(R.id.spnModel);
        ArrayAdapter<SpnModelsItem> seriesAdapter = new ArrayAdapter<SpnModelsItem>(CancelActivity.this, android.R.layout.simple_spinner_item);
        seriesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        seriesAdapter.add(new SpnModelsItem(getString(R.string.printerseries_t82), com.epson.epos2.printer.Printer.TM_T82));
        mSpnSeries.setAdapter(seriesAdapter);
        mSpnSeries.setSelection(0);

        mSpnLang = (Spinner) findViewById(R.id.spnLang);
        ArrayAdapter<SpnModelsItem> langAdapter = new ArrayAdapter<SpnModelsItem>(CancelActivity.this, android.R.layout.simple_spinner_item);
        langAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        langAdapter.add(new SpnModelsItem(getString(R.string.lang_ank), com.epson.epos2.printer.Printer.MODEL_ANK));
        mSpnLang.setAdapter(langAdapter);
        mSpnLang.setSelection(0);


//        try {
//            com.epson.epos2.Log.setLogSettings(mContext, com.epson.epos2.Log.PERIOD_TEMPORARY, com.epson.epos2.Log.OUTPUT_STORAGE, null, 0, 1, com.epson.epos2.Log.LOGLEVEL_LOW);
//        } catch (Exception e) {
////            Toast.makeText(CancelActivity.this, "Here8", Toast.LENGTH_SHORT).show();
//            ShowMsg.showException(e, "setLogSettings", mContext);
//        }
        mEditTarget = (EditText) findViewById(R.id.edtTarget);

        mCredential = GoogleAccountCredential.usingOAuth2(
                        getApplicationContext(), Arrays.asList(SCOPES))
                .setBackOff(new ExponentialBackOff());

        mProgress = new ProgressDialog(CancelActivity.this);
        mProgress.setMessage(getString(R.string.setmessage4));

        mProgress1 = new ProgressDialog(CancelActivity.this);
        mProgress1.setMessage("Loading...");


        tvkot = new TextView(CancelActivity.this);

        db = openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        db1 = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);

        Cursor cursor_country = db.rawQuery("SELECT * FROM Country_Selection", null);
        if (cursor_country.moveToFirst()){
            str_country = cursor_country.getString(1);
        }

        TextView rs_text = (TextView) findViewById(R.id.rs_text);
        TextView rupee = (TextView) findViewById(R.id.rupee);
        TextView inn = (TextView) findViewById(R.id.inn);

        if (str_country.toString().equals("Rupee") || str_country.toString().equals("India")) {
            insert1_cc = "\u20B9";
            insert1_rs = "Rs.";
            rs_text.setText(insert1_cc);
            rupee.setText(insert1_cc);
            inn.setText(insert1_cc);
        }else {
            if (str_country.toString().equals("Pound") || str_country.toString().equals("UK Pound")) {
                insert1_cc = "\u00a3";
                insert1_rs = "BP.";
                rs_text.setText(insert1_cc);
                rupee.setText(insert1_cc);
                inn.setText(insert1_cc);
            }else {
                if (str_country.toString().equals("Euro") || str_country.toString().equals("UK Euro")) {
                    insert1_cc = "\u20ac";
                    insert1_rs = "EU.";
                    rs_text.setText(insert1_cc);
                    rupee.setText(insert1_cc);
                    inn.setText(insert1_cc);
                }else {
                    if (str_country.toString().equals("Dollar")) {
                        insert1_cc = "\u0024";
                        insert1_rs = "\u0024";
                        rs_text.setText(insert1_cc);
                        rupee.setText(insert1_cc);
                        inn.setText(insert1_cc);
                    }else {
                        if (str_country.toString().equals("Dinars")) {
                            insert1_cc = "D";
                            insert1_rs = "KD.";
                            rs_text.setText(insert1_cc);
                            rupee.setText(insert1_cc);
                            inn.setText(insert1_cc);
                        }else {
                            if (str_country.toString().equals("Shilling")) {
                                insert1_cc = "S";
                                insert1_rs = "S.";
                                rs_text.setText(insert1_cc);
                                rupee.setText(insert1_cc);
                                inn.setText(insert1_cc);
                            }else {
                                if (str_country.toString().equals("Ringitt")) {
                                    insert1_cc = "R";
                                    insert1_rs = "RM.";
                                    rs_text.setText(insert1_cc);
                                    rupee.setText(insert1_cc);
                                    inn.setText(insert1_cc);
                                }else {
                                    if (str_country.toString().equals("Rial")) {
                                        insert1_cc = "R";
                                        insert1_rs = "OR.";
                                        rs_text.setText(insert1_cc);
                                        rupee.setText(insert1_cc);
                                        inn.setText(insert1_cc);
                                    }else {
                                        if (str_country.toString().equals("Yen")) {
                                            insert1_cc = "\u00a5";
                                            insert1_rs = "\u00a5";
                                            rs_text.setText(insert1_cc);
                                            rupee.setText(insert1_cc);
                                            inn.setText(insert1_cc);
                                        }else {
                                            if (str_country.toString().equals("Papua New Guinean")) {
                                                insert1_cc = "K";
                                                insert1_rs = "K.";
                                                rs_text.setText(insert1_cc);
                                                rupee.setText(insert1_cc);
                                                inn.setText(insert1_cc);
                                            }else {
                                                if (str_country.toString().equals("UAE")) {
                                                    insert1_cc = "D";
                                                    insert1_rs = "DH.";
                                                    rs_text.setText(insert1_cc);
                                                    rupee.setText(insert1_cc);
                                                    inn.setText(insert1_cc);
                                                }else {
                                                    if (str_country.toString().equals("South African Rand")) {
                                                        insert1_cc = "R";
                                                        insert1_rs = "R.";
                                                        rs_text.setText(insert1_cc);
                                                        rupee.setText(insert1_cc);
                                                        inn.setText(insert1_cc);
                                                    }else {
                                                        if (str_country.toString().equals("Congolese Franc")) {
                                                            insert1_cc = "F";
                                                            insert1_rs = "FC.";
                                                            rs_text.setText(insert1_cc);
                                                            rupee.setText(insert1_cc);
                                                            inn.setText(insert1_cc);
                                                        }else {
                                                            if (str_country.toString().equals("Qatari Riyals")) {
                                                                insert1_cc = "QAR";
                                                                insert1_rs = "QAR.";
                                                                rs_text.setText(insert1_cc);
                                                                rupee.setText(insert1_cc);
                                                                inn.setText(insert1_cc);
                                                            }else {
                                                                if (str_country.toString().equals("Dirhams")) {
                                                                    insert1_cc = "AED";
                                                                    insert1_rs = "AED.";
                                                                    rs_text.setText(insert1_cc);
                                                                    rupee.setText(insert1_cc);
                                                                    inn.setText(insert1_cc);
                                                                }else {
                                                                    if (str_country.toString().equals("Kuwait Dinar")) {
                                                                        insert1_cc = "KWD";
                                                                        insert1_rs = "KWD.";
                                                                        rs_text.setText(insert1_cc);
                                                                        rupee.setText(insert1_cc);
                                                                        inn.setText(insert1_cc);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Cursor round_off_s = db.rawQuery("SELECT * FROM Round_off WHERE _id = '1'", null);
        if (round_off_s.moveToFirst()){
            str_round_off = round_off_s.getString(1);
        }

        Cursor ccornn = db.rawQuery("SELECT * FROM BTConn", null);
        if (ccornn.moveToFirst()) {
            nameget = ccornn.getString(1);
            addget = ccornn.getString(2);
            statussusb = ccornn.getString(3);
            mEditTarget.setText(addget);
        }

        Cursor access = db.rawQuery("SELECT * FROM LoginUser ", null);
        if (access.moveToFirst()) {
            do {
                username = access.getString(1);
                password = access.getString(2);


            } while (access.moveToNext());
        }
        access.close();

        cancel = (Button)findViewById(R.id.proceed_button);
        billno = (EditText)findViewById(R.id.etBillno);



        //SQLiteDatabase db1 = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);



        paneone = (LinearLayout)findViewById(R.id.pane1);
        panetwo = (LinearLayout)findViewById(R.id.pane2);
        panethree = (LinearLayout)findViewById(R.id.pane3);
        returns_tab = (LinearLayout)findViewById(R.id.returns_tab);
        returns_pack = (LinearLayout)findViewById(R.id.returns_pack);
        returns_page = (LinearLayout)findViewById(R.id.returns_page);
        edit_tab = (LinearLayout)findViewById(R.id.edit_tab);
        edit_pack = (LinearLayout)findViewById(R.id.edit_pack);
        edit_page = (LinearLayout)findViewById(R.id.edit_page);

        returns_tab.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view) {
                if (edit_page.getVisibility() == View.VISIBLE) {
                    edit_page.setVisibility(View.INVISIBLE);
                    returns_page.setVisibility(View.VISIBLE);
                }
            }

        });

        edit_tab.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view) {
                if (returns_page.getVisibility() == View.VISIBLE) {
                    returns_page.setVisibility(View.INVISIBLE);
                    edit_page.setVisibility(View.VISIBLE);
                }
            }

        });

        //final TextView onlybilltotalcancel = (TextView) findViewById(R.id.totalcancel);


        final TextView onlybillold = (TextView) findViewById(R.id.subtotalold);
        final TextView onlybilltaxold = (TextView) findViewById(R.id.taxold);
        final TextView onlybillroundoffold = (TextView) findViewById(R.id.roundoffold);
        final TextView onlybilldiscountold = (TextView) findViewById(R.id.discountold);
        final TextView onlybilldiscountvalueold = (TextView) findViewById(R.id.discountvalueold);
        final TextView onlybilltotalold = (TextView) findViewById(R.id.totalold);


        final TextView onlybillnew = (TextView) findViewById(R.id.subtotalnew);
        final TextView onlybilltaxnew = (TextView) findViewById(R.id.taxnew);
        final TextView onlybillroundoffnew = (TextView) findViewById(R.id.roundoffnew);
        final TextView onlybilldiscountnew = (TextView) findViewById(R.id.discountnew);
        final TextView onlybilldiscountvaluenew = (TextView) findViewById(R.id.discountvaluenew);
        final TextView onlybilltotalnew = (TextView) findViewById(R.id.totalnew);


        final TextView onlybillcancel = (TextView) findViewById(R.id.subtotalcancel);
        final TextView onlybilltaxcancel = (TextView) findViewById(R.id.taxcancel);
        final TextView onlybillroundoffcancel = (TextView) findViewById(R.id.roundoffcancel);
        final TextView onlybilldiscountcancel = (TextView) findViewById(R.id.discountcancel);
        final TextView onlybilldiscountvaluecancel= (TextView) findViewById(R.id.discountvaluecancel);
        final TextView onlybilltotalcancel = (TextView) findViewById(R.id.totalcancel);

        LinearLayout arrow = (LinearLayout) findViewById(R.id.go_back);
        arrow.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
//                Intent intent = new Intent(CancelActivity.this, BeveragesMenuFragment_Dine.class);
//                startActivity(intent);
                View view = getCurrentFocus();
                if (view != null) {
                    InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
                    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
                }
                finish();
            }
        });

        billno.setOnEditorActionListener(new EditText.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_ACTION_GO) {
                    cancel.performClick();
                    return true;
                }
                return false;
            }
        });

        cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                billnoget = billno.getText().toString();



                /////////////////Toast.makeText(CancelActivity.this, "bill number is "+billno.getText().toString(), Toast.LENGTH_SHORT).show();
                ///////////////Toast.makeText(CancelActivity.this, "bill number11111111 is "+billno.getText().toString(), Toast.LENGTH_SHORT).show();

                //SQLiteDatabase db1 = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);

                //Cursor cc = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' ", null);
                String sql = "UPDATE All_Sales SET new_modified_total = disc_indiv_total WHERE bill_no = '" + billno.getText().toString() + "'";
                db1.execSQL(sql);

                Cursor alert = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
                if (alert.moveToFirst()){
                    do {
                        String paym = alert.getString(5);
                        String billt = alert.getString(6);

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setText(paym);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setText(billt);

                        ContentValues cv = new ContentValues();
                        if (tv.getText().toString().equals("")){
                            cv.put("paymentmethod", "  Cash");
                            String where  = "billnumber = '" +billno.getText().toString()+ "' ";


                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Billnumber");
                            getContentResolver().update(contentUri, cv,where,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProvider.AUTHORITY)
                                    .path("Billnumber")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("billnumber",billno.getText().toString())
                                    .build();
                            getContentResolver().notifyChange(resultUri, null);




                            //  db1.update("Billnumber", cv, where, new String[]{});
                        }

                    } while (alert.moveToNext());
                }

                Cursor alert1 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
                if (alert1.moveToFirst()){
                    do {
                        String paym = alert1.getString(5);
                        String billt = alert1.getString(6);

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setText(paym);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setText(billt);

                        ContentValues cv = new ContentValues();
                        if (tv1.getText().toString().equals("")){
                            cv.put("billtype", "  Dine-in");
                            String where  = "billnumber = '" +billno.getText().toString()+ "' ";

                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Billnumber");
                            getContentResolver().update(contentUri, cv,where,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProvider.AUTHORITY)
                                    .path("Billnumber")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("billnumber",billno.getText().toString())
                                    .build();
                            getContentResolver().notifyChange(resultUri, null);



                            //   db1.update("Billnumber", cv, where, new String[]{});
                        }

                    } while (alert1.moveToNext());
                }

                Cursor alert2 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
                if (alert2.moveToFirst()){
                    do {
                        String paym = alert2.getString(17);

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setText(paym);

                        ContentValues cv = new ContentValues();
                        if (tv.getText().toString().equals("")){
                            cv.put("paymentmethod", "  Cash");
                            String where  = "bill_no = '" +billno.getText().toString()+ "' ";



                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                            getContentResolver().update(contentUri, cv,where,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProvider.AUTHORITY)
                                    .path("All_sales")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                    .build();
                            getContentResolver().notifyChange(resultUri, null);


                            //    db1.update("All_Sales", cv, where, new String[]{});
                        }

                    } while (alert2.moveToNext());
                }

                Cursor alert3 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
                if (alert3.moveToFirst()){
                    do {
                        String billt = alert3.getString(16);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setText(billt);

                        ContentValues cv = new ContentValues();
                        if (tv1.getText().toString().equals("")){
                            cv.put("billtype", "  Dine-in");
                            String where  = "bill_no = '" +billno.getText().toString()+ "' ";

                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                            getContentResolver().update(contentUri, cv,where,new String[]{});
                            resultUri = new Uri.Builder()
                                    .scheme("content")
                                    .authority(StubProvider.AUTHORITY)
                                    .path("All_sales")
                                    .appendQueryParameter("operation", "update")
                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                    .build();
                            getContentResolver().notifyChange(resultUri, null);




                            //    db1.update("All_Sales", cv, where, new String[]{});
                        }

                    } while (alert3.moveToNext());
                }

                Cursor cursor1 = db1.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
                if (cursor1.moveToFirst()) {

                    DownloadMusicfromInternet downloadMusicfromInternet = new DownloadMusicfromInternet();
                    downloadMusicfromInternet.execute();

                    View view = getCurrentFocus();
                    if (view != null) {
                        InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
                        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
                    }

                    final Dialog dialog = new Dialog(CancelActivity.this, R.style.notitle);
                    dialog.setContentView(R.layout.reason_fro_refund);
                    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

                    //frameLayout = (FrameLayout)dialog.findViewById(R.id.othervisible);
                    editText = (EditText)dialog.findViewById(R.id.otherentry);

                    reasonfrorefund = (RadioGroup) dialog.findViewById(R.id.refundreason);
                    reasonfrorefund.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
                        @Override
                        public void onCheckedChanged(RadioGroup group, int checkedId) {
                            selected = reasonfrorefund.getCheckedRadioButtonId();
                            radioBtncash = (RadioButton) dialog.findViewById(selected);

                            if (radioBtncash.getText().toString().equals("Other")){
                                //frameLayout.setVisibility(View.VISIBLE);
                                editText.setVisibility(View.VISIBLE);
                                editText.requestFocus();
                                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                imm.showSoftInput(editText, InputMethodManager.SHOW_IMPLICIT);
                                //dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
                                //displayKeyboard();


                                Button proceed = (Button)dialog.findViewById(R.id.quantitycontinue);
                                proceed.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (editText.getText().toString().equals("")){
                                            ///////////////Toast.makeText(CancelActivity.this, "Enter other reason", Toast.LENGTH_SHORT).show();
                                        }else {
                                            ///////////////Toast.makeText(CancelActivity.this, "edit text data"+editText.getText().toString(), Toast.LENGTH_SHORT).show();
                                            dialog.dismiss();
                                            hi();

                                        }
                                    }
                                });

                            }else {
                                //frameLayout.setVisibility(View.GONE);
                                editText.setVisibility(View.GONE);
                                //editText.clearFocus();
                                dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
//                                hideKeyboard(getApplicationContext());
                                //donotshowKeyboard(CancelActivity.this);
                                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                imm.hideSoftInputFromWindow(editText.getWindowToken(), 0);
                                //donotdisplayKeyboard();

                                Button proceed = (Button)dialog.findViewById(R.id.quantitycontinue);
                                proceed.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        ///////////////Toast.makeText(CancelActivity.this, "selected "+radioBtncash.getText().toString(), Toast.LENGTH_SHORT).show();
                                        dialog.dismiss();
                                        hi();
                                        paneone.setVisibility(View.VISIBLE);
                                        //panetwo.setVisibility(View.VISIBLE);
                                        //panethree.setVisibility(View.VISIBLE);
                                    }
                                });

                            }
                        }
                    });


                    ImageView close = (ImageView)dialog.findViewById(R.id.closetext);
                    close.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            dialog.dismiss();
                        }
                    });

                    dialog.show();



                }else {
                    billno.setError("Bill number doesn't exist");
                }

                cursor1.close();


            }
        });


//        ImageView t1close = (ImageView)findViewById(R.id.t1close);
//        t1close.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                String sql = "UPDATE All_Sales SET deleted_not = ''";
//                db1.execSQL(sql);
//
//                String sql1 = "UPDATE All_Sales SET modifiedquantity = ''";
//                db1.execSQL(sql1);
//
//                String sql2 = "UPDATE All_Sales SET quantitycopy = quantity";
//                db1.execSQL(sql2);
//
//                String sql3 = "UPDATE All_Sales SET modifiedtotal = ''";
//                db1.execSQL(sql3);
//
//                paneone.setVisibility(View.INVISIBLE);
//                panetwo.setVisibility(View.GONE);
//                panethree.setVisibility(View.INVISIBLE);
//
//            }
//        });

        ImageView t1closered = (ImageView)findViewById(R.id.btnclose);
        t1closered.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String sql = "UPDATE All_Sales SET deleted_not = ''";
                db1.execSQL(sql);

                String sql1 = "UPDATE All_Sales SET modifiedquantity = ''";
                db1.execSQL(sql1);

                String sql2 = "UPDATE All_Sales SET quantitycopy = quantity";
                db1.execSQL(sql2);

                String sql3 = "UPDATE All_Sales SET modifiedtotal = ''";
                db1.execSQL(sql3);

                String sql4 = "UPDATE All_Sales SET new_modified_total = ''";
                db1.execSQL(sql4);

                paneone.setVisibility(View.INVISIBLE);
                panetwo.setVisibility(View.GONE);
                panethree.setVisibility(View.INVISIBLE);

            }
        });

        Button t1cancelorderred = (Button)findViewById(R.id.btncancelorder);
        t1cancelorderred.setOnClickListener(new View.OnClickListener() {


            @Override
            public void onClick(View v) {

                if (edit_page.getVisibility() == View.VISIBLE) {
                    edit_page.setVisibility(View.INVISIBLE);
                    returns_page.setVisibility(View.VISIBLE);
                }

                Cursor ccuu = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' ", null);
                while (ccuu.moveToNext()){
                    //do {
                    String iddi = ccuu.getString(0);
                    String one = ccuu.getString(1);
                    String two = ccuu.getString(2);
                    String four = ccuu.getString(4);

                    /////////////////Toast.makeText(CancelActivity.this, " id "+iddi+" itemname "+one, Toast.LENGTH_LONG).show();

                    ContentValues contentValues = new ContentValues();
                    contentValues.put("deleted_not", "delete");
                    contentValues.put("modifiedquantity", two);
                    contentValues.put("quantitycopy", "0");
                    contentValues.put("modifiedtotal", four);
                    System.out.println("modified1 "+four);
                    String where = "_id = '" + iddi + "' AND bill_no = '"+billno.getText().toString()+"' ";


                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
                    resultUri = new Uri.Builder()
                            .scheme("content")
                            .authority(StubProvider.AUTHORITY)
                            .path("All_sales")
                            .appendQueryParameter("operation", "update")
                            .appendQueryParameter("_id",iddi)
                            .appendQueryParameter("bill_no",billno.getText().toString())
                            .build();
                    getContentResolver().notifyChange(resultUri, null);



                    //        db1.update("All_sales", contentValues, where, new String[]{});
                    hi();
                    //AsyncTaskRunner runner = new AsyncTaskRunner();
                    //runner.doInBackground();
                    //runner.execute(hi());
                    //runner.execute(hii());
                    //hi();
                    //hii();
                    //}while (ccuu.moveToNext());


                }

                ccuu.close();
            }
        });


//        ImageView t2close = (ImageView)findViewById(R.id.t2close);
//        t2close.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                String sql = "UPDATE All_Sales SET deleted_not = ''";
//                db1.execSQL(sql);
//
//                String sql1 = "UPDATE All_Sales SET modifiedquantity = ''";
//                db1.execSQL(sql1);
//
//                String sql2 = "UPDATE All_Sales SET quantitycopy = quantity";
//                db1.execSQL(sql2);
//
//                String sql3 = "UPDATE All_Sales SET modifiedtotal = ''";
//                db1.execSQL(sql3);
//
//                //paneone.setVisibility(View.INVISIBLE);
//                panetwo.setVisibility(View.GONE);
//                panethree.setVisibility(View.INVISIBLE);
//                hi();
//
//            }
//        });

        ImageView t2closered = (ImageView)findViewById(R.id.btnrevert);
        t2closered.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                if (edit_page.getVisibility() == View.INVISIBLE) {
                    edit_page.setVisibility(View.VISIBLE);
                }

                String sql = "UPDATE All_Sales SET deleted_not = ''";
                db1.execSQL(sql);

                String sql1 = "UPDATE All_Sales SET modifiedquantity = ''";
                db1.execSQL(sql1);

                String sql2 = "UPDATE All_Sales SET quantitycopy = quantity";
                db1.execSQL(sql2);

                String sql3 = "UPDATE All_Sales SET modifiedtotal = ''";
                db1.execSQL(sql3);

//                String sql4 = "UPDATE All_Sales SET new_modified_total = ''";
//                db1.execSQL(sql4);

                String sql4 = "UPDATE All_Sales SET new_modified_total = disc_indiv_total WHERE bill_no = '" + billno.getText().toString() + "'";
                db1.execSQL(sql4);

                //paneone.setVisibility(View.INVISIBLE);
                panetwo.setVisibility(View.GONE);
                panethree.setVisibility(View.INVISIBLE);
                hi();

            }
        });





        db = openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        Cursor acccess = db.rawQuery("SELECT * FROM LoginUser ", null);
        if (acccess.moveToFirst()) {
            do {
                username = acccess.getString(1);
                password = acccess.getString(2);


            } while (acccess.moveToNext());
        }

        Button t2confirmcancelred = (Button)findViewById(R.id.btnconfirmcancel);
        t2confirmcancelred.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Dialog dialog = new Dialog(CancelActivity.this, R.style.notitle);
                dialog.setContentView(R.layout.dialog_refund_warning);
                dialog.show();

                ImageView imageVieww = (ImageView) dialog.findViewById(R.id.closetext);
                imageVieww.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialog.dismiss();
                    }
                });

                Button buttonn = (Button) dialog.findViewById(R.id.cancel);
                buttonn.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialog.dismiss();
                    }
                });

                Button returnitem = (Button)dialog.findViewById(R.id.returns);
                returnitem.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialog.dismiss();



                        Date dtt_new = new Date();
                        SimpleDateFormat sdf1t_new = new SimpleDateFormat("yyyyMMddkkmm");
                        final String time24_new = sdf1t_new.format(dtt_new);

                        SimpleDateFormat normal = new SimpleDateFormat("dd MMM yyyy");
                        final String normal1 = normal.format(new Date());

                        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy MM dd");
                        final String currentDateandTime1 = sdf2.format(new Date());

                        Date dt = new Date();
                        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa");
                        final String time1 = sdf1.format(dt);

                        Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
                        if (connnet.moveToFirst()) {
                            ipnameget = connnet.getString(1);
                            portget = connnet.getString(2);
                            statusnet = connnet.getString(3);
                        }

                        Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
                        if (connnet_counter.moveToFirst()) {
                            ipnameget_counter = connnet_counter.getString(1);
                            portget_counter = connnet_counter.getString(2);
                            statusnet_counter = connnet_counter.getString(3);
                        }

                        Cursor conn = db.rawQuery("SELECT * FROM BTConn", null);
                        if (conn.moveToFirst()) {
                            nameget = conn.getString(1);
                            addget = conn.getString(2);
                            statussusb = conn.getString(3);
                        }



                        Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);
                        if (cc.moveToFirst()) {
                            String Na = cc.getString(1);
                            if (Na.equals("A4")) {
                                mProgress1.show();
                                paneone.setVisibility(View.INVISIBLE);
                                panetwo.setVisibility(View.GONE);
                                panethree.setVisibility(View.INVISIBLE);

                                String sql4 = "UPDATE All_Sales SET disc_indiv_total = new_modified_total WHERE bill_no = '" + billno.getText().toString() + "'";
                                db1.execSQL(sql4);

                                Cursor ccvv = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                while (ccvv.moveToNext()){
                                    String id = ccvv.getString(0);
                                    String itemname = ccvv.getString(1);
                                    String quantity = ccvv.getString(2);
                                    String price = ccvv.getString(3);
                                    String total = ccvv.getString(4);
                                    String type = ccvv.getString(5);
                                    String parent = ccvv.getString(6);
                                    String parentid = ccvv.getString(7);
                                    String modassigned = ccvv.getString(8);
                                    String tax = ccvv.getString(9);
                                    String taxname = ccvv.getString(10);
                                    String billno1 = ccvv.getString(11);
                                    String time = ccvv.getString(12);
                                    String date = ccvv.getString(13);
                                    String user = ccvv.getString(14);
                                    String tableid = ccvv.getString(15);
                                    String billtype = ccvv.getString(16);
                                    String paymentmethod = ccvv.getString(17);
                                    String billamountdisapply = ccvv.getString(18);
                                    String billamountdisnotapply = ccvv.getString(19);
                                    String idd = ccvv.getString(20);
                                    String deletednot = ccvv.getString(21);
                                    String modifiedquan = ccvv.getString(22);
                                    String quancopy = ccvv.getString(23);
                                    String modifiedtotal = ccvv.getString(24);
                                    String date1 = ccvv.getString(25);
                                    String disc_type = ccvv.getString(27);
                                    String disc_value = ccvv.getString(28);
                                    String disc_newtotal = ccvv.getString(29);
                                    String disc_thereornot = ccvv.getString(30);
                                    String disc_indiv_total = ccvv.getString(31);
                                    String taxx2 = ccvv.getString(35);
                                    String taxx_v2 = ccvv.getString(36);
                                    String taxx3 = ccvv.getString(37);
                                    String taxx_v3 = ccvv.getString(38);
                                    String taxx4 = ccvv.getString(39);
                                    String taxx_v4 = ccvv.getString(40);
                                    String taxx5 = ccvv.getString(41);
                                    String taxx_v5 = ccvv.getString(42);
                                    String hsn_hsn = ccvv.getString(34);
                                    String old_total = ccvv.getString(50);
                                    String old_total_indiv = ccvv.getString(56);

                                    ContentValues contentValues = new ContentValues();
//                                contentValues.put("_id", id);
                                    contentValues.put("itemname", itemname);
                                    contentValues.put("quantity", modifiedquan);
                                    contentValues.put("price", price);
                                    contentValues.put("total", modifiedtotal);
                                    contentValues.put("type", type);
                                    contentValues.put("parent", parent);
                                    contentValues.put("parentid", parentid);
                                    contentValues.put("mod_assigned", modassigned);
                                    contentValues.put("tax", tax);
                                    contentValues.put("taxname", taxname);
                                    contentValues.put("bill_no", billno1);
                                    contentValues.put("time", time1);
                                    contentValues.put("date", currentDateandTime1);
                                    contentValues.put("user", username);
                                    contentValues.put("billtype", billtype);
                                    contentValues.put("paymentmethod", paymentmethod);
                                    //contentValues.put("billamount_disapply", billamountdisapply);
                                    contentValues.put("billamount_disapply", onlybilltotalold.getText().toString());
                                    contentValues.put("billamount_disnotapply", String.valueOf(Float.parseFloat(onlybillold.getText().toString()) + Float.parseFloat(onlybilltaxold.getText().toString())));
                                    contentValues.put("_idd", idd);
                                    contentValues.put("date1", normal1);
                                    contentValues.put("billamount_cancelled", "");
                                    contentValues.put("billamount_cancelled_user", onlybilltotalcancel.getText().toString());
                                    contentValues.put("disc_type", disc_type);
                                    contentValues.put("disc_value", disc_value);
                                    contentValues.put("newtotal", disc_newtotal);
                                    contentValues.put("disc_thereornot", disc_thereornot);
                                    contentValues.put("disc_indiv_total", disc_indiv_total);
                                    contentValues.put("taxname2", taxx2);
                                    contentValues.put("tax2", taxx_v2);
                                    contentValues.put("taxname3", taxx3);
                                    contentValues.put("tax3", taxx_v3);
                                    contentValues.put("taxname4", taxx4);
                                    contentValues.put("tax4", taxx_v4);
                                    contentValues.put("taxname5", taxx5);
                                    contentValues.put("tax5", taxx_v5);
                                    contentValues.put("hsn_code", hsn_hsn);

                                    if (radioBtncash.getText().toString().equals("Other")){
                                        contentValues.put("reason", editText.getText().toString());
                                    }else {
                                        contentValues.put("reason", radioBtncash.getText().toString());
                                    }
                                    contentValues.put("datetimee_new", time24_new);
                                    contentValues.put("old_total", old_total);
                                    contentValues.put("old_total_indiv", old_total_indiv);


                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                    resultUri = getContentResolver().insert(contentUri, contentValues);
                                    getContentResolver().notifyChange(resultUri, null);



                                    //      db1.insert("All_Sales_Cancelled", null, contentValues);

                                }

                                Cursor item_ret = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                if (item_ret.moveToFirst()) {
                                    do {
                                        String modifiedquan = item_ret.getString(22);
                                        String itemname = item_ret.getString(1);

                                        Cursor item = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+itemname+"'", null);
                                        if (item.moveToFirst()){
                                            String id = item.getString(0);
                                            String qu = item.getString(3);

                                            float up_qu = Float.parseFloat(qu)+Float.parseFloat(modifiedquan);
                                            ContentValues co = new ContentValues();
                                            co.put("stockquan", String.format("%.0f", up_qu));
                                            String wherecu = "_id = '" + id + "'";

                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                            getContentResolver().update(contentUri, co,wherecu,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProviderApp.AUTHORITY)
                                                    .path("Items")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",id)
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);
                                        }

                                    }while (item_ret.moveToNext());
                                }

                                Cursor ccvvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                if (ccvvv11.moveToFirst()) {
                                    do {
                                        String id = ccvvv11.getString(0);
                                        String newquan = ccvvv11.getString(23);
                                        String newtotal = ccvvv11.getString(24);
                                        String tt = ccvvv11.getString(2);
                                        String ttt = ccvvv11.getString(3);
                                        float tr = Float.parseFloat(tt)*Float.parseFloat(ttt);
                                        String trr = String.format("%.2f", tr);
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("quantity", newquan);
                                        contentValues.put("total", trr);

                                        String where = "_id = '" + id + "' ";


//                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                    resultUri = new Uri.Builder()
//                                            .scheme("content")
//                                            .authority(StubProvider.AUTHORITY)
//                                            .path("All_sales")
//                                            .appendQueryParameter("operation", "update")
//                                            .appendQueryParameter("_id",id)
//                                            .build();
//                                    getContentResolver().notifyChange(resultUri, null);


                                        db1.update("All_sales", contentValues, where, new String[]{});
                                        webservicequery_sales("UPDATE all_sales set quantity = '"+newquan+"', total = '"+trr+"' WHERE _id = '"+id+"'");
                                        System.out.println("items cancel "+newquan+" total "+trr+" _id "+id);

                                    } while (ccvvv11.moveToNext());
                                }
//                            while (ccvvv11.moveToNext()){
//
//                            }

                                Cursor ccvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'decrease' ", null);
                                if (ccvv11.moveToFirst()) {
                                    do {
                                        String id = ccvv11.getString(0);
                                        String newquan = ccvv11.getString(23);
                                        String newtotal = ccvv11.getString(24);
                                        String tt = ccvv11.getString(2);
                                        String ttt = ccvv11.getString(3);
                                        float tr = Float.parseFloat(tt)*Float.parseFloat(ttt);
                                        String trr = String.format("%.2f", tr);
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("quantity", newquan);
                                        contentValues.put("total", trr);

                                        String where = "_id = '" + id + "' ";


//                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                    resultUri = new Uri.Builder()
//                                            .scheme("content")
//                                            .authority(StubProvider.AUTHORITY)
//                                            .path("All_sales")
//                                            .appendQueryParameter("operation", "update")
//                                            .appendQueryParameter("_id",id)
//                                            .build();
//                                    getContentResolver().notifyChange(resultUri, null);



                                        db1.update("All_sales", contentValues, where, new String[]{});
                                        webservicequery_sales("UPDATE all_sales set quantity = '"+newquan+"', total = '"+trr+"' WHERE _id = '"+id+"'");

                                    }while (ccvv11.moveToNext());
                                }

                                Cursor ccvv1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                if (ccvv1.moveToFirst()){
                                    do {
                                        String modifiedquan = ccvv1.getString(22);
                                        String itemname = ccvv1.getString(1);

                                        Cursor ing_r = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + itemname + "'", null);
                                        if (ing_r.moveToFirst()) {
                                            do {
                                                String ingid_r = ing_r.getString(0);
                                                String ingname_r = ing_r.getString(1);
                                                String ingcurr_stoc = ing_r.getString(4);
                                                TextView v121 = new TextView(CancelActivity.this);
                                                v121.setText(ingcurr_stoc);
                                                if (v121.getText().toString().equals("")) {
                                                    v121.setText("0");
                                                }

                                                String id_r = ing_r.getString(0);
                                                String quan_used_r = ing_r.getString(3);
                                                String pres_quan_r = ing_r.getString(4);
                                                TextView v12 = new TextView(CancelActivity.this);
                                                v12.setText(quan_used_r);
                                                TextView v13 = new TextView(CancelActivity.this);
                                                v13.setText(pres_quan_r);
                                                if (v12.getText().toString().equals("")) {
                                                    v12.setText("0");
                                                }
                                                if (v13.getText().toString().equals("")) {
                                                    v13.setText("0");
                                                }
                                                float a = (Float.parseFloat(v12.getText().toString())) * (Float.parseFloat(modifiedquan));
                                                float a1 = a + Float.parseFloat(v121.getText().toString());
                                                float a2 = a + Float.parseFloat(v13.getText().toString());

//                                            Toast.makeText(CancelActivity.this, "current quna for " + ingname_r + " is " + a, Toast.LENGTH_SHORT).show();
                                                ContentValues co = new ContentValues();
                                                co.put("currnet_stock", String.format("%.2f", a1));
                                                String wherecu = "_id = '" + ingid_r + "'";

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                                getContentResolver().update(contentUri, co,wherecu,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Ingredient_items_list")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",ingid_r)
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);



                                                //       db.update("Ingredient_items_list", co, wherecu, new String[]{});

                                                Cursor ing_r111 = db.rawQuery("SELECT * FROM Ingredients WHERE ingredient_name = '"+ingname_r+"'", null);
                                                if (ing_r111.moveToFirst()) {
                                                    do {
                                                        String id_r1 = ing_r111.getString(0);
                                                        ContentValues co1 = new ContentValues();
                                                        co1.put("current_stock", String.format("%.2f", a1));
                                                        String wherecu1 = "_id = '" + id_r1 + "'";


                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients");
                                                        getContentResolver().update(contentUri, co1,wherecu1,new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Ingredients")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id",id_r1)
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);


                                                        //        db.update("Ingredients", co1, wherecu1, new String[]{});
                                                    }while (ing_r111.moveToNext());
                                                }
                                            } while (ing_r.moveToNext());
                                        }
                                    }while (ccvv1.moveToNext());
                                }

                                Cursor checks = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                if (checks.moveToFirst()){
                                    do {
                                        String disc_typea = checks.getString(24);
                                        String disc_valuea = checks.getString(25);
                                        String disc_newtotala = checks.getString(26);
                                        String disc_thereornota = checks.getString(27);
                                        String disc_indiv_totoala = checks.getString(28);
                                        String idid = checks.getString(0);
                                        String originaltotal = checks.getString(4);
                                        String quan = checks.getString(2);
                                        TextView xc = new TextView(CancelActivity.this);
                                        xc.setText(disc_thereornota);

                                        if (xc.getText().toString().equals("yes")) {
                                            if (disc_typea.toString().equals("%")) {
                                                //Toast.makeText(CancelActivity.this, "variable", Toast.LENGTH_SHORT).show();

                                                //Toast.makeText(CancelActivity.this, "not empty 1 " + disc_var_edittext1.getText().toString(), Toast.LENGTH_SHORT).show();

                                                float vt = Float.parseFloat(originaltotal.toString())/100 * Float.parseFloat(disc_valuea.toString());
                                                String vbn = String.format("%.2f", vt);
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("disc_indiv_total", vbn);
                                                String where = "_id = '" + idid + "' ";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_Sales_Cancelled")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",idid)
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);




                                                //       db1.update("All_Sales_Cancelled", contentValues, where, new String[]{});

                                            }else {
                                                //Toast.makeText(CancelActivity.this, "fixed", Toast.LENGTH_SHORT).show();

                                                float vt = Float.parseFloat(quan) *Float.parseFloat(disc_valuea);
                                                String vbn = String.format("%.2f", vt);
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("disc_indiv_total", vbn);
                                                String where = "_id = '" + idid + "' ";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_Sales_Cancelled")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",idid)
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);



                                                //     db1.update("All_Sales_Cancelled", contentValues, where, new String[]{});
                                            }
                                        }
                                    } while (checks.moveToNext());
                                }



                                Cursor check = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                if (check.moveToFirst()){
                                    String can_amo = check.getString(21);
                                    if (can_amo.toString().equals("")){

                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("billamount_cancelled", onlybilltotalcancel.getText().toString());

                                        String where1 = "bill_no = '" + billno.getText().toString() + "'";


                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                        getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("All_Sales_Cancelled")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("bill_no",billno.getText().toString())
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);


                                        //   db1.update("All_Sales_Cancelled", contentValues, where1, new String[]{});
                                    }else {
                                        float nn = Float.parseFloat(can_amo)+Float.parseFloat(onlybilltotalcancel.getText().toString());
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("billamount_cancelled", String.valueOf(nn));

                                        String where1 = "bill_no = '" + billno.getText().toString() + "'";

                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                        getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("All_Sales_Cancelled")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("bill_no",billno.getText().toString())
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);



                                        //     db1.update("All_Sales_Cancelled", contentValues, where1, new String[]{});
                                    }

                                }


                                Cursor refu = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                if (refu.moveToFirst()){
                                    do {
                                        String reu = refu.getString(0);
                                        String pre_amo = refu.getString(5);
                                        Cursor sum = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                        if (sum.moveToFirst()){
                                            ref_cu = sum.getFloat(0);
                                        }
                                        float c = Float.parseFloat(pre_amo) - ref_cu;
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("refunds", String.valueOf(ref_cu));
                                        contentValues.put("total_amount", String.valueOf(c));
                                        String where = "_id = '" + reu + "' ";


                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Customerdetails");
                                        getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("Customerdetails")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id",reu)
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);



                                        //      db1.update("Customerdetails", contentValues, where, new String[]{});
                                    }while (refu.moveToNext());
                                }

                                Cursor refu1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                if (refu1.moveToFirst()){
                                    do {
                                        String reu = refu1.getString(0);
                                        String cre_v1 = refu1.getString(13);
                                        String ref_v1 = refu1.getString(18);
                                        TextView vbg = new TextView(CancelActivity.this);
                                        vbg.setText(cre_v1);
                                        if (vbg.getText().toString().equals("") || vbg.getText().toString().equals("0") || vbg.getText().toString().equals("0.0")){

                                        }else {
                                            float one = Float.parseFloat(cre_v1) - Float.parseFloat(ref_v1);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("credit", String.valueOf(one));
                                            String where = "_id = '" + reu + "' ";


                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Customerdetails");
                                            getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("Customerdetails")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",reu)
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);


                                            ///        db1.update("Customerdetails", contentValues, where, new String[]{});
                                        }
                                    }while (refu1.moveToNext());
                                }

                                Cursor ccvvr1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'delete' ", null);
                                while (ccvvr1.moveToNext()){
                                    String id = ccvvr1.getString(0);

                                    String where = "_id = '" + id + "' ";


                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales");
                                    getContentResolver().delete(contentUri, where, new String[]{});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProvider.AUTHORITY)
                                            .path("All_Sales")
                                            .appendQueryParameter("operation", "delete")
                                            .appendQueryParameter("_id", id)
                                            .build();
                                    getContentResolver().notifyChange(resultUri, null);



                                    //       db1.delete("All_Sales", where, new String[]{});
                                }


//                            String sql = "UPDATE All_Sales SET disc_indiv_total = new_modified_total WHERE bill_no = '" + billno.getText().toString() + "'";
//                            db1.execSQL(sql);

//                            String sql = "UPDATE All_Sales SET new_modified_total = disc_indiv_total WHERE bill_no = '" + billno.getText().toString() + "'";
//                            db1.execSQL(sql);



                                ///////////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_LONG).show();

                                Cursor ccvv2 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                ///////////////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_LONG).show();
                                while (ccvv2.moveToNext()){
                                    String id = ccvv2.getString(0);
                                    String itemname = ccvv2.getString(1);
                                    String idd = ccvv2.getString(20);
                                    ///////////////Toast.makeText(CancelActivity.this, "3", Toast.LENGTH_LONG).show();

                                    Cursor ccvv3 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '"+itemname+"' AND parentid = '"+idd+"' ", null);
                                    if (ccvv3.moveToFirst()){
                                        do {
                                            //ContentValues contentValues = new ContentValues();
                                            //contentValues.put("mod_assigned", "no");
                                            ///////////////Toast.makeText(CancelActivity.this, "set maod_assigned as yes where id "+id+" itemname "+itemname, Toast.LENGTH_LONG).show();
                                        }while (ccvv3.moveToNext());
                                    }else {
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("mod_assigned", "no");
                                        String where1 = "_id = '" + id + "' AND type = 'Item' ";



                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                        getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("All_sales")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id",id)
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);


                                        //      db1.update("All_sales", contentValues, where1, new String[]{});

                                        // /////////////Toast.makeText(CancelActivity.this, "set maod_assigned as no where id "+id+" itemname "+itemname, Toast.LENGTH_LONG).show();
                                    }

                                }

                                Cursor billnumber = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                if (billnumber.moveToFirst()){
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("total", onlybilltotalnew.getText().toString());
                                    contentValues.put("subtotal", onlybillnew.getText().toString());
                                    contentValues.put("taxtotal", onlybilltaxnew.getText().toString());
                                    contentValues.put("roundoff", onlybillroundoffnew.getText().toString());
                                    String where1 = "billnumber = '" + billno.getText().toString() + "' ";

//                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Billnumber");
//                                getContentResolver().update(contentUri, contentValues,where1,new String[]{});
//                                resultUri = new Uri.Builder()
//                                        .scheme("content")
//                                        .authority(StubProvider.AUTHORITY)
//                                        .path("Billnumber")
//                                        .appendQueryParameter("operation", "update")
//                                        .appendQueryParameter("billnumber",billno.getText().toString())
//                                        .build();
//                                getContentResolver().notifyChange(resultUri, null);



                                    db1.update("Billnumber", contentValues, where1, new String[]{});
                                    webservicequery_sales("UPDATE Billnumber set total = '"+onlybilltotalnew.getText().toString()+"', subtotal = '"+onlybillnew.getText().toString()+"', taxtotal = '"+onlybilltaxnew.getText().toString()+"', roundoff = '"+onlybillroundoffnew.getText().toString()+"' WHERE billnumber = '"+billno.getText().toString()+"'");
                                }

                                Cursor discount = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billno.getText().toString()+"'", null);
                                if (discount.moveToFirst()){
                                    float rou = Float.parseFloat(onlybilldiscountnew.getText().toString());
                                    String rou1 = String.format("%.2f", rou);
                                    float oa = Float.parseFloat(onlybilltotalnew.getText().toString())+Float.parseFloat(onlybilldiscountnew.getText().toString());
                                    ContentValues contentValues = new ContentValues();
                                    contentValues.put("Billamount_rupess", onlybilltotalnew.getText().toString());
                                    contentValues.put("Discount_rupees", rou1);
                                    contentValues.put("original_amount", String.valueOf(oa));
                                    String where1 = "billno = '" + billno.getText().toString() + "' ";



                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Discountdetails");
                                    getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                    resultUri = new Uri.Builder()
                                            .scheme("content")
                                            .authority(StubProvider.AUTHORITY)
                                            .path("Discountdetails")
                                            .appendQueryParameter("operation", "update")
                                            .appendQueryParameter("billno",billno.getText().toString())
                                            .build();
                                    getContentResolver().notifyChange(resultUri, null);



                                    //   db1.update("Discountdetails", contentValues, where1, new String[]{});
                                }



//                                Toast.makeText(getApplicationContext(), "A4", Toast.LENGTH_LONG).show();
                                Intent intent = new Intent(CancelActivity.this, A4_Printer_Cancel_new.class);
                                intent.putExtra("billnumber", billno.getText().toString());
                                startActivity(intent);

                                final Handler handler = new Handler();
                                handler.postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        mProgress1.dismiss();

                                        final Dialog dialog1 = new Dialog(CancelActivity.this, R.style.notitle);
                                        dialog1.setContentView(R.layout.dialog_refund_confirmation);
                                        dialog1.show();

                                        TextView inn = (TextView) dialog1.findViewById(R.id.inn);
                                        inn.setText(insert1_cc);

                                        refundamout = (TextView)dialog1.findViewById(R.id.refund_value);
                                        refundamout.setText(onlybilltotalcancel.getText().toString());

                                        Button gotohome = (Button)dialog1.findViewById(R.id.gohome);
                                        gotohome.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                dialog1.dismiss();
                                                //Intent intent = new Intent(CancelActivity.this, LoginActivity.class);
                                                //startActivity(intent);
                                                finish();
                                            }
                                        });

                                        Button gotomail= (Button)dialog1.findViewById(R.id.gomail);
                                        gotomail.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                //dialog1.dismiss();
                                                //Intent intent = new Intent(CancelActivity.this, LoginActivity.class);
                                                //startActivity(intent);
                                                email1(dialog1);
                                            }
                                        });




                                        String bill_reason = "";
                                        if (radioBtncash.getText().toString().equals("Other")){
                                            bill_reason = editText.getText().toString();
                                        }else {
                                            bill_reason = radioBtncash.getText().toString();
                                        }

                                        if (onlybilltotalnew.getText().toString().equals("")){
                                            onlybilltotalnew.setText("0");
                                        }
                                        if (onlybilltotalcancel.getText().toString().equals("")){
                                            onlybilltotalcancel.setText("0");
                                        }


                                        float gb = Float.parseFloat(onlybilltotalnew.getText().toString())+Float.parseFloat(onlybilltotalcancel.getText().toString());
                                        String gb1 = String.valueOf(gb);

                                        Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
                                        if (getcom.moveToFirst()) {
                                            do {
                                                strcompanyname = getcom.getString(1);
                                            } while (getcom.moveToNext());
                                        }else {
                                            strcompanyname = "";
                                        }


                                        Cursor cursor5 = db.rawQuery("SELECT * FROM Email_setup", null);
                                        if (cursor5.moveToFirst()) {
                                            String un2 = cursor5.getString(1);
                                            String pwd2 = cursor5.getString(2);
                                            String em_ca2 = cursor5.getString(3);

                                            String toEmails2 = un2;
                                            toEmailList = Arrays.asList(toEmails2
                                                    .split("\\s*,\\s*"));

                                            String msg = "Returns/Refunds" +
                                                    "\n" + normal1 + "," + time1 +
                                                    "\nBill no: " + billno.getText().toString() +
                                                    "\n" + "Bill amount: " + gb1 +
                                                    "\n" + "Refunded: " + onlybilltotalcancel.getText().toString() +
                                                    "\nUser: " + username +
                                                    "\nResason: " + bill_reason;


                                            Cursor cursore = db.rawQuery("SELECT * FROM Email_setup", null);
                                            if (cursore.moveToFirst()) {
                                                Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                if (cursoree.moveToFirst()) {
                                                    //both are there

                                                    Cursor cursor = db.rawQuery("SELECT * FROM Email_setup", null);
                                                    if (cursor.moveToFirst()) {
                                                        String un = cursor.getString(1);
                                                        String pwd = cursor.getString(2);
                                                        String client = cursor.getString(3);


                                                        Cursor cursor11 = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                        if (cursor11.moveToFirst()) {
                                                            do {
                                                                String unn = cursor11.getString(3);
                                                                String toEmails = unn;
                                                                toEmailList = Arrays.asList(toEmails
                                                                        .split("\\s*,\\s*"));
                                                            } while (cursor11.moveToNext());
                                                        }


                                                        if (client.toString().equals("Gmail")) {
                                                            getResultsFromApi();
                                                            new MakeRequestTask(mCredential).execute();
//                                                        new SendMailTask(Customer_Info_Activity.this).execute(un,
//                                                                pwd, toEmailList, strcompanyname, msg);
                                                        } else {
                                                            if (client.toString().equals("Yahoo")) {
//                                                            Toast.makeText(Customer_Info_Activity.this, "Yahoo", Toast.LENGTH_LONG).show();
                                                                new SendMailTask_Yahoo(CancelActivity.this).execute(un,
                                                                        pwd, toEmailList, strcompanyname, msg);
                                                            } else {
                                                                if (client.toString().equals("Hotmail")) {
//                                                                Toast.makeText(Customer_Info_Activity.this, "Hotmail", Toast.LENGTH_LONG).show();
                                                                    new SendMailTask_Hotmail(CancelActivity.this).execute(un,
                                                                            pwd, toEmailList, strcompanyname, msg);
                                                                } else {
                                                                    if (client.toString().equals("Office365")) {
//                                                                    Toast.makeText(Customer_Info_Activity.this, "Outlook", Toast.LENGTH_LONG).show();
                                                                        new SendMailTask_Outlook(CancelActivity.this).execute(un,
                                                                                pwd, toEmailList, strcompanyname, msg);
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }


                                                } else {
                                                    //only recipient not there
                                                    final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                    dialoge.setContentView(R.layout.email_prerequisites);
                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                    dialoge.show();

                                                    ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            dialoge.dismiss();
                                                        }
                                                    });

                                                    ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                    ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                    ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                    ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                    recipient_notset.setVisibility(View.VISIBLE);

                                                    sender_set.setVisibility(View.VISIBLE);

                                                    Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                    gotosettings.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                            startActivity(intent);
//                                                getActivity().finish();
                                                            dialoge.dismiss();
                                                        }
                                                    });

                                                    Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                    gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                            startActivity(intent);
//                                                getActivity().finish();
                                                            dialoge.dismiss();
                                                        }
                                                    });


                                                }
                                            } else {
                                                Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                if (cursoree.moveToFirst()) {
                                                    //only sender not there
                                                    final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                    dialoge.setContentView(R.layout.email_prerequisites);
                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                    dialoge.show();

                                                    ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            dialoge.dismiss();
                                                        }
                                                    });

                                                    ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                    ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                    ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                    ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                    sender_notset.setVisibility(View.VISIBLE);

                                                    recipient_set.setVisibility(View.VISIBLE);

                                                    Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                    gotosettings.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                            startActivity(intent);
//                                                getActivity().finish();
                                                            dialoge.dismiss();
                                                        }
                                                    });

                                                    Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                    gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                            startActivity(intent);
//                                                getActivity().finish();
                                                            dialoge.dismiss();
                                                        }
                                                    });

                                                } else {
                                                    //both recipient and sender not there
                                                    final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                    dialoge.setContentView(R.layout.email_prerequisites);
                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                    dialoge.show();

                                                    ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            dialoge.dismiss();
                                                        }
                                                    });

                                                    ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                    ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                    ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                    ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                    recipient_notset.setVisibility(View.VISIBLE);
                                                    sender_notset.setVisibility(View.VISIBLE);

                                                    Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                    gotosettings.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                            startActivity(intent);
//                                                getActivity().finish();
                                                            dialoge.dismiss();
                                                        }
                                                    });

                                                    Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                    gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                            startActivity(intent);
//                                                getActivity().finish();
                                                            dialoge.dismiss();
                                                        }
                                                    });

                                                }
                                            }
                                        }
                                    }
                                }, 1000); //3000 L = 3 detik



                            }else {
                                if (statusnet.equals("ok")  || statusnet_counter.equals("ok") || statussusb.equals("ok")) {
                                    paneone.setVisibility(View.INVISIBLE);
                                    panetwo.setVisibility(View.GONE);
                                    panethree.setVisibility(View.INVISIBLE);
                                    mProgress1.show();
                                    String sql4 = "UPDATE All_Sales SET disc_indiv_total = new_modified_total WHERE bill_no = '" + billno.getText().toString() + "'";
                                    db1.execSQL(sql4);

                                    Cursor ccvv = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                    while (ccvv.moveToNext()){
                                        String id = ccvv.getString(0);
                                        String itemname = ccvv.getString(1);
                                        String quantity = ccvv.getString(2);
                                        String price = ccvv.getString(3);
                                        String total = ccvv.getString(4);
                                        String type = ccvv.getString(5);
                                        String parent = ccvv.getString(6);
                                        String parentid = ccvv.getString(7);
                                        String modassigned = ccvv.getString(8);
                                        String tax = ccvv.getString(9);
                                        String taxname = ccvv.getString(10);
                                        String billno1 = ccvv.getString(11);
                                        String time = ccvv.getString(12);
                                        String date = ccvv.getString(13);
                                        String user = ccvv.getString(14);
                                        String tableid = ccvv.getString(15);
                                        String billtype = ccvv.getString(16);
                                        String paymentmethod = ccvv.getString(17);
                                        String billamountdisapply = ccvv.getString(18);
                                        String billamountdisnotapply = ccvv.getString(19);
                                        String idd = ccvv.getString(20);
                                        String deletednot = ccvv.getString(21);
                                        String modifiedquan = ccvv.getString(22);
                                        String quancopy = ccvv.getString(23);
                                        String modifiedtotal = ccvv.getString(24);
                                        String date1 = ccvv.getString(25);
                                        String disc_type = ccvv.getString(27);
                                        String disc_value = ccvv.getString(28);
                                        String disc_newtotal = ccvv.getString(29);
                                        String disc_thereornot = ccvv.getString(30);
                                        String disc_indiv_total = ccvv.getString(31);
                                        String taxx2 = ccvv.getString(35);
                                        String taxx_v2 = ccvv.getString(36);
                                        String taxx3 = ccvv.getString(37);
                                        String taxx_v3 = ccvv.getString(38);
                                        String taxx4 = ccvv.getString(39);
                                        String taxx_v4 = ccvv.getString(40);
                                        String taxx5 = ccvv.getString(41);
                                        String taxx_v5 = ccvv.getString(42);
                                        String hsn_hsn = ccvv.getString(34);
                                        String old_total = ccvv.getString(50);
                                        String old_total_indiv = ccvv.getString(56);

                                        ContentValues contentValues = new ContentValues();
//                                contentValues.put("_id", id);
                                        contentValues.put("itemname", itemname);
                                        contentValues.put("quantity", modifiedquan);
                                        contentValues.put("price", price);
                                        contentValues.put("total", modifiedtotal);
                                        contentValues.put("type", type);
                                        contentValues.put("parent", parent);
                                        contentValues.put("parentid", parentid);
                                        contentValues.put("mod_assigned", modassigned);
                                        contentValues.put("tax", tax);
                                        contentValues.put("taxname", taxname);
                                        contentValues.put("bill_no", billno1);
                                        contentValues.put("time", time1);
                                        contentValues.put("date", currentDateandTime1);
                                        contentValues.put("user", username);
                                        contentValues.put("billtype", billtype);
                                        contentValues.put("paymentmethod", paymentmethod);
                                        //contentValues.put("billamount_disapply", billamountdisapply);
                                        contentValues.put("billamount_disapply", onlybilltotalold.getText().toString());
                                        contentValues.put("billamount_disnotapply", String.valueOf(Float.parseFloat(onlybillold.getText().toString()) + Float.parseFloat(onlybilltaxold.getText().toString())));
                                        contentValues.put("_idd", idd);
                                        contentValues.put("date1", normal1);
                                        contentValues.put("billamount_cancelled", "");
                                        contentValues.put("billamount_cancelled_user", onlybilltotalcancel.getText().toString());
                                        contentValues.put("disc_type", disc_type);
                                        contentValues.put("disc_value", disc_value);
                                        contentValues.put("newtotal", disc_newtotal);
                                        contentValues.put("disc_thereornot", disc_thereornot);
                                        contentValues.put("disc_indiv_total", disc_indiv_total);
                                        contentValues.put("taxname2", taxx2);
                                        contentValues.put("tax2", taxx_v2);
                                        contentValues.put("taxname3", taxx3);
                                        contentValues.put("tax3", taxx_v3);
                                        contentValues.put("taxname4", taxx4);
                                        contentValues.put("tax4", taxx_v4);
                                        contentValues.put("taxname5", taxx5);
                                        contentValues.put("tax5", taxx_v5);
                                        contentValues.put("hsn_code", hsn_hsn);

                                        if (radioBtncash.getText().toString().equals("Other")){
                                            contentValues.put("reason", editText.getText().toString());
                                        }else {
                                            contentValues.put("reason", radioBtncash.getText().toString());
                                        }
                                        contentValues.put("datetimee_new", time24_new);
                                        contentValues.put("old_total", old_total);
                                        contentValues.put("old_total_indiv", old_total_indiv);


                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                        resultUri = getContentResolver().insert(contentUri, contentValues);
                                        getContentResolver().notifyChange(resultUri, null);



                                        //      db1.insert("All_Sales_Cancelled", null, contentValues);

                                    }

                                    Cursor item_ret = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                    if (item_ret.moveToFirst()) {
                                        do {
                                            String modifiedquan = item_ret.getString(22);
                                            String itemname = item_ret.getString(1);

                                            Cursor item = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+itemname+"'", null);
                                            if (item.moveToFirst()){
                                                String id = item.getString(0);
                                                String qu = item.getString(3);

                                                float up_qu = Float.parseFloat(qu)+Float.parseFloat(modifiedquan);
                                                ContentValues co = new ContentValues();
                                                co.put("stockquan", String.format("%.0f", up_qu));
                                                String wherecu = "_id = '" + id + "'";

                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                getContentResolver().update(contentUri, co,wherecu,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProviderApp.AUTHORITY)
                                                        .path("Items")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",id)
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);
                                            }

                                        }while (item_ret.moveToNext());
                                    }

                                    Cursor ccvvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                    if (ccvvv11.moveToFirst()) {
                                        do {
                                            String id = ccvvv11.getString(0);
                                            String newquan = ccvvv11.getString(23);
                                            String newtotal = ccvvv11.getString(24);
                                            String tt = ccvvv11.getString(2);
                                            String ttt = ccvvv11.getString(3);
                                            float tr = Float.parseFloat(tt)*Float.parseFloat(ttt);
                                            String trr = String.format("%.2f", tr);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("quantity", newquan);
                                            contentValues.put("total", trr);

                                            String where = "_id = '" + id + "' ";


//                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                    resultUri = new Uri.Builder()
//                                            .scheme("content")
//                                            .authority(StubProvider.AUTHORITY)
//                                            .path("All_sales")
//                                            .appendQueryParameter("operation", "update")
//                                            .appendQueryParameter("_id",id)
//                                            .build();
//                                    getContentResolver().notifyChange(resultUri, null);


                                            db1.update("All_sales", contentValues, where, new String[]{});
                                            webservicequery_sales("UPDATE all_sales set quantity = '"+newquan+"', total = '"+trr+"' WHERE _id = '"+id+"'");
                                            System.out.println("items cancel "+newquan+" total "+trr+" _id "+id);

                                        } while (ccvvv11.moveToNext());
                                    }
//                            while (ccvvv11.moveToNext()){
//
//                            }

                                    Cursor ccvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'decrease' ", null);
                                    if (ccvv11.moveToFirst()) {
                                        do {
                                            String id = ccvv11.getString(0);
                                            String newquan = ccvv11.getString(23);
                                            String newtotal = ccvv11.getString(24);
                                            String tt = ccvv11.getString(2);
                                            String ttt = ccvv11.getString(3);
                                            float tr = Float.parseFloat(tt)*Float.parseFloat(ttt);
                                            String trr = String.format("%.2f", tr);
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("quantity", newquan);
                                            contentValues.put("total", trr);

                                            String where = "_id = '" + id + "' ";


//                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                    resultUri = new Uri.Builder()
//                                            .scheme("content")
//                                            .authority(StubProvider.AUTHORITY)
//                                            .path("All_sales")
//                                            .appendQueryParameter("operation", "update")
//                                            .appendQueryParameter("_id",id)
//                                            .build();
//                                    getContentResolver().notifyChange(resultUri, null);



                                            db1.update("All_sales", contentValues, where, new String[]{});
                                            webservicequery_sales("UPDATE all_sales set quantity = '"+newquan+"', total = '"+trr+"' WHERE _id = '"+id+"'");

                                        }while (ccvv11.moveToNext());
                                    }

                                    Cursor ccvv1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                    if (ccvv1.moveToFirst()){
                                        do {
                                            String modifiedquan = ccvv1.getString(22);
                                            String itemname = ccvv1.getString(1);

                                            Cursor ing_r = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + itemname + "'", null);
                                            if (ing_r.moveToFirst()) {
                                                do {
                                                    String ingid_r = ing_r.getString(0);
                                                    String ingname_r = ing_r.getString(1);
                                                    String ingcurr_stoc = ing_r.getString(4);
                                                    TextView v121 = new TextView(CancelActivity.this);
                                                    v121.setText(ingcurr_stoc);
                                                    if (v121.getText().toString().equals("")) {
                                                        v121.setText("0");
                                                    }

                                                    String id_r = ing_r.getString(0);
                                                    String quan_used_r = ing_r.getString(3);
                                                    String pres_quan_r = ing_r.getString(4);
                                                    TextView v12 = new TextView(CancelActivity.this);
                                                    v12.setText(quan_used_r);
                                                    TextView v13 = new TextView(CancelActivity.this);
                                                    v13.setText(pres_quan_r);
                                                    if (v12.getText().toString().equals("")) {
                                                        v12.setText("0");
                                                    }
                                                    if (v13.getText().toString().equals("")) {
                                                        v13.setText("0");
                                                    }
                                                    float a = (Float.parseFloat(v12.getText().toString())) * (Float.parseFloat(modifiedquan));
                                                    float a1 = a + Float.parseFloat(v121.getText().toString());
                                                    float a2 = a + Float.parseFloat(v13.getText().toString());

//                                            Toast.makeText(CancelActivity.this, "current quna for " + ingname_r + " is " + a, Toast.LENGTH_SHORT).show();
                                                    ContentValues co = new ContentValues();
                                                    co.put("currnet_stock", String.format("%.2f", a1));
                                                    String wherecu = "_id = '" + ingid_r + "'";

                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                                    getContentResolver().update(contentUri, co,wherecu,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Ingredient_items_list")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id",ingid_r)
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);



                                                    //       db.update("Ingredient_items_list", co, wherecu, new String[]{});

                                                    Cursor ing_r111 = db.rawQuery("SELECT * FROM Ingredients WHERE ingredient_name = '"+ingname_r+"'", null);
                                                    if (ing_r111.moveToFirst()) {
                                                        do {
                                                            String id_r1 = ing_r111.getString(0);
                                                            ContentValues co1 = new ContentValues();
                                                            co1.put("current_stock", String.format("%.2f", a1));
                                                            String wherecu1 = "_id = '" + id_r1 + "'";


                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients");
                                                            getContentResolver().update(contentUri, co1,wherecu1,new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Ingredients")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id",id_r1)
                                                                    .build();
                                                            getContentResolver().notifyChange(resultUri, null);


                                                            //        db.update("Ingredients", co1, wherecu1, new String[]{});
                                                        }while (ing_r111.moveToNext());
                                                    }
                                                } while (ing_r.moveToNext());
                                            }
                                        }while (ccvv1.moveToNext());
                                    }

                                    Cursor checks = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                    if (checks.moveToFirst()){
                                        do {
                                            String disc_typea = checks.getString(24);
                                            String disc_valuea = checks.getString(25);
                                            String disc_newtotala = checks.getString(26);
                                            String disc_thereornota = checks.getString(27);
                                            String disc_indiv_totoala = checks.getString(28);
                                            String idid = checks.getString(0);
                                            String originaltotal = checks.getString(4);
                                            String quan = checks.getString(2);
                                            TextView xc = new TextView(CancelActivity.this);
                                            xc.setText(disc_thereornota);

                                            if (xc.getText().toString().equals("yes")) {
                                                if (disc_typea.toString().equals("%")) {
                                                    //Toast.makeText(CancelActivity.this, "variable", Toast.LENGTH_SHORT).show();

                                                    //Toast.makeText(CancelActivity.this, "not empty 1 " + disc_var_edittext1.getText().toString(), Toast.LENGTH_SHORT).show();

                                                    float vt = Float.parseFloat(originaltotal.toString())/100 * Float.parseFloat(disc_valuea.toString());
                                                    String vbn = String.format("%.2f", vt);
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("disc_indiv_total", vbn);
                                                    String where = "_id = '" + idid + "' ";


                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("All_Sales_Cancelled")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id",idid)
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);




                                                    //       db1.update("All_Sales_Cancelled", contentValues, where, new String[]{});

                                                }else {
                                                    //Toast.makeText(CancelActivity.this, "fixed", Toast.LENGTH_SHORT).show();

                                                    float vt = Float.parseFloat(quan) *Float.parseFloat(disc_valuea);
                                                    String vbn = String.format("%.2f", vt);
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("disc_indiv_total", vbn);
                                                    String where = "_id = '" + idid + "' ";


                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("All_Sales_Cancelled")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id",idid)
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);



                                                    //     db1.update("All_Sales_Cancelled", contentValues, where, new String[]{});
                                                }
                                            }
                                        } while (checks.moveToNext());
                                    }



                                    Cursor check = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                    if (check.moveToFirst()){
                                        String can_amo = check.getString(21);
                                        if (can_amo.toString().equals("")){

                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("billamount_cancelled", onlybilltotalcancel.getText().toString());

                                            String where1 = "bill_no = '" + billno.getText().toString() + "'";


                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                            getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_Sales_Cancelled")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);


                                            //   db1.update("All_Sales_Cancelled", contentValues, where1, new String[]{});
                                        }else {
                                            float nn = Float.parseFloat(can_amo)+Float.parseFloat(onlybilltotalcancel.getText().toString());
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("billamount_cancelled", String.valueOf(nn));

                                            String where1 = "bill_no = '" + billno.getText().toString() + "'";

                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                            getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_Sales_Cancelled")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);



                                            //     db1.update("All_Sales_Cancelled", contentValues, where1, new String[]{});
                                        }

                                    }


                                    Cursor refu = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                    if (refu.moveToFirst()){
                                        do {
                                            String reu = refu.getString(0);
                                            String pre_amo = refu.getString(5);
                                            Cursor sum = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                            if (sum.moveToFirst()){
                                                ref_cu = sum.getFloat(0);
                                            }
                                            float c = Float.parseFloat(pre_amo) - ref_cu;
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("refunds", String.valueOf(ref_cu));
                                            contentValues.put("total_amount", String.valueOf(c));
                                            String where = "_id = '" + reu + "' ";


                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Customerdetails");
                                            getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("Customerdetails")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",reu)
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);



                                            //      db1.update("Customerdetails", contentValues, where, new String[]{});
                                        }while (refu.moveToNext());
                                    }

                                    Cursor refu1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                    if (refu1.moveToFirst()){
                                        do {
                                            String reu = refu1.getString(0);
                                            String cre_v1 = refu1.getString(13);
                                            String ref_v1 = refu1.getString(18);
                                            TextView vbg = new TextView(CancelActivity.this);
                                            vbg.setText(cre_v1);
                                            if (vbg.getText().toString().equals("") || vbg.getText().toString().equals("0") || vbg.getText().toString().equals("0.0")){

                                            }else {
                                                float one = Float.parseFloat(cre_v1) - Float.parseFloat(ref_v1);
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("credit", String.valueOf(one));
                                                String where = "_id = '" + reu + "' ";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Customerdetails");
                                                getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("Customerdetails")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",reu)
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);


                                                ///        db1.update("Customerdetails", contentValues, where, new String[]{});
                                            }
                                        }while (refu1.moveToNext());
                                    }

                                    Cursor ccvvr1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'delete' ", null);
                                    while (ccvvr1.moveToNext()){
                                        String id = ccvvr1.getString(0);

                                        String where = "_id = '" + id + "' ";


                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales");
                                        getContentResolver().delete(contentUri, where, new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("All_Sales")
                                                .appendQueryParameter("operation", "delete")
                                                .appendQueryParameter("_id", id)
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);



                                        //       db1.delete("All_Sales", where, new String[]{});
                                    }


//                            String sql = "UPDATE All_Sales SET disc_indiv_total = new_modified_total WHERE bill_no = '" + billno.getText().toString() + "'";
//                            db1.execSQL(sql);

//                            String sql = "UPDATE All_Sales SET new_modified_total = disc_indiv_total WHERE bill_no = '" + billno.getText().toString() + "'";
//                            db1.execSQL(sql);



                                    ///////////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_LONG).show();

                                    Cursor ccvv2 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                    ///////////////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_LONG).show();
                                    while (ccvv2.moveToNext()){
                                        String id = ccvv2.getString(0);
                                        String itemname = ccvv2.getString(1);
                                        String idd = ccvv2.getString(20);
                                        ///////////////Toast.makeText(CancelActivity.this, "3", Toast.LENGTH_LONG).show();

                                        Cursor ccvv3 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '"+itemname+"' AND parentid = '"+idd+"' ", null);
                                        if (ccvv3.moveToFirst()){
                                            do {
                                                //ContentValues contentValues = new ContentValues();
                                                //contentValues.put("mod_assigned", "no");
                                                ///////////////Toast.makeText(CancelActivity.this, "set maod_assigned as yes where id "+id+" itemname "+itemname, Toast.LENGTH_LONG).show();
                                            }while (ccvv3.moveToNext());
                                        }else {
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("mod_assigned", "no");
                                            String where1 = "_id = '" + id + "' AND type = 'Item' ";



                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                            getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_sales")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",id)
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);


                                            //      db1.update("All_sales", contentValues, where1, new String[]{});

                                            // /////////////Toast.makeText(CancelActivity.this, "set maod_assigned as no where id "+id+" itemname "+itemname, Toast.LENGTH_LONG).show();
                                        }

                                    }

                                    Cursor billnumber = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                    if (billnumber.moveToFirst()){
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("total", onlybilltotalnew.getText().toString());
                                        contentValues.put("subtotal", onlybillnew.getText().toString());
                                        contentValues.put("taxtotal", onlybilltaxnew.getText().toString());
                                        contentValues.put("roundoff", onlybillroundoffnew.getText().toString());
                                        String where1 = "billnumber = '" + billno.getText().toString() + "' ";

//                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Billnumber");
//                                getContentResolver().update(contentUri, contentValues,where1,new String[]{});
//                                resultUri = new Uri.Builder()
//                                        .scheme("content")
//                                        .authority(StubProvider.AUTHORITY)
//                                        .path("Billnumber")
//                                        .appendQueryParameter("operation", "update")
//                                        .appendQueryParameter("billnumber",billno.getText().toString())
//                                        .build();
//                                getContentResolver().notifyChange(resultUri, null);



                                        db1.update("Billnumber", contentValues, where1, new String[]{});
                                        webservicequery_sales("UPDATE Billnumber set total = '"+onlybilltotalnew.getText().toString()+"', subtotal = '"+onlybillnew.getText().toString()+"', taxtotal = '"+onlybilltaxnew.getText().toString()+"', roundoff = '"+onlybillroundoffnew.getText().toString()+"' WHERE billnumber = '"+billno.getText().toString()+"'");
                                    }

                                    Cursor discount = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billno.getText().toString()+"'", null);
                                    if (discount.moveToFirst()){
                                        float rou = Float.parseFloat(onlybilldiscountnew.getText().toString());
                                        String rou1 = String.format("%.2f", rou);
                                        float oa = Float.parseFloat(onlybilltotalnew.getText().toString())+Float.parseFloat(onlybilldiscountnew.getText().toString());
                                        ContentValues contentValues = new ContentValues();
                                        contentValues.put("Billamount_rupess", onlybilltotalnew.getText().toString());
                                        contentValues.put("Discount_rupees", rou1);
                                        contentValues.put("original_amount", String.valueOf(oa));
                                        String where1 = "billno = '" + billno.getText().toString() + "' ";



                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Discountdetails");
                                        getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("Discountdetails")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("billno",billno.getText().toString())
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);



                                        //   db1.update("Discountdetails", contentValues, where1, new String[]{});
                                    }

                                    printreturncopy(dialog);

                                    final Handler handler = new Handler();
                                    handler.postDelayed(new Runnable() {
                                        @Override
                                        public void run() {
                                            mProgress1.dismiss();

                                            final Dialog dialog1 = new Dialog(CancelActivity.this, R.style.notitle);
                                            dialog1.setContentView(R.layout.dialog_refund_confirmation);
                                            dialog1.show();

                                            TextView inn = (TextView) dialog1.findViewById(R.id.inn);
                                            inn.setText(insert1_cc);

                                            refundamout = (TextView)dialog1.findViewById(R.id.refund_value);
                                            refundamout.setText(onlybilltotalcancel.getText().toString());

                                            Button gotohome = (Button)dialog1.findViewById(R.id.gohome);
                                            gotohome.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    dialog1.dismiss();
                                                    //Intent intent = new Intent(CancelActivity.this, LoginActivity.class);
                                                    //startActivity(intent);
                                                    finish();
                                                }
                                            });

                                            Button gotomail= (Button)dialog1.findViewById(R.id.gomail);
                                            gotomail.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    //dialog1.dismiss();
                                                    //Intent intent = new Intent(CancelActivity.this, LoginActivity.class);
                                                    //startActivity(intent);
                                                    email1(dialog1);
                                                }
                                            });




                                            String bill_reason = "";
                                            if (radioBtncash.getText().toString().equals("Other")){
                                                bill_reason = editText.getText().toString();
                                            }else {
                                                bill_reason = radioBtncash.getText().toString();
                                            }

                                            if (onlybilltotalnew.getText().toString().equals("")){
                                                onlybilltotalnew.setText("0");
                                            }
                                            if (onlybilltotalcancel.getText().toString().equals("")){
                                                onlybilltotalcancel.setText("0");
                                            }


                                            float gb = Float.parseFloat(onlybilltotalnew.getText().toString())+Float.parseFloat(onlybilltotalcancel.getText().toString());
                                            String gb1 = String.valueOf(gb);

                                            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
                                            if (getcom.moveToFirst()) {
                                                do {
                                                    strcompanyname = getcom.getString(1);
                                                } while (getcom.moveToNext());
                                            }else {
                                                strcompanyname = "";
                                            }


                                            Cursor cursor5 = db.rawQuery("SELECT * FROM Email_setup", null);
                                            if (cursor5.moveToFirst()) {
                                                String un2 = cursor5.getString(1);
                                                String pwd2 = cursor5.getString(2);
                                                String em_ca2 = cursor5.getString(3);

                                                String toEmails2 = un2;
                                                toEmailList = Arrays.asList(toEmails2
                                                        .split("\\s*,\\s*"));

                                                String msg = "Returns/Refunds" +
                                                        "\n"+normal1 +","+ time1+
                                                        "\nBill no: "+billno.getText().toString()+
                                                        "\n"+"Bill amount: "+gb1+
                                                        "\n"+"Refunded: "+onlybilltotalcancel.getText().toString()+
                                                        "\nUser: "+username+
                                                        "\nResason: "+bill_reason;



                                                Cursor cursore = db.rawQuery("SELECT * FROM Email_setup", null);
                                                if (cursore.moveToFirst()){
                                                    Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                    if (cursoree.moveToFirst()){
                                                        //both are there

                                                        Cursor cursor = db.rawQuery("SELECT * FROM Email_setup", null);
                                                        if (cursor.moveToFirst()) {
                                                            String un = cursor.getString(1);
                                                            String pwd = cursor.getString(2);
                                                            String client = cursor.getString(3);


                                                            Cursor cursor11 = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                            if (cursor11.moveToFirst()) {
                                                                do {
                                                                    String unn = cursor11.getString(3);
                                                                    String toEmails = unn;
                                                                    toEmailList = Arrays.asList(toEmails
                                                                            .split("\\s*,\\s*"));
                                                                } while (cursor11.moveToNext());
                                                            }


                                                            if (client.toString().equals("Gmail")) {
                                                                getResultsFromApi();
                                                                new MakeRequestTask(mCredential).execute();
//                                                        new SendMailTask(Customer_Info_Activity.this).execute(un,
//                                                                pwd, toEmailList, strcompanyname, msg);
                                                            }else {
                                                                if (client.toString().equals("Yahoo")) {
//                                                            Toast.makeText(Customer_Info_Activity.this, "Yahoo", Toast.LENGTH_LONG).show();
                                                                    new SendMailTask_Yahoo(CancelActivity.this).execute(un,
                                                                            pwd, toEmailList, strcompanyname, msg);
                                                                }else {
                                                                    if (client.toString().equals("Hotmail")) {
//                                                                Toast.makeText(Customer_Info_Activity.this, "Hotmail", Toast.LENGTH_LONG).show();
                                                                        new SendMailTask_Hotmail(CancelActivity.this).execute(un,
                                                                                pwd, toEmailList, strcompanyname, msg);
                                                                    }else {
                                                                        if (client.toString().equals("Office365")) {
//                                                                    Toast.makeText(Customer_Info_Activity.this, "Outlook", Toast.LENGTH_LONG).show();
                                                                            new SendMailTask_Outlook(CancelActivity.this).execute(un,
                                                                                    pwd, toEmailList, strcompanyname, msg);
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }


                                                    }else {
                                                        //only recipient not there
                                                        final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                        dialoge.setContentView(R.layout.email_prerequisites);
                                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                        dialoge.show();

                                                        ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                dialoge.dismiss();
                                                            }
                                                        });

                                                        ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                        ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                        ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                        ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                        recipient_notset.setVisibility(View.VISIBLE);

                                                        sender_set.setVisibility(View.VISIBLE);

                                                        Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                        gotosettings.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                startActivity(intent);
//                                                getActivity().finish();
                                                                dialoge.dismiss();
                                                            }
                                                        });

                                                        Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                        gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                startActivity(intent);
//                                                getActivity().finish();
                                                                dialoge.dismiss();
                                                            }
                                                        });


                                                    }
                                                }else {
                                                    Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                    if (cursoree.moveToFirst()){
                                                        //only sender not there
                                                        final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                        dialoge.setContentView(R.layout.email_prerequisites);
                                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                        dialoge.show();

                                                        ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                dialoge.dismiss();
                                                            }
                                                        });

                                                        ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                        ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                        ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                        ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                        sender_notset.setVisibility(View.VISIBLE);

                                                        recipient_set.setVisibility(View.VISIBLE);

                                                        Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                        gotosettings.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                startActivity(intent);
//                                                getActivity().finish();
                                                                dialoge.dismiss();
                                                            }
                                                        });

                                                        Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                        gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                startActivity(intent);
//                                                getActivity().finish();
                                                                dialoge.dismiss();
                                                            }
                                                        });

                                                    }else {
                                                        //both recipient and sender not there
                                                        final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                        dialoge.setContentView(R.layout.email_prerequisites);
                                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                        dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                        dialoge.show();

                                                        ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                        btncancel.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                dialoge.dismiss();
                                                            }
                                                        });

                                                        ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                        ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                        ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                        ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                        recipient_notset.setVisibility(View.VISIBLE);
                                                        sender_notset.setVisibility(View.VISIBLE);

                                                        Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                        gotosettings.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                startActivity(intent);
//                                                getActivity().finish();
                                                                dialoge.dismiss();
                                                            }
                                                        });

                                                        Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                        gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                startActivity(intent);
//                                                getActivity().finish();
                                                                dialoge.dismiss();
                                                            }
                                                        });

                                                    }
                                                }

                                            }

                                        }
                                    }, 1000); //3000 L = 3 detik









                                }else {

                                    String printer_type="";
                                    Cursor aallrows = db.rawQuery("SELECT * FROM Printer_type WHERE _id = '1'", null);
                                    if (aallrows.moveToFirst()) {
                                        do {
                                            printer_type = aallrows.getString(1);

                                        } while (aallrows.moveToNext());
                                    }
                                    aallrows.close();

                                    if(printer_type.equalsIgnoreCase("wiseposplus")) {

                                        paneone.setVisibility(View.INVISIBLE);
                                        panetwo.setVisibility(View.GONE);
                                        panethree.setVisibility(View.INVISIBLE);
                                        mProgress1.show();
                                        String sql4 = "UPDATE All_Sales SET disc_indiv_total = new_modified_total WHERE bill_no = '" + billno.getText().toString() + "'";
                                        db1.execSQL(sql4);

                                        Cursor ccvv = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                        while (ccvv.moveToNext()){
                                            String id = ccvv.getString(0);
                                            String itemname = ccvv.getString(1);
                                            String quantity = ccvv.getString(2);
                                            String price = ccvv.getString(3);
                                            String total = ccvv.getString(4);
                                            String type = ccvv.getString(5);
                                            String parent = ccvv.getString(6);
                                            String parentid = ccvv.getString(7);
                                            String modassigned = ccvv.getString(8);
                                            String tax = ccvv.getString(9);
                                            String taxname = ccvv.getString(10);
                                            String billno1 = ccvv.getString(11);
                                            String time = ccvv.getString(12);
                                            String date = ccvv.getString(13);
                                            String user = ccvv.getString(14);
                                            String tableid = ccvv.getString(15);
                                            String billtype = ccvv.getString(16);
                                            String paymentmethod = ccvv.getString(17);
                                            String billamountdisapply = ccvv.getString(18);
                                            String billamountdisnotapply = ccvv.getString(19);
                                            String idd = ccvv.getString(20);
                                            String deletednot = ccvv.getString(21);
                                            String modifiedquan = ccvv.getString(22);
                                            String quancopy = ccvv.getString(23);
                                            String modifiedtotal = ccvv.getString(24);
                                            String date1 = ccvv.getString(25);
                                            String disc_type = ccvv.getString(27);
                                            String disc_value = ccvv.getString(28);
                                            String disc_newtotal = ccvv.getString(29);
                                            String disc_thereornot = ccvv.getString(30);
                                            String disc_indiv_total = ccvv.getString(31);
                                            String taxx2 = ccvv.getString(35);
                                            String taxx_v2 = ccvv.getString(36);
                                            String taxx3 = ccvv.getString(37);
                                            String taxx_v3 = ccvv.getString(38);
                                            String taxx4 = ccvv.getString(39);
                                            String taxx_v4 = ccvv.getString(40);
                                            String taxx5 = ccvv.getString(41);
                                            String taxx_v5 = ccvv.getString(42);
                                            String hsn_hsn = ccvv.getString(34);
                                            String old_total = ccvv.getString(50);
                                            String old_total_indiv = ccvv.getString(56);

                                            ContentValues contentValues = new ContentValues();
//                                contentValues.put("_id", id);
                                            contentValues.put("itemname", itemname);
                                            contentValues.put("quantity", modifiedquan);
                                            contentValues.put("price", price);
                                            contentValues.put("total", modifiedtotal);
                                            contentValues.put("type", type);
                                            contentValues.put("parent", parent);
                                            contentValues.put("parentid", parentid);
                                            contentValues.put("mod_assigned", modassigned);
                                            contentValues.put("tax", tax);
                                            contentValues.put("taxname", taxname);
                                            contentValues.put("bill_no", billno1);
                                            contentValues.put("time", time1);
                                            contentValues.put("date", currentDateandTime1);
                                            contentValues.put("user", username);
                                            contentValues.put("billtype", billtype);
                                            contentValues.put("paymentmethod", paymentmethod);
                                            //contentValues.put("billamount_disapply", billamountdisapply);
                                            contentValues.put("billamount_disapply", onlybilltotalold.getText().toString());
                                            contentValues.put("billamount_disnotapply", String.valueOf(Float.parseFloat(onlybillold.getText().toString()) + Float.parseFloat(onlybilltaxold.getText().toString())));
                                            contentValues.put("_idd", idd);
                                            contentValues.put("date1", normal1);
                                            contentValues.put("billamount_cancelled", "");
                                            contentValues.put("billamount_cancelled_user", onlybilltotalcancel.getText().toString());
                                            contentValues.put("disc_type", disc_type);
                                            contentValues.put("disc_value", disc_value);
                                            contentValues.put("newtotal", disc_newtotal);
                                            contentValues.put("disc_thereornot", disc_thereornot);
                                            contentValues.put("disc_indiv_total", disc_indiv_total);
                                            contentValues.put("taxname2", taxx2);
                                            contentValues.put("tax2", taxx_v2);
                                            contentValues.put("taxname3", taxx3);
                                            contentValues.put("tax3", taxx_v3);
                                            contentValues.put("taxname4", taxx4);
                                            contentValues.put("tax4", taxx_v4);
                                            contentValues.put("taxname5", taxx5);
                                            contentValues.put("tax5", taxx_v5);
                                            contentValues.put("hsn_code", hsn_hsn);

                                            if (radioBtncash.getText().toString().equals("Other")){
                                                contentValues.put("reason", editText.getText().toString());
                                            }else {
                                                contentValues.put("reason", radioBtncash.getText().toString());
                                            }
                                            contentValues.put("datetimee_new", time24_new);
                                            contentValues.put("old_total", old_total);
                                            contentValues.put("old_total_indiv", old_total_indiv);


                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                            resultUri = getContentResolver().insert(contentUri, contentValues);
                                            getContentResolver().notifyChange(resultUri, null);



                                            //      db1.insert("All_Sales_Cancelled", null, contentValues);

                                        }

                                        Cursor item_ret = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                        if (item_ret.moveToFirst()) {
                                            do {
                                                String modifiedquan = item_ret.getString(22);
                                                String itemname = item_ret.getString(1);

                                                Cursor item = db.rawQuery("SELECT * FROM Items WHERE itemname = '"+itemname+"'", null);
                                                if (item.moveToFirst()){
                                                    String id = item.getString(0);
                                                    String qu = item.getString(3);

                                                    float up_qu = Float.parseFloat(qu)+Float.parseFloat(modifiedquan);
                                                    ContentValues co = new ContentValues();
                                                    co.put("stockquan", String.format("%.0f", up_qu));
                                                    String wherecu = "_id = '" + id + "'";

                                                    contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                    getContentResolver().update(contentUri, co,wherecu,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProviderApp.AUTHORITY)
                                                            .path("Items")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id",id)
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);
                                                }

                                            }while (item_ret.moveToNext());
                                        }

                                        Cursor ccvvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                        if (ccvvv11.moveToFirst()) {
                                            do {
                                                String id = ccvvv11.getString(0);
                                                String newquan = ccvvv11.getString(23);
                                                String newtotal = ccvvv11.getString(24);
                                                String tt = ccvvv11.getString(2);
                                                String ttt = ccvvv11.getString(3);
                                                float tr = Float.parseFloat(tt)*Float.parseFloat(ttt);
                                                String trr = String.format("%.2f", tr);
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("quantity", newquan);
                                                contentValues.put("total", trr);

                                                String where = "_id = '" + id + "' ";


//                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                    resultUri = new Uri.Builder()
//                                            .scheme("content")
//                                            .authority(StubProvider.AUTHORITY)
//                                            .path("All_sales")
//                                            .appendQueryParameter("operation", "update")
//                                            .appendQueryParameter("_id",id)
//                                            .build();
//                                    getContentResolver().notifyChange(resultUri, null);


                                                db1.update("All_sales", contentValues, where, new String[]{});
                                                webservicequery_sales("UPDATE all_sales set quantity = '"+newquan+"', total = '"+trr+"' WHERE _id = '"+id+"'");
                                                System.out.println("items cancel "+newquan+" total "+trr+" _id "+id);

                                            } while (ccvvv11.moveToNext());
                                        }
//                            while (ccvvv11.moveToNext()){
//
//                            }

                                        Cursor ccvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'decrease' ", null);
                                        if (ccvv11.moveToFirst()) {
                                            do {
                                                String id = ccvv11.getString(0);
                                                String newquan = ccvv11.getString(23);
                                                String newtotal = ccvv11.getString(24);
                                                String tt = ccvv11.getString(2);
                                                String ttt = ccvv11.getString(3);
                                                float tr = Float.parseFloat(tt)*Float.parseFloat(ttt);
                                                String trr = String.format("%.2f", tr);
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("quantity", newquan);
                                                contentValues.put("total", trr);

                                                String where = "_id = '" + id + "' ";


//                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                    resultUri = new Uri.Builder()
//                                            .scheme("content")
//                                            .authority(StubProvider.AUTHORITY)
//                                            .path("All_sales")
//                                            .appendQueryParameter("operation", "update")
//                                            .appendQueryParameter("_id",id)
//                                            .build();
//                                    getContentResolver().notifyChange(resultUri, null);



                                                db1.update("All_sales", contentValues, where, new String[]{});
                                                webservicequery_sales("UPDATE all_sales set quantity = '"+newquan+"', total = '"+trr+"' WHERE _id = '"+id+"'");

                                            }while (ccvv11.moveToNext());
                                        }

                                        Cursor ccvv1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                        if (ccvv1.moveToFirst()){
                                            do {
                                                String modifiedquan = ccvv1.getString(22);
                                                String itemname = ccvv1.getString(1);

                                                Cursor ing_r = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + itemname + "'", null);
                                                if (ing_r.moveToFirst()) {
                                                    do {
                                                        String ingid_r = ing_r.getString(0);
                                                        String ingname_r = ing_r.getString(1);
                                                        String ingcurr_stoc = ing_r.getString(4);
                                                        TextView v121 = new TextView(CancelActivity.this);
                                                        v121.setText(ingcurr_stoc);
                                                        if (v121.getText().toString().equals("")) {
                                                            v121.setText("0");
                                                        }

                                                        String id_r = ing_r.getString(0);
                                                        String quan_used_r = ing_r.getString(3);
                                                        String pres_quan_r = ing_r.getString(4);
                                                        TextView v12 = new TextView(CancelActivity.this);
                                                        v12.setText(quan_used_r);
                                                        TextView v13 = new TextView(CancelActivity.this);
                                                        v13.setText(pres_quan_r);
                                                        if (v12.getText().toString().equals("")) {
                                                            v12.setText("0");
                                                        }
                                                        if (v13.getText().toString().equals("")) {
                                                            v13.setText("0");
                                                        }
                                                        float a = (Float.parseFloat(v12.getText().toString())) * (Float.parseFloat(modifiedquan));
                                                        float a1 = a + Float.parseFloat(v121.getText().toString());
                                                        float a2 = a + Float.parseFloat(v13.getText().toString());

//                                            Toast.makeText(CancelActivity.this, "current quna for " + ingname_r + " is " + a, Toast.LENGTH_SHORT).show();
                                                        ContentValues co = new ContentValues();
                                                        co.put("currnet_stock", String.format("%.2f", a1));
                                                        String wherecu = "_id = '" + ingid_r + "'";

                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                                        getContentResolver().update(contentUri, co,wherecu,new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProviderApp.AUTHORITY)
                                                                .path("Ingredient_items_list")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id",ingid_r)
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);



                                                        //       db.update("Ingredient_items_list", co, wherecu, new String[]{});

                                                        Cursor ing_r111 = db.rawQuery("SELECT * FROM Ingredients WHERE ingredient_name = '"+ingname_r+"'", null);
                                                        if (ing_r111.moveToFirst()) {
                                                            do {
                                                                String id_r1 = ing_r111.getString(0);
                                                                ContentValues co1 = new ContentValues();
                                                                co1.put("current_stock", String.format("%.2f", a1));
                                                                String wherecu1 = "_id = '" + id_r1 + "'";


                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients");
                                                                getContentResolver().update(contentUri, co1,wherecu1,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Ingredients")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",id_r1)
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);


                                                                //        db.update("Ingredients", co1, wherecu1, new String[]{});
                                                            }while (ing_r111.moveToNext());
                                                        }
                                                    } while (ing_r.moveToNext());
                                                }
                                            }while (ccvv1.moveToNext());
                                        }

                                        Cursor checks = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                        if (checks.moveToFirst()){
                                            do {
                                                String disc_typea = checks.getString(24);
                                                String disc_valuea = checks.getString(25);
                                                String disc_newtotala = checks.getString(26);
                                                String disc_thereornota = checks.getString(27);
                                                String disc_indiv_totoala = checks.getString(28);
                                                String idid = checks.getString(0);
                                                String originaltotal = checks.getString(4);
                                                String quan = checks.getString(2);
                                                TextView xc = new TextView(CancelActivity.this);
                                                xc.setText(disc_thereornota);

                                                if (xc.getText().toString().equals("yes")) {
                                                    if (disc_typea.toString().equals("%")) {
                                                        //Toast.makeText(CancelActivity.this, "variable", Toast.LENGTH_SHORT).show();

                                                        //Toast.makeText(CancelActivity.this, "not empty 1 " + disc_var_edittext1.getText().toString(), Toast.LENGTH_SHORT).show();

                                                        float vt = Float.parseFloat(originaltotal.toString())/100 * Float.parseFloat(disc_valuea.toString());
                                                        String vbn = String.format("%.2f", vt);
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("disc_indiv_total", vbn);
                                                        String where = "_id = '" + idid + "' ";


                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                        getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProvider.AUTHORITY)
                                                                .path("All_Sales_Cancelled")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id",idid)
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);




                                                        //       db1.update("All_Sales_Cancelled", contentValues, where, new String[]{});

                                                    }else {
                                                        //Toast.makeText(CancelActivity.this, "fixed", Toast.LENGTH_SHORT).show();

                                                        float vt = Float.parseFloat(quan) *Float.parseFloat(disc_valuea);
                                                        String vbn = String.format("%.2f", vt);
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("disc_indiv_total", vbn);
                                                        String where = "_id = '" + idid + "' ";


                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                        getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProvider.AUTHORITY)
                                                                .path("All_Sales_Cancelled")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id",idid)
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);



                                                        //     db1.update("All_Sales_Cancelled", contentValues, where, new String[]{});
                                                    }
                                                }
                                            } while (checks.moveToNext());
                                        }



                                        Cursor check = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                        if (check.moveToFirst()){
                                            String can_amo = check.getString(21);
                                            if (can_amo.toString().equals("")){

                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("billamount_cancelled", onlybilltotalcancel.getText().toString());

                                                String where1 = "bill_no = '" + billno.getText().toString() + "'";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_Sales_Cancelled")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);


                                                //   db1.update("All_Sales_Cancelled", contentValues, where1, new String[]{});
                                            }else {
                                                float nn = Float.parseFloat(can_amo)+Float.parseFloat(onlybilltotalcancel.getText().toString());
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("billamount_cancelled", String.valueOf(nn));

                                                String where1 = "bill_no = '" + billno.getText().toString() + "'";

                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_Sales_Cancelled")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);



                                                //     db1.update("All_Sales_Cancelled", contentValues, where1, new String[]{});
                                            }

                                        }


                                        Cursor refu = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                        if (refu.moveToFirst()){
                                            do {
                                                String reu = refu.getString(0);
                                                String pre_amo = refu.getString(5);
                                                Cursor sum = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                                if (sum.moveToFirst()){
                                                    ref_cu = sum.getFloat(0);
                                                }
                                                float c = Float.parseFloat(pre_amo) - ref_cu;
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("refunds", String.valueOf(ref_cu));
                                                contentValues.put("total_amount", String.valueOf(c));
                                                String where = "_id = '" + reu + "' ";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Customerdetails");
                                                getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("Customerdetails")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",reu)
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);



                                                //      db1.update("Customerdetails", contentValues, where, new String[]{});
                                            }while (refu.moveToNext());
                                        }

                                        Cursor refu1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                        if (refu1.moveToFirst()){
                                            do {
                                                String reu = refu1.getString(0);
                                                String cre_v1 = refu1.getString(13);
                                                String ref_v1 = refu1.getString(18);
                                                TextView vbg = new TextView(CancelActivity.this);
                                                vbg.setText(cre_v1);
                                                if (vbg.getText().toString().equals("") || vbg.getText().toString().equals("0") || vbg.getText().toString().equals("0.0")){

                                                }else {
                                                    float one = Float.parseFloat(cre_v1) - Float.parseFloat(ref_v1);
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("credit", String.valueOf(one));
                                                    String where = "_id = '" + reu + "' ";


                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Customerdetails");
                                                    getContentResolver().update(contentUri, contentValues,where,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("Customerdetails")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id",reu)
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);


                                                    ///        db1.update("Customerdetails", contentValues, where, new String[]{});
                                                }
                                            }while (refu1.moveToNext());
                                        }

                                        Cursor ccvvr1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'delete' ", null);
                                        while (ccvvr1.moveToNext()){
                                            String id = ccvvr1.getString(0);

                                            String where = "_id = '" + id + "' ";


                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales");
                                            getContentResolver().delete(contentUri, where, new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_Sales")
                                                    .appendQueryParameter("operation", "delete")
                                                    .appendQueryParameter("_id", id)
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);



                                            //       db1.delete("All_Sales", where, new String[]{});
                                        }


//                            String sql = "UPDATE All_Sales SET disc_indiv_total = new_modified_total WHERE bill_no = '" + billno.getText().toString() + "'";
//                            db1.execSQL(sql);

//                            String sql = "UPDATE All_Sales SET new_modified_total = disc_indiv_total WHERE bill_no = '" + billno.getText().toString() + "'";
//                            db1.execSQL(sql);



                                        ///////////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_LONG).show();

                                        Cursor ccvv2 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
                                        ///////////////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_LONG).show();
                                        while (ccvv2.moveToNext()){
                                            String id = ccvv2.getString(0);
                                            String itemname = ccvv2.getString(1);
                                            String idd = ccvv2.getString(20);
                                            ///////////////Toast.makeText(CancelActivity.this, "3", Toast.LENGTH_LONG).show();

                                            Cursor ccvv3 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '"+itemname+"' AND parentid = '"+idd+"' ", null);
                                            if (ccvv3.moveToFirst()){
                                                do {
                                                    //ContentValues contentValues = new ContentValues();
                                                    //contentValues.put("mod_assigned", "no");
                                                    ///////////////Toast.makeText(CancelActivity.this, "set maod_assigned as yes where id "+id+" itemname "+itemname, Toast.LENGTH_LONG).show();
                                                }while (ccvv3.moveToNext());
                                            }else {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("mod_assigned", "no");
                                                String where1 = "_id = '" + id + "' AND type = 'Item' ";



                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_sales")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",id)
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);


                                                //      db1.update("All_sales", contentValues, where1, new String[]{});

                                                // /////////////Toast.makeText(CancelActivity.this, "set maod_assigned as no where id "+id+" itemname "+itemname, Toast.LENGTH_LONG).show();
                                            }

                                        }

                                        Cursor billnumber = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
                                        if (billnumber.moveToFirst()){
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("total", onlybilltotalnew.getText().toString());
                                            contentValues.put("subtotal", onlybillnew.getText().toString());
                                            contentValues.put("taxtotal", onlybilltaxnew.getText().toString());
                                            contentValues.put("roundoff", onlybillroundoffnew.getText().toString());
                                            String where1 = "billnumber = '" + billno.getText().toString() + "' ";

//                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Billnumber");
//                                getContentResolver().update(contentUri, contentValues,where1,new String[]{});
//                                resultUri = new Uri.Builder()
//                                        .scheme("content")
//                                        .authority(StubProvider.AUTHORITY)
//                                        .path("Billnumber")
//                                        .appendQueryParameter("operation", "update")
//                                        .appendQueryParameter("billnumber",billno.getText().toString())
//                                        .build();
//                                getContentResolver().notifyChange(resultUri, null);



                                            db1.update("Billnumber", contentValues, where1, new String[]{});
                                            webservicequery_sales("UPDATE Billnumber set total = '"+onlybilltotalnew.getText().toString()+"', subtotal = '"+onlybillnew.getText().toString()+"', taxtotal = '"+onlybilltaxnew.getText().toString()+"', roundoff = '"+onlybillroundoffnew.getText().toString()+"' WHERE billnumber = '"+billno.getText().toString()+"'");
                                        }

                                        Cursor discount = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billno.getText().toString()+"'", null);
                                        if (discount.moveToFirst()){
                                            float rou = Float.parseFloat(onlybilldiscountnew.getText().toString());
                                            String rou1 = String.format("%.2f", rou);
                                            float oa = Float.parseFloat(onlybilltotalnew.getText().toString())+Float.parseFloat(onlybilldiscountnew.getText().toString());
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("Billamount_rupess", onlybilltotalnew.getText().toString());
                                            contentValues.put("Discount_rupees", rou1);
                                            contentValues.put("original_amount", String.valueOf(oa));
                                            String where1 = "billno = '" + billno.getText().toString() + "' ";



                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Discountdetails");
                                            getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("Discountdetails")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("billno",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);



                                            //   db1.update("Discountdetails", contentValues, where1, new String[]{});
                                        }

                                        if(MSWisepadDeviceController.getDeviceType() == MSWisepadDeviceController.DeviceType.WISEPOS_NEO)
                                        {
                                            mPrintData = new ArrayList<>();
                                            byte[] receiptData = neoprintreturncopy();
                                            mPrintData.add(receiptData);


                                            if(mPrintData != null && mPrintData.size() > 0)
                                            {
                                                mMSWisepadDeviceController.print(mPrintData);
                                            }

                                        }else{
                                            wiseposprintreturncopy(dialog);
                                            Handler handler =  new Handler(CancelActivity.this.getMainLooper());
                                            handler.post( new Runnable(){
                                                public void run(){
                                                    Toast.makeText(CancelActivity.this, "KOT printed",Toast.LENGTH_LONG).show();
                                                }
                                            });
                                        }

                                        final Handler handler = new Handler();
                                        handler.postDelayed(new Runnable() {
                                            @Override
                                            public void run() {
                                                mProgress1.dismiss();

                                                final Dialog dialog1 = new Dialog(CancelActivity.this, R.style.notitle);
                                                dialog1.setContentView(R.layout.dialog_refund_confirmation);
                                                dialog1.show();

                                                TextView inn = (TextView) dialog1.findViewById(R.id.inn);
                                                inn.setText(insert1_cc);

                                                refundamout = (TextView)dialog1.findViewById(R.id.refund_value);
                                                refundamout.setText(onlybilltotalcancel.getText().toString());

                                                Button gotohome = (Button)dialog1.findViewById(R.id.gohome);
                                                gotohome.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        dialog1.dismiss();
                                                        //Intent intent = new Intent(CancelActivity.this, LoginActivity.class);
                                                        //startActivity(intent);
                                                        finish();
                                                    }
                                                });

                                                Button gotomail= (Button)dialog1.findViewById(R.id.gomail);
                                                gotomail.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        //dialog1.dismiss();
                                                        //Intent intent = new Intent(CancelActivity.this, LoginActivity.class);
                                                        //startActivity(intent);
                                                        email1(dialog1);
                                                    }
                                                });




                                                String bill_reason = "";
                                                if (radioBtncash.getText().toString().equals("Other")){
                                                    bill_reason = editText.getText().toString();
                                                }else {
                                                    bill_reason = radioBtncash.getText().toString();
                                                }

                                                if (onlybilltotalnew.getText().toString().equals("")){
                                                    onlybilltotalnew.setText("0");
                                                }
                                                if (onlybilltotalcancel.getText().toString().equals("")){
                                                    onlybilltotalcancel.setText("0");
                                                }


                                                float gb = Float.parseFloat(onlybilltotalnew.getText().toString())+Float.parseFloat(onlybilltotalcancel.getText().toString());
                                                String gb1 = String.valueOf(gb);

                                                Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
                                                if (getcom.moveToFirst()) {
                                                    do {
                                                        strcompanyname = getcom.getString(1);
                                                    } while (getcom.moveToNext());
                                                }else {
                                                    strcompanyname = "";
                                                }


                                                Cursor cursor5 = db.rawQuery("SELECT * FROM Email_setup", null);
                                                if (cursor5.moveToFirst()) {
                                                    String un2 = cursor5.getString(1);
                                                    String pwd2 = cursor5.getString(2);
                                                    String em_ca2 = cursor5.getString(3);

                                                    String toEmails2 = un2;
                                                    toEmailList = Arrays.asList(toEmails2
                                                            .split("\\s*,\\s*"));

                                                    String msg = "Returns/Refunds" +
                                                            "\n"+normal1 +","+ time1+
                                                            "\nBill no: "+billno.getText().toString()+
                                                            "\n"+"Bill amount: "+gb1+
                                                            "\n"+"Refunded: "+onlybilltotalcancel.getText().toString()+
                                                            "\nUser: "+username+
                                                            "\nResason: "+bill_reason;



                                                    Cursor cursore = db.rawQuery("SELECT * FROM Email_setup", null);
                                                    if (cursore.moveToFirst()){
                                                        Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                        if (cursoree.moveToFirst()){
                                                            //both are there

                                                            Cursor cursor = db.rawQuery("SELECT * FROM Email_setup", null);
                                                            if (cursor.moveToFirst()) {
                                                                String un = cursor.getString(1);
                                                                String pwd = cursor.getString(2);
                                                                String client = cursor.getString(3);


                                                                Cursor cursor11 = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                                if (cursor11.moveToFirst()) {
                                                                    do {
                                                                        String unn = cursor11.getString(3);
                                                                        String toEmails = unn;
                                                                        toEmailList = Arrays.asList(toEmails
                                                                                .split("\\s*,\\s*"));
                                                                    } while (cursor11.moveToNext());
                                                                }


                                                                if (client.toString().equals("Gmail")) {
                                                                    getResultsFromApi();
                                                                    new MakeRequestTask(mCredential).execute();
//                                                        new SendMailTask(Customer_Info_Activity.this).execute(un,
//                                                                pwd, toEmailList, strcompanyname, msg);
                                                                }else {
                                                                    if (client.toString().equals("Yahoo")) {
//                                                            Toast.makeText(Customer_Info_Activity.this, "Yahoo", Toast.LENGTH_LONG).show();
                                                                        new SendMailTask_Yahoo(CancelActivity.this).execute(un,
                                                                                pwd, toEmailList, strcompanyname, msg);
                                                                    }else {
                                                                        if (client.toString().equals("Hotmail")) {
//                                                                Toast.makeText(Customer_Info_Activity.this, "Hotmail", Toast.LENGTH_LONG).show();
                                                                            new SendMailTask_Hotmail(CancelActivity.this).execute(un,
                                                                                    pwd, toEmailList, strcompanyname, msg);
                                                                        }else {
                                                                            if (client.toString().equals("Office365")) {
//                                                                    Toast.makeText(Customer_Info_Activity.this, "Outlook", Toast.LENGTH_LONG).show();
                                                                                new SendMailTask_Outlook(CancelActivity.this).execute(un,
                                                                                        pwd, toEmailList, strcompanyname, msg);
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }


                                                        }else {
                                                            //only recipient not there
                                                            final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                            dialoge.setContentView(R.layout.email_prerequisites);
                                                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                            dialoge.show();

                                                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                            btncancel.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    dialoge.dismiss();
                                                                }
                                                            });

                                                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                            recipient_notset.setVisibility(View.VISIBLE);

                                                            sender_set.setVisibility(View.VISIBLE);

                                                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                    startActivity(intent);
//                                                getActivity().finish();
                                                                    dialoge.dismiss();
                                                                }
                                                            });

                                                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                    startActivity(intent);
//                                                getActivity().finish();
                                                                    dialoge.dismiss();
                                                                }
                                                            });


                                                        }
                                                    }else {
                                                        Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                        if (cursoree.moveToFirst()){
                                                            //only sender not there
                                                            final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                            dialoge.setContentView(R.layout.email_prerequisites);
                                                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                            dialoge.show();

                                                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                            btncancel.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    dialoge.dismiss();
                                                                }
                                                            });

                                                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                            sender_notset.setVisibility(View.VISIBLE);

                                                            recipient_set.setVisibility(View.VISIBLE);

                                                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                    startActivity(intent);
//                                                getActivity().finish();
                                                                    dialoge.dismiss();
                                                                }
                                                            });

                                                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                    startActivity(intent);
//                                                getActivity().finish();
                                                                    dialoge.dismiss();
                                                                }
                                                            });

                                                        }else {
                                                            //both recipient and sender not there
                                                            final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                            dialoge.setContentView(R.layout.email_prerequisites);
                                                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                            dialoge.show();

                                                            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                            btncancel.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    dialoge.dismiss();
                                                                }
                                                            });

                                                            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                            recipient_notset.setVisibility(View.VISIBLE);
                                                            sender_notset.setVisibility(View.VISIBLE);

                                                            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                            gotosettings.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                    startActivity(intent);
//                                                getActivity().finish();
                                                                    dialoge.dismiss();
                                                                }
                                                            });

                                                            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                            gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                    startActivity(intent);
//                                                getActivity().finish();
                                                                    dialoge.dismiss();
                                                                }
                                                            });

                                                        }
                                                    }

                                                }

                                            }
                                        }, 1000); //3000 L = 3 detik





                                    }else {

                                        final Dialog dialo_c = new Dialog(CancelActivity.this, R.style.notitle);
                                        dialo_c.setContentView(R.layout.dialog_printer_conn_error);
                                        dialo_c.show();

                                        Button closecust = (Button) dialo_c.findViewById(R.id.close);
                                        closecust.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                dialo_c.dismiss();
                                            }
                                        });

                                        Button conti = (Button) dialo_c.findViewById(R.id.ok);
                                        conti.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                mProgress1.show();
                                                //////Toast.makeText(CancelActivity.this, "checkprinterconncash11", Toast.LENGTH_SHORT).show();
                                                paneone.setVisibility(View.INVISIBLE);
                                                panetwo.setVisibility(View.GONE);
                                                panethree.setVisibility(View.INVISIBLE);

                                                String sql4 = "UPDATE All_Sales SET disc_indiv_total = new_modified_total WHERE bill_no = '" + billno.getText().toString() + "'";
                                                db1.execSQL(sql4);

                                                Cursor ccvv = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                                while (ccvv.moveToNext()) {
                                                    String id = ccvv.getString(0);
                                                    String itemname = ccvv.getString(1);
                                                    String quantity = ccvv.getString(2);
                                                    String price = ccvv.getString(3);
                                                    String total = ccvv.getString(4);
                                                    String type = ccvv.getString(5);
                                                    String parent = ccvv.getString(6);
                                                    String parentid = ccvv.getString(7);
                                                    String modassigned = ccvv.getString(8);
                                                    String tax = ccvv.getString(9);
                                                    String taxname = ccvv.getString(10);
                                                    String billno1 = ccvv.getString(11);
                                                    String time = ccvv.getString(12);
                                                    String date = ccvv.getString(13);
                                                    String user = ccvv.getString(14);
                                                    String tableid = ccvv.getString(15);
                                                    String billtype = ccvv.getString(16);
                                                    String paymentmethod = ccvv.getString(17);
                                                    String billamountdisapply = ccvv.getString(18);
                                                    String billamountdisnotapply = ccvv.getString(19);
                                                    String idd = ccvv.getString(20);
                                                    String deletednot = ccvv.getString(21);
                                                    String modifiedquan = ccvv.getString(22);
                                                    String quancopy = ccvv.getString(23);
                                                    String modifiedtotal = ccvv.getString(24);
                                                    String date1 = ccvv.getString(25);
                                                    String disc_type = ccvv.getString(27);
                                                    String disc_value = ccvv.getString(28);
                                                    String disc_newtotal = ccvv.getString(29);
                                                    String disc_thereornot = ccvv.getString(30);
                                                    String disc_indiv_total = ccvv.getString(31);
                                                    String taxx2 = ccvv.getString(35);
                                                    String taxx_v2 = ccvv.getString(36);
                                                    String taxx3 = ccvv.getString(37);
                                                    String taxx_v3 = ccvv.getString(38);
                                                    String taxx4 = ccvv.getString(39);
                                                    String taxx_v4 = ccvv.getString(40);
                                                    String taxx5 = ccvv.getString(41);
                                                    String taxx_v5 = ccvv.getString(42);
                                                    String hsn_hsn = ccvv.getString(34);
                                                    String old_total = ccvv.getString(50);
                                                    String old_total_indiv = ccvv.getString(56);

                                                    ContentValues contentValues = new ContentValues();
//                                        contentValues.put("_id", id);
                                                    contentValues.put("itemname", itemname);
                                                    contentValues.put("quantity", modifiedquan);
                                                    contentValues.put("price", price);
                                                    contentValues.put("total", modifiedtotal);
                                                    contentValues.put("type", type);
                                                    contentValues.put("parent", parent);
                                                    contentValues.put("parentid", parentid);
                                                    contentValues.put("mod_assigned", modassigned);
                                                    contentValues.put("tax", tax);
                                                    contentValues.put("taxname", taxname);
                                                    contentValues.put("bill_no", billno1);
                                                    contentValues.put("time", time1);
                                                    contentValues.put("date", currentDateandTime1);
                                                    contentValues.put("user", username);
                                                    contentValues.put("billtype", billtype);
                                                    contentValues.put("paymentmethod", paymentmethod);
                                                    //contentValues.put("billamount_disapply", billamountdisapply);
                                                    contentValues.put("billamount_disapply", onlybilltotalold.getText().toString());
                                                    contentValues.put("billamount_disnotapply", String.valueOf(Float.parseFloat(onlybillold.getText().toString()) + Float.parseFloat(onlybilltaxold.getText().toString())));
                                                    contentValues.put("_idd", idd);
                                                    contentValues.put("date1", normal1);
                                                    contentValues.put("billamount_cancelled", "");
                                                    contentValues.put("billamount_cancelled_user", onlybilltotalcancel.getText().toString());
                                                    contentValues.put("disc_type", disc_type);
                                                    contentValues.put("disc_value", disc_value);
                                                    contentValues.put("newtotal", disc_newtotal);
                                                    contentValues.put("disc_thereornot", disc_thereornot);
                                                    contentValues.put("disc_indiv_total", disc_indiv_total);
                                                    contentValues.put("taxname2", taxx2);
                                                    contentValues.put("tax2", taxx_v2);
                                                    contentValues.put("taxname3", taxx3);
                                                    contentValues.put("tax3", taxx_v3);
                                                    contentValues.put("taxname4", taxx4);
                                                    contentValues.put("tax4", taxx_v4);
                                                    contentValues.put("taxname5", taxx5);
                                                    contentValues.put("tax5", taxx_v5);
                                                    contentValues.put("hsn_code", hsn_hsn);

                                                    if (radioBtncash.getText().toString().equals("Other")) {
                                                        contentValues.put("reason", editText.getText().toString());
                                                    } else {
                                                        contentValues.put("reason", radioBtncash.getText().toString());
                                                    }
                                                    contentValues.put("datetimee_new", time24_new);
                                                    contentValues.put("old_total", old_total);
                                                    contentValues.put("old_total_indiv", old_total_indiv);


                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                    resultUri = getContentResolver().insert(contentUri, contentValues);
                                                    getContentResolver().notifyChange(resultUri, null);


                                                    //      db1.insert("All_Sales_Cancelled", null, contentValues);

                                                }

                                                Cursor ccvvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "'", null);
                                                if (ccvvv11.moveToFirst()) {
                                                    do {
                                                        String id = ccvvv11.getString(0);
                                                        String newquan = ccvvv11.getString(23);
                                                        String newtotal = ccvvv11.getString(24);
                                                        String tt = ccvvv11.getString(2);
                                                        String ttt = ccvvv11.getString(3);
                                                        float tr = Float.parseFloat(tt) * Float.parseFloat(ttt);
                                                        String trr = String.format("%.2f", tr);
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("quantity", newquan);
                                                        contentValues.put("total", trr);

                                                        String where = "_id = '" + id + "' ";


//                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                            getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                            resultUri = new Uri.Builder()
//                                                    .scheme("content")
//                                                    .authority(StubProvider.AUTHORITY)
//                                                    .path("All_sales")
//                                                    .appendQueryParameter("operation", "update")
//                                                    .appendQueryParameter("_id",id)
//                                                    .build();
//                                            getContentResolver().notifyChange(resultUri, null);


                                                        db1.update("All_sales", contentValues, where, new String[]{});
                                                        webservicequery_sales("UPDATE all_sales set quantity = '" + newquan + "', total = '" + trr + "' WHERE _id = '" + id + "'");
                                                        System.out.println("items cancel " + newquan + " total " + trr + " _id " + id);

                                                    } while (ccvvv11.moveToNext());
                                                }
//                            while (ccvvv11.moveToNext()){
//
//                            }

                                                Cursor ccvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'decrease' ", null);
                                                if (ccvv11.moveToFirst()) {
                                                    do {
                                                        String id = ccvv11.getString(0);
                                                        String newquan = ccvv11.getString(23);
                                                        String newtotal = ccvv11.getString(24);
                                                        String tt = ccvv11.getString(2);
                                                        String ttt = ccvv11.getString(3);
                                                        float tr = Float.parseFloat(tt) * Float.parseFloat(ttt);
                                                        String trr = String.format("%.2f", tr);
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("quantity", newquan);
                                                        contentValues.put("total", trr);

                                                        String where = "_id = '" + id + "' ";


//                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                            getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                            resultUri = new Uri.Builder()
//                                                    .scheme("content")
//                                                    .authority(StubProvider.AUTHORITY)
//                                                    .path("All_sales")
//                                                    .appendQueryParameter("operation", "update")
//                                                    .appendQueryParameter("_id",id)
//                                                    .build();
//                                            getContentResolver().notifyChange(resultUri, null);


                                                        db1.update("All_sales", contentValues, where, new String[]{});
                                                        webservicequery_sales("UPDATE all_sales set quantity = '" + newquan + "', total = '" + trr + "' WHERE _id = '" + id + "'");

                                                    } while (ccvv11.moveToNext());
                                                }

                                                Cursor item_ret = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                                if (item_ret.moveToFirst()) {
                                                    do {
                                                        String modifiedquan = item_ret.getString(22);
                                                        String itemname = item_ret.getString(1);

                                                        Cursor item = db.rawQuery("SELECT * FROM Items WHERE itemname = '" + itemname + "'", null);
                                                        if (item.moveToFirst()) {
                                                            String id = item.getString(0);
                                                            String qu = item.getString(3);

                                                            float up_qu = Float.parseFloat(qu) + Float.parseFloat(modifiedquan);
                                                            ContentValues co = new ContentValues();
                                                            co.put("stockquan", String.format("%.0f", up_qu));
                                                            String wherecu = "_id = '" + id + "'";

                                                            contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Items");
                                                            getContentResolver().update(contentUri, co, wherecu, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProviderApp.AUTHORITY)
                                                                    .path("Items")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", id)
                                                                    .build();
                                                            getContentResolver().notifyChange(resultUri, null);
                                                        }

                                                    } while (item_ret.moveToNext());
                                                }

                                                Cursor ccvv1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
                                                if (ccvv1.moveToFirst()) {
                                                    do {
                                                        String modifiedquan = ccvv1.getString(22);
                                                        String itemname = ccvv1.getString(1);

                                                        Cursor ing_r = db.rawQuery("SELECT * FROM Ingredient_items_list WHERE itemname = '" + itemname + "'", null);
                                                        if (ing_r.moveToFirst()) {
                                                            do {
                                                                String ingid_r = ing_r.getString(0);
                                                                String ingname_r = ing_r.getString(1);
                                                                String ingcurr_stoc = ing_r.getString(4);
                                                                TextView v121 = new TextView(CancelActivity.this);
                                                                v121.setText(ingcurr_stoc);
                                                                if (v121.getText().toString().equals("")) {
                                                                    v121.setText("0");
                                                                }

                                                                String id_r = ing_r.getString(0);
                                                                String quan_used_r = ing_r.getString(3);
                                                                String pres_quan_r = ing_r.getString(4);
                                                                TextView v12 = new TextView(CancelActivity.this);
                                                                v12.setText(quan_used_r);
                                                                TextView v13 = new TextView(CancelActivity.this);
                                                                v13.setText(pres_quan_r);
                                                                if (v12.getText().toString().equals("")) {
                                                                    v12.setText("0");
                                                                }
                                                                if (v13.getText().toString().equals("")) {
                                                                    v13.setText("0");
                                                                }
                                                                float a = (Float.parseFloat(v12.getText().toString())) * (Float.parseFloat(modifiedquan));
                                                                float a1 = a + Float.parseFloat(v121.getText().toString());
                                                                float a2 = a + Float.parseFloat(v13.getText().toString());

//                                                    Toast.makeText(CancelActivity.this, "current quna for " + ingname_r + " is " + a, Toast.LENGTH_SHORT).show();
                                                                ContentValues co = new ContentValues();
                                                                co.put("currnet_stock", String.format("%.2f", a1));
                                                                String wherecu = "_id = '" + ingid_r + "'";


                                                                contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredient_items_list");
                                                                getContentResolver().update(contentUri, co, wherecu, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProviderApp.AUTHORITY)
                                                                        .path("Ingredient_items_list")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", ingid_r)
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);


                                                                //    db.update("Ingredient_items_list", co, wherecu, new String[]{});

                                                                Cursor ing_r111 = db.rawQuery("SELECT * FROM Ingredients WHERE ingredient_name = '" + ingname_r + "'", null);
                                                                if (ing_r111.moveToFirst()) {
                                                                    do {
                                                                        String id_r1 = ing_r111.getString(0);
                                                                        ContentValues co1 = new ContentValues();
                                                                        co1.put("current_stock", String.format("%.2f", a1));
                                                                        String wherecu1 = "_id = '" + id_r1 + "'";


                                                                        contentUri = Uri.withAppendedPath(StubProviderApp.CONTENT_URI, "Ingredients");
                                                                        getContentResolver().update(contentUri, co1, wherecu1, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProviderApp.AUTHORITY)
                                                                                .path("Ingredients")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("_id", id_r1)
                                                                                .build();
                                                                        getContentResolver().notifyChange(resultUri, null);


                                                                        //        db.update("Ingredients", co1, wherecu1, new String[]{});
                                                                    } while (ing_r111.moveToNext());
                                                                }
                                                            } while (ing_r.moveToNext());
                                                        }
                                                    } while (ccvv1.moveToNext());
                                                }

                                                Cursor checks = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billno.getText().toString() + "'", null);
                                                if (checks.moveToFirst()) {
                                                    do {
                                                        String disc_typea = checks.getString(24);
                                                        String disc_valuea = checks.getString(25);
                                                        String disc_newtotala = checks.getString(26);
                                                        String disc_thereornota = checks.getString(27);
                                                        String disc_indiv_totoala = checks.getString(28);
                                                        String idid = checks.getString(0);
                                                        String originaltotal = checks.getString(4);
                                                        String quan = checks.getString(2);
                                                        TextView xc = new TextView(CancelActivity.this);
                                                        xc.setText(disc_thereornota);

                                                        if (xc.getText().toString().equals("yes")) {
                                                            if (disc_typea.toString().equals("%")) {
                                                                //Toast.makeText(CancelActivity.this, "variable", Toast.LENGTH_SHORT).show();

                                                                //Toast.makeText(CancelActivity.this, "not empty 1 " + disc_var_edittext1.getText().toString(), Toast.LENGTH_SHORT).show();

                                                                float vt = Float.parseFloat(originaltotal.toString()) / 100 * Float.parseFloat(disc_valuea.toString());
                                                                String vbn = String.format("%.2f", vt);
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("disc_indiv_total", vbn);
                                                                String where = "_id = '" + idid + "' ";


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                                getContentResolver().update(contentUri, contentValues, where, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_Sales_Cancelled")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", idid)
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);


                                                                //   db1.update("All_Sales_Cancelled", contentValues, where, new String[]{});

                                                            } else {
                                                                //Toast.makeText(CancelActivity.this, "fixed", Toast.LENGTH_SHORT).show();

                                                                float vt = Float.parseFloat(quan) * Float.parseFloat(disc_valuea);
                                                                String vbn = String.format("%.2f", vt);
                                                                ContentValues contentValues = new ContentValues();
                                                                contentValues.put("disc_indiv_total", vbn);
                                                                String where = "_id = '" + idid + "' ";


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                                getContentResolver().update(contentUri, contentValues, where, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_Sales_Cancelled")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", idid)
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);


                                                                //    db1.update("All_Sales_Cancelled", contentValues, where, new String[]{});
                                                            }
                                                        }
                                                    } while (checks.moveToNext());
                                                }

                                                Cursor check = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billno.getText().toString() + "'", null);
                                                if (check.moveToFirst()) {
                                                    String can_amo = check.getString(21);
                                                    if (can_amo.toString().equals("")) {

                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("billamount_cancelled", onlybilltotalcancel.getText().toString());

                                                        String where1 = "bill_no = '" + billno.getText().toString() + "'";


                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                        getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProvider.AUTHORITY)
                                                                .path("All_Sales_Cancelled")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("bill_no", billno.getText().toString())
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);


                                                        //     db1.update("All_Sales_Cancelled", contentValues, where1, new String[]{});
                                                    } else {
                                                        float nn = Float.parseFloat(can_amo) + Float.parseFloat(onlybilltotalcancel.getText().toString());
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("billamount_cancelled", String.valueOf(nn));

                                                        String where1 = "bill_no = '" + billno.getText().toString() + "'";


                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales_Cancelled");
                                                        getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProvider.AUTHORITY)
                                                                .path("All_Sales_Cancelled")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("bill_no", billno.getText().toString())
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);


                                                        //            db1.update("All_Sales_Cancelled", contentValues, where1, new String[]{});
                                                    }

                                                }

                                                Cursor refu = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billno.getText().toString() + "'", null);
                                                if (refu.moveToFirst()) {
                                                    do {
                                                        String reu = refu.getString(0);
                                                        String pre_amo = refu.getString(5);
                                                        Cursor sum = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billno.getText().toString() + "'", null);
                                                        if (sum.moveToFirst()) {
                                                            ref_cu = sum.getFloat(0);
                                                        }
                                                        float c = Float.parseFloat(pre_amo) - ref_cu;
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("refunds", String.valueOf(ref_cu));
                                                        contentValues.put("total_amount", String.valueOf(c));
                                                        String where = "_id = '" + reu + "' ";


                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Customerdetails");
                                                        getContentResolver().update(contentUri, contentValues, where, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProvider.AUTHORITY)
                                                                .path("Customerdetails")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", reu)
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);


                                                        //         db1.update("Customerdetails", contentValues, where, new String[]{});
                                                    } while (refu.moveToNext());
                                                }

                                                Cursor refu1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billno.getText().toString() + "'", null);
                                                if (refu1.moveToFirst()) {
                                                    do {
                                                        String reu = refu1.getString(0);
                                                        String cre_v1 = refu1.getString(13);
                                                        String ref_v1 = refu1.getString(18);
                                                        TextView vbg = new TextView(CancelActivity.this);
                                                        vbg.setText(cre_v1);
                                                        if (vbg.getText().toString().equals("") || vbg.getText().toString().equals("0") || vbg.getText().toString().equals("0.0")) {

                                                        } else {
                                                            float one = Float.parseFloat(cre_v1) - Float.parseFloat(ref_v1);
                                                            ContentValues contentValues = new ContentValues();
                                                            contentValues.put("credit", String.valueOf(one));
                                                            String where = "_id = '" + reu + "' ";

                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Customerdetails");
                                                            getContentResolver().update(contentUri, contentValues, where, new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProvider.AUTHORITY)
                                                                    .path("Customerdetails")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id", reu)
                                                                    .build();
                                                            getContentResolver().notifyChange(resultUri, null);


                                                            //     db1.update("Customerdetails", contentValues, where, new String[]{});
                                                        }
                                                    } while (refu1.moveToNext());
                                                }

                                                Cursor ccvvr1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete' ", null);
                                                while (ccvvr1.moveToNext()) {
                                                    String id = ccvvr1.getString(0);

                                                    String where = "_id = '" + id + "' ";


                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_Sales");
                                                    getContentResolver().delete(contentUri, where, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("All_Sales")
                                                            .appendQueryParameter("operation", "delete")
                                                            .appendQueryParameter("_id", id)
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);


                                                    //         db1.delete("All_Sales", where, new String[]{});
                                                }

//                                    Cursor ccvvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);
//                                    while (ccvvv11.moveToNext()){
//                                        String id = ccvvv11.getString(0);
//                                        String newquan = ccvvv11.getString(23);
//                                        String newtotal = ccvvv11.getString(24);
//                                        String tt = ccvvv11.getString(2);
//                                        String ttt = ccvvv11.getString(3);
//                                        float tr = Float.parseFloat(tt)*Float.parseFloat(ttt);
//                                        String trr = String.format("%.2f", tr);
//                                        ContentValues contentValues = new ContentValues();
//                                        contentValues.put("quantity", newquan);
//                                        contentValues.put("total", trr);
//
//                                        String where = "_id = '" + id + "' ";
//
//
//                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                        getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                        resultUri = new Uri.Builder()
//                                                .scheme("content")
//                                                .authority(StubProvider.AUTHORITY)
//                                                .path("All_sales")
//                                                .appendQueryParameter("operation", "update")
//                                                .appendQueryParameter("_id",id)
//                                                .build();
//                                        getContentResolver().notifyChange(resultUri, null);
//
//
//                                  //      db1.update("All_sales", contentValues, where, new String[]{});
//                                    }
//
//                                    Cursor ccvv11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'decrease' ", null);
//                                    while (ccvv11.moveToNext()){
//                                        String id = ccvv11.getString(0);
//                                        String newquan = ccvv11.getString(23);
//                                        String newtotal = ccvv11.getString(24);
//                                        String tt = ccvv11.getString(2);
//                                        String ttt = ccvv11.getString(3);
//                                        float tr = Float.parseFloat(tt)*Float.parseFloat(ttt);
//                                        String trr = String.format("%.2f", tr);
//                                        ContentValues contentValues = new ContentValues();
//                                        contentValues.put("quantity", newquan);
//                                        contentValues.put("total", trr);
//
//                                        String where = "_id = '" + id + "' ";
//
//
//                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
//                                        getContentResolver().update(contentUri, contentValues,where,new String[]{});
//                                        resultUri = new Uri.Builder()
//                                                .scheme("content")
//                                                .authority(StubProvider.AUTHORITY)
//                                                .path("All_sales")
//                                                .appendQueryParameter("operation", "update")
//                                                .appendQueryParameter("_id",id)
//                                                .build();
//                                        getContentResolver().notifyChange(resultUri, null);
//
//
//
//                             //           db1.update("All_sales", contentValues, where, new String[]{});
//                                    }


//                                    String sql = "UPDATE All_Sales SET disc_indiv_total = new_modified_total WHERE bill_no = '" + billno.getText().toString() + "'";
//                                    db1.execSQL(sql);


                                                ///////////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_LONG).show();

                                                Cursor ccvv2 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "'", null);
                                                ///////////////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_LONG).show();
                                                while (ccvv2.moveToNext()) {
                                                    String id = ccvv2.getString(0);
                                                    String itemname = ccvv2.getString(1);
                                                    String idd = ccvv2.getString(20);
                                                    ///////////////Toast.makeText(CancelActivity.this, "3", Toast.LENGTH_LONG).show();

                                                    Cursor ccvv3 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + itemname + "' AND parentid = '" + idd + "' ", null);
                                                    if (ccvv3.moveToFirst()) {
                                                        do {
                                                            //ContentValues contentValues = new ContentValues();
                                                            //contentValues.put("mod_assigned", "no");
                                                            ///////////////Toast.makeText(CancelActivity.this, "set maod_assigned as yes where id "+id+" itemname "+itemname, Toast.LENGTH_LONG).show();
                                                        } while (ccvv3.moveToNext());
                                                    } else {
                                                        ContentValues contentValues = new ContentValues();
                                                        contentValues.put("mod_assigned", "no");
                                                        String where1 = "_id = '" + id + "' AND type = 'Item' ";


                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                        getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProvider.AUTHORITY)
                                                                .path("All_sales")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id", id)
                                                                .appendQueryParameter("type", "Item")
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);


                                                        //        db1.update("All_sales", contentValues, where1, new String[]{});

                                                        // /////////////Toast.makeText(CancelActivity.this, "set maod_assigned as no where id "+id+" itemname "+itemname, Toast.LENGTH_LONG).show();
                                                    }

                                                }

                                                Cursor billnumber = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billno.getText().toString() + "'", null);
                                                if (billnumber.moveToFirst()) {
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("total", onlybilltotalnew.getText().toString());
                                                    contentValues.put("subtotal", onlybillnew.getText().toString());
                                                    contentValues.put("taxtotal", onlybilltaxnew.getText().toString());
                                                    contentValues.put("roundoff", onlybillroundoffnew.getText().toString());
                                                    String where1 = "billnumber = '" + billno.getText().toString() + "' ";

//                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Billnumber");
//                                        getContentResolver().update(contentUri, contentValues,where1,new String[]{});
//                                        resultUri = new Uri.Builder()
//                                                .scheme("content")
//                                                .authority(StubProvider.AUTHORITY)
//                                                .path("Billnumber")
//                                                .appendQueryParameter("operation", "update")
//                                                .appendQueryParameter("billnumber",billno.getText().toString())
//                                                .build();
//                                        getContentResolver().notifyChange(resultUri, null);


                                                    db1.update("Billnumber", contentValues, where1, new String[]{});
                                                    webservicequery_sales("UPDATE Billnumber set total = '" + onlybilltotalnew.getText().toString() + "', subtotal = '" + onlybillnew.getText().toString() + "', taxtotal = '" + onlybilltaxnew.getText().toString() + "', roundoff = '" + onlybillroundoffnew.getText().toString() + "' WHERE billnumber = '" + billno.getText().toString() + "'");
                                                }

                                                Cursor discount = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
                                                if (discount.moveToFirst()) {
                                                    float rou = Float.parseFloat(onlybilldiscountnew.getText().toString());
                                                    String rou1 = String.format("%.2f", rou);
                                                    float oa = Float.parseFloat(onlybilltotalnew.getText().toString()) + Float.parseFloat(onlybilldiscountnew.getText().toString());
                                                    ContentValues contentValues = new ContentValues();
                                                    contentValues.put("Billamount_rupess", onlybilltotalnew.getText().toString());
                                                    contentValues.put("Discount_rupees", rou1);
                                                    contentValues.put("original_amount", String.valueOf(oa));
                                                    String where1 = "billno = '" + billno.getText().toString() + "' ";


                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "Discountdetails");
                                                    getContentResolver().update(contentUri, contentValues, where1, new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("Discountdetails")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("billno", billno.getText().toString())
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);


                                                    //     db1.update("Discountdetails", contentValues, where1, new String[]{});
                                                }

                                                printreturncopy(dialog);

                                                final Handler handler = new Handler();
                                                handler.postDelayed(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        mProgress1.dismiss();

                                                        final Dialog dialog1 = new Dialog(CancelActivity.this, R.style.notitle);
                                                        dialog1.setContentView(R.layout.dialog_refund_confirmation);
                                                        dialog1.show();

                                                        TextView inn = (TextView) dialog1.findViewById(R.id.inn);
                                                        inn.setText(insert1_cc);

                                                        refundamout = (TextView) dialog1.findViewById(R.id.refund_value);
                                                        refundamout.setText(onlybilltotalcancel.getText().toString());

                                                        Button gotohome = (Button) dialog1.findViewById(R.id.gohome);
                                                        gotohome.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                dialog1.dismiss();
                                                                //Intent intent = new Intent(CancelActivity.this, LoginActivity.class);
                                                                //startActivity(intent);
                                                                finish();
                                                            }
                                                        });

                                                        Button gotomail = (Button) dialog1.findViewById(R.id.gomail);
                                                        gotomail.setOnClickListener(new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                //dialog1.dismiss();
                                                                //Intent intent = new Intent(CancelActivity.this, LoginActivity.class);
                                                                //startActivity(intent);
                                                                email1(dialog1);
                                                            }
                                                        });
                                                        dialo_c.dismiss();


                                                        String bill_reason = "";
                                                        if (radioBtncash.getText().toString().equals("Other")) {
                                                            bill_reason = editText.getText().toString();
                                                        } else {
                                                            bill_reason = radioBtncash.getText().toString();
                                                        }

                                                        if (onlybilltotalnew.getText().toString().equals("")) {
                                                            onlybilltotalnew.setText("0");
                                                        }
                                                        if (onlybilltotalcancel.getText().toString().equals("")) {
                                                            onlybilltotalcancel.setText("0");
                                                        }


                                                        float gb = Float.parseFloat(onlybilltotalnew.getText().toString()) + Float.parseFloat(onlybilltotalcancel.getText().toString());
                                                        String gb1 = String.valueOf(gb);

                                                        Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
                                                        if (getcom.moveToFirst()) {
                                                            do {
                                                                strcompanyname = getcom.getString(1);
                                                            } while (getcom.moveToNext());
                                                        } else {
                                                            strcompanyname = "";
                                                        }

                                                        Cursor cursor5 = db.rawQuery("SELECT * FROM Email_setup", null);
                                                        if (cursor5.moveToFirst()) {
                                                            String un2 = cursor5.getString(1);
                                                            String pwd2 = cursor5.getString(2);
                                                            String em_ca = cursor5.getString(3);

                                                            String toEmails2 = un2;
                                                            toEmailList = Arrays.asList(toEmails2
                                                                    .split("\\s*,\\s*"));

                                                            String msg = "Returns/Refunds" +
                                                                    "\n" + normal1 + "," + time1 +
                                                                    "\nBill no: " + billno.getText().toString() +
                                                                    "\n" + "Bill amount: " + gb1 +
                                                                    "\n" + "Refunded: " + onlybilltotalcancel.getText().toString() +
                                                                    "\nUser: " + username +
                                                                    "\nResason: " + bill_reason;
                                                            Cursor cursore = db.rawQuery("SELECT * FROM Email_setup", null);
                                                            if (cursore.moveToFirst()) {
                                                                Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                                if (cursoree.moveToFirst()) {
                                                                    //both are there

                                                                    Cursor cursor = db.rawQuery("SELECT * FROM Email_setup", null);
                                                                    if (cursor.moveToFirst()) {
                                                                        String un = cursor.getString(1);
                                                                        String pwd = cursor.getString(2);
                                                                        String client = cursor.getString(3);


                                                                        Cursor cursor11 = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                                        if (cursor11.moveToFirst()) {
                                                                            do {
                                                                                String unn = cursor11.getString(3);
                                                                                String toEmails = unn;
                                                                                toEmailList = Arrays.asList(toEmails
                                                                                        .split("\\s*,\\s*"));
                                                                            } while (cursor11.moveToNext());
                                                                        }


                                                                        if (client.toString().equals("Gmail")) {
                                                                            getResultsFromApi();
                                                                            new MakeRequestTask(mCredential).execute();
//                                                        new SendMailTask(Customer_Info_Activity.this).execute(un,
//                                                                pwd, toEmailList, strcompanyname, msg);
                                                                        } else {
                                                                            if (client.toString().equals("Yahoo")) {
//                                                            Toast.makeText(Customer_Info_Activity.this, "Yahoo", Toast.LENGTH_LONG).show();
                                                                                new SendMailTask_Yahoo(CancelActivity.this).execute(un,
                                                                                        pwd, toEmailList, strcompanyname, msg);
                                                                            } else {
                                                                                if (client.toString().equals("Hotmail")) {
//                                                                Toast.makeText(Customer_Info_Activity.this, "Hotmail", Toast.LENGTH_LONG).show();
                                                                                    new SendMailTask_Hotmail(CancelActivity.this).execute(un,
                                                                                            pwd, toEmailList, strcompanyname, msg);
                                                                                } else {
                                                                                    if (client.toString().equals("Office365")) {
//                                                                    Toast.makeText(Customer_Info_Activity.this, "Outlook", Toast.LENGTH_LONG).show();
                                                                                        new SendMailTask_Outlook(CancelActivity.this).execute(un,
                                                                                                pwd, toEmailList, strcompanyname, msg);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                    }


                                                                } else {
                                                                    //only recipient not there
                                                                    final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                                    dialoge.setContentView(R.layout.email_prerequisites);
                                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                                    dialoge.show();

                                                                    ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });

                                                                    ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                                    ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                                    ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                                    ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                                    recipient_notset.setVisibility(View.VISIBLE);

                                                                    sender_set.setVisibility(View.VISIBLE);

                                                                    Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                                    gotosettings.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                            startActivity(intent);
//                                                getActivity().finish();
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });

                                                                    Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                                    gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                            startActivity(intent);
//                                                getActivity().finish();
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });


                                                                }
                                                            } else {
                                                                Cursor cursoree = db.rawQuery("SELECT * FROM Email_recipient", null);
                                                                if (cursoree.moveToFirst()) {
                                                                    //only sender not there
                                                                    final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                                    dialoge.setContentView(R.layout.email_prerequisites);
                                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                                    dialoge.show();

                                                                    ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });

                                                                    ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                                    ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                                    ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                                    ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                                    sender_notset.setVisibility(View.VISIBLE);

                                                                    recipient_set.setVisibility(View.VISIBLE);

                                                                    Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                                    gotosettings.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                            startActivity(intent);
//                                                getActivity().finish();
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });

                                                                    Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                                    gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                            startActivity(intent);
//                                                getActivity().finish();
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });

                                                                } else {
                                                                    //both recipient and sender not there
                                                                    final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                                                                    dialoge.setContentView(R.layout.email_prerequisites);
                                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                                                                    dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                                                                    dialoge.show();

                                                                    ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
                                                                    btncancel.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });

                                                                    ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
                                                                    ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

                                                                    ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
                                                                    ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

                                                                    recipient_notset.setVisibility(View.VISIBLE);
                                                                    sender_notset.setVisibility(View.VISIBLE);

                                                                    Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
                                                                    gotosettings.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                            startActivity(intent);
//                                                getActivity().finish();
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });

                                                                    Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
                                                                    gotosettings1.setOnClickListener(new View.OnClickListener() {
                                                                        @Override
                                                                        public void onClick(View v) {
                                                                            Intent intent = new Intent(CancelActivity.this, EmailSetup_Recipients.class);
                                                                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                            startActivity(intent);
//                                                getActivity().finish();
                                                                            dialoge.dismiss();
                                                                        }
                                                                    });

                                                                }
                                                            }
                                                        }

                                                    }
                                                }, 1000); //3000 L = 3 detik


                                            }
                                        });
                                    }


                                }
                                //printbillcopy1(dialog);
                            }
                        }
                        cc.close();


                    }
                });
            }
        });

    }

    public void email1(Dialog dialog){
        sdff2 = new SimpleDateFormat("ddMMMyy");
        currentDateandTimee1 = sdff2.format(new Date());

        Date dt1 = new Date();
        sdff1 = new SimpleDateFormat("hhmmssaa");
        timee1 = sdff1.format(dt1);
        ///////////////Toast.makeText(CancelActivity.this, "111111111111111111111111111111", Toast.LENGTH_SHORT).show();
        //btPrintPicture = (Button) dialog.findViewById(R.id.buttonPrintPicture);
        //btPrintPicture.setOnClickListener(this);
        imageViewPicture = (ImageView)dialog.findViewById(R.id.imageViewPicture);
        //imageViewPicture.setOnClickListener(this);
        //getimagee = (Button)findViewById(R.id.imageViewPicture1);
//        rbPaperWidth2 = (RadioButton) dialog.findViewById(R.id.radioButton2Inch);
//        rbPaperWidth3 = (RadioButton) dialog.findViewById(R.id.radioButton3Inch);
//        rbPaperWidth4 = (RadioButton) dialog.findViewById(R.id.radioButton4Inch);
        final RelativeLayout billaa = (RelativeLayout) dialog.findViewById(R.id.billa);

        billaa.setVisibility(View.VISIBLE);

        LinearLayout include = (LinearLayout)dialog.findViewById(R.id.include);
        final LinearLayout imageview = (LinearLayout)dialog.findViewById(R.id.imageview);


        mView = dialog.findViewById(R.id.f_viewreturnsemail);

        db =   openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        db1 =   openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);


        SimpleDateFormat normal = new SimpleDateFormat("dd MMM yy");
        final String normal1 = normal.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa");
        final String time1 = sdf1.format(dt);


        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);

        Cursor date = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (date.moveToFirst()){
            datee = date.getString(25);
            timee = date.getString(12);
        }

        TextView bilnumb = (TextView)mView.findViewById(R.id.billnumber);
        bilnumb.setText(String.valueOf(billno.getText().toString()));

        TextView datees = (TextView)mView.findViewById(R.id.date);
        datees.setText(datee);
        TextView timees = (TextView)mView.findViewById(R.id.time);
        timees.setText(timee);

        LinearLayout custadd = (LinearLayout)mView.findViewById(R.id.address);
        TextView custname = (TextView)mView.findViewById(R.id.cust_name);
        TextView custaddr = (TextView)mView.findViewById(R.id.cust_address);
        TextView custph = (TextView)mView.findViewById(R.id.cust_phno);
        TextView custema = (TextView)mView.findViewById(R.id.cust_emailid);

        TextView tableidd = (TextView)mView.findViewById(R.id.tableid);
        TextView billtypee = (TextView)mView.findViewById(R.id.billtype);
        TextView paymentmethodd = (TextView)mView.findViewById(R.id.paymentmethod);

        TextView compname = (TextView)mView.findViewById(R.id.compname);
        TextView compadd1 = (TextView)mView.findViewById(R.id.address1);
        TextView compadd2 = (TextView)mView.findViewById(R.id.address2);
        TextView compadd3 = (TextView)mView.findViewById(R.id.address3);
        TextView compphnoo = (TextView)mView.findViewById(R.id.phoneno);
        TextView compemail = (TextView)mView.findViewById(R.id.emailid);
        TextView compwebsite = (TextView)mView.findViewById(R.id.website);
        TextView comptaxlicen = (TextView)mView.findViewById(R.id.taxlineone);

        TextView foo = (TextView)mView.findViewById(R.id.billfooterone);

        LinearLayout comaddlogo = (LinearLayout)mView.findViewById(R.id.complogo);
        LinearLayout foott = (LinearLayout)mView.findViewById(R.id.foottt);


        TextView subtotoalam = (TextView)mView.findViewById(R.id.totalamount);


        TextView discval = (TextView)mView.findViewById(R.id.discount);
        TextView discpercent = (TextView)mView.findViewById(R.id.dispercent);

        Cursor caddress = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
        if (caddress.moveToFirst()){
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            custadd.setVisibility(View.VISIBLE);
            if (nam.toString().length()>0){
                custname.setText(nam);
            }else {
                custname.setVisibility(View.GONE);
            }
            if (addr.toString().length()>0){
                custaddr.setText(addr);
            }else {
                custaddr.setVisibility(View.GONE);
            }
            if (phon.toString().length()>0){
                custph.setText(phon);
            }else {
                custph.setVisibility(View.GONE);
            }
            if (emai.toString().length()>0){
                custema.setText(emai);
            }else {
                custema.setVisibility(View.GONE);
            }


        }else {
            custadd.setVisibility(View.GONE);
        }



        Cursor curso1r3 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (curso1r3.moveToFirst()){
            sub1 = curso1r3.getFloat(0);
        }

        Cursor curso1r4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '"+billnoget+"'", null);
        if (curso1r4.moveToFirst()){
            sub2 = curso1r4.getFloat(0);
        }
        float sub12 = sub1+sub2;

        Cursor cursor3 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
        if (cursor3.moveToFirst()){
            sub = cursor3.getString(7);
            subtotoalam.setText(String.valueOf(sub12));
        }

        Cursor compdetails = db.rawQuery("SELECT * FROM Companydetailss", null);
        if (compdetails.moveToFirst()){
            compna = compdetails.getString(1);
            String add1 = compdetails.getString(14);
            String add2 = compdetails.getString(17);
            String add3 = compdetails.getString(18);
            String phonenum = compdetails.getString(2);
            String email = compdetails.getString(15);
            String web = compdetails.getString(16);
            String taxone = compdetails.getString(10);
            String footer = compdetails.getString(12);

            comaddlogo.setVisibility(View.VISIBLE);


            if (compna.toString().length()>0){
                compname.setText(compna);
            }else {
                compname.setVisibility(View.GONE);
            }
            if (add1.toString().length()>0){
                compadd1.setText(add1);
            }else {
                compadd1.setVisibility(View.GONE);

            }
            if (add2.toString().length()>0){
                compadd2.setText(add2);
            }else {
                compadd2.setVisibility(View.GONE);

            }
            if (add3.toString().length()>0){
                compadd3.setText(add3);
            }else {
                compadd3.setVisibility(View.GONE);

            }
            if (phonenum.toString().length()>0){
                compphnoo.setText(phonenum);
            }else {
                compphnoo.setVisibility(View.GONE);

            }
            if (email.toString().length()>0){
                compemail.setText(email);
            }else {
                compemail.setVisibility(View.GONE);

            }
            if (web.toString().length()>0){
                compwebsite.setText(web);
            }else {
                compwebsite.setVisibility(View.GONE);

            }
            if (taxone.toString().length()>0){
                comptaxlicen.setText(taxone);
            }else {
                comptaxlicen.setVisibility(View.GONE);

            }
            if (footer.toString().length()>0){
                foott.setVisibility(View.VISIBLE);
                foo.setText(footer);
            }else {
                foott.setVisibility(View.GONE);
                foo.setVisibility(View.GONE);
            }


        }else {
            comaddlogo.setVisibility(View.GONE);
        }

        ImageView imageButton = (ImageView)mView.findViewById(R.id.viewImagee);
        String[] col={"companylogo"};
        Cursor c=db.query("Logo", col, null, null, null, null, null);

        if(c.moveToFirst()){
            do{
                img=c.getBlob(c.getColumnIndex("companylogo"));
                final Bitmap b1= BitmapFactory.decodeByteArray(img, 0, img.length);
                imageButton.setImageBitmap(b1);
            }while(c.moveToNext());
        }else {
            imageButton.setVisibility(View.GONE);
        }

        Cursor cursor9 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (cursor9.moveToFirst()){
            String tableid = cursor9.getString(15);
            tableidd.setText(tableid);
        }

        Cursor cursor10 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()){
            String billtype = cursor10.getString(5);
            String paymmethod = cursor10.getString(6);
            billtypee.setText(billtype);
            paymentmethodd.setText(paymmethod);
        }





        TableLayout tableLayoutt = (TableLayout) mView.findViewById(R.id.lytpedido);
        tableLayoutt.removeAllViews();

        Cursor ccursorr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String nbg = ccursorr.getString(0);
                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")){
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));



                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);
                    final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);;
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);



                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()){
                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            final TableRow tableRow11 = new TableRow(CancelActivity.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(CancelActivity.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(CancelActivity.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);


                            row.removeView(tv8);

                            Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '"+billnoget+"'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor4.moveToFirst()){
                                sub2a = cursor4.getFloat(0);
                                String sub2a1 = String.valueOf(sub2a);
                                ss = Float.parseFloat(sub2a1)+Float.parseFloat(tototot);
                                ss1 = String.valueOf(ss);
                            }

                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(ss1);
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        }while (modcursor.moveToNext());

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                float vtq = disc_cursor.getFloat(31);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(CancelActivity.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(CancelActivity.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(CancelActivity.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(31));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }

                    }
                    else {
                        tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                float vtq = disc_cursor.getFloat(31);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(CancelActivity.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(CancelActivity.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(CancelActivity.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(31));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }

                    }

                    tableLayoutt.addView(row);

                    tableLayoutt.addView(tableLayout1);
                    tableLayoutt.addView(tableLayout_disc);

                }



            } while (ccursorr.moveToNext());
        }



        TableLayout tableLayouttreturn = (TableLayout) mView.findViewById(R.id.lytpedidoreturn);
        tableLayouttreturn.removeAllViews();

        Cursor ccursorreturn = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorreturn.moveToFirst()) {

            do {

                String name = ccursorreturn.getString(1);
                String value = ccursorreturn.getString(2);
                String pq = ccursorreturn.getString(5);
                String itna = ccursorreturn.getString(2);
                String pricee = ccursorreturn.getString(3);
                String tototot = ccursorreturn.getString(4);

                //String newpar =
                final String newid = ccursorreturn.getString(19);
                final String nbg = ccursorreturn.getString(0);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")){
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                    final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);


                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);;
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);



                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()){
                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            final TableRow tableRow11 = new TableRow(CancelActivity.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(CancelActivity.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(CancelActivity.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);

                            Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor4.moveToFirst()){
                                sub2a = cursor4.getFloat(0);
                                String sub2a1 = String.valueOf(sub2a);
                                ss = Float.parseFloat(sub2a1)+Float.parseFloat(tototot);
                                ss1 = String.valueOf(ss);
                            }

                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(ss1);
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        }while (modcursor.moveToNext());

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(CancelActivity.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(CancelActivity.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(CancelActivity.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(28));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }
                    }
                    else {
                        tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(CancelActivity.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(CancelActivity.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 3.44f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(CancelActivity.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.60f));
                                    disc_tv.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                    disc_tv.setText("-" + disc_cursor.getString(28));
                                    disc_tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                    row_disc.addView(disc_tv);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }

                    }

                    tableLayouttreturn.addView(row);

                    tableLayouttreturn.addView(tableLayout1);

                    tableLayouttreturn.addView(tableLayout_disc);

                }

            } while (ccursorreturn.moveToNext());

            Cursor ccursorreturn1 = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"' AND type = 'Modifier'", null);
            if (ccursorreturn1.moveToFirst()) {

                //do {

                String name = ccursorreturn1.getString(1);
                String value = ccursorreturn1.getString(2);
                String pq = ccursorreturn1.getString(5);
                String itna = ccursorreturn1.getString(2);
                String pricee = ccursorreturn1.getString(3);
                String tototot = ccursorreturn1.getString(4);

                final String newid = ccursorreturn1.getString(19);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Modifier")) {
                    Cursor cursor = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"' AND type = 'Modifier'", null);
                    if (cursor.moveToFirst()){
                        do {
                            String parid = cursor.getString(7);
                            String parnam = cursor.getString(6);
                            final String modiname = cursor.getString(1);
                            final String modiquan = cursor.getString(2);
                            String modiprice = cursor.getString(3);
                            String moditotal = cursor.getString(4);
                            String modisix = cursor.getString(6);
                            final String modiid = cursor.getString(0);
                            String tvx = cursor.getString(2);

                            /////////////Toast.makeText(CancelActivity.this, "11c "+cursor.getCount() + " "+modiname, Toast.LENGTH_SHORT).show();

                            Cursor cursor1 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"' AND _idd = '"+parid+"' AND itemname = '"+parnam+"'", null);

                            Cursor modt = db1.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND _idd = '"+parid+"' AND itemname = '"+parnam+"'", null);
                            if (modt.moveToFirst()) {
                                do {
                                    //row.removeView(tv3);
                                    float aq = modt.getFloat(0);
                                    String aqq = String.valueOf(aq);
                                    aqq1 = Float.parseFloat(aqq);
                                    aqq2 = String.valueOf(aqq1);
                                } while (modt.moveToNext());
                            }

                            if (cursor1.moveToFirst()){

                            }else {

//                                    Cursor cursor2 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '"+modisix+"' AND parentid = '"+parid+"'", null);
//                                    while (cursor2.moveToFirst()){
//                                        String one = cursor2.getString(1);
                                ///////////////Toast.makeText(CancelActivity.this, "11d "+cursor2.getCount()+ " "+one, Toast.LENGTH_SHORT).show();

                                final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);
                                //final TableLayout tableLayout21 = new TableLayout(CancelActivity.this);

                                final TableRow row = new TableRow(CancelActivity.this);
                                row.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                TextView tv = new TextView(CancelActivity.this);
                                tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                                //tv.setTextSize(18);
                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setPadding(0, 0, 0, 0);
                                //text = ccursorr.getString(1);
                                tv.setText(tvx);
                                row.addView(tv);

                                TextView tv1 = new TextView(CancelActivity.this);
                                tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv1.setGravity(Gravity.CENTER_VERTICAL);
                                tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv1.setTextSize(15);
                                //tv.setPadding(0, 0, 0, 0);
                                //text = ccursorr.getString(1);
                                tv1.setText(modisix);
                                String value1 = tv1.getText().toString();
                                row.addView(tv1);

                                TextView tv51 = new TextView(CancelActivity.this);
                                tv51.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                tv51.setText("");
                                row.addView(tv51);

                                TextView tv61 = new TextView(CancelActivity.this);
                                tv61.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv61.setText("");
                                row.addView(tv61);

                                tableLayouttreturn.addView(row);


                                final TableRow tableRow11 = new TableRow(CancelActivity.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                final TextView tvv = new TextView(CancelActivity.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(CancelActivity.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tvx.toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(modiprice));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);


                                final TextView tv8 = new TextView(CancelActivity.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tvx.toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(moditotal);
                                tableRow11.addView(tv8);

                                tableLayout1.addView(tableRow11);

                                //tableLayouttreturn.addView(tableLayout21);
                                tableLayouttreturn.addView(tableLayout1);
                                // }

                            }
                        }while (cursor.moveToNext());

                    }
                }
                //}while (ccursorreturn1.moveToNext());
            }
        }





        TableLayout tableLayout1 = (TableLayout) mView.findViewById(R.id.lytpedidooo);
        tableLayout1.removeAllViews();

        Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {

                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(50);
                String itna = ccursor.getString(1);

                if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")){

                }else {

//                    final TableRow row = new TableRow(CancelActivity.this);
//                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
//                            TableRow.LayoutParams.WRAP_CONTENT));
//                    row.setGravity(Gravity.CENTER);

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TableRow.LayoutParams lp, lp1, lp2;

//                                    final TextView tv = new TextView(CancelActivity.this);
//                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                    tv.setTextSize(16);
//                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                    row.addView(tv);

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
//                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(Color.parseColor("#000000"));
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
//                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    //tv3.setPadding(0,0,10,0);
                    tv3.setText(String.format("%.2f", tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }


            } while (ccursor.moveToNext());
        }

        Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '"+billnoget+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn.moveToFirst()) {

            do {

                String name = ccursortaxreturn.getString(10);
                String value = ccursortaxreturn.getString(9);
                String pq = ccursortaxreturn.getString(39);
                String itna = ccursortaxreturn.getString(1);

                if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")){

                }else {

//                    final TableRow row = new TableRow(CancelActivity.this);
//                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
//                            TableRow.LayoutParams.WRAP_CONTENT));
//                    row.setGravity(Gravity.CENTER);

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TableRow.LayoutParams lp, lp1, lp2;

//                                    final TextView tv = new TextView(CancelActivity.this);
//                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                    tv.setTextSize(16);
//                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                    row.addView(tv);

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
//                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(Color.parseColor("#000000"));
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
//                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    //tv3.setPadding(0,0,10,0);
                    tv3.setText(String.format("%.2f", tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }


            } while (ccursortaxreturn.moveToNext());
        }


        String phon = "0";

        Cursor caddress1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(CancelActivity.this);
        tvvs.setText(phon);

        Cursor us_name1 = db1.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()){
//            Toast.makeText(CancelActivity.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(CancelActivity.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")){
//                paymentmethodd
                Cursor cursorr = null;
                if (paymentmethodd.getText().toString().equals("  Dine-in") || paymentmethodd.getText().toString().equals("  General") || paymentmethodd.getText().toString().equals("  Others")){
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymentmethodd.getText().toString().equals("  Takeaway") || paymentmethodd.getText().toString().equals("  Main")){
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymentmethodd.getText().toString().equals("  Home delivery")){
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//                ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String .valueOf(sub12)) / 100;
                        float tota = mul;
                        tv3.setText(String.format("%.2f", tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);


                    } while (cursorr.moveToNext());
                }
            }else {

                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(CancelActivity.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(CancelActivity.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(CancelActivity.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(CancelActivity.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);
                    }

                }
            }

        }else {
//            Toast.makeText(CancelActivity.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymentmethodd.getText().toString().equals("  Dine-in") || paymentmethodd.getText().toString().equals("  General") || paymentmethodd.getText().toString().equals("  Others")){
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymentmethodd.getText().toString().equals("  Takeaway") || paymentmethodd.getText().toString().equals("  Main")){
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymentmethodd.getText().toString().equals("  Home delivery")){
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//                ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String .valueOf(sub12)) / 100;
                    float tota = mul;
                    tv3.setText(String.format("%.2f", tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);


                } while (cursorr.moveToNext());
            }
        }


//        ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
//        if (ccursor.moveToFirst()) {
//
//            do {
//
//                String name = ccursor.getString(1);
//                String value = ccursor.getString(2);
//
//                final TableRow row = new TableRow(CancelActivity.this);
//                row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
//                        TableRow.LayoutParams.WRAP_CONTENT));
//                row.setGravity(Gravity.CENTER);
//
//                TableRow.LayoutParams lp, lp1, lp2;
//
////                                final TextView tv = new TextView(CancelActivity.this);
////                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                tv.setTextSize(16);
////                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                                row.addView(tv);
//
//                TextView tvv = new TextView(CancelActivity.this);
//                tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                //tv.setBackgroundResource(R.drawable.cell_shape);
//                tvv.setGravity(Gravity.START);
//                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tvv.setText(name);
//
//                TextView tv1 = new TextView(CancelActivity.this);
//                tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                tv1.setGravity(Gravity.START);
//                tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tv1.setText(value);
//                tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                String value1 = tv1.getText().toString();
//
//                TextView tv2 = new TextView(CancelActivity.this);
//                //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
//                //tv2.setLayoutParams(lp);
//                tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                tv2.append(name + " @ " + value + "%");
//                tv2.setPadding(0, 0, 20, 0);
//                tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                row.addView(tv2);
//
//                TextView textView1 = new TextView(CancelActivity.this);
//                textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                row.addView(textView1);
//
//                TextView tv3 = new TextView(CancelActivity.this);
////                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
////                tv3.setLayoutParams(lp2);
//                tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                //tv3.setPadding(0,0,10,0);
//                tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String .valueOf(sub12)) / 100;
//                float tota = mul;
//                tv3.setText(String.format("%.2f", tota));
//                //row.addView(tv3);
//
//
//                tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                String value2 = tv3.getText().toString();
//                row.addView(tv3);
//
//                tableLayout1.addView(row);
//
//
//            } while (ccursor.moveToNext());
//        }

        float sum = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(2);
            sum = sum
                    + Float.parseFloat(mTextView.getText().toString());
        }



        Cursor cursor4 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billno.getText().toString()+"'", null);
        if (cursor4.moveToFirst()){
            String taxpe = cursor4.getString(5);
            discpercent.setText(taxpe);
            float on = (Float.parseFloat(subtotoalam.getText().toString())/100)*Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            discval.setText(on1);
        }else {
            discval.setText("0.0");
        }

//        Cursor cursor5 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billno.getText().toString()+"'", null);
//        if (cursor5.moveToFirst()){
//            String dsirs = cursor5.getString(7);
//            discval.setText(dsirs);
//        }




        Cursor cursor7 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billnoget+"'", null);
        if (cursor7.moveToFirst()){
            String taxpe = cursor7.getString(5);
            discpercent.setText(taxpe);
        }

        float newe;


        TextView savingsval = (TextView)mView.findViewById(R.id.disc_savings);

        Cursor cursor51 = db1.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '"+billnoget+"' AND disc_thereornot = 'yes'", null);
        if (cursor51.moveToFirst()){
            float dsirsq = cursor51.getFloat(0);
            String rop = String.format("%.2f", dsirsq);
            savingsval.setText(rop);
        }


        alltotal = (TextView) mView.findViewById(R.id.fulltotal1);
        refundamount = (TextView) mView.findViewById(R.id.fulltotal1return);

        Cursor billcan = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (billcan.moveToFirst()){
            String asd = billcan.getString(18);
            refundamounta = String.valueOf(asd);
        }

        Cursor c111 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoget+"'", null);
        if (c111.moveToFirst()){
            String c11 = c111.getString(2);
            alltotal1 = c11;
        }
        float min = Float.parseFloat(refundamounta)-Float.parseFloat(alltotal1);
        String mn1 = String.valueOf(min);

        refundamount.setText(mn1);


        TextView taxtot = (TextView) mView.findViewById(R.id.totalbilltaxess);
        //float summus = Float.parseFloat()
        taxtot.setText(insert1_cc);;
        taxtot.append(String.format("%.2f", sum));


        if (discval.getText().toString().equals("")){
            newe = sum + Float.parseFloat(String.valueOf(sub12));
        }else {
            newe = sum + Float.parseFloat(String.valueOf(sub12)) + Float.parseFloat(discval.getText().toString());
        }



        if (str_round_off.toString().equals("No")) {
            TextView round = (TextView) mView.findViewById(R.id.roundvalue);
            round.setText("'0");
        }else {
            if (newe % 1 != 0) {
                int newww = (int) newe;
                float decpart = newe - newww;
                if (decpart > 0.5) {
                    float addall = newe;
                    TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    round.setText("+ " + String.format("%.2f", dee));
                } else {
                    float addall = newe;
                    TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    round1.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                int addall = (int) newe;
                TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                round.setText("+ " + "0.00");
            }
        }

        Cursor c1 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoget+"'", null);
        if (c1.moveToFirst()){
            String c11 = c1.getString(2);
            alltotal.setText(c11);
        }


        mView.setDrawingCacheEnabled(true);
        mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
        mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
        mView.buildDrawingCache(true);
        include.setVisibility(View.INVISIBLE);
        imageview.setVisibility(View.INVISIBLE);

        imageview.setVisibility(View.INVISIBLE);
        Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
        mView.setDrawingCacheEnabled(false);
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

        imageViewPicture.setImageBitmap(b);

        Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                .getBitmap();
        Drawable d = new BitmapDrawable(getResources(), mBitmap);


//        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_bills");
//        if (!exportDir.exists()) {
//            exportDir.mkdirs();
//        }
        File exportDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), "/IVEPOS_bills");
        if (!exportDir.exists()) {
            exportDir.mkdirs();
        }


        file = new File(exportDir, "IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg");

        try {
            FileOutputStream ostream = new FileOutputStream(file);
            mBitmap.compress(Bitmap.CompressFormat.PNG, 10, ostream);
            ostream.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }

//        String query = null;
//        try {
//            query = URLEncoder.encode("apples oranges", "utf-8");
//        } catch (UnsupportedEncodingException e) {
//            e.printStackTrace();
//        }

        TextView textView = new TextView(CancelActivity.this);
        textView.setText(R.string.my_url);
        String url = "www.intuitionsoftwares.com";

        String reqUrl = "http://google.com";
        Uri.Builder builder = Uri.parse(reqUrl).buildUpon();
        builder.appendQueryParameter("mesg", "Value for mesg");
        String finalUri = builder.build().toString();

        Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            strcompanyname = getcom.getString(1);
            stremailid = getcom.getString(15);
        }else {
            strcompanyname = "";
        }

        TextView vbn = new TextView(CancelActivity.this);
        vbn.setText(stremailid);

        String date_mail = "", time_mail = "";
        Cursor cursor91 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (cursor91.moveToFirst()){
            date_mail = cursor91.getString(25);
            time_mail = cursor91.getString(12);
        }

//        final String msg = "Refund confirmation from "+compna+"\n\nDear Customer, \n\nThis is to inform that you have been refunded an amount of "+"Rs. "+refundamout.getText().toString()+" on your bill "+billnoget+" dated "+datee+".\n\nWe appreciate your business and hope to see you again soon. \n"+compna+"\n\n\n" +
//                "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                "Powered by: "+ Uri.parse(url);

        final String msg =
                "<Html>" +
                        "<Body>" +
                        "<div>" +
                        " <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"100%\" valign=\"top\" bgcolor=\"#f8f8f8\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1;margin-top:50px\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"460\" >" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td height=\"30\">" +
                        "</td>" +
                        "</tr>" +
                        "</tbody>" +
                        "</table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody>" +
                        "<tr>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#00929f;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                        "<img src=\"http://www.intuitionsoftwares.com/resources/intuition_logo_header_with_text_240.png\" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
//                        "<img src="+logo+" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
                        "<p><h1>"+strcompanyname+"</h1></p>" +

                        "</td>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "</tr>" +
                        "<tr>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "<span style=\"text-decoration:none;color:#2f2f36;font-weight:bold;font-size:32px;line-height:32px\">Bill "+billnoget+"</span><br>" +
                        "</td>" +
                        "<td width=\"40\"></td>" +
                        "</tr>" +
                        "<tr>" +
                        "<td width=\"40\"></td>" +
                        "<td width=\"460\" style=\"font-size:16px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">for Customer <br> from <b>"+strcompanyname+"</b><br>" +
                        " </td>" +
                        "<td width=\"40\">" +
                        "</td>" +
                        "</tr>" +
                        "<tr></tr>" +
                        "<tr><td width=\"40\"></td>" +
                        "<td width=\"512\" height=\"30\">" +
                        "</td> <td width=\"40\"></td></tr></tbody></table></td>" +
                        "</tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" bgcolor=\"#ffffff\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td width=\"460\" height=\"5\" bgcolor=\"#ffffff\"></td></tr>" +
                        "<tr><td width=\"460\" height=\"1\" bgcolor=\"#e1e1e1\"></td></tr>" +
                        "<tr><td width=\"460\" height=\"10\" bgcolor=\"#ffffff\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\"><tbody>" +
                        "<tr> <td width=\"460\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"20\"></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"40\"></td><td width=\"510\" style=\"font-size:14px;color:#444;font-weight:normal;text-align:left;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">Hi "+custname.getText().toString()+",<br>Your refunded amount is "+insert1_rs+refundamout.getText().toString()+" <br><br>We appreciate your Business and hope to see you again soon,<br>"+strcompanyname+" <br>" +
                        //Correct(tic) symbol
                        "<p align=\"center\"> <img src=\"https://static.wixstatic.com/media/ff8d82_453b1bed7c174e398e9fc333af3692bf~mv2.png\" width=\"60\" height=\"60\"></p>" +

                        "<p style=\"font-size:18px;border-top:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;padding:10px 0;background:#fefefe;text-align:center;margin:5px 0\">Paid: <span style=\"white-space:nowrap;font-weight:bold;font-size:18px\">"+insert1_rs+refundamout.getText().toString()+" </span>" +
                        "</p><br></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody>" +
                        "<tr><td width=\"\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"40\"></td>" +
                        "<td width=\"510\" style=\"font-size:14px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "<div></div>" +
                        "<p style=\"margin-top:3px;color:#444\">Dated: <span style=\"white-space:nowrap;font-weight:bold;font-size:14px\">"+date_mail+",</span> "+time_mail+" </p>" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td>" +
                        "<td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td width=\"460\" height=\"10\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f9f9f9\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\"><tbody>" +
                        "<tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td height=\"10\" ></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody><tr><td width=\"40\"></td><td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td>" +
                        "<td width=\"460\" style=\"font-size:14px;color:#959599;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:20px;text-align:center\">" +
                        "<p>Disclaimer: This information may be confidential and is intended only for the recipient.</p>" +
                        "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"462\" bgcolor=\"#f0f0f0\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\">" +
                        "<tbody> <tr> <td width=\"462\" height=\"10\"></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
                        "<tbody> <tr> <td width=\"460\" bgcolor=\"#f0f0f0\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody> <tr> <td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
                        "<tr><td width=\"30\"></td><td width=\"530\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" ><tbody><tr>" +
                        "<td height=\"0\" align=\"center\" style=\"font-size:14px;color:#b8b9c1;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:24px\">" +
                        "<p><a style=\"text-decoration:none;color:#959599\" target=\"_blank\">If you think this mail is not for you, please delete and contact<a href=\"mailto:"+stremailid+"\" style=\"text-decoration:none;color:#008f9b;font-weight:bold\" target=\"_blank\">\n" +
                        ""+vbn.getText().toString()+"</a> </a></td>" +
                        "</tr></tbody></table><table width=\"140\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"left\">" +
                        "<tbody><tr><td width=\"140\"></td></tr></tbody></table></td><td width=\"30\"></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
                        "<td width=\"460\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;border-radius:0 0 10px 10px;background:#f0f0f0\">" +
                        "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"14\"></td></tr></tbody></table></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
                        "<tbody><tr><td height=\"20\"></td></tr><tr>" +
                        "<td style=\"text-align:center\"><a href=\"http://www.intuitionsoftwares.com/\" target=\"_blank\" ><img src=\"www.intuitionsoftwares.com/resources/Powered%20by%20Intuition.png\" alt=\"Powered by Intuition\" border=\"0\" style=\"text-align:center;min-width:65px\"></a></td></tr>" +
                        "<tr>" +
                        "<td height=\"40\" style=\"line-height:1px\"></td></tr></tbody></table></td></tr></tbody></table><div><div>" +
                        "</div></div><span></span><div></div><div></div></div>" +
                        "</Body>" +
                        "</Html>";

        Uri u1  =   null;
        u1  =   Uri.fromFile(file);

//                Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);
//                emailIntent.setType("image/jpeg");
//                emailIntent.putExtra(Intent.EXTRA_EMAIL, u1);
//                startActivity(Intent.createChooser(emailIntent, "Send mail..."));

        billaa.setVisibility(View.GONE);

//        Intent emailIntent = new Intent(Intent.ACTION_SENDTO);
//        emailIntent.setData(Uri.parse("mailto:"));
//        emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, compna);
//        emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, msg);
//
////                emailIntent.setType("image/jpeg");
////                emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, new String[]{to});
////                emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, subj);
////                emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, msg);
//        emailIntent.putExtra(Intent.EXTRA_STREAM, u1);
//        startActivity(Intent.createChooser(emailIntent, "Send mail..."));


        Cursor cursore = db.rawQuery("SELECT * FROM Email_setup", null);
        if (cursore.moveToFirst()){
            final String un = cursore.getString(1);
            final String pwd = cursore.getString(2);
            final String client = cursore.getString(3);
            Cursor em = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
            if (em.moveToFirst()){
                email_id_send = new EditText(CancelActivity.this);
                String em1 = em.getString(3);
                if (client.toString().equals("Gmail")) {
                    email_id_send.setText(em1);
                    getResultsFromApi();
                    new MakeRequestTask_bill(mCredential).execute();
                }else {
                    if (client.toString().equals("Yahoo")){
//                        Toast.makeText(getActivity(), "yahoo "+un, Toast.LENGTH_LONG).show();

                        String toEmails = em1;
                        List toEmailList = Arrays.asList(toEmails
                                .split("\\s*,\\s*"));
                        new SendMailTask_Yahoo_homebill(CancelActivity.this).execute(un,
                                pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);



                    }else {
                        if (client.toString().equals("Hotmail")){
//                            Toast.makeText(getActivity(), "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();

                            String toEmails = em1;
                            List toEmailList = Arrays.asList(toEmails
                                    .split("\\s*,\\s*"));
                            new SendMailTask_Hotmail_Outlook_homebill(CancelActivity.this).execute(un,
                                    pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                        }else {
                            if (client.toString().equals("Office365")) {
//                                Toast.makeText(getActivity(), "office 365 " + un, Toast.LENGTH_LONG).show();

                                String toEmails = em1;
                                List toEmailList = Arrays.asList(toEmails
                                        .split("\\s*,\\s*"));
                                new SendMailTask_Office365_homebill(CancelActivity.this).execute(un,
                                        pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                            }
                        }
                    }
                }
//            Toast.makeText(CancelActivity.this, "email is "+em1, Toast.LENGTH_LONG).show();
            }else {
//            Toast.makeText(CancelActivity.this, "show dialog", Toast.LENGTH_LONG).show();

                final Dialog dialogenteremail = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
                dialogenteremail.setContentView(R.layout.dialog_payment_enter_email);
                dialogenteremail.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                dialogenteremail.setCanceledOnTouchOutside(false);
                dialogenteremail.show();

                ImageView btncancel = (ImageView) dialogenteremail.findViewById(R.id.btncancel);
                btncancel.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialogenteremail.dismiss();
                    }
                });

                final TextInputLayout email_id_send_layout = (TextInputLayout) dialogenteremail.findViewById(R.id.email_id_send_layout);

                email_id_send = (EditText) dialogenteremail.findViewById(R.id.email_id_send);

                email_id_send.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

                    }

                    @Override
                    public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                        email_id_send_layout.setError(null);
                    }

                    @Override
                    public void afterTextChanged(Editable editable) {

                    }
                });

                ImageView closetext = (ImageView) dialogenteremail.findViewById(R.id.closetext);
                closetext.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (email_id_send.getText().toString().trim().matches(emailPattern)) {
                            if (client.toString().equals("Gmail")) {
//                                email_id_send.setText(em1);
//                                getResultsFromApi();
//                                new MakeRequestTask(mCredential).execute();
                                getResultsFromApi();
                                new MakeRequestTask_bill(mCredential).execute();
                            }else {
                                if (client.toString().equals("Yahoo")){
//                        Toast.makeText(getActivity(), "yahoo "+un, Toast.LENGTH_LONG).show();

                                    String toEmails = email_id_send.getText().toString();
                                    List toEmailList = Arrays.asList(toEmails
                                            .split("\\s*,\\s*"));
                                    new SendMailTask_Yahoo_homebill(CancelActivity.this).execute(un,
                                            pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);



                                }else {
                                    if (client.toString().equals("Hotmail")){
//                            Toast.makeText(getActivity(), "Hotmail and Outlook "+un, Toast.LENGTH_LONG).show();

                                        String toEmails = email_id_send.getText().toString();
                                        List toEmailList = Arrays.asList(toEmails
                                                .split("\\s*,\\s*"));
                                        new SendMailTask_Hotmail_Outlook_homebill(CancelActivity.this).execute(un,
                                                pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                                    }else {
                                        if (client.toString().equals("Office365")) {
//                                Toast.makeText(getActivity(), "office 365 " + un, Toast.LENGTH_LONG).show();

                                            String toEmails = email_id_send.getText().toString();
                                            List toEmailList = Arrays.asList(toEmails
                                                    .split("\\s*,\\s*"));
                                            new SendMailTask_Office365_homebill(CancelActivity.this).execute(un,
                                                    pwd, toEmailList, strcompanyname, msg, currentDateandTimee1, timee1);

                                        }
                                    }
                                }
                            }
                            dialogenteremail.dismiss();
                        }
                        else {
                            email_id_send_layout.setError("Invalid email address");
                        }

                    }
                });
            }

        }else {
            //only sender not there recipient not required
            final Dialog dialoge = new Dialog(CancelActivity.this, R.style.timepicker_date_dialog);
            dialoge.setContentView(R.layout.email_prerequisites);
            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
            dialoge.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
            dialoge.show();

            ImageButton btncancel = (ImageButton) dialoge.findViewById(R.id.btncancel);
            btncancel.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialoge.dismiss();
                }
            });

            ImageView recipient_notset = (ImageView) dialoge.findViewById(R.id.recipient_notset);
            ImageView recipient_set = (ImageView) dialoge.findViewById(R.id.recipient_set);

            ImageView sender_notset = (ImageView) dialoge.findViewById(R.id.sender_notset);
            ImageView sender_set = (ImageView) dialoge.findViewById(R.id.sender_set);

            LinearLayout recipient_layout = (LinearLayout) dialoge.findViewById(R.id.recipient_layout);
            recipient_layout.setVisibility(View.GONE);

            sender_notset.setVisibility(View.VISIBLE);

            recipient_set.setVisibility(View.VISIBLE);

            Button gotosettings = (Button) dialoge.findViewById(R.id.gotosettings);
            gotosettings.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(intent);
//                                                                getActivity().finish();
                    dialoge.dismiss();
                }
            });

            Button gotosettings1 = (Button) dialoge.findViewById(R.id.gotosettings1);
            gotosettings1.setVisibility(View.GONE);
            gotosettings1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(CancelActivity.this, EmailSetup.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(intent);
//                                                                getActivity().finish();
                    dialoge.dismiss();
                }
            });
        }

    }

    public void email(Dialog dialog){
        sdff2 = new SimpleDateFormat("ddMMMyy");
        currentDateandTimee1 = sdff2.format(new Date());

        Date dt1 = new Date();
        sdff1 = new SimpleDateFormat("hhmmssaa");
        timee1 = sdff1.format(dt1);

        imageViewPicture = (ImageView)dialog.findViewById(R.id.imageViewPicture);
        //imageViewPicture.setOnClickListener(this);
        //getimagee = (Button)findViewById(R.id.imageViewPicture1);
//        rbPaperWidth2 = (RadioButton) dialog.findViewById(R.id.radioButton2Inch);
//        rbPaperWidth3 = (RadioButton) dialog.findViewById(R.id.radioButton3Inch);
//        rbPaperWidth4 = (RadioButton) dialog.findViewById(R.id.radioButton4Inch);
        //final RelativeLayout billaa = (RelativeLayout)findViewById(R.id.billa);

        LinearLayout include = (LinearLayout)dialog.findViewById(R.id.include);
        final LinearLayout imageview = (LinearLayout)dialog.findViewById(R.id.imageview);

        mView = dialog.findViewById(R.id.f_view);


        db =   openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        db1 =   openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);


        SimpleDateFormat normal = new SimpleDateFormat("dd MMM yy");
        final String normal1 = normal.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa");
        final String time1 = sdf1.format(dt);


        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);


        TableLayout tableLayoutt = (TableLayout) mView.findViewById(R.id.lytpedidooo);
        tableLayoutt.removeAllViews();


        TextView bilnumb = (TextView)mView.findViewById(R.id.billnumb);
        bilnumb.setText(String.valueOf(billno.getText().toString()));

        TextView datees = (TextView)mView.findViewById(R.id.date);
        datees.setText(datee);
        TextView timees = (TextView)mView.findViewById(R.id.time);
        timees.setText(timee);

        LinearLayout custadd = (LinearLayout)mView.findViewById(R.id.address);
        TextView custname = (TextView)mView.findViewById(R.id.cust_name);
        TextView custaddr = (TextView)mView.findViewById(R.id.cust_address);
        TextView custph = (TextView)mView.findViewById(R.id.cust_phno);
        TextView custema = (TextView)mView.findViewById(R.id.cust_emailid);

        LinearLayout comaddlogo = (LinearLayout)mView.findViewById(R.id.complogo);
        LinearLayout foott = (LinearLayout)mView.findViewById(R.id.foottt);

        TextView subtotoalam = (TextView)mView.findViewById(R.id.subtotal);
        TextView discpercent = (TextView)mView.findViewById(R.id.dispercent);
        TextView discval = (TextView)mView.findViewById(R.id.discount);
        TextView taxvalue = (TextView)mView.findViewById(R.id.tax);
        TextView roundedoffvalue = (TextView)mView.findViewById(R.id.roundedoff);
        TextView total = (TextView)mView.findViewById(R.id.totalold);

        TextView compname = (TextView)mView.findViewById(R.id.compname);
        TextView compadd1 = (TextView)mView.findViewById(R.id.address1);
        TextView compadd2 = (TextView)mView.findViewById(R.id.address2);
        TextView compadd3 = (TextView)mView.findViewById(R.id.address3);
        TextView compphnoo = (TextView)mView.findViewById(R.id.phoneno);
        TextView compemail = (TextView)mView.findViewById(R.id.emailid);
        TextView compwebsite = (TextView)mView.findViewById(R.id.website);
        TextView comptaxlicen = (TextView)mView.findViewById(R.id.taxlineone);


        TextView foo = (TextView)mView.findViewById(R.id.footer);

        Cursor caddress = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billno.getText().toString()+"'", null);
        if (caddress.moveToFirst()){
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            custadd.setVisibility(View.VISIBLE);
            if (nam.toString().length()>0){
                custname.setText(nam);
            }else {
                custname.setVisibility(View.GONE);
            }
            if (addr.toString().length()>0){
                custaddr.setText(addr);
            }else {
                custaddr.setVisibility(View.GONE);
            }
            if (phon.toString().length()>0){
                custph.setText(phon);
            }else {
                custph.setVisibility(View.GONE);
            }
            if (emai.toString().length()>0){
                custema.setText(emai);
            }else {
                custema.setVisibility(View.GONE);
            }


        }else {
            custadd.setVisibility(View.GONE);
        }

        Cursor compdetails = db.rawQuery("SELECT * FROM Companydetailss", null);
        if (compdetails.moveToFirst()){
            compna = compdetails.getString(1);
            String add1 = compdetails.getString(14);
            String add2 = compdetails.getString(17);
            String add3 = compdetails.getString(18);
            String phonenum = compdetails.getString(2);
            String email = compdetails.getString(15);
            String web = compdetails.getString(16);
            String taxone = compdetails.getString(10);
            String footer = compdetails.getString(12);

            comaddlogo.setVisibility(View.VISIBLE);


            if (compna.toString().length()>0){
                compname.setText(compna);
            }else {
                compname.setVisibility(View.GONE);
            }
            if (add1.toString().length()>0){
                compadd1.setText(add1);
            }else {
                compadd1.setVisibility(View.GONE);

            }
            if (add2.toString().length()>0){
                compadd2.setText(add2);
            }else {
                compadd2.setVisibility(View.GONE);

            }
            if (add3.toString().length()>0){
                compadd3.setText(add3);
            }else {
                compadd3.setVisibility(View.GONE);

            }
            if (phonenum.toString().length()>0){
                compphnoo.setText(phonenum);
            }else {
                compphnoo.setVisibility(View.GONE);

            }
            if (email.toString().length()>0){
                compemail.setText(email);
            }else {
                compemail.setVisibility(View.GONE);

            }
            if (web.toString().length()>0){
                compwebsite.setText(web);
            }else {
                compwebsite.setVisibility(View.GONE);

            }
            if (taxone.toString().length()>0){
                comptaxlicen.setText(taxone);
            }else {
                comptaxlicen.setVisibility(View.GONE);

            }
            if (footer.toString().length()>0){
                foott.setVisibility(View.VISIBLE);
                foo.setText(footer);
            }else {
                foott.setVisibility(View.GONE);
                foo.setVisibility(View.GONE);
            }


        }else {
            comaddlogo.setVisibility(View.GONE);
        }

        ImageView imageButton = (ImageView)mView.findViewById(R.id.viewImagee);
        String[] col={"companylogo"};
        Cursor c=db.query("Logo", col, null, null, null, null, null);

        if(c.moveToFirst()){
            do{
                img=c.getBlob(c.getColumnIndex("companylogo"));

            }while(c.moveToNext());
        }else {
            imageButton.setVisibility(View.GONE);
        }

        final Bitmap b1= BitmapFactory.decodeByteArray(img, 0, img.length);
        imageButton.setImageBitmap(b1);

        Cursor cursor3 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
        if (cursor3.moveToFirst()){
            sub = cursor3.getString(7);
            subtotoalam.setText(sub);
        }

        Cursor curso1r3 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
        if (curso1r3.moveToFirst()){
            sub1 = curso1r3.getFloat(0);
        }

        Cursor curso1r4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
        if (curso1r4.moveToFirst()){
            sub2 = curso1r4.getFloat(0);
        }
        float sub12 = sub1+sub2;

        subtotoalam.setText(String.valueOf(sub12));

        Cursor cursor4 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billno.getText().toString()+"'", null);
        if (cursor4.moveToFirst()){
            String taxpe = cursor4.getString(5);
            discpercent.setText(taxpe);
            float on = (Float.parseFloat(subtotoalam.getText().toString())/100)*Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            discval.setText(on1);
        }

//        Cursor cursor5 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '"+billno.getText().toString()+"'", null);
//        if (cursor5.moveToFirst()){
//            String dsirs = cursor5.getString(7);
//            discval.setText(dsirs);
//        }

        Cursor cursor6 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
        if (cursor6.moveToFirst()){
            String sub = cursor6.getString(8);
            if (sub.equals("")){
                taxvalue.setText("0.0");
            }else {
                float vv = Float.parseFloat(sub);
                taxvalue.setText(String.format("%.2f", vv));
            }

        }

        Cursor cursor7 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
        if (cursor7.moveToFirst()){
            String sub = cursor7.getString(9);
            roundedoffvalue.setText(sub);
        }

        Cursor cursor8 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billno.getText().toString()+"'", null);
        if (cursor8.moveToFirst()){
            String sub = cursor8.getString(2);
            total.setText(sub);
        }

        Cursor ccursorr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);
                int padding_in_px;

                int padding_in_dp = 38;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")){
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));



                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.MONOSPACE);
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.MONOSPACE);
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.MONOSPACE);
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.MONOSPACE);
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);



                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()){

                        final String modiname = modcursor.getString(1);
                        final String modiquan = modcursor.getString(2);
                        String modiprice = modcursor.getString(3);
                        String moditotal = modcursor.getString(4);
                        final String modiid = modcursor.getString(0);

                        final TableRow tableRow11 = new TableRow(CancelActivity.this);
                        tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));





                        final TextView tvv = new TextView(CancelActivity.this);
                        // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                        tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        //tv.setGravity(Gravity.CENTER);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.MONOSPACE);
                        tvv.setText("");
                        tableRow11.addView(tvv);

                        TextView tv4 = new TextView(CancelActivity.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv4.setText(modiname);
                        tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv4.setTypeface(Typeface.MONOSPACE);
                        tv4.setGravity(Gravity.CENTER_VERTICAL);
                        //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                        //tv3.setTextColor(R.color.black);
                        tableRow11.addView(tv4);

                        TextView tv5 = new TextView(CancelActivity.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv5.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                        tv5.setTypeface(Typeface.MONOSPACE);
                        //tv2.setPadding(0, 0, 1, 0);
                        tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv5.setText(modiprice);
                        //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                        //tv3.setTextColor(R.color.black);
                        tableRow11.addView(tv5);

                        TextView tv6 = new TextView(CancelActivity.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        tv6.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                        tv6.setTypeface(Typeface.MONOSPACE);
                        tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv6.setText("");
                        //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                        //tv3.setTextColor(R.color.black);
                        tableRow11.addView(tv6);


                        final TextView tv7 = new TextView(CancelActivity.this);
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        tv7.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                        tv7.setTypeface(Typeface.MONOSPACE);
                        //tv3.setPadding(0,0,10,0);
                        tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                        //row.addView(tv3);


                        final TextView tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.MONOSPACE);
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String numberr = tv.getText().toString();
                        float newmulr = Float.parseFloat(numberr);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                        row.addView(tv8);








                        tableLayout1.addView(tableRow11);
                    }
                    else {
                        final TextView tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.MONOSPACE);
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);
                    }

                    tableLayoutt.addView(row);

                    tableLayoutt.addView(tableLayout1);

                }



            } while (ccursorr.moveToNext());
        }

        TableLayout tableLayout1 = (TableLayout) mView.findViewById(R.id.lytpedidoo);
        tableLayout1.removeAllViews();


        Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '"+billno.getText().toString()+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {

                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(50);
                String itna = ccursor.getString(1);

                if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")){

                }else {

//                    final TableRow row = new TableRow(CancelActivity.this);
//                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
//                            TableRow.LayoutParams.WRAP_CONTENT));
//                    row.setGravity(Gravity.CENTER);

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TableRow.LayoutParams lp, lp1, lp2;

//                                    final TextView tv = new TextView(CancelActivity.this);
//                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                    tv.setTextSize(16);
//                                    tv.setTypeface(Typeface.MONOSPACE);
//                                    row.addView(tv);

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.MONOSPACE);
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.MONOSPACE);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
//                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
                    tv2.setTypeface(Typeface.MONOSPACE);
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(Color.parseColor("#000000"));
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
//                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    //tv3.setPadding(0,0,10,0);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.MONOSPACE);
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }


            } while (ccursor.moveToNext());
        }

        String paymmethod_get = null;
        Cursor cursor10 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()){
            String billtype = cursor10.getString(5);
            paymmethod_get = cursor10.getString(6);
        }


        String phon = "0";

        Cursor caddress1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(CancelActivity.this);
        tvvs.setText(phon);

        Cursor us_name1 = db1.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()){
//            Toast.makeText(CancelActivity.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(CancelActivity.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")){
//                paymentmethodd
                Cursor cursorr = null;
                if (paymmethod_get.toString().equals("  Dine-in") || paymmethod_get.toString().equals("  General") || paymmethod_get.toString().equals("  Others")){
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethod_get.toString().equals("  Takeaway") || paymmethod_get.toString().equals("  Main")){
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethod_get.toString().equals("  Home delivery")){
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//                ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.MONOSPACE);
//                                row.addView(tv);

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.MONOSPACE);
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.MONOSPACE);
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.MONOSPACE);
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.MONOSPACE);
                        tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);


                    } while (cursorr.moveToNext());
                }
            }else {

                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(CancelActivity.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(CancelActivity.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(CancelActivity.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(CancelActivity.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);
                    }

                }
            }

        }else {
//            Toast.makeText(CancelActivity.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymmethod_get.toString().equals("  Dine-in") || paymmethod_get.toString().equals("  General") || paymmethod_get.toString().equals("  Others")){
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethod_get.toString().equals("  Takeaway") || paymmethod_get.toString().equals("  Main")){
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethod_get.toString().equals("  Home delivery")){
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.MONOSPACE);
//                                row.addView(tv);

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.MONOSPACE);
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.MONOSPACE);
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.MONOSPACE);
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.MONOSPACE);
                    tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);


                } while (cursorr.moveToNext());
            }
        }

//        ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
//        if (ccursor.moveToFirst()) {
//
//            do {
//
//                String name = ccursor.getString(1);
//                String value = ccursor.getString(2);
//
//                final TableRow row = new TableRow(CancelActivity.this);
//                row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
//                        TableRow.LayoutParams.WRAP_CONTENT));
//                row.setGravity(Gravity.CENTER);
//
//                TableRow.LayoutParams lp, lp1, lp2;
//
////                                final TextView tv = new TextView(CancelActivity.this);
////                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                tv.setTextSize(16);
////                                tv.setTypeface(Typeface.MONOSPACE);
////                                row.addView(tv);
//
//                TextView tvv = new TextView(CancelActivity.this);
//                tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                //tv.setBackgroundResource(R.drawable.cell_shape);
//                tvv.setGravity(Gravity.START);
//                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                tvv.setTypeface(Typeface.MONOSPACE);
//                tvv.setText(name);
//
//                TextView tv1 = new TextView(CancelActivity.this);
//                tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                tv1.setGravity(Gravity.START);
//                tv1.setTypeface(Typeface.MONOSPACE);
//                tv1.setText(value);
//                tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                String value1 = tv1.getText().toString();
//
//                TextView tv2 = new TextView(CancelActivity.this);
//                //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
//                //tv2.setLayoutParams(lp);
//                tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                tv2.setTypeface(Typeface.MONOSPACE);
//                tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                tv2.append(name + " @ " + value + "%");
//                tv2.setPadding(0, 0, 20, 0);
//                tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                row.addView(tv2);
//
//                TextView textView1 = new TextView(CancelActivity.this);
//                textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                row.addView(textView1);
//
//                TextView tv3 = new TextView(CancelActivity.this);
////                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
////                tv3.setLayoutParams(lp2);
//                tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                //tv3.setPadding(0,0,10,0);
//                tv3.setTypeface(Typeface.MONOSPACE);
//                tv3.setGravity(Gravity.END|Gravity.CENTER_VERTICAL);
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float tota = mul;
//                tv3.setText(String.valueOf(tota));
//                //row.addView(tv3);
//
//
//                tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                String value2 = tv3.getText().toString();
//                row.addView(tv3);
//
//                tableLayout1.addView(row);
//
//
//            } while (ccursor.moveToNext());
//        }


        mView.setDrawingCacheEnabled(true);
        mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
        mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
        mView.buildDrawingCache(true);
        include.setVisibility(View.INVISIBLE);
        imageview.setVisibility(View.INVISIBLE);

        imageview.setVisibility(View.INVISIBLE);
        Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
        mView.setDrawingCacheEnabled(false);
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

        imageViewPicture.setImageBitmap(b);

        Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                .getBitmap();

        Drawable d = new BitmapDrawable(getResources(), mBitmap);


//        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_bills");
//        if (!exportDir.exists()) {
//            exportDir.mkdirs();
//        }
        File exportDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), "/IVEPOS_bills");
        if (!exportDir.exists()) {
            exportDir.mkdirs();
        }


        file = new File(exportDir, "IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg");

        try {
            FileOutputStream ostream = new FileOutputStream(file);
            mBitmap.compress(Bitmap.CompressFormat.PNG, 10, ostream);
            ostream.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }

//        String query = null;
//        try {
//            query = URLEncoder.encode("apples oranges", "utf-8");
//        } catch (UnsupportedEncodingException e) {
//            e.printStackTrace();
//        }

        TextView textView = new TextView(CancelActivity.this);
        textView.setText(R.string.my_url);
        String url = "www.intuitionsoftwares.com";

        String reqUrl = "http://google.com";
        Uri.Builder builder = Uri.parse(reqUrl).buildUpon();
        builder.appendQueryParameter("mesg", "Value for mesg");
        String finalUri = builder.build().toString();

        String msg = "Bill from "+compna+"\n\nDear Customer, \n\nYou can view the bill in the attachment for "+""+insert1_rs+total.getText().toString()+".\n\nWe appreciate your business and hope to see you again soon. \n"+compna+"\n\n\n" +
                "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                "Powered by: "+ Uri.parse(url);//not required to modify not using in program

        Uri u1  =   null;
        u1  =   Uri.fromFile(file);

//                Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);
//                emailIntent.setType("image/jpeg");
//                emailIntent.putExtra(Intent.EXTRA_EMAIL, u1);
//                startActivity(Intent.createChooser(emailIntent, "Send mail..."));

        Intent emailIntent = new Intent(Intent.ACTION_SENDTO);
        emailIntent.setData(Uri.parse("mailto:"));
        emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, compna);
        emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, msg);

//                emailIntent.setType("image/jpeg");
//                emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, new String[]{to});
//                emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, subj);
//                emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, msg);
        emailIntent.putExtra(Intent.EXTRA_STREAM, u1);
        startActivity(Intent.createChooser(emailIntent, "Send mail..."));
    }

    public static void printByteData(byte[] buf) {
        BT_Write(buf);
        BT_Write(new byte[]{10});
    }

    public void printByteData_wifi(byte[] buf) {
        wifiSocket.WIFI_Write(buf);
        wifiSocket.WIFI_Write(new byte[]{10});
    }

    public void printByteData_wifi_counter(byte[] buf) {
        wifiSocket2.WIFI_Write(buf);
        wifiSocket2.WIFI_Write(new byte[]{10});
    }

    public void printreturncopy(Dialog dialog){

        db =   openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        db1 =   openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);

        Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }

        Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }

        Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }

        /////////////Toast.makeText(CancelActivity.this, "printbillonly one ", Toast.LENGTH_SHORT).show();
        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] HT1 = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
        if (print_ty.moveToFirst()){
            str_print_ty = print_ty.getString(1);
        }

        Cursor cc=db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    if (str_print_ty.toString().equals("Generic") || str_print_ty.toString().equals("Epson/others")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x20, 0x29, 0x00};//4 tabs 3"
                        nPaperWidth = 576;
                        charlength = 23;
                        charlength1 = 46;
                        charlength2 = 69;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("POS")) {
                            setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                            setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                            nPaperWidth = 576;
                            charlength = 23;
                            charlength1 = 46;
                            charlength2 = 69;
                            quanlentha = 4;
                            HT1 = new byte[]{0x2F};
                            str_line = "------------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------------".getBytes(), LF

                            };
                        }
                    }
                }
                else {
                    if (str_print_ty.toString().equals("Generic")) {
//                        Toast.makeText(CancelActivity.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("Epson/others")) {
//                        Toast.makeText(CancelActivity.this, "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            nPaperWidth = 384;
                            charlength = 16;
                            charlength1 = 32;
                            charlength2 = 48;
                            quanlentha = 5;
                            HT1 = new byte[]{0x09};
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }else {
                            if (str_print_ty.toString().equals("POS")) {
                                setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                nPaperWidth = 384;
                                charlength = 11;
                                charlength1 = 22;
                                charlength2 = 33;
                                quanlentha = 3;
                                HT1 = new byte[]{0x2F};
                                str_line = "--------------------------------";
                                allbufline = new byte[][]{
                                        left, un1, "--------------------------------".getBytes(), LF
                                };
                            }
                        }
                    }
                }
            }while(cc.moveToNext());
        }

        String dd = "";
        TextView qazcvb = new TextView(CancelActivity.this);
        Cursor cvonnusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (cvonnusb.moveToFirst()) {
            addgets = cvonnusb.getString(1);
            namegets = cvonnusb.getString(2);
            statussusbs = cvonnusb.getString(3);
            dd = cvonnusb.getString(4);
        }
        qazcvb.setText(dd);
        if (qazcvb.getText().toString().equals("usb") && statussusbs.toString().equals("ok")) {
//            runPrintCouponSequence(dialog);
            print_printbill(dialog);
        }else {
            imageViewPicture = (ImageView) dialog.findViewById(R.id.imageViewPicture);
            mView = dialog.findViewById(R.id.f_viewreturns);


            ImageView imageButton = (ImageView) mView.findViewById(R.id.viewImagee);
            if (NAME.equals("3 inch")) {
//            Toast.makeText(CancelActivity.this, "3 inch", Toast.LENGTH_SHORT).show();
                imageViewPicture.getLayoutParams().height = 94;
                imageViewPicture.getLayoutParams().width = 576;
                imageButton.getLayoutParams().height = 94;
                imageButton.getLayoutParams().width = 576;
            } else {
//            Toast.makeText(CancelActivity.this, "2 inch", Toast.LENGTH_SHORT).show();
                imageViewPicture.getLayoutParams().height = 94;
                imageViewPicture.getLayoutParams().width = 384;
                imageButton.getLayoutParams().height = 94;
                imageButton.getLayoutParams().width = 384;
            }
            //LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(116, 95);
            //imageButton.setLayoutParams(layoutParams);
            //imageButton.setLayoutParams(116, 95);
            String[] col = {"companylogo"};
            Cursor c = db.query("Logo", col, null, null, null, null, null);
            if (c.moveToFirst()) {
                do {
                    byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
                    final Bitmap b1 = BitmapFactory.decodeByteArray(img, 0, img.length);

                    imageButton.setImageBitmap(b1);


                    mView.setDrawingCacheEnabled(true);
                    mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
                    mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
                    mView.buildDrawingCache(true);

                    Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
                    //mView.setDrawingCacheEnabled(false);
                    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                    b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

                    imageViewPicture.setImageBitmap(b);

                    Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                            .getBitmap();


                    //if (mBitmap != null) {
                    if (statussusbs.toString().equals("ok")) {
                        if (mBitmap != null) {
                            byte[] command = Utils.decodeBitmap(mBitmap);
                            printByteData(command);
                        } else {
                            Log.e("Print Photo error", "the file isn't exists");
                        }
                        Bundle data = new Bundle();
                        //data.putParcelable(Global.OBJECT1, mBitmap);
                        data.putParcelable(Global.PARCE1, mBitmap);
                        data.putInt(Global.INTPARA1, nPaperWidth);
                        data.putInt(Global.INTPARA2, 0);
//                        DrawerService.workThread.handleCmd(
//                                Global.CMD_POS_PRINTBWPICTURE, data);
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            if(mBitmap!=null){
                                byte[] command = Utils.decodeBitmap(mBitmap);
                                printByteData_wifi_counter(command);
                            }else{
                                Log.e("Print Photo error", "the file isn't exists");
                            }
                            Bundle data = new Bundle();
                            data.putParcelable(Global1.PARCE1, mBitmap);
                            data.putInt(Global1.INTPARA1, nPaperWidth);
                            data.putInt(Global1.INTPARA2, 0);
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                if(mBitmap!=null){
                                    byte[] command = Utils.decodeBitmap(mBitmap);
                                    printByteData_wifi(command);
                                }else{
                                    Log.e("Print Photo error", "the file isn't exists");
                                }
                                Bundle data = new Bundle();
                                data.putParcelable(Global1.PARCE1, mBitmap);
                                data.putInt(Global1.INTPARA1, nPaperWidth);
                                data.putInt(Global1.INTPARA2, 0);
                            }
                        }
                    }
                    //}
                } while (c.moveToNext());
            } else {
                imageButton.setVisibility(View.GONE);
            }

            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    straddress2 = getcom.getString(17);
                    straddress3 = getcom.getString(18);
                    strphone = getcom.getString(2);
                    stremailid = getcom.getString(15);
                    strwebsite = getcom.getString(16);
                    strtaxone = getcom.getString(10);
                    strbillone = getcom.getString(12);
                } while (getcom.moveToNext());
            }

            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(bold);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BluetoothPrintDriver.BT_Write(cen);    //
                    BT_Write(strcompanyname);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(bold);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write(cen);    //
                        wifiSocket2.WIFI_Write(strcompanyname);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(bold);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write(cen);    //
                            wifiSocket.WIFI_Write(strcompanyname);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


/////////
            tvkot.setText(straddress1);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf2 = new byte[][]{
                        normal, straddress1.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(straddress1);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(straddress1);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(straddress1);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot.setText(straddress2);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf3 = new byte[][]{
                        normal, straddress2.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(straddress2);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(straddress2);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(straddress2);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            tvkot.setText(straddress3);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf4 = new byte[][]{
                        normal, straddress3.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(straddress3);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(straddress3);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(straddress3);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strphone);
            String pp = "Ph. " + strphone;
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf5 = new byte[][]{
                        normal, pp.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(pp);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(pp);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(pp);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(stremailid);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf6 = new byte[][]{
                        normal, stremailid.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(stremailid);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(stremailid);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(stremailid);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strwebsite);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, strwebsite.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(strwebsite);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(strwebsite);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(strwebsite);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            tvkot.setText(strtaxone);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf8 = new byte[][]{
                        normal, strtaxone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(normal);    //
                    BT_Write(strtaxone);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(normal);    //
                        wifiSocket2.WIFI_Write(strtaxone);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(normal);    //
                            wifiSocket.WIFI_Write(strtaxone);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);	//
                    wifiSocket2.WIFI_Write(un1);	//
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);	//
                        wifiSocket.WIFI_Write(un1);	//
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }


            Cursor cursor10 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (cursor10.moveToFirst()) {
                billtypea = cursor10.getString(5);
                paymmethoda = cursor10.getString(6);
            }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

            if (billtypea.toString().equals("  Cash")) {
                billtypeaa = "Cash"; //0
            }
            if (billtypea.toString().equals("  Card")) {
                billtypeaa = "Card"; //0
            }
            if (billtypea.toString().equals("  Paytm")) {
                billtypeaa = "Paytm"; //0
            }
            if (billtypea.toString().equals("  Mobikwik")) {
                billtypeaa = "Mobikwik"; //0
            }
            if (billtypea.toString().equals("  Freecharge")) {
                billtypeaa = "Freecharge"; //0
            }
            if (billtypea.toString().equals("  Pay Later")) {
                billtypeaa = "Pay Later"; //0
            }
            if (billtypea.toString().equals("  Cheque")) {
                billtypeaa = "Cheque"; //0
            }
            if (billtypea.toString().equals("  Sodexo")) {
                billtypeaa = "Sodexo"; //0
            }
            if (billtypea.toString().equals("  Zeta")) {
                billtypeaa = "Zeta"; //0
            }
            if (billtypea.toString().equals("  Ticket")) {
                billtypeaa = "Ticket"; //0
            }
            billtypeaa = billtypea.toString().replace(" ", "");

            //String bill_no = billnum.getText().toString();
            allbufbillno = new byte[][]{
                    setHT32, "Bill no.".getBytes(), billnoget.getBytes(), HT, "   ".getBytes(), billtypeaa.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };


            if (str_print_ty.toString().equals("POS")) {
                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT321);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BT_Write("Bill no." + billnoget);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write("   ");
                    BT_Write(billtypeaa);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT321);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write("Bill no." + billnoget);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write("   ");
                        wifiSocket2.WIFI_Write(billtypeaa);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT321);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write("Bill no." + billnoget);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write("   ");
                            wifiSocket.WIFI_Write(billtypeaa);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }else {
                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT32);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BT_Write("Bill no." + billnoget);
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write("   " + billtypeaa);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT32);    //
                        wifiSocket2.WIFI_Write(un1);    //
                        wifiSocket2.WIFI_Write("Bill no." + billnoget);
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write("   " + billtypeaa);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT32);    //
                            wifiSocket.WIFI_Write(un1);    //
                            wifiSocket.WIFI_Write("Bill no." + billnoget);
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write("   " + billtypeaa);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                paymmethodaa = "Dine-in";
                //billtypee.setText("Dine-in");
            } else {
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    paymmethodaa = "Takeaway";
                    //billtypee.setText("Takeaway");
                } else {
                    paymmethodaa = "Home delivery";
                    //billtypee.setText("Home delivery");
                }
            }

            Cursor date = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (date.moveToFirst()) {
                datee = date.getString(25);
                timee = date.getString(12);
            } else {
                Cursor date_cancel = db1.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (date_cancel.moveToFirst()) {
                    datee = date_cancel.getString(22);
                    timee = date_cancel.getString(12);
                }
            }

            allbuf10 = new byte[][]{
                    setHT321, left, paymmethodaa.getBytes(), HT, "  ".getBytes(), datee.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(paymmethodaa);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  " + datee);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(paymmethodaa);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  " + datee);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(paymmethodaa);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  " + datee);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            Cursor cursor9 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor9.moveToFirst()) {
                tableida = cursor9.getString(15);
            }
//        else {
//            Cursor cursor9_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

            Cursor vbnm = db.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
            if (vbnm.moveToFirst()) {
                assa1 = vbnm.getString(1);
                assa2 = vbnm.getString(2);
            }
            TextView cx = new TextView(CancelActivity.this);
            cx.setText(assa1);
            if (cx.getText().toString().equals("")) {
                tableidaa = "Tab" + assa2;
                allbuftime = new byte[][]{
                        setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
                };
            } else {
                tableidaa = "Tab" + assa1;
                allbuftime = new byte[][]{
                        setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
                };
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT321);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(tableidaa);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("  " + timee);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT321);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(tableidaa);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("  " + timee);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT321);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(tableidaa);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("  " + timee);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            Cursor caddress = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
            if (caddress.moveToFirst()) {
                String nam = caddress.getString(1);
                String addr = caddress.getString(4);
                String phon = caddress.getString(2);
                String emai = caddress.getString(3);

                if (nam.toString().length() > 0 || addr.toString().length() > 0 ||
                        phon.toString().length() > 0 || emai.toString().length() > 0) {
                    allbufcust = new byte[][]{
                            left, un, "Customer:".getBytes(), LF, un1,
                    };

                    if (statussusbs.toString().equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BluetoothPrintDriver.BT_Write(un);    //
                        BT_Write("Customer:");
                        BluetoothPrintDriver.BT_Write(LF);    //
                        BluetoothPrintDriver.BT_Write(un1);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(un);    //
                            wifiSocket2.WIFI_Write("Customer:");
                            wifiSocket2.WIFI_Write(LF);    //
                            wifiSocket2.WIFI_Write(un1);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(un);    //
                                wifiSocket.WIFI_Write("Customer:");
                                wifiSocket.WIFI_Write(LF);    //
                                wifiSocket.WIFI_Write(un1);    //
                            }
                        }
                    }
                } else {

                }

                if (nam.toString().length() > 0) {
                    allbufcustname = new byte[][]{
                            nam.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        BT_Write(nam);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(nam);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(nam);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                }

                if (addr.toString().length() > 0) {
                    allbufcustadd = new byte[][]{
                            addr.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        BT_Write(addr);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(addr);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(addr);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                }

                if (phon.toString().length() > 0) {
                    String cust_ph = "Ph. " + phon.toString();
                    allbufcustph = new byte[][]{
                            cust_ph.getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        BT_Write(cust_ph);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(cust_ph);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(cust_ph);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                }

                if (emai.toString().length() > 0) {
                    allbufcustemail = new byte[][]{
                            emai.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        BT_Write(emai);
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.toString().equals("ok")) {
                            wifiSocket2.WIFI_Write(emai);
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.toString().equals("ok")) {
                                wifiSocket.WIFI_Write(emai);
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }
                } else {

                }

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(left);    //
                    BluetoothPrintDriver.BT_Write(un1);    //
                    BT_Write(str_line);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(left);	//
                        wifiSocket2.WIFI_Write(un1);	//
                        wifiSocket2.WIFI_Write(str_line);
                        wifiSocket2.WIFI_Write(LF);	//
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(left);	//
                            wifiSocket.WIFI_Write(un1);	//
                            wifiSocket.WIFI_Write(str_line);
                            wifiSocket.WIFI_Write(LF);	//
                        }
                    }
                }
            }

            allbufqty = new byte[][]{
                    setHT34, normal, "Qty".getBytes(), HT, "Item".getBytes(), HT, "Price".getBytes(), HT1, "Amount".getBytes(), left, LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT34);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write("Qty");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("Item");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("Price");
                BluetoothPrintDriver.BT_Write(HT1);    //
                BT_Write("Amount");
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT34);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write("Qty");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("Item");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("Price");
                    wifiSocket2.WIFI_Write(HT1);    //
                    wifiSocket2.WIFI_Write("Amount");
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT34);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write("Qty");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("Item");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("Price");
                        wifiSocket.WIFI_Write(HT1);    //
                        wifiSocket.WIFI_Write("Amount");
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }


            Cursor ccursorr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursorr.moveToFirst()) {

                do {

                    String name = ccursorr.getString(1);
                    String value = ccursorr.getString(2);
                    String pq = ccursorr.getString(5);
                    String itna = ccursorr.getString(2);
                    String pricee = ccursorr.getString(3);
                    String tototot = ccursorr.getString(4);

                    final String newid = ccursorr.getString(20);

                    final String newids = ccursorr.getString(0);

                    int padding_in_px;

                    int padding_in_dp = 30;  // 34 dps
                    final float scale1 = getResources().getDisplayMetrics().density;
                    padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                    if (pq.equals("Item")) {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                        final TableRow row1 = new TableRow(CancelActivity.this);
                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                        final TableRow row2 = new TableRow(CancelActivity.this);
                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));

                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                        final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                        //tv.setTextSize(18);
                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv.setText(value);
                        row.addView(tv);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv1.setTextSize(15);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv1.setText(name);
                        String value1 = tv1.getText().toString();
                        row.addView(tv1);

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.append(value + "% " + name);
                        tv2.setText(pricee);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv2.setTextColor(R.color.black);
                        row.addView(tv2);
                        TextView tv3 = new TextView(CancelActivity.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.setPadding(0, 0, 1, 0);
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv3.setText(tototot);
                        //tv3.setTextColor(R.color.black);
                        //row.addView(tv3);


                        String value2 = tv3.getText().toString();

                        Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                        if (modcursor.moveToFirst()) {

                            Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor4.moveToFirst()) {
                                sub2a = cursor4.getFloat(0);
                                String sub2a1 = String.valueOf(sub2a);
                                ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                                ss1 = String.format("%.1f", ss);
                            }

                            if (name.toString().length() > charlength) {
                                int print1 = 0;

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(string1quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(ss1);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write(string2quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(string1quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(ss1);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write(string2quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(string1quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(ss1);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write(string2quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(value);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(ss1);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(value);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(ss1);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(value);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(ss1);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }

/////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(string1quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(ss1);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write(string2quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(string1quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(ss1);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write(string2quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(string1quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(ss1);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write(string2quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(value);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(ss1);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(value);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(ss1);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(value);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(ss1);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {
                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(ss1);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(ss1);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(ss1);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, ss1.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(ss1);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(ss1);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(ss1);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                            }

                            do {

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                float modprice1 = Float.parseFloat(modiprice);
                                String modpricestr = String.valueOf(modprice1);

                                if (modiname.toString().length() > charlength) {
                                    if (modiname.toString().length() > charlength) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(">");
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(modpricestr);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(">");
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(modpricestr);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(">");
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(modpricestr);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                    if (modiname.toString().length() > charlength1) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength, charlength1);
                                        String string3 = modiname.substring(charlength1);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(">");
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(modpricestr);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(">");
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(modpricestr);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(">");
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(modpricestr);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                } else {
                                    allbufmodifiers = new byte[][]{
                                            setHT34, normal, "".getBytes(), HT, ">".getBytes(), modiname.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), left, LF
                                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                    };
                                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write("");
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(">");
                                        BT_Write(modiname);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(modpricestr);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write("");
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write("");
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(">");
                                            wifiSocket2.WIFI_Write(modiname);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(modpricestr);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write("");
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write("");
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(">");
                                                wifiSocket.WIFI_Write(modiname);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(modpricestr);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write("");
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                                final TableRow tableRow11 = new TableRow(CancelActivity.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                final TextView tvv = new TextView(CancelActivity.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(CancelActivity.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);

                                row.removeView(tv8);


                                tv8 = new TextView(CancelActivity.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tv.getText().toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(ss));
                                row.addView(tv8);


                                tableLayout1.addView(tableRow11);
                            } while (modcursor.moveToNext());

                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(31);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("(");
                                            BT_Write("-");
                                            BT_Write(total_disc_print_q);
                                            BT_Write(")");
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("(");
                                                wifiSocket2.WIFI_Write("-");
                                                wifiSocket2.WIFI_Write(total_disc_print_q);
                                                wifiSocket2.WIFI_Write(")");
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("(");
                                                    wifiSocket.WIFI_Write("-");
                                                    wifiSocket.WIFI_Write(total_disc_print_q);
                                                    wifiSocket.WIFI_Write(")");
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }
                        } else {

                            float fgh = Float.parseFloat(tototot);
                            String tototott = String.format("%.1f", fgh);
                            if (name.toString().length() > charlength) {
                                int print1 = 0;
                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(string1quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(tototott);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write(string2quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(string1quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(tototott);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write(string2quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(string1quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(tototott);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write(string2quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(value);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(tototott);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(value);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(tototott);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(value);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(tototott);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }

////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(string1quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(tototott);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write(string2quan);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(string1quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(tototott);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write(string2quan);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(string1quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(tototott);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write(string2quan);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write(value);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(pricee);
                                            BluetoothPrintDriver.BT_Write(HT1);    //
                                            BT_Write(tototott);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            print1 = 1;
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write(value);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(pricee);
                                                wifiSocket2.WIFI_Write(HT1);    //
                                                wifiSocket2.WIFI_Write(tototott);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                                print1 = 1;
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write(value);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(pricee);
                                                    wifiSocket.WIFI_Write(HT1);    //
                                                    wifiSocket.WIFI_Write(tototott);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    print1 = 1;
                                                }
                                            }
                                        }
                                    }

                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {
                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(multiply));
                            row.addView(tv8);

                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(31);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("(");
                                            BT_Write("-");
                                            BT_Write(total_disc_print_q);
                                            BT_Write(")");
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("(");
                                                wifiSocket2.WIFI_Write("-");
                                                wifiSocket2.WIFI_Write(total_disc_print_q);
                                                wifiSocket2.WIFI_Write(")");
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("(");
                                                    wifiSocket.WIFI_Write("-");
                                                    wifiSocket.WIFI_Write(total_disc_print_q);
                                                    wifiSocket.WIFI_Write(")");
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }

                        }
                    }


                } while (ccursorr.moveToNext());
            }

            allbuf6 = new byte[][]{
                    normal, un, "Returns/Cancel:".getBytes(), LF, un1,

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(normal);    //
                BluetoothPrintDriver.BT_Write(un);    //
                BT_Write("Returns/Cancel:");
                BluetoothPrintDriver.BT_Write(LF);    //
                BluetoothPrintDriver.BT_Write(un1);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write(un);    //
                    wifiSocket2.WIFI_Write("Returns/Cancel:");
                    wifiSocket2.WIFI_Write(LF);    //
                    wifiSocket2.WIFI_Write(un1);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write(un);    //
                        wifiSocket.WIFI_Write("Returns/Cancel:");
                        wifiSocket.WIFI_Write(LF);    //
                        wifiSocket.WIFI_Write(un1);    //
                    }
                }
            }


            Cursor ccursorreturn = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursorreturn.moveToFirst()) {

                do {

                    String name = ccursorreturn.getString(1);
                    String value = ccursorreturn.getString(2);
                    String pq = ccursorreturn.getString(5);
                    String itna = ccursorreturn.getString(2);
                    String pricee = ccursorreturn.getString(3);
                    String tototot = ccursorreturn.getString(4);

                    final String newtt = ccursorreturn.getString(4);

                    final String newid = ccursorreturn.getString(19);

                    final String newids = ccursorreturn.getString(0);
                    int padding_in_px;

                    int padding_in_dp = 30;  // 34 dps
                    final float scale1 = getResources().getDisplayMetrics().density;
                    padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                    if (pq.equals("Item")) {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                        final TableRow row1 = new TableRow(CancelActivity.this);
                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                        final TableRow row2 = new TableRow(CancelActivity.this);
                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));

                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                        final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                        //tv.setTextSize(18);
                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv.setText(value);
                        row.addView(tv);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv1.setTextSize(15);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv1.setText(name);
                        String value1 = tv1.getText().toString();
                        row.addView(tv1);

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.append(value + "% " + name);
                        tv2.setText(pricee);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv2.setTextColor(R.color.black);
                        row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.setPadding(0, 0, 1, 0);
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv3.setText(tototot);
                        //tv3.setTextColor(R.color.black);
                        //row.addView(tv3);


                        String value2 = tv3.getText().toString();

                        //tableLayoutt.addView(row);

                        Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                        if (modcursor.moveToFirst()) {

                            Cursor modt = db1.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                            if (modt.moveToFirst()) {
                                do {
                                    //row.removeView(tv3);
                                    float aq = modt.getFloat(0);
                                    String aqq = String.valueOf(aq);
                                    aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                    aqq2 = String.format("%.1f", aqq1);
                                } while (modt.moveToNext());
                            }


                            if (name.toString().length() > charlength) {

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

////////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = total.substring(0, quanlentha);
                                    String string2quan = total.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), HT, LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string3);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string3);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string3);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string3);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string3);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string3);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {
                                if (total.toString().length() > quanlentha) {
                                    String string1quan = total.substring(0, quanlentha);
                                    String string2quan = total.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, aqq2.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(aqq2);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(aqq2);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(aqq2);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                            }

                            do {

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                float modprice1 = Float.parseFloat(modiprice);
                                String modpricestr = String.valueOf(modprice1);

                                if (modiname.toString().length() > charlength) {
                                    if (modiname.toString().length() > charlength) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, un1, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(un1);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(">");
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(modpricestr);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(un1);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(">");
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(modpricestr);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(un1);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(">");
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(modpricestr);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                    if (modiname.toString().length() > charlength1) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength, charlength1);
                                        String string3 = modiname.substring(charlength1);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, un1, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(un1);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(">");
                                            BT_Write(string1);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write(modpricestr);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string2);
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                            BT_Write("      ");
                                            BT_Write(string3);
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(un1);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(">");
                                                wifiSocket2.WIFI_Write(string1);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(modpricestr);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string2);
                                                wifiSocket2.WIFI_Write(LF);    //
                                                wifiSocket2.WIFI_Write("      ");
                                                wifiSocket2.WIFI_Write(string3);
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(un1);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(">");
                                                    wifiSocket.WIFI_Write(string1);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(modpricestr);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string2);
                                                    wifiSocket.WIFI_Write(LF);    //
                                                    wifiSocket.WIFI_Write("      ");
                                                    wifiSocket.WIFI_Write(string3);
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                } else {
                                    allbufmodifiers = new byte[][]{
                                            setHT34, normal, un1, "".getBytes(), HT, ">".getBytes(), modiname.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), left, LF
                                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                    };
                                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write("");
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(">");
                                        BT_Write(modiname);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(modpricestr);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write("");
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write("");
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(">");
                                            wifiSocket2.WIFI_Write(modiname);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(modpricestr);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write("");
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write("");
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(">");
                                                wifiSocket.WIFI_Write(modiname);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(modpricestr);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write("");
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.equals("ok")) {
                                                BluetoothPrintDriver.BT_Write(left);    //
                                                BluetoothPrintDriver.BT_Write(normal);    //
                                                BT_Write("HSN "+hsn);
                                                BluetoothPrintDriver.BT_Write(HT);    //
                                                BluetoothPrintDriver.BT_Write(LF);    //
                                            } else {
                                                if (statusnets_counter.equals("ok")) {
                                                    wifiSocket2.WIFI_Write(left);    //
                                                    wifiSocket2.WIFI_Write(normal);    //
                                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                                    wifiSocket2.WIFI_Write(HT);    //
                                                    wifiSocket2.WIFI_Write(LF);    //
                                                }else {
                                                    if (statusnets.equals("ok")) {
                                                        wifiSocket.WIFI_Write(left);    //
                                                        wifiSocket.WIFI_Write(normal);    //
                                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                                        wifiSocket.WIFI_Write(HT);    //
                                                        wifiSocket.WIFI_Write(LF);    //
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }


                                final TableRow tableRow11 = new TableRow(CancelActivity.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                final TextView tvv = new TextView(CancelActivity.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(CancelActivity.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);


                                row.removeView(tv8);
                                tv8 = new TextView(CancelActivity.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tv.getText().toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                                row.addView(tv8);


                                tableLayout1.addView(tableRow11);
                            } while (modcursor.moveToNext());

                            //Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(27);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(28);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("(");
                                            BT_Write("-");
                                            BT_Write(total_disc_print_q);
                                            BT_Write(")");
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("(");
                                                wifiSocket2.WIFI_Write("-");
                                                wifiSocket2.WIFI_Write(total_disc_print_q);
                                                wifiSocket2.WIFI_Write(")");
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("(");
                                                    wifiSocket.WIFI_Write("-");
                                                    wifiSocket.WIFI_Write(total_disc_print_q);
                                                    wifiSocket.WIFI_Write(")");
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }
                        } else {

                            float fgh = Float.parseFloat(tototot);
                            String tototott = String.format("%.1f", fgh);

                            if (name.toString().length() > charlength) {
                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

//////////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string3);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string3);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string3);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }
                                if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(string1);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string2);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write("      ");
                                        BT_Write(string3);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(string1);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string2);
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write("      ");
                                            wifiSocket2.WIFI_Write(string3);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(string1);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string2);
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write("      ");
                                                wifiSocket.WIFI_Write(string3);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {

                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BT_Write(string1quan);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                        BT_Write(string2quan);
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(string1quan);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                            wifiSocket2.WIFI_Write(string2quan);
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(string1quan);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                                wifiSocket.WIFI_Write(string2quan);
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT1, tototott.getBytes(), left, LF,
                                    };
                                    if (statussusbs.toString().equals("ok")) {
                                        BluetoothPrintDriver.BT_Write(setHT34);    //
                                        BluetoothPrintDriver.BT_Write(normal);    //
                                        BluetoothPrintDriver.BT_Write(un1);    //
                                        BT_Write(value);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(name);
                                        BluetoothPrintDriver.BT_Write(HT);    //
                                        BT_Write(pricee);
                                        BluetoothPrintDriver.BT_Write(HT1);    //
                                        BT_Write(tototott);
                                        BluetoothPrintDriver.BT_Write(left);    //
                                        BluetoothPrintDriver.BT_Write(LF);    //
                                    } else {
                                        if (statusnets_counter.toString().equals("ok")) {
                                            wifiSocket2.WIFI_Write(setHT34);    //
                                            wifiSocket2.WIFI_Write(normal);    //
                                            wifiSocket2.WIFI_Write(un1);    //
                                            wifiSocket2.WIFI_Write(value);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(name);
                                            wifiSocket2.WIFI_Write(HT);    //
                                            wifiSocket2.WIFI_Write(pricee);
                                            wifiSocket2.WIFI_Write(HT1);    //
                                            wifiSocket2.WIFI_Write(tototott);
                                            wifiSocket2.WIFI_Write(left);    //
                                            wifiSocket2.WIFI_Write(LF);    //
                                        }else {
                                            if (statusnets.toString().equals("ok")) {
                                                wifiSocket.WIFI_Write(setHT34);    //
                                                wifiSocket.WIFI_Write(normal);    //
                                                wifiSocket.WIFI_Write(un1);    //
                                                wifiSocket.WIFI_Write(value);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(name);
                                                wifiSocket.WIFI_Write(HT);    //
                                                wifiSocket.WIFI_Write(pricee);
                                                wifiSocket.WIFI_Write(HT1);    //
                                                wifiSocket.WIFI_Write(tototott);
                                                wifiSocket.WIFI_Write(left);    //
                                                wifiSocket.WIFI_Write(LF);    //
                                            }
                                        }
                                    }
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("HSN "+hsn);
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.equals("ok")) {
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("HSN "+hsn);
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.equals("ok")) {
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("HSN "+hsn);
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(multiply));
                            row.addView(tv8);

                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(27);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(28);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            BluetoothPrintDriver.BT_Write(setHT34);    //
                                            BluetoothPrintDriver.BT_Write(normal);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("");
                                            BluetoothPrintDriver.BT_Write(HT);    //
                                            BT_Write("(");
                                            BT_Write("-");
                                            BT_Write(total_disc_print_q);
                                            BT_Write(")");
                                            BluetoothPrintDriver.BT_Write(left);    //
                                            BluetoothPrintDriver.BT_Write(LF);    //
                                        } else {
                                            if (statusnets_counter.toString().equals("ok")) {
                                                wifiSocket2.WIFI_Write(setHT34);    //
                                                wifiSocket2.WIFI_Write(normal);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("");
                                                wifiSocket2.WIFI_Write(HT);    //
                                                wifiSocket2.WIFI_Write("(");
                                                wifiSocket2.WIFI_Write("-");
                                                wifiSocket2.WIFI_Write(total_disc_print_q);
                                                wifiSocket2.WIFI_Write(")");
                                                wifiSocket2.WIFI_Write(left);    //
                                                wifiSocket2.WIFI_Write(LF);    //
                                            }else {
                                                if (statusnets.toString().equals("ok")) {
                                                    wifiSocket.WIFI_Write(setHT34);    //
                                                    wifiSocket.WIFI_Write(normal);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("");
                                                    wifiSocket.WIFI_Write(HT);    //
                                                    wifiSocket.WIFI_Write("(");
                                                    wifiSocket.WIFI_Write("-");
                                                    wifiSocket.WIFI_Write(total_disc_print_q);
                                                    wifiSocket.WIFI_Write(")");
                                                    wifiSocket.WIFI_Write(left);    //
                                                    wifiSocket.WIFI_Write(LF);    //
                                                }
                                            }
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }

                        }

                    }
                } while (ccursorreturn.moveToNext());


            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }
////////////////////////////////////sub total

            Cursor cursor3 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor3.moveToFirst()) {
                sub1 = cursor3.getFloat(0);
            }

            Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (cursor4.moveToFirst()) {
                sub2 = cursor4.getFloat(0);
            }
            float sub12 = sub1 + sub2;
            String total2 = String.valueOf(sub12);
            float to = Float.parseFloat(total2);
            String tot = String.valueOf(to);


            allbufsubtot = new byte[][]{
                    setHT32, left, "Sub total".getBytes(), HT, tot.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT32);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Sub total");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write(tot);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT32);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Sub total");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(tot);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT32);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Sub total");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(tot);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }
/////////////////////////////////// tax
            TableLayout tableLayout1 = new TableLayout(CancelActivity.this);
            tableLayout1.removeAllViews();

            Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor.moveToFirst()) {

                do {
                    String name = ccursor.getString(10);
                    String value = ccursor.getString(9);
                    String pq = ccursor.getString(50);
                    String itna = ccursor.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor.moveToNext());
            }

            Cursor ccursor2 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor2.moveToFirst()) {

                do {
                    String name = ccursor2.getString(35);
                    String value = ccursor2.getString(36);
                    String pq = ccursor2.getString(50);
                    String itna = ccursor2.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor2.moveToNext());
            }

            Cursor ccursor3 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor3.moveToFirst()) {

                do {
                    String name = ccursor3.getString(37);
                    String value = ccursor3.getString(38);
                    String pq = ccursor3.getString(50);
                    String itna = ccursor3.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor3.moveToNext());
            }

            Cursor ccursor4 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor4.moveToFirst()) {

                do {
                    String name = ccursor4.getString(39);
                    String value = ccursor4.getString(40);
                    String pq = ccursor4.getString(50);
                    String itna = ccursor4.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor4.moveToNext());
            }

            Cursor ccursor5 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor5.moveToFirst()) {

                do {
                    String name = ccursor5.getString(41);
                    String value = ccursor5.getString(42);
                    String pq = ccursor5.getString(50);
                    String itna = ccursor5.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor5.moveToNext());
            }


//            ArrayList<String> groupList = new ArrayList<String>();
//
//            float sum_p = 0;
//            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
//                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
//                TextView mTextView = (TextView) mRow.getChildAt(0);
////                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();
//
//                if (groupList.contains(mTextView.getText().toString())) {
//
//                }else {
//                    sum_p = 0;
//                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
//                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
//                        mTextView1 = (TextView) mRow1.getChildAt(0);
//                        mTextView2 = (TextView) mRow1.getChildAt(2);
//                        if (groupList.contains(mTextView.getText().toString())) {
//                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                            }
//                        } else {
//                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                groupList.add(mTextView.getText().toString());
//                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                            }
//                        }
//                    }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p, Toast.LENGTH_LONG).show();
//
//                    String mod1 = mTextView.getText().toString() + "---" + String.valueOf(sum_p);
//                    allbuftaxestype1 = new byte[][]{
//                            left, normal, mod1.getBytes(), HT, LF
//                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                    };
//                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                    if (statussusbs.equals("ok")) {
//                        BluetoothPrintDriver.BT_Write(left);    //
//                        BT_Write(normal);
//                        BT_Write(mod1);
//                        BluetoothPrintDriver.BT_Write(HT);    //
//                        BluetoothPrintDriver.BT_Write(LF);    //
//                    } else {
//                        if (statusnets.equals("ok")) {
//                            wifiSocket.WIFI_Write(left);    //
//                            wifiSocket.WIFI_Write(normal);
//                            wifiSocket.WIFI_Write(mod1);
//                            wifiSocket.WIFI_Write(HT);    //
//                            wifiSocket.WIFI_Write(LF);    //
//                        }
//                    }
//
//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
//                    String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
//                    Cursor ccursor6 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                    if (ccursor6.moveToFirst()) {
//                        String hsn = ccursor6.getString(34);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, hsn.getBytes(), HT, LF
//                        };
//
//                        TextView hsn_hsn = new TextView(CancelActivity.this);
//                        hsn_hsn.setText(hsn);
//
//                        if (hsn_hsn.getText().toString().equals("")) {
//                        } else {
//                            if (statussusbs.equals("ok")) {
//                                BluetoothPrintDriver.BT_Write(left);    //
//                                BT_Write(normal);
//                                BT_Write("HSN "+hsn);
//                                BluetoothPrintDriver.BT_Write(HT);    //
//                                BluetoothPrintDriver.BT_Write(LF);    //
//                            } else {
//                                if (statusnets.equals("ok")) {
//                                    wifiSocket.WIFI_Write(left);    //
//                                    wifiSocket.WIFI_Write(normal);
//                                    wifiSocket.WIFI_Write("HSN "+hsn);
//                                    wifiSocket.WIFI_Write(HT);    //
//                                    wifiSocket.WIFI_Write(LF);    //
//                                }
//                            }
//                        }
//                    }
//
//                }
//            }

//            Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    TextView name1 = new TextView(CancelActivity.this);
//                    name1.setText(name);
//                    if (name1.getText().toString().equals("None") || name1.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//
//                } while (ccursor.moveToNext());
//            }


            Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn.moveToFirst()) {

                do {
                    String name = ccursortaxreturn.getString(10);
                    String value = ccursortaxreturn.getString(9);
                    String pq = ccursortaxreturn.getString(39);
                    String itna = ccursortaxreturn.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn.moveToNext());
            }

            Cursor ccursortaxreturn2 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn2.moveToFirst()) {

                do {
                    String name = ccursortaxreturn2.getString(30);
                    String value = ccursortaxreturn2.getString(31);
                    String pq = ccursortaxreturn2.getString(39);
                    String itna = ccursortaxreturn2.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn2.moveToNext());
            }

            Cursor ccursortaxreturn3 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn3.moveToFirst()) {

                do {
                    String name = ccursortaxreturn3.getString(32);
                    String value = ccursortaxreturn3.getString(33);
                    String pq = ccursortaxreturn3.getString(39);
                    String itna = ccursortaxreturn3.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn3.moveToNext());
            }

            Cursor ccursortaxreturn4 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn4.moveToFirst()) {

                do {
                    String name = ccursortaxreturn4.getString(34);
                    String value = ccursortaxreturn4.getString(35);
                    String pq = ccursortaxreturn4.getString(39);
                    String itna = ccursortaxreturn4.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn4.moveToNext());
            }

            Cursor ccursortaxreturn5 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn5.moveToFirst()) {

                do {
                    String name = ccursortaxreturn5.getString(36);
                    String value = ccursortaxreturn5.getString(37);
                    String pq = ccursortaxreturn5.getString(39);
                    String itna = ccursortaxreturn5.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn5.moveToNext());
            }


            ArrayList<String> groupList1 = new ArrayList<String>();

            float sum_p1 = 0;
            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

                if (groupList1.contains(mTextView.getText().toString())) {

                }else {
                    sum_p1 = 0;
                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                        mTextView1 = (TextView) mRow1.getChildAt(0);
                        mTextView2 = (TextView) mRow1.getChildAt(2);
                        if (groupList1.contains(mTextView.getText().toString())) {
                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                            }
                        } else {
                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                groupList1.add(mTextView.getText().toString());
                                sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                            }
                        }
                    }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                    String mod1 = mTextView.getText().toString() + "---" + String.valueOf(String.format("%.2f", sum_p1));
                    allbuftaxestype1 = new byte[][]{
                            left, normal, mod1.getBytes(), HT, LF
                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.equals("ok")) {
                        BluetoothPrintDriver.BT_Write(left);    //
                        BT_Write(normal);
                        BT_Write(mod1);
                        BluetoothPrintDriver.BT_Write(HT);    //
                        BluetoothPrintDriver.BT_Write(LF);    //
                    } else {
                        if (statusnets_counter.equals("ok")) {
                            wifiSocket2.WIFI_Write(left);    //
                            wifiSocket2.WIFI_Write(normal);
                            wifiSocket2.WIFI_Write(mod1);
                            wifiSocket2.WIFI_Write(HT);    //
                            wifiSocket2.WIFI_Write(LF);    //
                        }else {
                            if (statusnets.equals("ok")) {
                                wifiSocket.WIFI_Write(left);    //
                                wifiSocket.WIFI_Write(normal);
                                wifiSocket.WIFI_Write(mod1);
                                wifiSocket.WIFI_Write(HT);    //
                                wifiSocket.WIFI_Write(LF);    //
                            }
                        }
                    }

                    String match = "@";
                    int position = mTextView.getText().toString().indexOf(match);
                    String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
                    Cursor ccursor6 = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    if (ccursor6.moveToFirst()) {
                        String hsn = ccursor6.getString(38);

                        TextView hsn_hsn = new TextView(CancelActivity.this);
                        hsn_hsn.setText(hsn);

                        if (hsn_hsn.getText().toString().equals("")) {
                        } else {
                            allbuftaxestype1 = new byte[][]{
                                    left, normal, hsn.getBytes(), HT, LF
                            };
                            if (statussusbs.equals("ok")) {
                                BluetoothPrintDriver.BT_Write(left);    //
                                BT_Write(normal);
                                BT_Write("HSN "+hsn);
                                BluetoothPrintDriver.BT_Write(HT);    //
                                BluetoothPrintDriver.BT_Write(LF);    //
                            } else {
                                if (statusnets_counter.equals("ok")) {
                                    wifiSocket2.WIFI_Write(left);    //
                                    wifiSocket2.WIFI_Write(normal);
                                    wifiSocket2.WIFI_Write("HSN "+hsn);
                                    wifiSocket2.WIFI_Write(HT);    //
                                    wifiSocket2.WIFI_Write(LF);    //
                                }else {
                                    if (statusnets.equals("ok")) {
                                        wifiSocket.WIFI_Write(left);    //
                                        wifiSocket.WIFI_Write(normal);
                                        wifiSocket.WIFI_Write("HSN "+hsn);
                                        wifiSocket.WIFI_Write(HT);    //
                                        wifiSocket.WIFI_Write(LF);    //
                                    }
                                }
                            }
                        }
                    }

                }
            }

//            Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//
////                    final TableRow row = new TableRow(CancelActivity.this);
////                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
////                            TableRow.LayoutParams.WRAP_CONTENT));
////                    row.setGravity(Gravity.CENTER);
//
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TableRow.LayoutParams lp, lp1, lp2;
//
////                                    final TextView tv = new TextView(CancelActivity.this);
////                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                    tv.setTextSize(16);
////                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                                    row.addView(tv);
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
////                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        //tv2.setTextColor(Color.parseColor("#000000"));
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
////                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        //tv3.setPadding(0,0,10,0);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        //tv3.setTextColor(Color.parseColor("#000000"));
//                        //row.addView(tv3);
//
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(tota1);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                        };
//                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//
//
//                } while (ccursortaxreturn.moveToNext());
//            }


            String phon = "0";

            Cursor caddress1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
            if (caddress1.moveToFirst()) {
                phon = caddress1.getString(2);
            }

            TextView tvvs = new TextView(CancelActivity.this);
            tvvs.setText(phon);


            Cursor us_name1 = db1.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
            if (us_name1.moveToLast()) {
//            Toast.makeText(CancelActivity.this, "user id there", Toast.LENGTH_LONG).show();
                String na53 = us_name1.getString(53);
                String na38 = us_name1.getString(38);
                String na39 = us_name1.getString(39);
                String na40 = us_name1.getString(40);
                String na41 = us_name1.getString(41);
                String na42 = us_name1.getString(42);
                String na43 = us_name1.getString(43);
                String na44 = us_name1.getString(44);
                String na45 = us_name1.getString(45);
                String na46 = us_name1.getString(46);
                String na47 = us_name1.getString(47);
                String na48 = us_name1.getString(48);
                String na49 = us_name1.getString(49);
                String na50 = us_name1.getString(50);
                String na51 = us_name1.getString(51);
                String na52 = us_name1.getString(52);
                String na38_value = us_name1.getString(54);
                String na39_value = us_name1.getString(55);
                String na40_value = us_name1.getString(56);
                String na41_value = us_name1.getString(57);
                String na42_value = us_name1.getString(58);
                String na43_value = us_name1.getString(59);
                String na44_value = us_name1.getString(60);
                String na45_value = us_name1.getString(61);
                String na46_value = us_name1.getString(62);
                String na47_value = us_name1.getString(63);
                String na48_value = us_name1.getString(64);
                String na49_value = us_name1.getString(65);
                String na50_value = us_name1.getString(66);
                String na51_value = us_name1.getString(67);
                String na52_value = us_name1.getString(68);

                String proc = us_name1.getString(69);

                TextView hid = new TextView(CancelActivity.this);
                hid.setText(proc);

                if (hid.getText().toString().equals("off")) {
                    Cursor cursorr = null;
                    if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                        cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                        cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymmethoda.toString().equals("  Home delivery")) {
                        cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                    if (cursorr.moveToFirst()) {

                        do {

                            String name = cursorr.getString(1);
                            String value = cursorr.getString(2);

                            final TableRow row = new TableRow(CancelActivity.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT));
                            row.setGravity(Gravity.CENTER);

                            TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                            TextView tvv = new TextView(CancelActivity.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText(name);

                            TextView tv1 = new TextView(CancelActivity.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv1.setText(value);
                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(CancelActivity.this);
                            //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                            //tv2.setLayoutParams(lp);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                            tv2.append(name + " @ " + value + "%");
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(tv2);

                            TextView textView1 = new TextView(CancelActivity.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(textView1);

                            TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            //tv3.setPadding(0,0,10,0);
                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                            float tota = mul;
                            String tota1 = String.format("%.2f", tota);
                            tv3.setText(String.valueOf(tota));
                            //row.addView(tv3);


                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            String value2 = tv3.getText().toString();
                            row.addView(tv3);

                            tableLayout1.addView(row);

                            String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                            allbuftaxestype2 = new byte[][]{
                                    left, normal, mod1.getBytes(), HT, LF
                                    //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                            };
                            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                            if (statussusbs.toString().equals("ok")) {
                                BluetoothPrintDriver.BT_Write(left);    //
                                BT_Write(normal);
                                BT_Write(mod1);
                                BluetoothPrintDriver.BT_Write(HT);    //
                                BluetoothPrintDriver.BT_Write(LF);    //
                            } else {
                                if (statusnets_counter.toString().equals("ok")) {
                                    wifiSocket2.WIFI_Write(left);    //
                                    wifiSocket2.WIFI_Write(normal);
                                    wifiSocket2.WIFI_Write(mod1);
                                    wifiSocket2.WIFI_Write(HT);    //
                                    wifiSocket2.WIFI_Write(LF);    //
                                }else {
                                    if (statusnets.toString().equals("ok")) {
                                        wifiSocket.WIFI_Write(left);    //
                                        wifiSocket.WIFI_Write(normal);
                                        wifiSocket.WIFI_Write(mod1);
                                        wifiSocket.WIFI_Write(HT);    //
                                        wifiSocket.WIFI_Write(LF);    //
                                    }
                                }
                            }

                        } while (cursorr.moveToNext());
                    }
                } else {
                    for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                        int i1 = 0;
                        if (i2 == 38) {
                            i1 = 54;
                        }
                        if (i2 == 39) {
                            i1 = 55;
                        }
                        if (i2 == 40) {
                            i1 = 56;
                        }
                        if (i2 == 41) {
                            i1 = 57;
                        }
                        if (i2 == 42) {
                            i1 = 58;
                        }
                        if (i2 == 43) {
                            i1 = 59;
                        }
                        if (i2 == 44) {
                            i1 = 60;
                        }
                        if (i2 == 45) {
                            i1 = 61;
                        }
                        if (i2 == 46) {
                            i1 = 62;
                        }
                        if (i2 == 47) {
                            i1 = 63;
                        }
                        if (i2 == 48) {
                            i1 = 64;
                        }
                        if (i2 == 49) {
                            i1 = 65;
                        }
                        if (i2 == 50) {
                            i1 = 66;
                        }
                        if (i2 == 51) {
                            i1 = 67;
                        }
                        if (i2 == 52) {
                            i1 = 68;
                        }


                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv.setGravity(Gravity.START);
                        tv.setTextSize(15);
                        //text = cursor.getString(1);
//                String v = na;

                        tv.setText(us_name1.getString(i2));


                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        //text = cursor.getString(1);
                        tv1.setText(us_name1.getString(i1));
                        String value1 = "0";
                        if (tv1.getText().toString().equals("")) {

                        } else {
                            value1 = tv1.getText().toString();
                        }


                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);
//                    Toast.makeText(CancelActivity.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

//                    Toast.makeText(CancelActivity.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                        TextView tv33 = new TextView(CancelActivity.this);
                        tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv33.setText(String.valueOf(tota));
                        tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv3.setTextColor(Color.parseColor("#000000"));
                        //row.addView(tv3);


                        tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv33);

                        String value2 = tv33.getText().toString();
//                    Toast.makeText(CancelActivity.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                        if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                                || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                        } else {
                            tableLayout1.addView(row);

                            String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);
                            allbuftaxestype2 = new byte[][]{
                                    left, normal, mod1.getBytes(), HT, LF
                                    //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                            };
                            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                            if (statussusbs.toString().equals("ok")) {
                                BluetoothPrintDriver.BT_Write(left);    //
                                BT_Write(normal);
                                BT_Write(mod1);
                                BluetoothPrintDriver.BT_Write(HT);    //
                                BluetoothPrintDriver.BT_Write(LF);    //
                            } else {
                                if (statusnets_counter.toString().equals("ok")) {
                                    wifiSocket2.WIFI_Write(left);    //
                                    wifiSocket2.WIFI_Write(normal);
                                    wifiSocket2.WIFI_Write(mod1);
                                    wifiSocket2.WIFI_Write(HT);    //
                                    wifiSocket2.WIFI_Write(LF);    //
                                }else {
                                    if (statusnets.toString().equals("ok")) {
                                        wifiSocket.WIFI_Write(left);    //
                                        wifiSocket.WIFI_Write(normal);
                                        wifiSocket.WIFI_Write(mod1);
                                        wifiSocket.WIFI_Write(HT);    //
                                        wifiSocket.WIFI_Write(LF);    //
                                    }
                                }
                            }
                        }

                    }
                }

            } else {
//            Toast.makeText(CancelActivity.this, "user id not there", Toast.LENGTH_LONG).show();
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                        allbuftaxestype2 = new byte[][]{
                                left, normal, mod1.getBytes(), HT, LF
                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                        };
                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                        if (statussusbs.toString().equals("ok")) {
                            BluetoothPrintDriver.BT_Write(left);    //
                            BT_Write(normal);
                            BT_Write(mod1);
                            BluetoothPrintDriver.BT_Write(HT);    //
                            BluetoothPrintDriver.BT_Write(LF);    //
                        } else {
                            if (statusnets_counter.toString().equals("ok")) {
                                wifiSocket2.WIFI_Write(left);    //
                                wifiSocket2.WIFI_Write(normal);
                                wifiSocket2.WIFI_Write(mod1);
                                wifiSocket2.WIFI_Write(HT);    //
                                wifiSocket2.WIFI_Write(LF);    //
                            }else {
                                if (statusnets.toString().equals("ok")) {
                                    wifiSocket.WIFI_Write(left);    //
                                    wifiSocket.WIFI_Write(normal);
                                    wifiSocket.WIFI_Write(mod1);
                                    wifiSocket.WIFI_Write(HT);    //
                                    wifiSocket.WIFI_Write(LF);    //
                                }
                            }
                        }

                    } while (cursorr.moveToNext());
                }
            }


            float sum = 0;
            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                TextView mTextView = (TextView) mRow.getChildAt(2);
                sum = sum
                        + Float.parseFloat(mTextView.getText().toString());
            }


            String newsum = String.format("%.2f", sum);

            if (sum == 0 || sum == 0.0 || sum == 0.00) {

            } else {
                allbuftax = new byte[][]{
                        setHT32, left, "Tax".getBytes(), HT, newsum.getBytes(), LF
                };

                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT32);    //
                    BluetoothPrintDriver.BT_Write(left);    //
                    BT_Write("Tax");
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write(newsum);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT32);    //
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write("Tax");
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(newsum);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT32);    //
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write("Tax");
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(newsum);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }


///////////////////////////////// discount


            Cursor cursor5 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
            if (cursor5.moveToFirst()) {
                dsirs = cursor5.getString(7);
                float ds = Float.parseFloat(dsirs);
                dsirs1 = String.format("%.2f", ds);
            } else {
                dsirs = "0";
            }
            TextView dis = new TextView(CancelActivity.this);
            Cursor cursor7 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
            if (cursor7.moveToFirst()) {
                taxpe = cursor7.getString(5);
                float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
                on1 = String.format("%.1f", on);
                if (on % 1 != 0) {
                    // //////Toast.makeText(CancelActivity.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                    int newww = (int) on;
                    float decpart = on - newww;
                    ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                    ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                    if (decpart > 0.5) {
                        ////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                        float addall = on;
                        //alltotal.setText(String.valueOf(newww + 1));
                        //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                        float dee = 1 - decpart;
                        dis.setText("+ " + String.format("%.2f", dee));

                    } else {
                        // //////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_SHORT).show();
                        //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                        float addall = on;
                        //alltotal1.setText(String.valueOf(newww));
                        //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                        dis.setText("- " + String.format("%.2f", decpart));

                    }
                } else {
                    ////////Toast.makeText(CancelActivity.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    int addall = (int) on;
                    //alltotal1.setText(String.valueOf(addall));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("+ " + "0.00");
                    ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
                }
            } else {
                taxpe = "0";
                dis.setText("+ " + "0.00");
                on1 = "0";
            }

            //tot-is-subtotal

            String alldiscinperc1 = "Discount(" + taxpe + "%)";
            allbufdisc = new byte[][]{
                    setHT32, left, alldiscinperc1.getBytes(), HT, on1.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT32);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write(alldiscinperc1);
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write(on1);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT32);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(alldiscinperc1);
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(on1);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT32);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(alldiscinperc1);
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(on1);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }
            float newe;

//////////////////////////////////////////

            Cursor cursor113 = db1.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
            if (cursor113.moveToFirst()) {
                float level = cursor113.getFloat(0);
                total = String.valueOf(level);
                total1 = Float.parseFloat(total);
                total_disc_print_q = String.format("%.2f", total1);

                allbufrounded = new byte[][]{
                        setHT32, left, "Savings".getBytes(), HT, total_disc_print_q.getBytes(), LF
                };

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT32);    //
                    BluetoothPrintDriver.BT_Write(left);    //
                    BT_Write("Savings");
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write(total_disc_print_q);
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT32);    //
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write("Savings");
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(total_disc_print_q);
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT32);    //
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write("Savings");
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(total_disc_print_q);
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }

            }

////////////////////////////////rounded

            if (taxpe.toString().equals("")) {
                newe = sum + Float.parseFloat(String.valueOf(tot));
            } else {
                newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
            }

            if (str_round_off.toString().equals("No")) {

            }else {
                TextView round = new TextView(CancelActivity.this);
                if (newe % 1 != 0) {
                    int newww = (int) newe;
                    float decpart = newe - newww;
                    if (decpart > 0.5) {
                        float addall = newe;
                        float dee = 1 - decpart;
                        round.setText("+ " + String.format("%.2f", dee));
                    } else {
                        float addall = newe;
                        round.setText("- " + String.format("%.2f", decpart));
                    }
                } else {
                    int addall = (int) newe;
                    round.setText("+ " + "0.00");
                }

                allbufrounded = new byte[][]{
                        setHT32, left, "Rounded".getBytes(), HT, round.getText().toString().getBytes(), LF
                };

                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    BluetoothPrintDriver.BT_Write(setHT32);    //
                    BluetoothPrintDriver.BT_Write(left);    //
                    BT_Write("Rounded");
                    BluetoothPrintDriver.BT_Write(HT);    //
                    BT_Write(round.getText().toString());
                    BluetoothPrintDriver.BT_Write(LF);    //
                } else {
                    if (statusnets_counter.toString().equals("ok")) {
                        wifiSocket2.WIFI_Write(setHT32);    //
                        wifiSocket2.WIFI_Write(left);    //
                        wifiSocket2.WIFI_Write("Rounded");
                        wifiSocket2.WIFI_Write(HT);    //
                        wifiSocket2.WIFI_Write(round.getText().toString());
                        wifiSocket2.WIFI_Write(LF);    //
                    }else {
                        if (statusnets.toString().equals("ok")) {
                            wifiSocket.WIFI_Write(setHT32);    //
                            wifiSocket.WIFI_Write(left);    //
                            wifiSocket.WIFI_Write("Rounded");
                            wifiSocket.WIFI_Write(HT);    //
                            wifiSocket.WIFI_Write(round.getText().toString());
                            wifiSocket.WIFI_Write(LF);    //
                        }
                    }
                }
            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

/////////////////////refund

            //19
            Cursor billcan = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (billcan.moveToFirst()) {
                String asd = billcan.getString(18);
                refundamounta = String.valueOf(asd);
            } else {
                Cursor billcan_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (billcan_cancel.moveToFirst()) {
                    String asd = billcan_cancel.getString(17);
                    refundamounta = String.valueOf(asd);
                }
            }

            Cursor c1 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (c1.moveToFirst()) {
                String c11 = c1.getString(2);
                alltotal1 = c11;
            } else {
                alltotal1 = "0";
            }
            float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
            String mn1 = String.valueOf(min);

            allbufrounded = new byte[][]{
                    setHT32, left, "Refund".getBytes(), HT, "-".getBytes(), mn1.toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT32);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Refund");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write("-");
                BT_Write(mn1);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT32);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Refund");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write("-");
                    wifiSocket2.WIFI_Write(mn1);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT32);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Refund");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write("-");
                        wifiSocket.WIFI_Write(mn1);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
            final String normal1 = normal5.format(new Date());

            Date dt = new Date();
            SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
            final String time1 = sdf1.format(dt);

            Date dtt = new Date();
            SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
            String time24 = sdf1t.format(dtt);

            String refundtime = "(" + normal1 + "," + time1 + ")";
            allbuf6 = new byte[][]{
                    left, normal, refundtime.getBytes(), LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(normal);    //
                BT_Write(refundtime);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(normal);    //
                    wifiSocket2.WIFI_Write(refundtime);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(normal);    //
                        wifiSocket.WIFI_Write(refundtime);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }
/////////////////////////

            float all = Float.parseFloat(alltotal1);
            String newf = String.valueOf(all);

            allbufrounded = new byte[][]{
                    setHT3212, left, "Total".getBytes(), HT, "Rs ".getBytes(), newf.toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(setHT3212);    //
                BluetoothPrintDriver.BT_Write(left);    //
                BT_Write("Total");
                BluetoothPrintDriver.BT_Write(HT);    //
                BT_Write(insert1_rs);
                BT_Write(newf);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(setHT3212);    //
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write("Total");
                    wifiSocket2.WIFI_Write(HT);    //
                    wifiSocket2.WIFI_Write(insert1_rs);
                    wifiSocket2.WIFI_Write(newf);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(setHT3212);    //
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write("Total");
                        wifiSocket.WIFI_Write(HT);    //
                        wifiSocket.WIFI_Write(insert1_rs);
                        wifiSocket.WIFI_Write(newf);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(left);    //
                BluetoothPrintDriver.BT_Write(un1);    //
                BT_Write(str_line);
                BluetoothPrintDriver.BT_Write(LF);    //
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(left);    //
                    wifiSocket2.WIFI_Write(un1);    //
                    wifiSocket2.WIFI_Write(str_line);
                    wifiSocket2.WIFI_Write(LF);    //
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(left);    //
                        wifiSocket.WIFI_Write(un1);    //
                        wifiSocket.WIFI_Write(str_line);
                        wifiSocket.WIFI_Write(LF);    //
                    }
                }
            }

            footer();
            cashopen();
        }

    }

    public  byte[] neoprintreturncopy() {


        Typeface tf = Typeface.SERIF;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ReceiptBitmap receiptBitmap = new ReceiptBitmap().getInstance();
        int cont=5;
        Cursor cursor34 = db1.rawQuery("Select count(*) from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (cursor34.moveToFirst()) {
            cont=cursor34.getInt(0);

        }
        Log.e("count:",cont+"");
        cursor34.close();
        receiptBitmap.init(700+(cont*50));
        receiptBitmap.setTextSize(25);
        receiptBitmap.setTypeface(Typeface.create(tf, Typeface.NORMAL));


        charlength = 10;
        charlength1 = 20;
        charlength2 = 30;
        quanlentha = 5;

        Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            strcompanyname = getcom.getString(1);
            strbillone = getcom.getString(12);
        }
        getcom.close();

        tvkot.setText(strcompanyname);
        if (tvkot.getText().toString().equals("")) {

        } else {
            // Print.StartPrinting(strcompanyname ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
            receiptBitmap.drawCenterText(strcompanyname);
        }

        receiptBitmap.drawCenterText("Order Ticket");

        String str_line="----------------------";
        receiptBitmap.drawLeftText(str_line);


        Cursor cursor10 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()) {
            billtypea = cursor10.getString(5);
            paymmethoda = cursor10.getString(6);
        }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

        if (billtypea.toString().equals("  Cash")) {
            billtypeaa = "Cash"; //0
        }
        if (billtypea.toString().equals("  Card")) {
            billtypeaa = "Card"; //0
        }
        if (billtypea.toString().equals("  Paytm")) {
            billtypeaa = "Paytm"; //0
        }
        if (billtypea.toString().equals("  Mobikwik")) {
            billtypeaa = "Mobikwik"; //0
        }
        if (billtypea.toString().equals("  Freecharge")) {
            billtypeaa = "Freecharge"; //0
        }
        if (billtypea.toString().equals("  Pay Later")) {
            billtypeaa = "Pay Later"; //0
        }
        if (billtypea.toString().equals("  Cheque")) {
            billtypeaa = "Cheque"; //0
        }
        if (billtypea.toString().equals("  Sodexo")) {
            billtypeaa = "Sodexo"; //0
        }
        if (billtypea.toString().equals("  Zeta")) {
            billtypeaa = "Zeta"; //0
        }
        if (billtypea.toString().equals("  Ticket")) {
            billtypeaa = "Ticket"; //0
        }
        billtypeaa = billtypea.toString().replace(" ", "");

        receiptBitmap.drawLeftText(billnoget+"   "+billtypeaa);

        if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
            paymmethodaa = "Dine-in";
            //billtypee.setText("Dine-in");
        } else {
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                paymmethodaa = "Takeaway";
                //billtypee.setText("Takeaway");
            } else {
                paymmethodaa = "Home delivery";
                //billtypee.setText("Home delivery");
            }
        }

        Cursor date = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (date.moveToFirst()) {
            datee = date.getString(25);
            timee = date.getString(12);
        } else {
            Cursor date_cancel = db1.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        receiptBitmap.drawLeftText(paymmethodaa+"   "+datee);

        Cursor cursor9 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9.moveToFirst()) {
            tableida = cursor9.getString(15);
        }
//        else {
//            Cursor cursor9_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

        Cursor vbnm = db.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
        if (vbnm.moveToFirst()) {
            assa1 = vbnm.getString(1);
            assa2 = vbnm.getString(2);
        }
        TextView cx = new TextView(CancelActivity.this);
        cx.setText(assa1);
        if (cx.getText().toString().equals("")) {
            tableidaa = "Tab" + assa2;

        } else {
            tableidaa = "Tab" + assa1;

        }

        receiptBitmap.drawLeftText(tableidaa+"   "+timee);

        receiptBitmap.drawLeftText(str_line);

        Cursor caddress = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress.moveToFirst()) {
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            if (nam.toString().length() > 0 || addr.toString().length() > 0 ||
                    phon.toString().length() > 0 || emai.toString().length() > 0) {
                receiptBitmap.drawLeftText("Customer:");
            } else {

            }

            if (nam.toString().length() > 0) {
                receiptBitmap.drawLeftText(nam);
            } else {

            }

            if (addr.toString().length() > 0) {
                receiptBitmap.drawLeftText(addr);
            } else {

            }

            if (phon.toString().length() > 0) {
                String cust_ph = "Ph. " + phon.toString();
                receiptBitmap.drawLeftText(cust_ph);
            } else {

            }

            if (emai.toString().length() > 0) {
                receiptBitmap.drawLeftText(emai);
            } else {

            }

            receiptBitmap.drawLeftText(str_line);
        }

        receiptBitmap.drawLeftText("Qty"+"  "+"Item"+"  "+"Price"+"  "+"Amount");


        receiptBitmap.drawLeftText(str_line);


        Cursor ccursorr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);

                final String newids = ccursorr.getString(0);

                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);
                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                        if (cursor4.moveToFirst()) {
                            sub2a = cursor4.getFloat(0);
                            String sub2a1 = String.valueOf(sub2a);
                            ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                            ss1 = String.format("%.1f", ss);
                        }

                        if (name.toString().length() > charlength) {
                            int print1 = 0;

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+ss1);
                                    receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+ss1);
                                    receiptBitmap.drawLeftText("      "+string2);
                                    print1 = 1;
                                }

                            }

/////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+ss1);
                                    receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                    receiptBitmap.drawLeftText("      "+string3);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+ss1);
                                    receiptBitmap.drawLeftText("      "+string2);
                                    receiptBitmap.drawLeftText("      "+string3);
                                    print1 = 1;
                                }

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        } else {
                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                receiptBitmap.drawLeftText(string1quan+"  "+name+"  "+pricee+"  "+ss1);
                                receiptBitmap.drawLeftText(string2quan);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            } else {

                                receiptBitmap.drawLeftText(value+"  "+name+"  "+pricee+"  "+ss1);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            }

                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            if (modiname.toString().length() > charlength) {
                                if (modiname.toString().length() > charlength) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength);

                                    receiptBitmap.drawLeftText(""+"  "+">"+string1+"  "+modpricestr);
                                    receiptBitmap.drawLeftText("    "+string2);

                                }
                                if (modiname.toString().length() > charlength1) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength, charlength1);
                                    String string3 = modiname.substring(charlength1);

                                    receiptBitmap.drawLeftText(""+"  "+">"+string1+"  "+modpricestr);
                                    receiptBitmap.drawLeftText("    "+string2);
                                    receiptBitmap.drawLeftText("    "+string3);

                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            } else {

                                receiptBitmap.drawLeftText(""+"  "+">"+modiname+"  "+modpricestr);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            }

                            final TableRow tableRow11 = new TableRow(CancelActivity.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            final TextView tvv = new TextView(CancelActivity.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(CancelActivity.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);


                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(ss));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    receiptBitmap.drawLeftText(""+"  "+""+"  "+""+"  "+"("+"-"+total_disc_print_q+")");

                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);
                        if (name.toString().length() > charlength) {
                            int print1 = 0;
                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+tototot);
                                    receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+tototot);
                                    receiptBitmap.drawLeftText("      "+string2);
                                    print1 = 1;
                                }

                            }

////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+tototot);
                                    receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                    receiptBitmap.drawLeftText("      "+string3);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+tototot);
                                    receiptBitmap.drawLeftText("      "+string2);
                                    receiptBitmap.drawLeftText("      "+string3);
                                    print1 = 1;
                                }

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        } else {
                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                receiptBitmap.drawLeftText(string1quan+"  "+name+"  "+pricee+"  "+tototot);
                                receiptBitmap.drawLeftText(string2quan);

                            } else {

                                receiptBitmap.drawLeftText(value+"  "+name+"  "+pricee+"  "+tototot);
                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        }

                        tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    receiptBitmap.drawLeftText(""+"  "+""+"  "+""+"  "+"("+"-"+total_disc_print_q+")");
                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }
                }


            } while (ccursorr.moveToNext());
        }

        receiptBitmap.drawLeftText("Returns/Cancel:");

        Cursor ccursorreturn = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorreturn.moveToFirst()) {

            do {

                String name = ccursorreturn.getString(1);
                String value = ccursorreturn.getString(2);
                String pq = ccursorreturn.getString(5);
                String itna = ccursorreturn.getString(2);
                String pricee = ccursorreturn.getString(3);
                String tototot = ccursorreturn.getString(4);

                final String newtt = ccursorreturn.getString(4);

                final String newid = ccursorreturn.getString(19);

                final String newids = ccursorreturn.getString(0);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor modt = db1.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        if (modt.moveToFirst()) {
                            do {
                                //row.removeView(tv3);
                                float aq = modt.getFloat(0);
                                String aqq = String.valueOf(aq);
                                aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                aqq2 = String.format("%.1f", aqq1);
                            } while (modt.moveToNext());
                        }


                        if (name.toString().length() > charlength) {

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText(string2quan+"  "+string2);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText("      "+string2);

                            }

////////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = total.substring(0, quanlentha);
                                String string2quan = total.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                receiptBitmap.drawLeftText("      "+string3);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText("      "+string2);
                                receiptBitmap.drawLeftText("      "+string3);

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        } else {
                            if (total.toString().length() > quanlentha) {
                                String string1quan = total.substring(0, quanlentha);
                                String string2quan = total.substring(quanlentha);

                                receiptBitmap.drawLeftText(string1quan+"  "+name+"  "+pricee+"  "+aqq2);
                                receiptBitmap.drawLeftText(string2quan);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            } else {

                                receiptBitmap.drawLeftText(value+"  "+name+"  "+pricee+"  "+aqq2);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            }

                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            if (modiname.toString().length() > charlength) {
                                if (modiname.toString().length() > charlength) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength);

                                    receiptBitmap.drawLeftText(""+"  "+">"+string1+"  "+modpricestr);
                                    receiptBitmap.drawLeftText("    "+string2);

                                }
                                if (modiname.toString().length() > charlength1) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength, charlength1);
                                    String string3 = modiname.substring(charlength1);

                                    receiptBitmap.drawLeftText(""+"  "+">"+string1+"  "+modpricestr);
                                    receiptBitmap.drawLeftText("    "+string2);
                                    receiptBitmap.drawLeftText("    "+string3);

                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            } else {

                                receiptBitmap.drawLeftText(""+"  "+">"+modiname+"  "+modpricestr);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        receiptBitmap.drawLeftText("HSN "+hsn);
                                    }
                                }

                            }


                            final TableRow tableRow11 = new TableRow(CancelActivity.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(CancelActivity.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(CancelActivity.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);


                            row.removeView(tv8);
                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        //Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    receiptBitmap.drawLeftText(""+"  "+""+"  "+""+"  "+"("+"-"+total_disc_print_q+")");

                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);

                        if (name.toString().length() > charlength) {
                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+tototot);
                                receiptBitmap.drawLeftText(string2quan+"  "+string2);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+tototot);
                                receiptBitmap.drawLeftText("      "+string2);

                            }

//////////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                receiptBitmap.drawLeftText(string1quan+"  "+string1+"  "+pricee+"  "+tototot);
                                receiptBitmap.drawLeftText(string2quan+"  "+string2);
                                receiptBitmap.drawLeftText("      "+string3);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                receiptBitmap.drawLeftText(value+"  "+string1+"  "+pricee+"  "+tototot);
                                receiptBitmap.drawLeftText("      "+string2);
                                receiptBitmap.drawLeftText("      "+string3);

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        } else {

                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                receiptBitmap.drawLeftText(string1quan+"  "+name+"  "+pricee+"  "+tototot);
                                receiptBitmap.drawLeftText(string2quan);

                            } else {

                                receiptBitmap.drawLeftText(value+"  "+name+"  "+pricee+"  "+tototot);
                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    receiptBitmap.drawLeftText("HSN "+hsn);
                                }
                            }

                        }

                        tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    receiptBitmap.drawLeftText(""+"  "+""+"  "+""+"  "+"("+"-"+total_disc_print_q+")");
                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }

                }
            } while (ccursorreturn.moveToNext());


        }

        receiptBitmap.drawLeftText(str_line);
////////////////////////////////////sub total

        Cursor cursor3 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor3.moveToFirst()) {
            sub1 = cursor3.getFloat(0);
        }

        Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
        if (cursor4.moveToFirst()) {
            sub2 = cursor4.getFloat(0);
        }
        float sub12 = sub1 + sub2;
        String total2 = String.valueOf(sub12);
        float to = Float.parseFloat(total2);
        String tot = String.valueOf(to);

        receiptBitmap.drawLeftText("Sub total"+"                       "+tot);

/////////////////////////////////// tax
        TableLayout tableLayout1 = new TableLayout(CancelActivity.this);
        tableLayout1.removeAllViews();

        Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {
                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(50);
                String itna = ccursor.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor.moveToNext());
        }

        Cursor ccursor2 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor2.moveToFirst()) {

            do {
                String name = ccursor2.getString(35);
                String value = ccursor2.getString(36);
                String pq = ccursor2.getString(50);
                String itna = ccursor2.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor2.moveToNext());
        }

        Cursor ccursor3 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor3.moveToFirst()) {

            do {
                String name = ccursor3.getString(37);
                String value = ccursor3.getString(38);
                String pq = ccursor3.getString(50);
                String itna = ccursor3.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor3.moveToNext());
        }

        Cursor ccursor4 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor4.moveToFirst()) {

            do {
                String name = ccursor4.getString(39);
                String value = ccursor4.getString(40);
                String pq = ccursor4.getString(50);
                String itna = ccursor4.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor4.moveToNext());
        }

        Cursor ccursor5 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor5.moveToFirst()) {

            do {
                String name = ccursor5.getString(41);
                String value = ccursor5.getString(42);
                String pq = ccursor5.getString(50);
                String itna = ccursor5.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor5.moveToNext());
        }


//            ArrayList<String> groupList = new ArrayList<String>();
//
//            float sum_p = 0;
//            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
//                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
//                TextView mTextView = (TextView) mRow.getChildAt(0);
////                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();
//
//                if (groupList.contains(mTextView.getText().toString())) {
//
//                }else {
//                    sum_p = 0;
//                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
//                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
//                        mTextView1 = (TextView) mRow1.getChildAt(0);
//                        mTextView2 = (TextView) mRow1.getChildAt(2);
//                        if (groupList.contains(mTextView.getText().toString())) {
//                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                            }
//                        } else {
//                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                groupList.add(mTextView.getText().toString());
//                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                            }
//                        }
//                    }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p, Toast.LENGTH_LONG).show();
//
//                    String mod1 = mTextView.getText().toString() + "---" + String.valueOf(sum_p);
//                    allbuftaxestype1 = new byte[][]{
//                            left, normal, mod1.getBytes(), HT, LF
//                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                    };
//                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                    if (statussusbs.equals("ok")) {
//                        BluetoothPrintDriver.BT_Write(left);    //
//                        BT_Write(normal);
//                        BT_Write(mod1);
//                        BluetoothPrintDriver.BT_Write(HT);    //
//                        BluetoothPrintDriver.BT_Write(LF);    //
//                    } else {
//                        if (statusnets.equals("ok")) {
//                            wifiSocket.WIFI_Write(left);    //
//                            wifiSocket.WIFI_Write(normal);
//                            wifiSocket.WIFI_Write(mod1);
//                            wifiSocket.WIFI_Write(HT);    //
//                            wifiSocket.WIFI_Write(LF);    //
//                        }
//                    }
//
//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
//                    String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
//                    Cursor ccursor6 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                    if (ccursor6.moveToFirst()) {
//                        String hsn = ccursor6.getString(34);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, hsn.getBytes(), HT, LF
//                        };
//
//                        TextView hsn_hsn = new TextView(CancelActivity.this);
//                        hsn_hsn.setText(hsn);
//
//                        if (hsn_hsn.getText().toString().equals("")) {
//                        } else {
//                            if (statussusbs.equals("ok")) {
//                                BluetoothPrintDriver.BT_Write(left);    //
//                                BT_Write(normal);
//                                BT_Write("HSN "+hsn);
//                                BluetoothPrintDriver.BT_Write(HT);    //
//                                BluetoothPrintDriver.BT_Write(LF);    //
//                            } else {
//                                if (statusnets.equals("ok")) {
//                                    wifiSocket.WIFI_Write(left);    //
//                                    wifiSocket.WIFI_Write(normal);
//                                    wifiSocket.WIFI_Write("HSN "+hsn);
//                                    wifiSocket.WIFI_Write(HT);    //
//                                    wifiSocket.WIFI_Write(LF);    //
//                                }
//                            }
//                        }
//                    }
//
//                }
//            }

//            Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    TextView name1 = new TextView(CancelActivity.this);
//                    name1.setText(name);
//                    if (name1.getText().toString().equals("None") || name1.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//
//                } while (ccursor.moveToNext());
//            }


        Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn.moveToFirst()) {

            do {
                String name = ccursortaxreturn.getString(10);
                String value = ccursortaxreturn.getString(9);
                String pq = ccursortaxreturn.getString(39);
                String itna = ccursortaxreturn.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn.moveToNext());
        }

        Cursor ccursortaxreturn2 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn2.moveToFirst()) {

            do {
                String name = ccursortaxreturn2.getString(30);
                String value = ccursortaxreturn2.getString(31);
                String pq = ccursortaxreturn2.getString(39);
                String itna = ccursortaxreturn2.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn2.moveToNext());
        }

        Cursor ccursortaxreturn3 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn3.moveToFirst()) {

            do {
                String name = ccursortaxreturn3.getString(32);
                String value = ccursortaxreturn3.getString(33);
                String pq = ccursortaxreturn3.getString(39);
                String itna = ccursortaxreturn3.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn3.moveToNext());
        }

        Cursor ccursortaxreturn4 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn4.moveToFirst()) {

            do {
                String name = ccursortaxreturn4.getString(34);
                String value = ccursortaxreturn4.getString(35);
                String pq = ccursortaxreturn4.getString(39);
                String itna = ccursortaxreturn4.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn4.moveToNext());
        }

        Cursor ccursortaxreturn5 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn5.moveToFirst()) {

            do {
                String name = ccursortaxreturn5.getString(36);
                String value = ccursortaxreturn5.getString(37);
                String pq = ccursortaxreturn5.getString(39);
                String itna = ccursortaxreturn5.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn5.moveToNext());
        }


        ArrayList<String> groupList1 = new ArrayList<String>();

        float sum_p1 = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

            if (groupList1.contains(mTextView.getText().toString())) {

            }else {
                sum_p1 = 0;
                for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                    TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                    mTextView1 = (TextView) mRow1.getChildAt(0);
                    mTextView2 = (TextView) mRow1.getChildAt(2);
                    if (groupList1.contains(mTextView.getText().toString())) {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    } else {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            groupList1.add(mTextView.getText().toString());
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    }
                }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                String mod1 = mTextView.getText().toString() + "---" + String.valueOf(String.format("%.2f", sum_p1));
                receiptBitmap.drawLeftText(mod1);

                String match = "@";
                int position = mTextView.getText().toString().indexOf(match);
                String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
                Cursor ccursor6 = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor6.moveToFirst()) {
                    String hsn = ccursor6.getString(38);

                    TextView hsn_hsn = new TextView(CancelActivity.this);
                    hsn_hsn.setText(hsn);

                    if (hsn_hsn.getText().toString().equals("")) {
                    } else {
                        receiptBitmap.drawLeftText("HSN " + hsn);
                    }
                }

            }
        }

//            Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//
////                    final TableRow row = new TableRow(CancelActivity.this);
////                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
////                            TableRow.LayoutParams.WRAP_CONTENT));
////                    row.setGravity(Gravity.CENTER);
//
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TableRow.LayoutParams lp, lp1, lp2;
//
////                                    final TextView tv = new TextView(CancelActivity.this);
////                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                    tv.setTextSize(16);
////                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                                    row.addView(tv);
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
////                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        //tv2.setTextColor(Color.parseColor("#000000"));
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
////                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        //tv3.setPadding(0,0,10,0);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        //tv3.setTextColor(Color.parseColor("#000000"));
//                        //row.addView(tv3);
//
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(tota1);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                        };
//                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//
//
//                } while (ccursortaxreturn.moveToNext());
//            }


        String phon = "0";

        Cursor caddress1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(CancelActivity.this);
        tvvs.setText(phon);


        Cursor us_name1 = db1.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()) {
//            Toast.makeText(CancelActivity.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(CancelActivity.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")) {
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                        receiptBitmap.drawLeftText(mod1);

                    } while (cursorr.moveToNext());
                }
            } else {
                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(CancelActivity.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(CancelActivity.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(CancelActivity.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(CancelActivity.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);

                        String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);
                        receiptBitmap.drawLeftText(mod1);
                    }

                }
            }

        } else {
//            Toast.makeText(CancelActivity.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Home delivery")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);

                    String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                    receiptBitmap.drawLeftText(mod1);

                } while (cursorr.moveToNext());
            }
        }


        float sum = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(2);
            sum = sum
                    + Float.parseFloat(mTextView.getText().toString());
        }


        String newsum = String.format("%.2f", sum);

        if (sum == 0 || sum == 0.0 || sum == 0.00) {

        } else {
            receiptBitmap.drawLeftText("Tax"+"                       "+newsum);
        }


///////////////////////////////// discount


        Cursor cursor5 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor5.moveToFirst()) {
            dsirs = cursor5.getString(7);
            float ds = Float.parseFloat(dsirs);
            dsirs1 = String.format("%.2f", ds);
        } else {
            dsirs = "0";
        }
        TextView dis = new TextView(CancelActivity.this);
        Cursor cursor7 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor7.moveToFirst()) {
            taxpe = cursor7.getString(5);
            float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            if (on % 1 != 0) {
                // //////Toast.makeText(CancelActivity.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                int newww = (int) on;
                float decpart = on - newww;
                ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                if (decpart > 0.5) {
                    ////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                    float addall = on;
                    //alltotal.setText(String.valueOf(newww + 1));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    dis.setText("+ " + String.format("%.2f", dee));

                } else {
                    // //////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_SHORT).show();
                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    float addall = on;
                    //alltotal1.setText(String.valueOf(newww));
                    //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("- " + String.format("%.2f", decpart));

                }
            } else {
                ////////Toast.makeText(CancelActivity.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                int addall = (int) on;
                //alltotal1.setText(String.valueOf(addall));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                dis.setText("+ " + "0.00");
                ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
            }
        } else {
            taxpe = "0";
            dis.setText("+ " + "0.00");
            on1 = "0";
        }

        //tot-is-subtotal

        String alldiscinperc1 = "Discount(" + taxpe + "%)";
        receiptBitmap.drawLeftText(alldiscinperc1+"                       "+on1);

        float newe;

//////////////////////////////////////////

        Cursor cursor113 = db1.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
        if (cursor113.moveToFirst()) {
            float level = cursor113.getFloat(0);
            total = String.valueOf(level);
            total1 = Float.parseFloat(total);
            total_disc_print_q = String.format("%.2f", total1);

            receiptBitmap.drawLeftText("Savings"+"                       "+total_disc_print_q);

        }

////////////////////////////////rounded

        if (taxpe.toString().equals("")) {
            newe = sum + Float.parseFloat(String.valueOf(tot));
        } else {
            newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
        }

        if (str_round_off.toString().equals("No")) {

        }else {
            TextView round = new TextView(CancelActivity.this);
            if (newe % 1 != 0) {
                int newww = (int) newe;
                float decpart = newe - newww;
                if (decpart > 0.5) {
                    float addall = newe;
                    float dee = 1 - decpart;
                    round.setText("+ " + String.format("%.2f", dee));
                } else {
                    float addall = newe;
                    round.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                int addall = (int) newe;
                round.setText("+ " + "0.00");
            }

            receiptBitmap.drawLeftText("Rounded"+"                       "+round.getText().toString());

        }

        receiptBitmap.drawLeftText(str_line);

/////////////////////refund

        //19
        Cursor billcan = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (billcan.moveToFirst()) {
            String asd = billcan.getString(18);
            refundamounta = String.valueOf(asd);
        } else {
            Cursor billcan_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (billcan_cancel.moveToFirst()) {
                String asd = billcan_cancel.getString(17);
                refundamounta = String.valueOf(asd);
            }
        }

        Cursor c1 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (c1.moveToFirst()) {
            String c11 = c1.getString(2);
            alltotal1 = c11;
        } else {
            alltotal1 = "0";
        }
        float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
        String mn1 = String.valueOf(min);

        receiptBitmap.drawLeftText("Refund"+"                       "+"-"+mn1);

        SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
        final String normal1 = normal5.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
        final String time1 = sdf1.format(dt);

        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);

        String refundtime = "(" + normal1 + "," + time1 + ")";

        receiptBitmap.drawCenterText(refundtime);

        receiptBitmap.drawLeftText(str_line);

/////////////////////////

        float all = Float.parseFloat(alltotal1);
        String newf = String.valueOf(all);

        receiptBitmap.drawLeftText("Total"+"                       "+"Rs "+newf);

        receiptBitmap.drawLeftText(str_line);

        footer();


        receiptBitmap.drawLeftText("       ");

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            // Print.StartPrinting(strcompanyname ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
            receiptBitmap.drawCenterText(strbillone);
        }

        receiptBitmap.drawLeftText("       ");
        receiptBitmap.drawLeftText("       ");

        Bitmap canvasbitmap = receiptBitmap.getReceiptBitmap();

        if(ApplicationData.IS_DEBUGGING_ON)
            Logs.v(ApplicationData.packName,"getHeight: " + canvasbitmap.getHeight(),true,true);

        if(ApplicationData.IS_DEBUGGING_ON)
            Logs.v(ApplicationData.packName,"getReceiptHeight: " + receiptBitmap.getReceiptHeight(),true,true);

        Bitmap croppedBmp = Bitmap.createBitmap(canvasbitmap, 0, 0, canvasbitmap.getWidth(), canvasbitmap.getHeight());

        byte[] imageCommand = mMSWisepadDeviceController.getPrintData(croppedBmp, 150);

        baos.write(imageCommand, 0, imageCommand.length);

        if(ApplicationData.IS_DEBUGGING_ON)
            Logs.v(ApplicationData.packName,"end of reciept",true,true);

        return baos.toByteArray();

    }

    public void wiseposprintreturncopy(Dialog dialog) {

        db =   openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        db1 =   openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);

        charlength = 10;
        charlength1 = 20;
        charlength2 = 30;
        quanlentha = 5;

        imageViewPicture = (ImageView) dialog.findViewById(R.id.imageViewPicture);
        mView = dialog.findViewById(R.id.f_viewreturns);


        ImageView imageButton = (ImageView) mView.findViewById(R.id.viewImagee);
        imageViewPicture.getLayoutParams().height = 94;
        imageViewPicture.getLayoutParams().width = 384;
        imageButton.getLayoutParams().height = 94;
        imageButton.getLayoutParams().width = 384;


        String[] col = {"companylogo"};
        Cursor c = db.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            do {
                byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
                final Bitmap b1 = BitmapFactory.decodeByteArray(img, 0, img.length);

                imageButton.setImageBitmap(b1);

                mView.setDrawingCacheEnabled(true);
                mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                        View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
                mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
                mView.buildDrawingCache(true);

                Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
                //mView.setDrawingCacheEnabled(false);
                ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

                imageViewPicture.setImageBitmap(b);

                Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                        .getBitmap();

                Print.StartPrintingImage(mBitmap, Align.CENTER);
            } while (c.moveToNext());
        } else {
            imageButton.setVisibility(View.GONE);
        }
        c.close();

        Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            do {
                strcompanyname = getcom.getString(1);
                straddress1 = getcom.getString(14);
                straddress2 = getcom.getString(17);
                straddress3 = getcom.getString(18);
                strphone = getcom.getString(9);
                stremailid = getcom.getString(15);
                strwebsite = getcom.getString(16);
                strtaxone = getcom.getString(10);
                strbillone = getcom.getString(12);
            } while (getcom.moveToNext());
        }
        getcom.close();
//        Toast.makeText(getApplicationContext(), "saving4", Toast.LENGTH_LONG).show();
        tvkot.setText(strcompanyname);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(strcompanyname , FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
/////////
        tvkot.setText(straddress1);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(straddress1 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
///////////////////////////////
        tvkot.setText(straddress2);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(straddress2 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
////////////////////////////////
        tvkot.setText(straddress3);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(straddress3 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
//////////////////////////
        tvkot.setText(strphone);
        String pp = "Ph. " + strphone;
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(pp ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
////////////////////////////////////
        tvkot.setText(stremailid);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(stremailid ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
////////////////////////////////////////
        tvkot.setText(strwebsite);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(strwebsite ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
///////////////////////////////////////
        tvkot.setText(strtaxone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            Print.StartPrinting(strtaxone ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }
        Print.StartPrinting("----------------------" ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);


        Cursor cursor10 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()) {
            billtypea = cursor10.getString(5);
            paymmethoda = cursor10.getString(6);
        }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

        if (billtypea.toString().equals("  Cash")) {
            billtypeaa = "Cash"; //0
        }
        if (billtypea.toString().equals("  Card")) {
            billtypeaa = "Card"; //0
        }
        if (billtypea.toString().equals("  Paytm")) {
            billtypeaa = "Paytm"; //0
        }
        if (billtypea.toString().equals("  Mobikwik")) {
            billtypeaa = "Mobikwik"; //0
        }
        if (billtypea.toString().equals("  Freecharge")) {
            billtypeaa = "Freecharge"; //0
        }
        if (billtypea.toString().equals("  Pay Later")) {
            billtypeaa = "Pay Later"; //0
        }
        if (billtypea.toString().equals("  Cheque")) {
            billtypeaa = "Cheque"; //0
        }
        if (billtypea.toString().equals("  Sodexo")) {
            billtypeaa = "Sodexo"; //0
        }
        if (billtypea.toString().equals("  Zeta")) {
            billtypeaa = "Zeta"; //0
        }
        if (billtypea.toString().equals("  Ticket")) {
            billtypeaa = "Ticket"; //0
        }
        billtypeaa = billtypea.toString().replace(" ", "");

        //String bill_no = billnum.getText().toString();

        //  Print.StartPrinting(strtaxone ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        String b="Bill no." + billnoget+""+billtypeaa;
        int length1=b.length();
        int splength=32-length1;
        String input="Bill no." + billnoget;
        for(int i=0;i<splength;i++){
            input=input+" ";
        }
        input=input+billtypeaa;
        Print.StartPrinting(input ,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
            paymmethodaa = "Dine-in";
            //billtypee.setText("Dine-in");
        } else {
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                paymmethodaa = "Takeaway";
                //billtypee.setText("Takeaway");
            } else {
                paymmethodaa = "Home delivery";
                //billtypee.setText("Home delivery");
            }
        }

        Cursor date = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (date.moveToFirst()) {
            datee = date.getString(25);
            timee = date.getString(12);
        } else {
            Cursor date_cancel = db1.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        String b1=paymmethodaa+ datee;
        int length11=b1.length();
        int splength1=32-length11;
        String input1=paymmethodaa;
        for(int i=0;i<splength1;i++){
            input1=input1+" ";
        }
        input1=input1+datee;

        Print.StartPrinting(input1 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        Cursor cursor9 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9.moveToFirst()) {
            tableida = cursor9.getString(15);
        }
//        else {
//            Cursor cursor9_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

        Cursor vbnm = db.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
        if (vbnm.moveToFirst()) {
            assa1 = vbnm.getString(1);
            assa2 = vbnm.getString(2);
        }
        TextView cx = new TextView(CancelActivity.this);
        cx.setText(assa1);
        if (cx.getText().toString().equals("")) {
            tableidaa = "Tab" + assa2;
        } else {
            tableidaa = "Tab" + assa1;
        }

        String b2=tableidaa+""+timee;
        int length12=b2.length();
        int splength2=32-length12;
        String input2=tableidaa;
        for(int i=0;i<splength2;i++){
            input2=input2+" ";
        }
        input2=input2+timee;

        Print.StartPrinting(input2 ,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        String str_line = "-----------------------------";
        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);

        Cursor caddress = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress.moveToFirst()) {
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            if (nam.length() > 0 || addr.length() > 0 ||
                    phon.length() > 0 || emai.length() > 0) {
                Print.StartPrinting("Customer:",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            if (nam.length() > 0) {
                Print.StartPrinting(nam,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            if (addr.length() > 0) {
                Print.StartPrinting(addr,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            if (phon.length() > 0) {
                String cust_ph = "Ph. " + phon;
                Print.StartPrinting(cust_ph,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            if (emai.length() > 0) {
                Print.StartPrinting(emai,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
            } else {

            }

            Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
        }

        Print.StartPrinting("Qty"+"  "+"Item"+"        "+"Price"+"  "+"Amount",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
//           Print.StartPrinting("  "+"Item",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, false);
//           Print.StartPrinting("  "+"Price",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, false);
//           Print.StartPrinting("  "+"Amount",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);


        Cursor ccursorr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);

                final String newids = ccursorr.getString(0);

                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);
                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                        if (cursor4.moveToFirst()) {
                            sub2a = cursor4.getFloat(0);
                            String sub2a1 = String.valueOf(sub2a);
                            ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                            ss1 = String.format("%.1f", ss);
                        }

                        if (name.toString().length() > charlength) {
                            int print1 = 0;

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    Print.StartPrinting(string1quan+string1+"    "+pricee+"  "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(string2quan+"  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT,true);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    Print.StartPrinting(value+"  "+string1+"    "+pricee+"  "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }

/////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    Print.StartPrinting(string1quan+" "+string1+"   "+pricee+" "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(" "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    Print.StartPrinting(value+" "+string1+"   "+pricee+" "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(" "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                }
                            }

                        } else {
                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                Print.StartPrinting(string1quan+" "+name+"    "+pricee+"  "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string2quan,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                    }
                                }

                            } else {

                                Print.StartPrinting(value+" "+name+"     "+pricee+"  "+ss1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                    }
                                }

                            }

                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            if (modiname.toString().length() > charlength) {
                                if (modiname.toString().length() > charlength) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength);

                                    Print.StartPrinting(""+">"+string1+" "+modpricestr+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                                if (modiname.toString().length() > charlength1) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength, charlength1);
                                    String string3 = modiname.substring(charlength1);

                                    Print.StartPrinting(""+">"+string1+" "+modpricestr+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    }
                                }

                            } else {

                                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                                Print.StartPrinting(""+">"+modiname+" "+modpricestr+""+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    }
                                }

                            }

                            final TableRow tableRow11 = new TableRow(CancelActivity.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            final TextView tvv = new TextView(CancelActivity.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(CancelActivity.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);


                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(ss));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    Print.StartPrinting(""+""+""+"("+"-"+total_disc_print_q+")",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);
                        if (name.toString().length() > charlength) {
                            int print1 = 0;
                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    Print.StartPrinting(string1quan+" "+string1+" "+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting(" "+string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                if (print1 == 0) {
                                    Print.StartPrinting(value+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("      "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }

////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    Print.StartPrinting(string1quan+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("  "+string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("      "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                if (print1 == 0) {
                                    Print.StartPrinting(value+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("      "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    print1 = 1;
                                }

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                            }

                        } else {
                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                Print.StartPrinting(string1quan+" "+name+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2quan,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            } else {

                                Print.StartPrinting(value+" "+name+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(34);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                            }

                        }

                        tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    Print.StartPrinting(""+""+""+"("+"-"+total_disc_print_q+")",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }
                }


            } while (ccursorr.moveToNext());
        }

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
        Print.StartPrinting("Returns/Cancel:",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        Cursor ccursorreturn = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorreturn.moveToFirst()) {

            do {

                String name = ccursorreturn.getString(1);
                String value = ccursorreturn.getString(2);
                String pq = ccursorreturn.getString(5);
                String itna = ccursorreturn.getString(2);
                String pricee = ccursorreturn.getString(3);
                String tototot = ccursorreturn.getString(4);

                final String newtt = ccursorreturn.getString(4);

                final String newid = ccursorreturn.getString(19);

                final String newids = ccursorreturn.getString(0);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor modt = db1.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        if (modt.moveToFirst()) {
                            do {
                                //row.removeView(tv3);
                                float aq = modt.getFloat(0);
                                String aqq = String.valueOf(aq);
                                aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                aqq2 = String.format("%.1f", aqq1);
                            } while (modt.moveToNext());
                        }


                        if (name.toString().length() > charlength) {

                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                Print.StartPrinting(string1quan+string1+"    "+pricee+"  "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(string2quan+"  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT,true);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                Print.StartPrinting(value+"  "+string1+"    "+pricee+"  "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

////////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = total.substring(0, quanlentha);
                                String string2quan = total.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                Print.StartPrinting(string1quan+" "+string1+"   "+pricee+" "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                Print.StartPrinting(value+" "+string1+"   "+pricee+" "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                }
                            }

                        } else {
                            if (total.toString().length() > quanlentha) {
                                String string1quan = total.substring(0, quanlentha);
                                String string2quan = total.substring(quanlentha);

                                Print.StartPrinting(string1quan+" "+name+"    "+pricee+"  "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string2quan,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                    }
                                }

                            } else {

                                Print.StartPrinting(value+" "+name+"     "+pricee+"  "+aqq2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
                                    }
                                }

                            }

                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            if (modiname.toString().length() > charlength) {
                                if (modiname.toString().length() > charlength) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength);

                                    Print.StartPrinting(""+">"+string1+" "+modpricestr+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                                if (modiname.toString().length() > charlength1) {
                                    String string1 = modiname.substring(0, charlength);
                                    String string2 = modiname.substring(charlength, charlength1);
                                    String string3 = modiname.substring(charlength1);

                                    Print.StartPrinting(""+">"+string1+" "+modpricestr+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    Print.StartPrinting("    "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    }
                                }

                            } else {

                                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
                                Print.StartPrinting(""+">"+modiname+" "+modpricestr+""+"",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                    }
                                }

                            }


                            final TableRow tableRow11 = new TableRow(CancelActivity.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(CancelActivity.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(CancelActivity.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);


                            row.removeView(tv8);
                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        //Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    Print.StartPrinting(""+""+""+"("+"-"+total_disc_print_q+")",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);

                        if (name.toString().length() > charlength) {
                            if (value.length() > quanlentha && name.toString().length() > charlength) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                Print.StartPrinting(string1quan+" "+string1+" "+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting(" "+string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength);

                                Print.StartPrinting(value+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("      "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

//////////////////////////////////////////////
                            if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                Print.StartPrinting(string1quan+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2quan+" "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("      "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }
                            if (value.length() <= quanlentha && name.toString().length() > charlength1) {
                                String string1 = name.substring(0, charlength);
                                String string2 = name.substring(charlength, charlength1);
                                String string3 = name.substring(charlength1);

                                Print.StartPrinting(value+" "+string1+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("      "+string3,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                            }

                        } else {

                            if (value.toString().length() > quanlentha) {
                                String string1quan = value.substring(0, quanlentha);
                                String string2quan = value.substring(quanlentha);

                                Print.StartPrinting(string1quan+" "+name+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                Print.StartPrinting("  "+string2quan,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            } else {

                                Print.StartPrinting(value+" "+name+"    "+pricee+"  "+tototott,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                            }

                            Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (ccursor.moveToFirst()) {
                                String hsn = ccursor.getString(38);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                                }
                            }

                        }

                        tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    Print.StartPrinting(""+""+""+"("+"-"+total_disc_print_q+")",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }

                }
            } while (ccursorreturn.moveToNext());


        }

        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
////////////////////////////////////sub total

        Cursor cursor3 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor3.moveToFirst()) {
            sub1 = cursor3.getFloat(0);
        }

        Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
        if (cursor4.moveToFirst()) {
            sub2 = cursor4.getFloat(0);
        }
        float sub12 = sub1 + sub2;
        String total2 = String.valueOf(sub12);
        float to = Float.parseFloat(total2);
        String tot = String.valueOf(to);

        Print.StartPrinting("Sub total"+"              "+tot,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

/////////////////////////////////// tax
        TableLayout tableLayout1 = new TableLayout(CancelActivity.this);
        tableLayout1.removeAllViews();

        Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {
                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(50);
                String itna = ccursor.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor.moveToNext());
        }

        Cursor ccursor2 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor2.moveToFirst()) {

            do {
                String name = ccursor2.getString(35);
                String value = ccursor2.getString(36);
                String pq = ccursor2.getString(50);
                String itna = ccursor2.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor2.moveToNext());
        }

        Cursor ccursor3 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor3.moveToFirst()) {

            do {
                String name = ccursor3.getString(37);
                String value = ccursor3.getString(38);
                String pq = ccursor3.getString(50);
                String itna = ccursor3.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor3.moveToNext());
        }

        Cursor ccursor4 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor4.moveToFirst()) {

            do {
                String name = ccursor4.getString(39);
                String value = ccursor4.getString(40);
                String pq = ccursor4.getString(50);
                String itna = ccursor4.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor4.moveToNext());
        }

        Cursor ccursor5 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor5.moveToFirst()) {

            do {
                String name = ccursor5.getString(41);
                String value = ccursor5.getString(42);
                String pq = ccursor5.getString(50);
                String itna = ccursor5.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor5.moveToNext());
        }


//            ArrayList<String> groupList = new ArrayList<String>();
//
//            float sum_p = 0;
//            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
//                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
//                TextView mTextView = (TextView) mRow.getChildAt(0);
////                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();
//
//                if (groupList.contains(mTextView.getText().toString())) {
//
//                }else {
//                    sum_p = 0;
//                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
//                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
//                        mTextView1 = (TextView) mRow1.getChildAt(0);
//                        mTextView2 = (TextView) mRow1.getChildAt(2);
//                        if (groupList.contains(mTextView.getText().toString())) {
//                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                            }
//                        } else {
//                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                groupList.add(mTextView.getText().toString());
//                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                            }
//                        }
//                    }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p, Toast.LENGTH_LONG).show();
//
//                    String mod1 = mTextView.getText().toString() + "---" + String.valueOf(sum_p);
//                    allbuftaxestype1 = new byte[][]{
//                            left, normal, mod1.getBytes(), HT, LF
//                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                    };
//                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                    if (statussusbs.equals("ok")) {
//                        BluetoothPrintDriver.BT_Write(left);    //
//                        BT_Write(normal);
//                        BT_Write(mod1);
//                        BluetoothPrintDriver.BT_Write(HT);    //
//                        BluetoothPrintDriver.BT_Write(LF);    //
//                    } else {
//                        if (statusnets.equals("ok")) {
//                            wifiSocket.WIFI_Write(left);    //
//                            wifiSocket.WIFI_Write(normal);
//                            wifiSocket.WIFI_Write(mod1);
//                            wifiSocket.WIFI_Write(HT);    //
//                            wifiSocket.WIFI_Write(LF);    //
//                        }
//                    }
//
//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
//                    String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
//                    Cursor ccursor6 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                    if (ccursor6.moveToFirst()) {
//                        String hsn = ccursor6.getString(34);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, hsn.getBytes(), HT, LF
//                        };
//
//                        TextView hsn_hsn = new TextView(CancelActivity.this);
//                        hsn_hsn.setText(hsn);
//
//                        if (hsn_hsn.getText().toString().equals("")) {
//                        } else {
//                            if (statussusbs.equals("ok")) {
//                                BluetoothPrintDriver.BT_Write(left);    //
//                                BT_Write(normal);
//                                BT_Write("HSN "+hsn);
//                                BluetoothPrintDriver.BT_Write(HT);    //
//                                BluetoothPrintDriver.BT_Write(LF);    //
//                            } else {
//                                if (statusnets.equals("ok")) {
//                                    wifiSocket.WIFI_Write(left);    //
//                                    wifiSocket.WIFI_Write(normal);
//                                    wifiSocket.WIFI_Write("HSN "+hsn);
//                                    wifiSocket.WIFI_Write(HT);    //
//                                    wifiSocket.WIFI_Write(LF);    //
//                                }
//                            }
//                        }
//                    }
//
//                }
//            }

//            Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    TextView name1 = new TextView(CancelActivity.this);
//                    name1.setText(name);
//                    if (name1.getText().toString().equals("None") || name1.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//
//                } while (ccursor.moveToNext());
//            }


        Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn.moveToFirst()) {

            do {
                String name = ccursortaxreturn.getString(10);
                String value = ccursortaxreturn.getString(9);
                String pq = ccursortaxreturn.getString(39);
                String itna = ccursortaxreturn.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn.moveToNext());
        }

        Cursor ccursortaxreturn2 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn2.moveToFirst()) {

            do {
                String name = ccursortaxreturn2.getString(30);
                String value = ccursortaxreturn2.getString(31);
                String pq = ccursortaxreturn2.getString(39);
                String itna = ccursortaxreturn2.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn2.moveToNext());
        }

        Cursor ccursortaxreturn3 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn3.moveToFirst()) {

            do {
                String name = ccursortaxreturn3.getString(32);
                String value = ccursortaxreturn3.getString(33);
                String pq = ccursortaxreturn3.getString(39);
                String itna = ccursortaxreturn3.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn3.moveToNext());
        }

        Cursor ccursortaxreturn4 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn4.moveToFirst()) {

            do {
                String name = ccursortaxreturn4.getString(34);
                String value = ccursortaxreturn4.getString(35);
                String pq = ccursortaxreturn4.getString(39);
                String itna = ccursortaxreturn4.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn4.moveToNext());
        }

        Cursor ccursortaxreturn5 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn5.moveToFirst()) {

            do {
                String name = ccursortaxreturn5.getString(36);
                String value = ccursortaxreturn5.getString(37);
                String pq = ccursortaxreturn5.getString(39);
                String itna = ccursortaxreturn5.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn5.moveToNext());
        }


        ArrayList<String> groupList1 = new ArrayList<String>();

        float sum_p1 = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

            if (groupList1.contains(mTextView.getText().toString())) {

            }else {
                sum_p1 = 0;
                for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                    TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                    mTextView1 = (TextView) mRow1.getChildAt(0);
                    mTextView2 = (TextView) mRow1.getChildAt(2);
                    if (groupList1.contains(mTextView.getText().toString())) {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    } else {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            groupList1.add(mTextView.getText().toString());
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    }
                }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                String mod1 = mTextView.getText().toString() + "---" + String.valueOf(String.format("%.2f", sum_p1));

                Print.StartPrinting(mod1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                String match = "@";
                int position = mTextView.getText().toString().indexOf(match);
                String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
                Cursor ccursor6 = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor6.moveToFirst()) {
                    String hsn = ccursor6.getString(38);

                    TextView hsn_hsn = new TextView(CancelActivity.this);
                    hsn_hsn.setText(hsn);

                    if (hsn_hsn.getText().toString().equals("")) {
                    } else {
                        Print.StartPrinting("HSN " + hsn,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
                    }
                }

            }
        }

//            Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//
////                    final TableRow row = new TableRow(CancelActivity.this);
////                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
////                            TableRow.LayoutParams.WRAP_CONTENT));
////                    row.setGravity(Gravity.CENTER);
//
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TableRow.LayoutParams lp, lp1, lp2;
//
////                                    final TextView tv = new TextView(CancelActivity.this);
////                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                    tv.setTextSize(16);
////                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                                    row.addView(tv);
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
////                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        //tv2.setTextColor(Color.parseColor("#000000"));
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
////                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        //tv3.setPadding(0,0,10,0);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        //tv3.setTextColor(Color.parseColor("#000000"));
//                        //row.addView(tv3);
//
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(tota1);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                        };
//                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//
//
//                } while (ccursortaxreturn.moveToNext());
//            }


        String phon = "0";

        Cursor caddress1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(CancelActivity.this);
        tvvs.setText(phon);


        Cursor us_name1 = db1.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()) {
//            Toast.makeText(CancelActivity.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(CancelActivity.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")) {
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                        Print.StartPrinting(mod1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                    } while (cursorr.moveToNext());
                }
            } else {
                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(CancelActivity.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(CancelActivity.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(CancelActivity.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(CancelActivity.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);

                        String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);
                        Print.StartPrinting(mod1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                    }

                }
            }

        } else {
//            Toast.makeText(CancelActivity.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Home delivery")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);

                    String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                    Print.StartPrinting(mod1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

                } while (cursorr.moveToNext());
            }
        }


        float sum = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(2);
            sum = sum
                    + Float.parseFloat(mTextView.getText().toString());
        }


        String newsum = String.format("%.2f", sum);

        if (sum == 0 || sum == 0.0 || sum == 0.00) {

        } else {
            Print.StartPrinting("Tax"+"              "+newsum,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        }


///////////////////////////////// discount


        Cursor cursor5 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor5.moveToFirst()) {
            dsirs = cursor5.getString(7);
            float ds = Float.parseFloat(dsirs);
            dsirs1 = String.format("%.2f", ds);
        } else {
            dsirs = "0";
        }
        TextView dis = new TextView(CancelActivity.this);
        Cursor cursor7 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor7.moveToFirst()) {
            taxpe = cursor7.getString(5);
            float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            if (on % 1 != 0) {
                // //////Toast.makeText(CancelActivity.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                int newww = (int) on;
                float decpart = on - newww;
                ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                if (decpart > 0.5) {
                    ////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                    float addall = on;
                    //alltotal.setText(String.valueOf(newww + 1));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    dis.setText("+ " + String.format("%.2f", dee));

                } else {
                    // //////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_SHORT).show();
                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    float addall = on;
                    //alltotal1.setText(String.valueOf(newww));
                    //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("- " + String.format("%.2f", decpart));

                }
            } else {
                ////////Toast.makeText(CancelActivity.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                int addall = (int) on;
                //alltotal1.setText(String.valueOf(addall));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                dis.setText("+ " + "0.00");
                ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
            }
        } else {
            taxpe = "0";
            dis.setText("+ " + "0.00");
            on1 = "0";
        }

        //tot-is-subtotal

        String alldiscinperc1 = "Discount(" + taxpe + "%)";

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
        Print.StartPrinting(alldiscinperc1+"              "+on1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        float newe;

//////////////////////////////////////////

        Cursor cursor113 = db1.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
        if (cursor113.moveToFirst()) {
            float level = cursor113.getFloat(0);
            total = String.valueOf(level);
            total1 = Float.parseFloat(total);
            total_disc_print_q = String.format("%.2f", total1);

            Print.StartPrinting("Savings"+"              "+total_disc_print_q,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        }

////////////////////////////////rounded

        if (taxpe.toString().equals("")) {
            newe = sum + Float.parseFloat(String.valueOf(tot));
        } else {
            newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
        }

        if (str_round_off.toString().equals("No")) {

        }else {
            TextView round = new TextView(CancelActivity.this);
            if (newe % 1 != 0) {
                int newww = (int) newe;
                float decpart = newe - newww;
                if (decpart > 0.5) {
                    float addall = newe;
                    float dee = 1 - decpart;
                    round.setText("+ " + String.format("%.2f", dee));
                } else {
                    float addall = newe;
                    round.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                int addall = (int) newe;
                round.setText("+ " + "0.00");
            }

            Print.StartPrinting("Rounded"+"              "+round.getText().toString(),FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        }

        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

/////////////////////refund

        //19
        Cursor billcan = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (billcan.moveToFirst()) {
            String asd = billcan.getString(18);
            refundamounta = String.valueOf(asd);
        } else {
            Cursor billcan_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (billcan_cancel.moveToFirst()) {
                String asd = billcan_cancel.getString(17);
                refundamounta = String.valueOf(asd);
            }
        }

        Cursor c1 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (c1.moveToFirst()) {
            String c11 = c1.getString(2);
            alltotal1 = c11;
        } else {
            alltotal1 = "0";
        }
        float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
        String mn1 = String.valueOf(min);

        Print.StartPrinting("Refund"+"              "+"-"+mn1,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
        final String normal1 = normal5.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
        final String time1 = sdf1.format(dt);

        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);

        String refundtime = "(" + normal1 + "," + time1 + ")";

        Print.StartPrinting(refundtime,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
/////////////////////////

        float all = Float.parseFloat(alltotal1);
        String newf = String.valueOf(all);

        Print.StartPrinting("Total"+"              "+insert1_rs+newf,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        Print.StartPrinting(str_line,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        Print.StartPrinting("",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            // Print.StartPrinting(strcompanyname ,FontLattice.TWENTY_FOUR, mswipe_text, Align.CENTER, true);
            Print.StartPrinting(strbillone,FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        }
        Print.StartPrinting("",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);
        Print.StartPrinting("",FontLattice.TWENTY_FOUR, mswipe_text, Align.LEFT, true);


    }

    public String hii(){
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy MM dd");
        final String currentDateandTime1 = sdf2.format(new Date());
        ////////Toast.makeText(getActivity(), " month is "+currentDateandTime1, Toast.LENGTH_LONG).show();

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa");
        final String time1 = sdf1.format(dt);


        paneone = (LinearLayout)findViewById(R.id.pane1);
        panetwo = (LinearLayout)findViewById(R.id.pane2);
        panethree = (LinearLayout)findViewById(R.id.pane3);


        final TextView onlybillold = (TextView) findViewById(R.id.subtotalold);
        final TextView onlybilltaxold = (TextView) findViewById(R.id.taxold);
        final TextView onlybillroundoffold = (TextView) findViewById(R.id.roundoffold);
        final TextView onlybilldiscountold = (TextView) findViewById(R.id.discountold);
        final TextView onlybilldiscountvalueold = (TextView) findViewById(R.id.discountvalueold);
        final TextView onlybilltotalold = (TextView) findViewById(R.id.totalold);


        final TextView onlybillnew = (TextView) findViewById(R.id.subtotalnew);
        final TextView onlybilltaxnew = (TextView) findViewById(R.id.taxnew);
        final TextView onlybillroundoffnew = (TextView) findViewById(R.id.roundoffnew);
        final TextView onlybilldiscountnew = (TextView) findViewById(R.id.discountnew);
        final TextView onlybilldiscountvaluenew = (TextView) findViewById(R.id.discountvaluenew);
        final TextView onlybilltotalnew = (TextView) findViewById(R.id.totalnew);


        final TextView onlybillnew_hide = (TextView) findViewById(R.id.subtotalnew_hide);


        final TextView onlybillcancel = (TextView) findViewById(R.id.subtotalcancel);
        final TextView onlybilltaxcancel = (TextView) findViewById(R.id.taxcancel);
        final TextView onlybillroundoffcancel = (TextView) findViewById(R.id.roundoffcancel);
        final TextView onlybilldiscountcancel = (TextView) findViewById(R.id.discountcancel);
        final TextView onlybilldiscountvaluecancel= (TextView) findViewById(R.id.discountvaluecancel);
        final TextView onlybilltotalcancel = (TextView) findViewById(R.id.totalcancel);


        onlybillold.setText("0.0");
        onlybilltaxold.setText("0.0");
        onlybillroundoffold.setText("0.0");
        onlybilldiscountold.setText("0.0");
        onlybilldiscountvalueold.setText("0.0");
        onlybilltotalold.setText("0.0");


        onlybillnew.setText("0.0");
        onlybillnew_hide.setText("0.0");
        onlybilltaxnew.setText("0.0");
        System.out.println("Tax1  ");
        onlybillroundoffnew.setText("0.0");
        onlybilldiscountnew.setText("0.0");
        onlybilldiscountvaluenew.setText("0.0");
        onlybilltotalnew.setText("0.0");



        onlybillcancel.setText("0.0");
        onlybilltaxcancel.setText("0.0");
        System.out.println("Ntax1  ");
        onlybillroundoffcancel.setText("0.0");
        onlybilldiscountcancel.setText("0.0");
        onlybilldiscountvaluecancel.setText("0.0");
        onlybilltotalcancel.setText("0.0");




        //Cursor copyquan = db1.rawQuery("")


        //final String billno.getText().toString() = billno.getText().toString();
        ///////////////Toast.makeText(CancelActivity.this, "num is "+billno.getText().toString(), Toast.LENGTH_SHORT).show();





        //SQLiteDatabase db1 = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);
        Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' ", null);
        if (cursor11.moveToFirst()) {
            levelf = cursor11.getFloat(0);
            tat = String.valueOf(levelf);
        }

        cursor11 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
        if (cursor11.moveToFirst()) {
            oldtax = cursor11.getString(8);
            oldround = cursor11.getString(9);
            oldtotal = cursor11.getString(2);
        }

        cursor11 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "' ", null);
        if (cursor11.moveToFirst()) {
            olddiscount = cursor11.getString(7);
            olddiscvalue = cursor11.getString(5);
        }else {
            olddiscount = String.valueOf(0);
            olddiscvalue = String.valueOf(0);
        }
        cursor11.close();

        Cursor cacc11ursor111 = db1.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "'", null);
        if (cacc11ursor111.moveToFirst()) {
            levelelf = cacc11ursor111.getFloat(0);
            tatatata1 = String.valueOf(levelelf);
            ///////////Toast.makeText(CancelActivity.this, "3 is "+tatat, Toast.LENGTH_SHORT).show();
        }

        final String tot = String.valueOf(Float.parseFloat(tat) - Float.parseFloat(tatatata1));
        onlybillold.setText(tot);
        float ff = Float.parseFloat(oldtax);
        oldtax1 = String.format("%.2f", ff);
        onlybilltaxold.setText(oldtax1);
        onlybillroundoffold.setText(oldround);
        float ff1 = Float.parseFloat(olddiscount);
        olddiscount1 = String.format("%.1f", ff1);
        onlybilldiscountold.setText(olddiscount1);
        onlybilldiscountvalueold.setText(olddiscvalue);
        onlybilltotalold.setText(oldtotal);

        Cursor curso1r111 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (disc_thereornot = 'no' OR disc_thereornot IS NULL) ", null);
        if (curso1r111.moveToFirst()){
            azf = curso1r111.getFloat(0);
            za = String.valueOf(azf);
        }
        curso1r111.close();

        Cursor curso1r112 = db1.rawQuery("SELECT SUM(old_total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (disc_thereornot = 'no' OR disc_thereornot IS NULL) ", null);
        if (curso1r112.moveToFirst()){
            azf = curso1r112.getFloat(0);
            za1 = String.valueOf(azf);
        }
        curso1r111.close();

        Cursor cursor111 = db1.rawQuery("SELECT SUM(newtotal) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND disc_thereornot = 'yes'", null);
        if (cursor111.moveToFirst()){
            azf = cursor111.getFloat(0);
            zzaa = String.valueOf(azf);
        }
        cursor111.close();

        Cursor c11ursor11 = db1.rawQuery("SELECT SUM(modifiedtotal) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
        if (c11ursor11.moveToFirst()) {
            levelelf = c11ursor11.getFloat(0);
            tatat = String.valueOf(levelelf);
            ///////////////Toast.makeText(CancelActivity.this, "top is "+tatat, Toast.LENGTH_SHORT).show();
        }
        c11ursor11.close();

        ///////////////Toast.makeText(CancelActivity.this, " "+String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat)), Toast.LENGTH_SHORT).show();

        onlybillnew.setText(String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat) + Float.parseFloat(zzaa)));
        System.out.println("onlybillnew "+String.valueOf(Float.parseFloat(za) +" "+ Float.parseFloat(tatat) +" "+ Float.parseFloat(zzaa)));
        onlybillnew_hide.setText(String.valueOf(Float.parseFloat(za1) - Float.parseFloat(tatat) + Float.parseFloat(zzaa)));
        System.out.println("onlybillnew_hide "+String.valueOf(Float.parseFloat(za1) - Float.parseFloat(tatat) + Float.parseFloat(zzaa)));

        ///////////Toast.makeText(CancelActivity.this, "1 new bill is "+onlybillnew.getText().toString(), Toast.LENGTH_SHORT).show();

        ///////////Toast.makeText(CancelActivity.this, "tottttal 11 is "+String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat) + Float.parseFloat(zzaa)), Toast.LENGTH_SHORT).show();

        float fff = Float.parseFloat(oldtax);
        oldtax1 = String.format("%.2f", fff);
        onlybilltaxnew.setText(oldtax1);
        System.out.println("Tax2  " + oldtax+"  "+ oldtax1);
//        Toast.makeText(CancelActivity.this, "1 tax new "+onlybilltaxnew.getText().toString(), Toast.LENGTH_SHORT).show();
        onlybillroundoffnew.setText(oldround);
        onlybilldiscountvaluenew.setText(olddiscvalue);
        onlybilltotalnew.setText(oldtotal);
        /////////Toast.makeText(CancelActivity.this, "tax 1 is " + oldtax1, Toast.LENGTH_SHORT).show();
        ///////////////Toast.makeText(CancelActivity.this, "1 "+(String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat))), Toast.LENGTH_SHORT).show();
        ////////Toast.makeText(getActivity(), "new bill is "+za, Toast.LENGTH_SHORT).show();
        ////////Toast.makeText(getActivity(), "new tax is "+oldtax1, Toast.LENGTH_SHORT).show();


//        String subttot = onlybillnew.getText().toString();
//        String subtotval = onlybilldiscountvaluenew.getText().toString();
//        ror = Float.parseFloat(subttot)*Float.parseFloat(subtotval) / 100;
//        if (ror % 1 != 0) {
//            int newww = (int) ror;
//            float decpart = ror - newww;
//            if (decpart > 0.5) {
//                float dee = 1 - decpart;
//                //onlybilldiscountnew.setText("+ " + String.format("%.2f", dee));
//                onlybilldiscountnew.setText(String.valueOf(ror+dee));
//            }else {
//                //onlybilldiscountnew.setText("- " + String.format("%.2f", decpart));
//                onlybilldiscountnew.setText(String.valueOf(ror-decpart));
//            }
//        }else {
//            int addall = (int) ror;
//            onlybilldiscountnew.setText(String.valueOf(addall));
//        }
        //onlybilldiscountnew.setText(String.valueOf(ror));





        Cursor cu = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete'  ", null);
        if (cu.moveToFirst()){
            azzf = cu.getFloat(0);
            zaa = String.format("%.2f", azzf);
        }
        onlybillcancel.setText(zaa);
        cu.close();

        Cursor ccc = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete' ", null);
        float re = 0;

        for (ccc.moveToFirst(); !ccc.isAfterLast(); ccc.moveToNext()){
            TextView tv = new TextView(CancelActivity.this);
            tv.setText(ccc.getString(9));

            if (tv.getText().toString().equals("")) {
                re += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(ccc.getString(4)) / 100 + "\n");
            }else {
                re += Float.parseFloat(Float.parseFloat(ccc.getString(9)) * Float.parseFloat(ccc.getString(4)) / 100 + "\n");
            }
        }
        ccc.close();


        Cursor c = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND  deleted_not = '' ", null);
        float resultt = 0;

        for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
            TextView tv = new TextView(CancelActivity.this);
            tv.setText(c.getString(9));

            if (tv.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(9)) * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }

            TextView tv1 = new TextView(CancelActivity.this);
            tv1.setText(c.getString(36));
            if (tv1.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(36)) * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }

            TextView tv2 = new TextView(CancelActivity.this);
            tv2.setText(c.getString(38));
            if (tv2.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(38)) * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }

            TextView tv3 = new TextView(CancelActivity.this);
            tv3.setText(c.getString(40));
            if (tv3.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(40)) * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }

            TextView tv4 = new TextView(CancelActivity.this);
            tv4.setText(c.getString(42));
            if (tv4.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(42)) * Float.parseFloat(c.getString(4)) / 100 + "\n");
            }
            //float qqq = oo-result;
            //String qqqq = String.format("%.2f", qqq);
            //onlybilltaxnew.setText(String.valueOf(qqqq));
        }
        c.close();



        Cursor cursor1 = db1.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
        if (cursor1.moveToFirst()) {
            do {
                String gt = cursor1.getString(10);
                ////////Toast.makeText(getActivity(), "global total is " + gt, Toast.LENGTH_SHORT).show();
                if (gt.toString().equals("") || gt.toString().equals("0") || gt.toString().equals("0.0") || gt.toString().equals("0.00") || gt.toString().isEmpty()){

                }else {
                    float in = Float.parseFloat(onlybillnew_hide.getText().toString());
                    float inn = in * Float.parseFloat(gt) / 100;
                    float innn = resultt + inn;

                    String ni = String.format("%.2f", innn);
                    System.out.println("Tax3  " + ni+"  "+ innn);
                    ////////Toast.makeText(getActivity(), "new tax is "+ni , Toast.LENGTH_SHORT).show();
                    onlybilltaxnew.setText(String.valueOf(ni));

                    float an = Float.parseFloat(onlybillcancel.getText().toString());
                    float ann = an * Float.parseFloat(gt) / 100;
                    float annn = re + ann;

                    String na = String.format("%.2f", annn);
                    ////////Toast.makeText(getActivity(), "cancel tax is "+an , Toast.LENGTH_SHORT).show();
                    onlybilltaxcancel.setText(String.valueOf(na));
                    System.out.println("Ntax2  "+ na);
                }
            } while (cursor1.moveToNext());
        }



        Cursor ccursor = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
        if (ccursor.moveToFirst()){
            taxperc = ccursor.getString(5);

            float newt = Float.parseFloat(onlybillnew_hide.getText().toString());
            float newtt = newt * Float.parseFloat(taxperc) / 100;
            float newttt = Float.parseFloat(onlybilltotalnew.getText().toString()) - newtt;
            onlybilltotalnew.setText(String.valueOf(newttt));
            System.out.println("onlybilltotalnew1 "+String.valueOf(newttt));
            ///////////////Toast.makeText(CancelActivity.this, "qweqwe "+newt+" "+newtt+" "+newttt, Toast.LENGTH_LONG).show();
            ////////Toast.makeText(getActivity(), "5 "+newttt, Toast.LENGTH_SHORT).show();

            onlybilldiscountnew.setText(String.valueOf(newtt));


//            if (newtt% 1 != 0){
//                int newww1 = (int) newtt;
//                float decpart = newtt - newww1;
//                if (decpart > 0.5){
//                    onlybilldiscountnew.setText(String.valueOf(newww1 + 1));
//                    ////////Toast.makeText(getActivity(), "6 "+(newww1+1), Toast.LENGTH_SHORT).show();
//                }else {
//                    onlybilldiscountnew.setText(String.valueOf(newww1));
//                    ////////Toast.makeText(getActivity(), "7 "+newww1, Toast.LENGTH_SHORT).show();
//                }
//            }else {
//                int addall = (int) newtt;
//                onlybilldiscountnew.setText(String.valueOf(addall));
//                ////////Toast.makeText(getActivity(), "8 " + addall, Toast.LENGTH_SHORT).show();
//            }

            if (newttt % 1 != 0){
                int newww = (int) newttt;
                float decpart = newttt - newww;
                if (decpart > 0.5){
                    onlybilltotalnew.setText(String.valueOf(newww + 1));
                    /////////Toast.makeText(getActivity(), "6 "+(newww+1), Toast.LENGTH_SHORT).show();
                }else {
                    onlybilltotalnew.setText(String.valueOf(newww));
                    ////////Toast.makeText(getActivity(), "7 "+newww, Toast.LENGTH_SHORT).show();
                }
            }else {
                int addall = (int) newttt;
                onlybilltotalnew.setText(String.valueOf(addall));
                ////////Toast.makeText(getActivity(), "8 "+addall, Toast.LENGTH_SHORT).show();
            }

            ////////Toast.makeText(getActivity(), "full total is "+String.valueOf(newttt), Toast.LENGTH_SHORT).show();

        }else {
            ////////Toast.makeText(getActivity(), "no record", Toast.LENGTH_SHORT).show();
        }

        float ro = Float.parseFloat(onlybilltaxnew.getText().toString())+Float.parseFloat(onlybillnew_hide.getText().toString())-Float.parseFloat(onlybilldiscountnew.getText().toString());
        System.out.println("onlybilltotalnew2 "+ro);
        if (str_round_off.toString().equals("No")) {
            onlybilltotalnew.setText(String.format("%.2f", ro));
            onlybillroundoffnew.setText("0.0");
        }else {
            if (ro % 1 != 0) {
                int newww = (int) ro;
                float decpart = ro - newww;
                if (decpart > 0.5) {
                    onlybilltotalnew.setText(String.valueOf(newww + 1));
                    float dee = 1 - decpart;
                    onlybillroundoffnew.setText("+ " + String.format("%.2f", dee));
                } else {
                    onlybilltotalnew.setText(String.valueOf(newww));
                    onlybillroundoffnew.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                int addall = (int) ro;
                onlybilltotalnew.setText(String.valueOf(addall));
                onlybillroundoffnew.setText("0.0");
            }
        }


        float rom = Float.parseFloat(onlybilltaxnew.getText().toString())+Float.parseFloat(onlybillnew_hide.getText().toString())-Float.parseFloat(onlybilldiscountnew.getText().toString());
        System.out.println("onlybilltotalnew3 "+onlybilltaxnew.getText().toString());
        System.out.println("onlybilltotalnew3 "+onlybillnew_hide.getText().toString());
        System.out.println("onlybilltotalnew3 "+onlybilldiscountnew.getText().toString());
        System.out.println("onlybilltotalnew3 "+rom);
        if (str_round_off.toString().equals("No")) {
            onlybilltotalnew.setText(String.format("%.2f", rom));
        }else {
            if (rom % 1 != 0) {
                int newww = (int) rom;
                float decpart = rom - newww;
                if (decpart > 0.5) {
                    onlybilltotalnew.setText(String.valueOf(newww + 1));

                } else {
                    onlybilltotalnew.setText(String.valueOf(newww));
                }
            } else {
                int addall = (int) rom;
                onlybilltotalnew.setText(String.valueOf(addall));
            }
        }

        ccursor = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
        if (ccursor.moveToFirst()){
            taxperc = ccursor.getString(5);

            float newt = Float.parseFloat(onlybillcancel.getText().toString());
            float newtt = newt * Float.parseFloat(taxperc) / 100;
            float newttt = Float.parseFloat(onlybilltotalcancel.getText().toString()) - newtt;
            onlybilltotalcancel.setText(String.format("%.2f", newttt));

            if (str_round_off.toString().equals("No")) {
                onlybilltotalcancel.setText(String.format("%.2f", newtt));
            }else {
                if (newttt % 1 != 0) {
                    int newww = (int) newttt;
                    float decpart = newttt - newww;
                    if (decpart > 0.5) {
                        onlybilltotalcancel.setText(String.format("%.2f", newttt + 1));
                    } else {
                        onlybilltotalcancel.setText(String.format("%.2f", newttt));
                    }
                } else {
                    int addall = (int) newttt;
                    onlybilltotalcancel.setText(String.format("%.2f", newttt));
                }
            }

            ////////Toast.makeText(getActivity(), "full total is "+String.valueOf(newttt), Toast.LENGTH_SHORT).show();

        }else {
            ///////////////Toast.makeText(CancelActivity.this, "no record", Toast.LENGTH_SHORT).show();
        }
        ccursor.close();

        if (onlybillnew.getText().toString().equals("0.0")){
            onlybilltaxnew.setText("0.0");
            System.out.println("Tax5  ");
            onlybillroundoffnew.setText("0.0");
            onlybilltotalnew.setText("0");
        }


        onlybilldiscountvaluecancel.setText(olddiscvalue);
        float xc = Float.parseFloat(onlybillold.getText().toString())-Float.parseFloat(onlybillnew.getText().toString());
        String vb = String.format("%.2f", xc);
        onlybillcancel.setText(vb);

        String taxperc11 = onlybilldiscountvaluecancel.getText().toString();

        if (onlybillcancel.getText().toString().equals("")){
            onlybilldiscountcancel.setText("0");
        }else {
            float newt = Float.parseFloat(onlybillcancel.getText().toString());
            float newtt = newt * Float.parseFloat(taxperc11) / 100;
            onlybilldiscountcancel.setText(String.format("%.2f", newtt));
        }

        //onlybilldiscountcancel.setText(String.format("%.2f", newtt));
        //onlybilldiscountcancel.setText(String.valueOf(Float.parseFloat(onlybilldiscountold.getText().toString()) - Float.parseFloat(onlybilldiscountnew.getText().toString())));
        //onlybilltaxcancel.setText(String.valueOf(Float.parseFloat(onlybilltaxold.getText().toString())-Float.parseFloat(onlybilltaxnew.getText().toString())));

        float taxax1 = Float.parseFloat(onlybilltaxold.getText().toString())-Float.parseFloat(onlybilltaxnew.getText().toString());
        onlybilltaxcancel.setText(String.format("%.2f", taxax1));
        System.out.println("Ntax4  " + taxax1);
        float att = Float.parseFloat(onlybilltaxcancel.getText().toString())+Float.parseFloat(onlybillcancel.getText().toString())-Float.parseFloat(onlybilldiscountcancel.getText().toString());

        //Float.parseFloat(onlybilltaxcancel.getText().toString())+Float.parseFloat(onlybillcancel.getText().toString())-Float.parseFloat(onlybilldiscountcancel.getText().toString());

        if (str_round_off.toString().equals("No")) {
            onlybillroundoffcancel.setText("0.0");
        }else {
            if (att % 1 != 0) {
                int newww = (int) att;
                float decpart = att - newww;
                if (decpart > 0.5) {
                    float dee = 1 - decpart;
                    onlybillroundoffcancel.setText("+ " + String.format("%.2f", dee));
                } else {
                    onlybillroundoffcancel.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                onlybillroundoffcancel.setText("0.0");
            }
        }

        float cvf = Float.parseFloat(onlybilltotalold.getText().toString()) - Float.parseFloat(onlybilltotalnew.getText().toString());
        onlybilltotalcancel.setText(String.format("%.2f", cvf));
        hi();
        paneone.setVisibility(View.VISIBLE);

        Cursor cvb = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
        if (cvb.moveToFirst()){
            panetwo.setVisibility(View.VISIBLE);
            panethree.setVisibility(View.VISIBLE);
        }else {
            panetwo.setVisibility(View.GONE);
            panethree.setVisibility(View.INVISIBLE);
        }
        cvb.close();
        return null;
    }


    public String hi(){


        paneone = (LinearLayout)findViewById(R.id.pane1);
        panetwo = (LinearLayout)findViewById(R.id.pane2);
        panethree = (LinearLayout)findViewById(R.id.pane3);


        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy MM dd");
        final String currentDateandTime1 = sdf2.format(new Date());
        /////////////////Toast.makeText(CancelActivity.this, " month is "+currentDateandTime1, Toast.LENGTH_LONG).show();

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa");
        final String time1 = sdf1.format(dt);

        final TextView onlybillold = (TextView)findViewById(R.id.subtotalold);
        final TextView onlybilltaxold = (TextView)findViewById(R.id.taxold);
        final TextView onlybillroundoffold = (TextView)findViewById(R.id.roundoffold);
        final TextView onlybilldiscountold = (TextView)findViewById(R.id.discountold);
        final TextView onlybilldiscountvalueold = (TextView)findViewById(R.id.discountvalueold);
        final TextView onlybilltotalold = (TextView)findViewById(R.id.totalold);


        final TextView onlybillnew = (TextView)findViewById(R.id.subtotalnew);
        final TextView onlybilltaxnew = (TextView)findViewById(R.id.taxnew);
        final TextView onlybillroundoffnew = (TextView)findViewById(R.id.roundoffnew);
        final TextView onlybilldiscountnew = (TextView)findViewById(R.id.discountnew);
        final TextView onlybilldiscountvaluenew = (TextView)findViewById(R.id.discountvaluenew);
        final TextView onlybilltotalnew = (TextView)findViewById(R.id.totalnew);


        final TextView onlybillnew_hide = (TextView)findViewById(R.id.subtotalnew_hide);


        final TextView onlybillcancel = (TextView)findViewById(R.id.subtotalcancel);
        final TextView onlybilltaxcancel = (TextView)findViewById(R.id.taxcancel);
        final TextView onlybillroundoffcancel = (TextView)findViewById(R.id.roundoffcancel);
        final TextView onlybilldiscountcancel = (TextView)findViewById(R.id.discountcancel);
        final TextView onlybilldiscountvaluecancel= (TextView)findViewById(R.id.discountvaluecancel);
        final TextView onlybilltotalcancel = (TextView)findViewById(R.id.totalcancel);


        //        onlybillnew.setText("0.0");
//        onlybilltaxnew.setText("0.0");
//        onlybillroundoffnew.setText("0.0");
//        onlybilldiscountnew.setText("0.0");
//        onlybilldiscountvaluenew.setText("0.0");
//        onlybilltotalnew.setText("0.0");
//
//
//
//        onlybillcancel.setText("0.0");
//        onlybilltaxcancel.setText("0.0");
//        onlybillroundoffcancel.setText("0.0");
//        onlybilldiscountcancel.setText("0.0");
//        onlybilldiscountvaluecancel.setText("0.0");
//        onlybilltotalcancel.setText("0.0");


        //final String billno.getText().toString() = billno.getText().toString();
        ///////////////Toast.makeText(CancelActivity.this, "num is "+billno.getText().toString(), Toast.LENGTH_SHORT).show();





//        db = openOrCreateDatabase("mydb", Context.MODE_PRIVATE, null);
//        Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' ", null);
//        if (cursor11.moveToFirst()) {
//            level = cursor11.getInt(0);
//            tat = String.valueOf(level);
//        }
//
//        cursor11 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
//        if (cursor11.moveToFirst()) {
//            oldtax = cursor11.getString(8);
//            oldround = cursor11.getString(9);
//            oldtotal = cursor11.getString(2);
//        }
//
//        cursor11 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "' ", null);
//        if (cursor11.moveToFirst()) {
//            olddiscount = cursor11.getString(7);
//            olddiscvalue = cursor11.getString(5);
//        }else {
//            olddiscount = String.valueOf(0);
//            olddiscvalue = String.valueOf(0);
//        }
//
//        cursor11.close();
//
//        final String tot = String.valueOf(Float.parseFloat(tat));
//        onlybillold.setText(tot);
//        float ff = Float.parseFloat(oldtax);
//        oldtax1 = String.format("%.2f", ff);
//        onlybilltaxold.setText(oldtax1);
//        onlybillroundoffold.setText(oldround);
//        float ff1 = Float.parseFloat(olddiscount);
//        olddiscount1 = String.format("%.1f", ff1);
//        onlybilldiscountold.setText(olddiscount1);
//        onlybilldiscountvalueold.setText(olddiscvalue);
//        onlybilltotalold.setText(oldtotal);
//
//        Cursor cursor111 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' ", null);
//        if (cursor111.moveToFirst()){
//            az = cursor111.getInt(0);
//            za = String.valueOf(az);
//        }
//        cursor111.close();
//
//        Cursor c11ursor11 = db1.rawQuery("SELECT SUM(modifiedtotal) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
//        if (c11ursor11.moveToFirst()) {
//            levelel = c11ursor11.getInt(0);
//            tatat = String.valueOf(levelel);
//            ///////////////Toast.makeText(CancelActivity.this, "top is "+tatat, Toast.LENGTH_SHORT).show();
//        }
//        c11ursor11.close();
//
//        ///////////////Toast.makeText(CancelActivity.this, " "+String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat)), Toast.LENGTH_SHORT).show();
//
//        //onlybillnew.setText(String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat)));
//        float fff = Float.parseFloat(oldtax);
//        oldtax1 = String.format("%.2f", fff);
//        // onlybilltaxnew.setText(oldtax1);
//        //onlybillroundoffnew.setText(oldround);
//        //onlybilldiscountvaluenew.setText(olddiscvalue);
//        //onlybilltotalnew.setText(oldtotal);
//        ///////////////Toast.makeText(CancelActivity.this, "1 "+(String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat))), Toast.LENGTH_SHORT).show();
//        /////////////////Toast.makeText(CancelActivity.this, "new bill is "+za, Toast.LENGTH_SHORT).show();
//        /////////////////Toast.makeText(CancelActivity.this, "new tax is "+oldtax1, Toast.LENGTH_SHORT).show();
//
//
////        String subttot = onlybillnew.getText().toString();
////        String subtotval = onlybilldiscountvaluenew.getText().toString();
////        ror = Float.parseFloat(subttot)*Float.parseFloat(subtotval) / 100;
////        if (ror % 1 != 0) {
////            int newww = (int) ror;
////            float decpart = ror - newww;
////            if (decpart > 0.5) {
////                float dee = 1 - decpart;
////                //onlybilldiscountnew.setText("+ " + String.format("%.2f", dee));
////                onlybilldiscountnew.setText(String.valueOf(ror+dee));
////            }else {
////                //onlybilldiscountnew.setText("- " + String.format("%.2f", decpart));
////                onlybilldiscountnew.setText(String.valueOf(ror-decpart));
////            }
////        }else {
////            int addall = (int) ror;
////            onlybilldiscountnew.setText(String.valueOf(addall));
////        }
//        //onlybilldiscountnew.setText(String.valueOf(ror));
//
//
//
//
//
//        Cursor cu = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete'  ", null);
//        if (cu.moveToFirst()){
//            azz = cu.getInt(0);
//            zaa = String.valueOf(azz);
//        }
//        //onlybillcancel.setText(zaa);
//        cu.close();
//
//        Cursor ccc = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete' ", null);
//        float re = 0;
//
//        for (ccc.moveToFirst(); !ccc.isAfterLast(); ccc.moveToNext()){
//            re += Float.parseFloat(Float.parseFloat(ccc.getString(9)) * Float.parseFloat(ccc.getString(4)) / 100 + "\n");
//
//        }
//        ccc.close();
//
//
//        Cursor c = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND  deleted_not = '' ", null);
//        float resultt = 0;
//
//        for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
//            resultt += Float.parseFloat(Float.parseFloat(c.getString(9)) * Float.parseFloat(c.getString(4)) / 100 + "\n");
//            //float qqq = oo-result;
//            //String qqqq = String.format("%.2f", qqq);
//            //onlybilltaxnew.setText(String.valueOf(qqqq));
//
//
//            Cursor cursor1 = db1.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
//            if (cursor1.moveToFirst()) {
//                do {
//                    String gt = cursor1.getString(10);
//                    /////////////////Toast.makeText(CancelActivity.this, "global total is " + gt, Toast.LENGTH_SHORT).show();
//                    float in = Float.parseFloat(onlybillnew.getText().toString());
//                    float inn = in * Float.parseFloat(gt) / 100;
//                    float innn = resultt + inn;
//
//                    String ni = String.format("%.2f", innn);
//                    /////////////////Toast.makeText(CancelActivity.this, "new tax is "+ni , Toast.LENGTH_SHORT).show();
//                    //onlybilltaxnew.setText(String.valueOf(ni));
////                    ///////////////Toast.makeText(CancelActivity.this, "1 is " + onlybillnew.getText().toString(), Toast.LENGTH_SHORT).show();
////                    ///////////////Toast.makeText(CancelActivity.this, "tax is " + resultt, Toast.LENGTH_SHORT).show();
////                    ///////////////Toast.makeText(CancelActivity.this, "inn is " + inn, Toast.LENGTH_SHORT).show();
////                    ///////////////Toast.makeText(CancelActivity.this, "innn is " + innn, Toast.LENGTH_SHORT).show();
////                    ///////////////Toast.makeText(CancelActivity.this, "newww taxxxx is " + String.valueOf(ni), Toast.LENGTH_SHORT).show();
////                    /////////////////Toast.makeText(CancelActivity.this, "total tax is "+result, Toast.LENGTH_SHORT).show();
//
//
////                    float an = Float.parseFloat(onlybillcancel.getText().toString());
////                    float ann = an * Float.parseFloat(gt) / 100;
////                    float annn = re + ann;
//
//                    //String na = String.format("%.2f", annn);
//                    /////////////////Toast.makeText(CancelActivity.this, "cancel tax is "+an , Toast.LENGTH_SHORT).show();
//                    //onlybilltaxcancel.setText(String.valueOf(na));
//                } while (cursor1.moveToNext());
//            }
//        }
//        c.close();
//
//
//
//
//
//
//        Cursor ccursor = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
//        if (ccursor.moveToFirst()){
//            taxperc = ccursor.getString(5);
//
////            float newt = Float.parseFloat(onlybillnew.getText().toString());
////            float newtt = newt * Float.parseFloat(taxperc) / 100;
////            float newttt = Float.parseFloat(onlybilltotalnew.getText().toString()) - newtt;
////            onlybilltotalnew.setText(String.valueOf(newttt));
////            ///////////////Toast.makeText(CancelActivity.this, "qweqwe "+newt+" "+newtt+" "+newttt, Toast.LENGTH_LONG).show();
////            /////////////////Toast.makeText(CancelActivity.this, "5 "+newttt, Toast.LENGTH_SHORT).show();
////
////            onlybilldiscountnew.setText(String.valueOf(newtt));
//
//
////            if (newtt% 1 != 0){
////                int newww1 = (int) newtt;
////                float decpart = newtt - newww1;
////                if (decpart > 0.5){
////                    onlybilldiscountnew.setText(String.valueOf(newww1 + 1));
////                    /////////////////Toast.makeText(CancelActivity.this, "6 "+(newww1+1), Toast.LENGTH_SHORT).show();
////                }else {
////                    onlybilldiscountnew.setText(String.valueOf(newww1));
////                    /////////////////Toast.makeText(CancelActivity.this, "7 "+newww1, Toast.LENGTH_SHORT).show();
////                }
////            }else {
////                int addall = (int) newtt;
////                onlybilldiscountnew.setText(String.valueOf(addall));
////                /////////////////Toast.makeText(CancelActivity.this, "8 " + addall, Toast.LENGTH_SHORT).show();
////            }
//
////            if (newttt % 1 != 0){
////                int newww = (int) newttt;
////                float decpart = newttt - newww;
////                if (decpart > 0.5){
////                    onlybilltotalnew.setText(String.valueOf(newww + 1));
////                    //////////////////Toast.makeText(CancelActivity.this, "6 "+(newww+1), Toast.LENGTH_SHORT).show();
////                }else {
////                    onlybilltotalnew.setText(String.valueOf(newww));
////                    /////////////////Toast.makeText(CancelActivity.this, "7 "+newww, Toast.LENGTH_SHORT).show();
////                }
////            }else {
////                int addall = (int) newttt;
////                onlybilltotalnew.setText(String.valueOf(addall));
////                /////////////////Toast.makeText(CancelActivity.this, "8 "+addall, Toast.LENGTH_SHORT).show();
////            }
//
//            /////////////////Toast.makeText(CancelActivity.this, "full total is "+String.valueOf(newttt), Toast.LENGTH_SHORT).show();
//
//        }else {
//            /////////////////Toast.makeText(CancelActivity.this, "no record", Toast.LENGTH_SHORT).show();
//        }
//
////        float ro = Float.parseFloat(onlybilltaxnew.getText().toString())+Float.parseFloat(onlybillnew.getText().toString())-Float.parseFloat(onlybilldiscountnew.getText().toString());
////        /////////////////Toast.makeText(CancelActivity.this, "toal is "+ro, Toast.LENGTH_SHORT).show();
////        if (ro % 1 != 0) {
////            int newww = (int) ro;
////            float decpart = ro - newww;
////            if (decpart > 0.5) {
////                onlybilltotalnew.setText(String.valueOf(newww + 1));
////                /////////////////Toast.makeText(CancelActivity.this, "2 "+(newww + 1), Toast.LENGTH_SHORT).show();
////                float dee = 1 - decpart;
////                onlybillroundoffnew.setText("+ " + String.format("%.2f", dee));
////            }else {
////                onlybilltotalnew.setText(String.valueOf(newww));
////                /////////////////Toast.makeText(CancelActivity.this, "3 "+newww, Toast.LENGTH_SHORT).show();
////                onlybillroundoffnew.setText("- " + String.format("%.2f", decpart));
////            }
////        }else {
////            int addall = (int) ro;
////            onlybilltotalnew.setText(String.valueOf(addall));
////            /////////////////Toast.makeText(CancelActivity.this, "4 "+addall, Toast.LENGTH_SHORT).show();
////            onlybillroundoffnew.setText("0.0");
////        }
////
////        float rom = Float.parseFloat(onlybilltaxnew.getText().toString())+Float.parseFloat(onlybillnew.getText().toString())-Float.parseFloat(onlybilldiscountnew.getText().toString());
////        if (rom % 1 != 0) {
////            int newww = (int) rom;
////            float decpart = rom - newww;
////            if (decpart > 0.5) {
////                onlybilltotalnew.setText(String.valueOf(newww + 1));
////
////            }else {
////                onlybilltotalnew.setText(String.valueOf(newww));
////            }
////        }else {
////            int addall = (int) rom;
////            onlybilltotalnew.setText(String.valueOf(addall));
////        }
////
//////        ro = Float.parseFloat(onlybilltaxcancel.getText().toString())+Float.parseFloat(onlybillcancel.getText().toString())-Float.parseFloat(onlybilldiscountcancel.getText().toString());
//////        /////////////////Toast.makeText(CancelActivity.this, "toal is "+ro, Toast.LENGTH_SHORT).show();
//////        if (ro % 1 != 0) {
//////            int newww = (int) ro;
//////            float decpart = ro - newww;
//////            if (decpart > 0.5) {
//////                onlybilltotalcancel.setText(String.valueOf(newww + 1));
//////                float dee = 1 - decpart;
//////                onlybillroundoffcancel.setText("+ " + String.format("%.2f", dee));
//////            }else {
//////                onlybilltotalcancel.setText(String.valueOf(newww));
//////                onlybillroundoffcancel.setText("- " + String.format("%.2f", decpart));
//////            }
//////        }else {
//////            int addall = (int) ro;
//////            onlybilltotalcancel.setText(String.valueOf(addall));
//////            onlybillroundoffcancel.setText("0.0");
//////        }
////
////        ccursor = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
////        if (ccursor.moveToFirst()){
////            taxperc = ccursor.getString(5);
////
////            float newt = Float.parseFloat(onlybillcancel.getText().toString());
////            float newtt = newt * Float.parseFloat(taxperc) / 100;
////            float newttt = Float.parseFloat(onlybilltotalcancel.getText().toString()) - newtt;
////            onlybilltotalcancel.setText(String.valueOf(newttt));
////
////            if (newttt % 1 != 0){
////                int newww = (int) newttt;
////                float decpart = newttt - newww;
////                if (decpart > 0.5){
////                    onlybilltotalcancel.setText(String.valueOf(newww+1));
////                }else {
////                    onlybilltotalcancel.setText(String.valueOf(newww));
////                }
////            }else {
////                int addall = (int) newttt;
////                onlybilltotalcancel.setText(String.valueOf(addall));
////            }
////
////            /////////////////Toast.makeText(CancelActivity.this, "full total is "+String.valueOf(newttt), Toast.LENGTH_SHORT).show();
////
////        }else {
////            ///////////////Toast.makeText(CancelActivity.this, "no record", Toast.LENGTH_SHORT).show();
////        }
////        ccursor.close();
////
////        if (onlybillnew.getText().toString().equals("0.0")){
////            onlybilltaxnew.setText("0.0");
////            onlybillroundoffnew.setText("0.0");
////            onlybilltotalnew.setText("0");
////        }
////
////
////        onlybilldiscountvaluecancel.setText(olddiscvalue);
////        onlybillcancel.setText(String.valueOf(Float.parseFloat(onlybillold.getText().toString())-Float.parseFloat(onlybillnew.getText().toString())));
////
////        String taxperc11 = onlybilldiscountvaluecancel.getText().toString();
////
////        if (onlybillcancel.getText().toString().equals("")){
////            onlybilldiscountcancel.setText("0");
////        }else {
////            float newt = Float.parseFloat(onlybillcancel.getText().toString());
////            float newtt = newt * Float.parseFloat(taxperc11) / 100;
////            onlybilldiscountcancel.setText(String.format("%.2f", newtt));
////        }
////
////        //onlybilldiscountcancel.setText(String.format("%.2f", newtt));
////        //onlybilldiscountcancel.setText(String.valueOf(Float.parseFloat(onlybilldiscountold.getText().toString()) - Float.parseFloat(onlybilldiscountnew.getText().toString())));
////        //onlybilltaxcancel.setText(String.valueOf(Float.parseFloat(onlybilltaxold.getText().toString())-Float.parseFloat(onlybilltaxnew.getText().toString())));
////
////        float taxax1 = Float.parseFloat(onlybilltaxold.getText().toString())-Float.parseFloat(onlybilltaxnew.getText().toString());
////        onlybilltaxcancel.setText(String.format("%.2f", taxax1));
////        float att = Float.parseFloat(onlybilltaxcancel.getText().toString())+Float.parseFloat(onlybillcancel.getText().toString())-Float.parseFloat(onlybilldiscountcancel.getText().toString());
////
////        //Float.parseFloat(onlybilltaxcancel.getText().toString())+Float.parseFloat(onlybillcancel.getText().toString())-Float.parseFloat(onlybilldiscountcancel.getText().toString());
////
////        if (att % 1 != 0) {
////            int newww = (int) att;
////            float decpart = att - newww;
////            if (decpart > 0.5) {
////                float dee = 1 - decpart;
////                onlybillroundoffcancel.setText("+ " + String.format("%.2f", dee));
////            }else {
////                onlybillroundoffcancel.setText("- " + String.format("%.2f", decpart));
////            }
////        }else {
////            onlybillroundoffcancel.setText("0.0");
////        }
////
////        onlybilltotalcancel.setText(String.valueOf(Float.parseFloat(onlybilltotalold.getText().toString())-Float.parseFloat(onlybilltotalnew.getText().toString())));


        onlybillold.setText("0.0");
        onlybilltaxold.setText("0.0");
        onlybillroundoffold.setText("0.0");
        onlybilldiscountold.setText("0.0");
        onlybilldiscountvalueold.setText("0.0");
        onlybilltotalold.setText("0.0");


        onlybillnew.setText("0.0");
        onlybillnew_hide.setText("0.0");
        onlybilltaxnew.setText("0.0");
        System.out.println("Tax11  ");
        onlybillroundoffnew.setText("0.0");
        onlybilldiscountnew.setText("0.0");
        onlybilldiscountvaluenew.setText("0.0");
        onlybilltotalnew.setText("0.0");



        onlybillcancel.setText("0.0");
        onlybilltaxcancel.setText("0.0");
        System.out.println("Ntax9  ");
        onlybillroundoffcancel.setText("0.0");
        onlybilldiscountcancel.setText("0.0");
        onlybilldiscountvaluecancel.setText("0.0");
        onlybilltotalcancel.setText("0.0");




        //Cursor copyquan = db1.rawQuery("")


        //final String billno.getText().toString() = billno.getText().toString();
        ///////////////Toast.makeText(CancelActivity.this, "num is "+billno.getText().toString(), Toast.LENGTH_SHORT).show();





        //SQLiteDatabase db1 = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);
        Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' ", null);
        if (cursor11.moveToFirst()) {
            levelf = cursor11.getFloat(0);
            tat = String.valueOf(levelf);
        }

        cursor11 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
        if (cursor11.moveToFirst()) {
            oldtax = cursor11.getString(8);
            oldround = cursor11.getString(9);
            oldtotal = cursor11.getString(2);
        }

        cursor11 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "' ", null);
        if (cursor11.moveToFirst()) {
            olddiscount = cursor11.getString(7);
            olddiscvalue = cursor11.getString(5);
        }else {
            olddiscount = String.valueOf(0);
            olddiscvalue = String.valueOf(0);
        }
        cursor11.close();

        Cursor cursor9 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+ billno.getText().toString() +"'", null);
        if (cursor9.moveToFirst()){
            tableida = cursor9.getString(15);
        }

        Cursor cacc11ursor111 = db1.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "'", null);
        if (cacc11ursor111.moveToFirst()) {
            levelelf = cacc11ursor111.getFloat(0);
            tatatata1 = String.valueOf(levelelf);
            ///////////Toast.makeText(CancelActivity.this, "3 is "+tatat, Toast.LENGTH_SHORT).show();
        }

        final String tot = String.valueOf(Float.parseFloat(tat) - Float.parseFloat(tatatata1));
        onlybillold.setText(tot);
        float ff = Float.parseFloat(oldtax);
        oldtax1 = String.format("%.2f", ff);
        onlybilltaxold.setText(oldtax1);
        onlybillroundoffold.setText(oldround);
        float ff1 = Float.parseFloat(olddiscount);
        olddiscount1 = String.format("%.1f", ff1);
        onlybilldiscountold.setText(olddiscount1);
        onlybilldiscountvalueold.setText(olddiscvalue);
        onlybilltotalold.setText(oldtotal);

        Cursor curso1r111 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' ", null);
        if (curso1r111.moveToFirst()){
            azf = curso1r111.getFloat(0);
            za = String.valueOf(azf);
            ///////////Toast.makeText(CancelActivity.this, "1 is "+za, Toast.LENGTH_LONG).show();
        }
        curso1r111.close();

        Cursor curso1r112 = db1.rawQuery("SELECT SUM(old_total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' ", null);
        if (curso1r112.moveToFirst()){
            azf = curso1r112.getFloat(0);
            za1 = String.valueOf(azf);
        }
        curso1r111.close();

//        Cursor cursor111 = db1.rawQuery("SELECT SUM(newtotal) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND disc_thereornot = 'yes'", null);
//        if (cursor111.moveToFirst()){
//            azf = cursor111.getFloat(0);
//            zzaa = String.valueOf(azf);
//            ///////////Toast.makeText(CancelActivity.this, "2 is "+zzaa, Toast.LENGTH_LONG).show();
//        }
//        cursor111.close();

        Cursor cc11ursor11 = db1.rawQuery("SELECT SUM(modifiedtotal) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
        if (cc11ursor11.moveToFirst()) {
            levelelf = cc11ursor11.getFloat(0);
            tatat = String.valueOf(levelelf);
            ///////////Toast.makeText(CancelActivity.this, "3 is "+tatat, Toast.LENGTH_SHORT).show();
        }
        cc11ursor11.close();

//        Cursor cc111ursor11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
//        if (cc111ursor11.moveToFirst()) {
//            do {
//                String id0 = cc111ursor11.getString(0);
//                String modifiedtotal24 = cc111ursor11.getString(24);
//                String qtycopy23 = cc111ursor11.getString(23);
//                float cv = Float.parseFloat(modifiedtotal24) * Float.parseFloat(qtycopy23);
//                String css2 = String.format("%.2f", cv);
//                ContentValues contentValues = new ContentValues();
//                contentValues.put("new_modified_total", css2);
//                String where1 = "_id = '" + id0 + "' ";
//                db1.update("All_Sales", contentValues, where1, new String[]{});
//            }while (cc111ursor11.moveToNext());
//            ///////////Toast.makeText(CancelActivity.this, "3 is "+tatat, Toast.LENGTH_SHORT).show();
//        }
//        cc11ursor11.close();

        Cursor c11ursor11 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
        if (c11ursor11.moveToFirst()) {
            do {
                String disc_type27 = c11ursor11.getString(27);
                String disc_amount28 = c11ursor11.getString(28);
                String modifiedqty22 = c11ursor11.getString(22);
                String qtycopy23 = c11ursor11.getString(23);
                String origianl_price3 = c11ursor11.getString(56);
                String origianl_total_price4 = c11ursor11.getString(4);
                String modifiedtotal24 = c11ursor11.getString(24);
                String id0 = c11ursor11.getString(0);
                TextView cd = new TextView(CancelActivity.this);
                cd.setText(disc_amount28);
                TextView cd1 = new TextView(CancelActivity.this);
                cd1.setText(disc_type27);
                if (cd.getText().toString().equals("0") || cd.getText().toString().equals("")) {
                    //onlybillnew.setText(String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat) + Float.parseFloat(zzaa) - Float.parseFloat(tatatata)));
                    /////////Toast.makeText(CancelActivity.this, "4 is " + (Float.parseFloat(za) - Float.parseFloat(tatat) + Float.parseFloat(zzaa)), Toast.LENGTH_LONG).show();
                } else {
                    if (cd1.getText().toString().equals("%")) {
                        float cs = ((Float.parseFloat(origianl_price3) / (Float.parseFloat(disc_amount28))) * Float.parseFloat(qtycopy23));
                        //float cs2 = Float.parseFloat(modifiedtotal24) - cs;

                        //float vf = cs * Float.parseFloat(qtycopy23);

                        //float cvg = Float.parseFloat(origianl_total_price4) - cs;
                        //String cs1 = String.format("%.2f", cs);

                        //float css1 = vf - cs;
                        String css2 = String.format("%.2f", cs);
                        /////////Toast.makeText(CancelActivity.this, "5 is " + css2, Toast.LENGTH_LONG).show();
                        ContentValues contentValues = new ContentValues();
                        contentValues.put("new_modified_total", css2);
                        String where1 = "_id = '" + id0 + "' ";


                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                        getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProvider.AUTHORITY)
                                .path("All_sales")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id",id0)
                                .build();
                        getContentResolver().notifyChange(resultUri, null);


                        //    db1.update("All_Sales", contentValues, where1, new String[]{});
                    } else {
                        float cs = Float.parseFloat(cd.getText().toString()) * Float.parseFloat(qtycopy23);
                        String cs1 = String.format("%.2f", cs);
                        /////////Toast.makeText(CancelActivity.this, "6 is " + cs1, Toast.LENGTH_LONG).show();
                        ContentValues contentValues = new ContentValues();
                        contentValues.put("new_modified_total", cs1);
                        String where1 = "_id = '" + id0 + "' ";


                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                        getContentResolver().update(contentUri, contentValues,where1,new String[]{});
                        resultUri = new Uri.Builder()
                                .scheme("content")
                                .authority(StubProvider.AUTHORITY)
                                .path("All_sales")
                                .appendQueryParameter("operation", "update")
                                .appendQueryParameter("_id",id0)
                                .build();
                        getContentResolver().notifyChange(resultUri, null);


                        //     db1.update("All_Sales", contentValues, where1, new String[]{});
                    }
                }
            }while (c11ursor11.moveToNext());
        }

        ///////////////Toast.makeText(CancelActivity.this, " "+String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat)), Toast.LENGTH_SHORT).show();

//        Cursor ccc11ursor11 = db1.rawQuery("SELECT SUM(new_modified_total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = 'delete' OR deleted_not = 'decrease') ", null);
//        if (ccc11ursor11.moveToFirst()) {
//            levelelf = ccc11ursor11.getFloat(0);
//            tatatata = String.valueOf(levelelf);
//            ///////////Toast.makeText(CancelActivity.this, "3 is "+tatat, Toast.LENGTH_SHORT).show();
//        }

        Cursor ccc11ursor111 = db1.rawQuery("SELECT SUM(new_modified_total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "'", null);
        if (ccc11ursor111.moveToFirst()) {
            levelelf = ccc11ursor111.getFloat(0);
            tatatata1 = String.valueOf(levelelf);
            ///////////Toast.makeText(CancelActivity.this, "3 is "+tatat, Toast.LENGTH_SHORT).show();
        }
        /////////Toast.makeText(CancelActivity.this, "1 is "+za, Toast.LENGTH_SHORT).show();
        /////////Toast.makeText(CancelActivity.this, "2 is "+tatat, Toast.LENGTH_SHORT).show();
//        /////////Toast.makeText(CancelActivity.this, "3 is "+zzaa, Toast.LENGTH_SHORT).show();
//        /////////Toast.makeText(CancelActivity.this, "4 is "+tatatata, Toast.LENGTH_SHORT).show();
//        /////////Toast.makeText(CancelActivity.this, "5 is "+tatatata1, Toast.LENGTH_SHORT).show();

        //onlybillnew.setText(String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat) + Float.parseFloat(zzaa) - Float.parseFloat(tatatata)));
        onlybillnew.setText(String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat) - Float.parseFloat(tatatata1)));
        System.out.println("onlybillnew  "+Float.parseFloat(za)+"  "+Float.parseFloat(tatat)+"  "+Float.parseFloat(tatatata1)+ "  "+String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat) - Float.parseFloat(tatatata1)));
        onlybillnew_hide.setText(String.valueOf(Float.parseFloat(za1) - Float.parseFloat(tatat) - Float.parseFloat(tatatata1)));
        System.out.println("onlybillnew_hide2 "+String.valueOf(Float.parseFloat(za1) - Float.parseFloat(tatat) - Float.parseFloat(tatatata1)));

        /////////Toast.makeText(CancelActivity.this, "tottttal 22 is "+String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat) - Float.parseFloat(tatatata1)), Toast.LENGTH_SHORT).show();

        float fff = Float.parseFloat(oldtax);
        oldtax1 = String.format("%.2f", fff);
        onlybilltaxnew.setText(oldtax1);
        System.out.println("Tax12  " +oldtax+"  "+oldtax1);
//        Toast.makeText(CancelActivity.this, "3 tax new "+onlybilltaxnew.getText().toString(), Toast.LENGTH_SHORT).show();
        onlybillroundoffnew.setText(oldround);
        onlybilldiscountvaluenew.setText(olddiscvalue);
        onlybilltotalnew.setText(oldtotal);
        /////////Toast.makeText(CancelActivity.this, "tax 3 is " + oldtax1, Toast.LENGTH_SHORT).show();
        ///////////////Toast.makeText(CancelActivity.this, "1 "+(String.valueOf(Float.parseFloat(za) - Float.parseFloat(tatat))), Toast.LENGTH_SHORT).show();
        ////////Toast.makeText(getActivity(), "new bill is "+za, Toast.LENGTH_SHORT).show();
        ////////Toast.makeText(getActivity(), "new tax is "+oldtax1, Toast.LENGTH_SHORT).show();

//        String subttot = onlybillnew.getText().toString();
//        String subtotval = onlybilldiscountvaluenew.getText().toString();
//        ror = Float.parseFloat(subttot)*Float.parseFloat(subtotval) / 100;
//        if (ror % 1 != 0) {
//            int newww = (int) ror;
//            float decpart = ror - newww;
//            if (decpart > 0.5) {
//                float dee = 1 - decpart;
//                //onlybilldiscountnew.setText("+ " + String.format("%.2f", dee));
//                onlybilldiscountnew.setText(String.valueOf(ror+dee));
//            }else {
//                //onlybilldiscountnew.setText("- " + String.format("%.2f", decpart));
//                onlybilldiscountnew.setText(String.valueOf(ror-decpart));
//            }
//        }else {
//            int addall = (int) ror;
//            onlybilldiscountnew.setText(String.valueOf(addall));
//        }
        //onlybilldiscountnew.setText(String.valueOf(ror));





        Cursor cu = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete'  ", null);
        if (cu.moveToFirst()){
            azzf = cu.getFloat(0);
            zaa = String.format("%.2f", azzf);
        }
        onlybillcancel.setText(zaa);
        cu.close();

        Cursor ccc = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'decrease' ", null);
        float re = 0;

        for (ccc.moveToFirst(); !ccc.isAfterLast(); ccc.moveToNext()){
            TextView tv = new TextView(CancelActivity.this);
            tv.setText(ccc.getString(9));

            if (tv.getText().toString().equals("")) {
                re += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(ccc.getString(4)) / 100 + "\n");
            }else {
                re += Float.parseFloat(Float.parseFloat(ccc.getString(9)) * Float.parseFloat(ccc.getString(4)) / 100 + "\n");
            }
            Cursor cursor1 = db1.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
            if (cursor1.moveToFirst()) {
                do {
                    String gt = cursor1.getString(10);
                    if (onlybillnew.getText().toString().equals("0.0") || onlybillnew.getText().toString().equals("0.00") || onlybillnew.getText().toString().equals("0")){
                        onlybilltaxnew.setText("0.00");
                        System.out.println("Tax13  ");
                    }else {
                        /////////////Toast.makeText(CancelActivity2.this, "global total is " + onlybilltaxnew.getText().toString(), Toast.LENGTH_SHORT).show();
                        float in = Float.parseFloat(onlybillnew_hide.getText().toString());
                        float inn = in * Float.parseFloat(gt) / 100;
                        float innn = re + inn;

                        String ni = String.format("%.2f", innn);
                        System.out.println("Tax14  " +innn+"  "+ni);
                        ////////Toast.makeText(getActivity(), "new tax is "+ni , Toast.LENGTH_SHORT).show();
                        onlybilltaxnew.setText(String.valueOf(ni));

//                        Toast.makeText(CancelActivity.this, "4 tax new "+onlybilltaxnew.getText().toString(), Toast.LENGTH_SHORT).show();
                        /////////Toast.makeText(CancelActivity.this, "tax 31 is " + String.valueOf(ni), Toast.LENGTH_SHORT).show();
//                        /////////Toast.makeText(CancelActivity.this, "tax 311 is " + String.valueOf(re), Toast.LENGTH_SHORT).show();
//                        /////////Toast.makeText(CancelActivity.this, "tax 312 is " + String.valueOf(inn), Toast.LENGTH_SHORT).show();
//                    //////Toast.makeText(getActivity(), "1 is " + onlybillnew.getText().toString(), Toast.LENGTH_SHORT).show();
//                    //////Toast.makeText(getActivity(), "tax is " + resultt, Toast.LENGTH_SHORT).show();
//                    //////Toast.makeText(getActivity(), "inn is " + inn, Toast.LENGTH_SHORT).show();
//                    //////Toast.makeText(getActivity(), "innn is " + innn, Toast.LENGTH_SHORT).show();
//                    //////Toast.makeText(getActivity(), "newww taxxxx is " + String.valueOf(ni), Toast.LENGTH_SHORT).show();
//                    ////////Toast.makeText(getActivity(), "total tax is "+result, Toast.LENGTH_SHORT).show();


                        float an = Float.parseFloat(onlybillcancel.getText().toString());
                        float ann = an * Float.parseFloat(gt) / 100;
                        float annn = re + ann;

                        String na = String.format("%.2f", annn);
                        ////////Toast.makeText(getActivity(), "cancel tax is "+an , Toast.LENGTH_SHORT).show();
                        onlybilltaxcancel.setText(String.valueOf(na));
                        System.out.println("Ntax10  "+na);

                        float vf = Float.parseFloat(onlybillnew_hide.getText().toString()) + Float.parseFloat(onlybilltaxnew.getText().toString()) - Float.parseFloat(onlybilldiscountnew.getText().toString());
                        String cvd = String.format("%.2f", vf);
                        onlybilltotalnew.setText(cvd);
                        System.out.println("onlybilltotalnew4 "+cvd);
                        ///////////Toast.makeText(CancelActivity2.this, "c1 "+cvd, Toast.LENGTH_SHORT).show();
                    }

                } while (cursor1.moveToNext());
            }
        }
        ccc.close();


        Cursor c = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND  deleted_not = '' ", null);
        float resultt = 0;

        for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
            TextView tv = new TextView(CancelActivity.this);
            tv.setText(c.getString(9));

            if (tv.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(9)) * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }

            TextView tv1 = new TextView(CancelActivity.this);
            tv1.setText(c.getString(36));
            if (tv1.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(36)) * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }

            TextView tv2 = new TextView(CancelActivity.this);
            tv2.setText(c.getString(38));
            if (tv2.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(38)) * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }

            TextView tv3 = new TextView(CancelActivity.this);
            tv3.setText(c.getString(40));
            if (tv3.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(40)) * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }

            TextView tv4 = new TextView(CancelActivity.this);
            tv4.setText(c.getString(42));
            if (tv4.getText().toString().equals("")) {
                resultt += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }else {
                resultt += Float.parseFloat(Float.parseFloat(c.getString(42)) * Float.parseFloat(c.getString(50)) / 100 + "\n");
            }
        }
        c.close();

        Cursor cursor1a = db1.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
        if (cursor1a.moveToFirst()) {
            do {
                String gt = cursor1a.getString(10);
                ////////Toast.makeText(getActivity(), "global total is " + gt, Toast.LENGTH_SHORT).show();
                if (gt.toString().equals("") || gt.toString().equals("0") || gt.toString().equals("0.0") || gt.toString().equals("0.00") || gt.toString().isEmpty()){

                }else {
                    float in = Float.parseFloat(onlybillnew_hide.getText().toString());
                    float inn = in * Float.parseFloat(gt) / 100;
                    float innn = resultt + inn;

                    String ni = String.format("%.2f", innn);
                    ////////Toast.makeText(getActivity(), "new tax is "+ni , Toast.LENGTH_SHORT).show();
                    onlybilltaxnew.setText(String.valueOf(ni));
                    System.out.println("Tax15  " +innn+"  "+ni);

                    float an = Float.parseFloat(onlybillcancel.getText().toString());
                    float ann = an * Float.parseFloat(gt) / 100;
                    float annn = re + ann;

                    String na = String.format("%.2f", annn);
                    ////////Toast.makeText(getActivity(), "cancel tax is "+an , Toast.LENGTH_SHORT).show();
                    onlybilltaxcancel.setText(String.valueOf(na));
                    System.out.println("Ntax11  "+na);
                }
            } while (cursor1a.moveToNext());
        }


        Cursor ccc1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'decrease' ", null);
        float re1 = 0;

        for (ccc1.moveToFirst(); !ccc1.isAfterLast(); ccc1.moveToNext()){
            TextView tv = new TextView(CancelActivity.this);
            tv.setText(ccc1.getString(9));

            if (tv.getText().toString().equals("")) {
                re1 += Float.parseFloat((Float.parseFloat("0") * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }else {
                re1 += Float.parseFloat((Float.parseFloat(ccc1.getString(9)) * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }

            TextView tv1 = new TextView(CancelActivity.this);
            tv1.setText(ccc1.getString(36));
            if (tv1.getText().toString().equals("")) {
                re1 += Float.parseFloat((Float.parseFloat("0") * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }else {
                re1 += Float.parseFloat((Float.parseFloat(ccc1.getString(36)) * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }

            TextView tv2 = new TextView(CancelActivity.this);
            tv2.setText(ccc1.getString(38));
            if (tv2.getText().toString().equals("")) {
                re1 += Float.parseFloat((Float.parseFloat("0") * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }else {
                re1 += Float.parseFloat((Float.parseFloat(ccc1.getString(38)) * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }

            TextView tv3 = new TextView(CancelActivity.this);
            tv3.setText(ccc1.getString(40));
            if (tv3.getText().toString().equals("")) {
                re1 += Float.parseFloat((Float.parseFloat("0") * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }else {
                re1 += Float.parseFloat((Float.parseFloat(ccc1.getString(40)) * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }

            TextView tv4 = new TextView(CancelActivity.this);
            tv4.setText(ccc1.getString(42));
            if (tv4.getText().toString().equals("")) {
                re1 += Float.parseFloat((Float.parseFloat("0") * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }else {
                re1 += Float.parseFloat((Float.parseFloat(ccc1.getString(42)) * Float.parseFloat(ccc1.getString(56)) * Float.parseFloat(ccc1.getString(23)) / 100) + "\n");
            }
        }
        ccc1.close();

        Cursor cursor1b = db1.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
        if (cursor1b.moveToFirst()) {
            do {
                String gt = cursor1b.getString(10);
                if (onlybillnew.getText().toString().equals("0.0") || onlybillnew.getText().toString().equals("0.00") || onlybillnew.getText().toString().equals("0")){
                    onlybilltaxnew.setText("0.00");
                    System.out.println("Tax16  ");
                }else {
                    /////////////Toast.makeText(CancelActivity2.this, "global total is " + onlybilltaxnew.getText().toString(), Toast.LENGTH_SHORT).show();
                    float in = Float.parseFloat(onlybillnew_hide.getText().toString());
                    float inn = in * Float.parseFloat(gt) / 100;
                    float innn = re1 + inn + resultt;


                    String ni = String.format("%.2f", innn);
                    System.out.println("Tax17  " +re1+"  "+inn+ "   "+resultt);
                    System.out.println("Tax17  " +innn+"  "+ni+ "   "+in+ "  "+re1+"  "+resultt);
                    ////Toast.makeText(CancelActivity.this, "inn is "+inn , Toast.LENGTH_SHORT).show();
                    onlybilltaxnew.setText(String.valueOf(ni));

                    float an = Float.parseFloat(onlybillcancel.getText().toString());
                    float ann = an * Float.parseFloat(gt) / 100;
                    float annn = re1 + ann;

                    String na = String.format("%.2f", annn);
                    ////////Toast.makeText(getActivity(), "cancel tax is "+an , Toast.LENGTH_SHORT).show();
                    onlybilltaxcancel.setText(String.valueOf(na));
                    System.out.println("Ntax12  "+na);

                    float vf = Float.parseFloat(onlybillnew_hide.getText().toString()) + Float.parseFloat(onlybilltaxnew.getText().toString()) - Float.parseFloat(onlybilldiscountnew.getText().toString());
                    String cvd = String.format("%.2f", vf);
                    onlybilltotalnew.setText(cvd);
                    System.out.println("onlybilltotalnew5 "+cvd);
                    ///////////Toast.makeText(CancelActivity2.this, "c1 "+cvd, Toast.LENGTH_SHORT).show();
                }

            } while (cursor1b.moveToNext());
        }


        Cursor ccursor = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
        if (ccursor.moveToFirst()){
            taxperc = ccursor.getString(5);

            float newt = Float.parseFloat(onlybillnew_hide.getText().toString());
            float newtt = newt * Float.parseFloat(taxperc) / 100;
            float newttt = Float.parseFloat(onlybilltotalnew.getText().toString()) - newtt;
            onlybilltotalnew.setText(String.valueOf(newttt));
            System.out.println("onlybilltotalnew6 "+String.valueOf(newttt));
            ///////////////Toast.makeText(CancelActivity.this, "qweqwe "+newt+" "+newtt+" "+newttt, Toast.LENGTH_LONG).show();
            ////////Toast.makeText(getActivity(), "5 "+newttt, Toast.LENGTH_SHORT).show();

            onlybilldiscountnew.setText(String.valueOf(newtt));


//            if (newtt% 1 != 0){
//                int newww1 = (int) newtt;
//                float decpart = newtt - newww1;
//                if (decpart > 0.5){
//                    onlybilldiscountnew.setText(String.valueOf(newww1 + 1));
//                    ////////Toast.makeText(getActivity(), "6 "+(newww1+1), Toast.LENGTH_SHORT).show();
//                }else {
//                    onlybilldiscountnew.setText(String.valueOf(newww1));
//                    ////////Toast.makeText(getActivity(), "7 "+newww1, Toast.LENGTH_SHORT).show();
//                }
//            }else {
//                int addall = (int) newtt;
//                onlybilldiscountnew.setText(String.valueOf(addall));
//                ////////Toast.makeText(getActivity(), "8 " + addall, Toast.LENGTH_SHORT).show();
//            }

            if (newttt % 1 != 0){
                int newww = (int) newttt;
                float decpart = newttt - newww;
                if (decpart > 0.5){
                    onlybilltotalnew.setText(String.valueOf(newww + 1));
                    /////////Toast.makeText(getActivity(), "6 "+(newww+1), Toast.LENGTH_SHORT).show();
                }else {
                    onlybilltotalnew.setText(String.valueOf(newww));
                    ////////Toast.makeText(getActivity(), "7 "+newww, Toast.LENGTH_SHORT).show();
                }
            }else {
                int addall = (int) newttt;
                onlybilltotalnew.setText(String.valueOf(addall));
                ////////Toast.makeText(getActivity(), "8 "+addall, Toast.LENGTH_SHORT).show();
            }

            ////////Toast.makeText(getActivity(), "full total is "+String.valueOf(newttt), Toast.LENGTH_SHORT).show();

        }else {
            ////////Toast.makeText(getActivity(), "no record", Toast.LENGTH_SHORT).show();
        }

        float ro = Float.parseFloat(onlybilltaxnew.getText().toString())+Float.parseFloat(onlybillnew_hide.getText().toString())-Float.parseFloat(onlybilldiscountnew.getText().toString());
        System.out.println("onlybilltotalnew7 "+ro);
        if (str_round_off.toString().equals("No")) {
            onlybilltotalnew.setText(String.format("%.2f", ro));
            onlybillroundoffnew.setText("0.0");
        }else {
            if (ro % 1 != 0) {
                int newww = (int) ro;
                float decpart = ro - newww;
                if (decpart > 0.5) {
                    onlybilltotalnew.setText(String.valueOf(newww + 1));
                    float dee = 1 - decpart;
                    onlybillroundoffnew.setText("+ " + String.format("%.2f", dee));
                } else {
                    onlybilltotalnew.setText(String.valueOf(newww));
                    onlybillroundoffnew.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                int addall = (int) ro;
                onlybilltotalnew.setText(String.valueOf(addall));
                onlybillroundoffnew.setText("0.0");
            }
        }

//        float rom = Float.parseFloat(onlybilltaxnew.getText().toString()) + Float.parseFloat(onlybillnew_hide.getText().toString()) - Float.parseFloat(onlybilldiscountnew.getText().toString());
        float rom = Float.parseFloat(onlybillnew.getText().toString());
        System.out.println("onlybilltotalnew8 "+onlybilltaxnew.getText().toString());
        System.out.println("onlybilltotalnew8 "+onlybillnew_hide.getText().toString());
        System.out.println("onlybilltotalnew8 "+onlybilldiscountnew.getText().toString());
        System.out.println("onlybilltotalnew8 "+rom);
        if (str_round_off.toString().equals("No")) {
            onlybilltotalnew.setText(String.format("%.2f", rom));
        }else {
            if (rom % 1 != 0) {
                int newww = (int) rom;
                float decpart = rom - newww;
                if (decpart > 0.5) {
                    onlybilltotalnew.setText(String.valueOf(newww + 1));

                } else {
                    onlybilltotalnew.setText(String.valueOf(newww));
                }
            } else {
                int addall = (int) rom;
                onlybilltotalnew.setText(String.valueOf(addall));
            }
        }

        ccursor = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
        if (ccursor.moveToFirst()){
            taxperc = ccursor.getString(5);

            float newt = Float.parseFloat(onlybillcancel.getText().toString());
            float newtt = newt * Float.parseFloat(taxperc) / 100;
            float newttt = Float.parseFloat(onlybilltotalcancel.getText().toString()) - newtt;
            onlybilltotalcancel.setText(String.format("%.2f", newttt));

            if (str_round_off.toString().equals("No")) {
                onlybilltotalcancel.setText(String.format("%.2f", newtt));
            }else {
                if (newttt % 1 != 0) {
                    int newww = (int) newttt;
                    float decpart = newttt - newww;
                    if (decpart > 0.5) {
//                        onlybilltotalcancel.setText(String.valueOf(newww + 1));
                        onlybilltotalcancel.setText(String.format("%.2f", newttt + 1));
                    } else {
//                        onlybilltotalcancel.setText(String.valueOf(newww));
                        onlybilltotalcancel.setText(String.format("%.2f", newttt));
                    }
                } else {
                    int addall = (int) newttt;
//                    onlybilltotalcancel.setText(String.valueOf(addall));
                    onlybilltotalcancel.setText(String.format("%.2f", newttt));
                }
            }

            ////////Toast.makeText(getActivity(), "full total is "+String.valueOf(newttt), Toast.LENGTH_SHORT).show();

        }else {
            ///////////////Toast.makeText(CancelActivity.this, "no record", Toast.LENGTH_SHORT).show();
        }
        ccursor.close();

        if (onlybillnew.getText().toString().equals("0.0")){
            onlybilltaxnew.setText("0.0");
            System.out.println("Tax18  ");
            onlybillroundoffnew.setText("0.0");
            onlybilltotalnew.setText("0");
        }


        onlybilldiscountvaluecancel.setText(olddiscvalue);
        float xc = Float.parseFloat(onlybillold.getText().toString())-Float.parseFloat(onlybillnew.getText().toString());
        String vb = String.format("%.2f", xc);
        onlybillcancel.setText(vb);

        String taxperc11 = onlybilldiscountvaluecancel.getText().toString();

        if (onlybillcancel.getText().toString().equals("")){
            onlybilldiscountcancel.setText("0");
        }else {
            float newt = Float.parseFloat(onlybillcancel.getText().toString());
            float newtt = newt * Float.parseFloat(taxperc11) / 100;
            onlybilldiscountcancel.setText(String.format("%.2f", newtt));
        }

        //onlybilldiscountcancel.setText(String.format("%.2f", newtt));
        //onlybilldiscountcancel.setText(String.valueOf(Float.parseFloat(onlybilldiscountold.getText().toString()) - Float.parseFloat(onlybilldiscountnew.getText().toString())));
        //onlybilltaxcancel.setText(String.valueOf(Float.parseFloat(onlybilltaxold.getText().toString())-Float.parseFloat(onlybilltaxnew.getText().toString())));

        float taxax1 = Float.parseFloat(onlybilltaxold.getText().toString())-Float.parseFloat(onlybilltaxnew.getText().toString());
        onlybilltaxcancel.setText(String.format("%.2f", taxax1));
        System.out.println("Ntax14  "+taxax1);
        float att = Float.parseFloat(onlybilltaxcancel.getText().toString())+Float.parseFloat(onlybillcancel.getText().toString())-Float.parseFloat(onlybilldiscountcancel.getText().toString());

        //Float.parseFloat(onlybilltaxcancel.getText().toString())+Float.parseFloat(onlybillcancel.getText().toString())-Float.parseFloat(onlybilldiscountcancel.getText().toString());

        if (str_round_off.toString().equals("No")) {
            onlybillroundoffcancel.setText("0.0");
        }else {
            if (att % 1 != 0) {
                int newww = (int) att;
                float decpart = att - newww;
                if (decpart > 0.5) {
                    float dee = 1 - decpart;
                    onlybillroundoffcancel.setText("+ " + String.format("%.2f", dee));
                } else {
                    onlybillroundoffcancel.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                onlybillroundoffcancel.setText("0.0");
            }
        }

        float cvf = Float.parseFloat(onlybilltotalold.getText().toString())-Float.parseFloat(onlybilltotalnew.getText().toString());
        onlybilltotalcancel.setText(String.format("%.2f", cvf));



        paneone.setVisibility(View.VISIBLE);

        Cursor cvb = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
        if (cvb.moveToFirst()){
            panetwo.setVisibility(View.VISIBLE);
            panethree.setVisibility(View.VISIBLE);
        }else {
            panetwo.setVisibility(View.GONE);
            panethree.setVisibility(View.INVISIBLE);
        }
        cvb.close();

        //db1 = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);
        final TableLayout tableLayout = (TableLayout)findViewById(R.id.lytpedido);
        tableLayout.removeAllViews();

        final TableLayout tableLayout2 = (TableLayout)findViewById(R.id.lytpedido1);
        tableLayout2.removeAllViews();

        final Cursor cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = '' OR deleted_not = 'decrease') ", null);//replace to cursor = dbHelper.fetchAllHotels();
        while (cursor.moveToNext()) {

            Itemtype = cursor.getString(5);

            if (Itemtype.toString().equals("Item")) {

                total = cursor.getString(2);
                final String a = cursor.getString(2);

                final String idid = cursor.getString(0);
                final String newid = cursor.getString(20);
                final String tt = cursor.getString(5);
                final String par = cursor.getString(6);
                final String parid = cursor.getString(7);
                final String mass = cursor.getString(8);
                final String taxtax = cursor.getString(9);
                final String taxtaxname = cursor.getString(10);
                final String numbill = cursor.getString(11);
                final String useruser = cursor.getString(14);
                final String typebill = cursor.getString(16);
                final String paymethod = cursor.getString(17);
                final String iddi = cursor.getString(20);
                final String copyquan = cursor.getString(23);
                final String aacc1 = cursor.getString(3);

                final String modifassi = cursor.getString(8);


                if (copyquan.toString().equals("0")){

                }else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT, 1.0f));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,
                            2, 1.0f));

                    final TableRow[] tableRow = {new TableRow(CancelActivity.this)};
                    //row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                    tableRow[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT, 4.04f));




                    final TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
                    tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT, 4.04f));



                    TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);
                    LinearLayout.LayoutParams paramssa = new TableRow.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                            LinearLayout.LayoutParams.MATCH_PARENT);
                    tableLayout1.setLayoutParams(paramssa);

                    final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);
                    LinearLayout.LayoutParams paramssa1 = new TableRow.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                            LinearLayout.LayoutParams.MATCH_PARENT);
                    tableLayout_disc.setLayoutParams(paramssa1);


                    final TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                    tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                    tv.setTextColor(Color.parseColor("#6a6a6d"));
                    tv.setText(copyquan);
                    row.addView(tv);


                    final String modidd = cursor.getString(0);
                    final int modid = Integer.parseInt(modidd);
                    tv.setId(modid);

                    name = cursor.getString(1);
                    final String iidd = cursor.getString(0);
                    final String nbg = cursor.getString(0);
                    final String hii = cursor.getString(1);
                    final String disc_31 = cursor.getString(28);
                    final String disc_27 = cursor.getString(27);

                    final String disc_orig_price1 = cursor.getString(3);
                    final String disc_orig_quan1 = cursor.getString(2);
                    final String disc_orig_total1 = cursor.getString(4);
                    final String disc_orig_type1 = cursor.getString(27);
                    final String disc_orig_value1 = cursor.getString(28);
                    final String disc_notorig_quan1 = cursor.getString(22);

                    final String pprr = cursor.getString(3);
                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.22f));
                    tv1.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                    tv1.setTextColor(Color.parseColor("#000000"));
                    tv1.setTypeface(Typeface.DEFAULT_BOLD);
                    tv1.setLines(2);
                    tv1.setMaxLines(2);
                    tv1.setEllipsize(TextUtils.TruncateAt.END);
                    tv1.setText(name);
                    row.addView(tv1);

                    TextView textView = new TextView(CancelActivity.this);
                    textView.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                    textView.setText(insert1_cc);;
                    textView.setGravity(Gravity.CENTER_VERTICAL);
                    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                    textView.setTextColor(Color.parseColor("#6a6a6d"));
                    row.addView(textView);

                    //priceget = cursor.getString(3);
                    final TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                    tv2.setGravity(Gravity.CENTER_VERTICAL);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                    tv2.setTextColor(Color.parseColor("#6a6a6d"));
                    final Float f = Float.parseFloat(cursor.getString(3));
                    price = String.valueOf(f);
                    tv2.setText(price);
                    //tv1.setText(c.getString(j));
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                    textView1.setText(insert1_cc);
                    textView1.setGravity(Gravity.CENTER_VERTICAL);
                    textView1.setTypeface(Typeface.DEFAULT_BOLD);
                    textView1.setTextColor(Color.parseColor("#000000"));
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                    row.addView(textView1);

                    //totalget = cursor.getString(4);
                    final TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                    tv3.setGravity(Gravity.CENTER_VERTICAL);
                    tv3.setTypeface(Typeface.DEFAULT_BOLD);
                    tv3.setTextColor(Color.parseColor("#000000"));
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                    final String number = tv.getText().toString();
                    float newmul = Float.parseFloat(number);
                    //final float in = Float.parseFloat(cursor.getString(4));
                    final String multiply = String.valueOf(newmul * f);
                    //newmul = Integer.parseInt(multiply);
                    tv3.setText(multiply);
                    row.addView(tv3);

                    int size_in_10dp = 10;  // 95 dps
                    final float scale2 = getResources().getDisplayMetrics().density;
                    size_in_10px = (int) (size_in_10dp * scale2 + 0.5f);

                    final ImageView imageView = new ImageView(CancelActivity.this);
                    imageView.setImageResource(R.drawable.ic_remove_black_24dp);
                    imageView.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                    imageView.setPadding(size_in_10px, size_in_10px,size_in_10px,size_in_10px);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                    LinearLayout.LayoutParams params = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                            LinearLayout.LayoutParams.WRAP_CONTENT);
                    params.setMargins(6, 2, 6, 2);
                    imageView.setLayoutParams(params);
                    row.addView(imageView);



                    imageView.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                            panetwo.setVisibility(View.VISIBLE);
                            panethree.setVisibility(View.VISIBLE);

                            /////////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_SHORT).show();
                            ///////////////Toast.makeText(CancelActivity.this, "delete all row with asscoiated modifiers" + hii + " modidd " + modidd, Toast.LENGTH_SHORT).show();

                            Cursor cursorcheck = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' and parent = '" + par + "' and parentid = '" + parid + "' and itemname = '" + hii + "' AND deleted_not = 'delete' ", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (cursorcheck.moveToFirst()) {
                                ///////////////Toast.makeText(CancelActivity.this, "data is there in All_Sales_Cancelled table ", Toast.LENGTH_SHORT).show();
                            } else {
                                ///////////////Toast.makeText(CancelActivity.this, "data is not there in All_Sales_Cancelled table 1 ", Toast.LENGTH_SHORT).show();

                                if (modifassi.equals("yes")) {

                                    /////////////////Toast.makeText(CancelActivity.this, "Modifiers assigned ", Toast.LENGTH_SHORT).show();
                                    if (a.equals("1")) {

                                        tableLayout.removeView(row);
                                        tableLayout.removeView(row2);
                                        tableLayout.removeView(tableLayout1);



                                        ///////////////Toast.makeText(CancelActivity.this, "Modifierssssssssss assignedddddddddddd, quantity is 1 ", Toast.LENGTH_SHORT).show();

                                        Cursor resetmodee = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND _id = '" + modidd + "' ", null);
                                        while (resetmodee.moveToNext()) {

                                            String st = resetmodee.getString(3);
                                            /////////////////Toast.makeText(CancelActivity.this, "deleted item "+hii+" and its id is "+modidd , Toast.LENGTH_SHORT).show();

                                            final String iidd = resetmodee.getString(0);
                                            /////////////////Toast.makeText(CancelActivity.this, "id is " + iidd, Toast.LENGTH_SHORT).show();
                                            ContentValues newValues = new ContentValues();
                                            newValues.put("deleted_not", "delete");
                                            newValues.put("modifiedquantity", "1");
                                            newValues.put("quantitycopy", "0");
                                            newValues.put("modifiedtotal", st);
                                            System.out.println("modified2 "+st);
                                            String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";

                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                            getContentResolver().update(contentUri, newValues,where,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_sales")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",modidd+"")
                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);


                                            //    db1.update("All_sales", newValues, where, new String[]{});

                                        }

                                        resetmodee = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                        while (resetmodee.moveToNext()) {

                                            String st = resetmodee.getString(3);

                                            String zx = resetmodee.getString(1);
                                            String zxx = resetmodee.getString(0);
                                            /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();
                                            ContentValues newValues = new ContentValues();
                                            newValues.put("deleted_not", "delete");
                                            newValues.put("modifiedquantity", "1");
                                            newValues.put("quantitycopy", "0");
                                            newValues.put("modifiedtotal", st);
                                            newValues.put("modifiedtotal", st);
                                            String where = "_id = '" + zxx + "'  AND bill_no = '"+billno.getText().toString()+"' ";


                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                            getContentResolver().update(contentUri, newValues,where,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_sales")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",zxx+"")
                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);


                                            //   db1.update("All_sales", newValues, where, new String[]{});

                                        }
                                        resetmodee.close();


                                        //db1 = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);
                                        Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = '' AND (disc_thereornot = 'no' OR disc_thereornot IS NULL) ", null);
                                        if (cursor11.moveToFirst()) {
                                            levelf = cursor11.getFloat(0);
                                            tat = String.valueOf(levelf);
                                            ///////////Toast.makeText(CancelActivity.this, "tottttal is "+tat, Toast.LENGTH_SHORT).show();
                                        }
                                        cursor11.close();

                                        Cursor cursor12 = db1.rawQuery("SELECT SUM(old_total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = '' AND (disc_thereornot = 'no' OR disc_thereornot IS NULL) ", null);
                                        if (cursor12.moveToFirst()) {
                                            levelf = cursor12.getFloat(0);
                                            tat1 = String.valueOf(levelf);
                                            ///////////Toast.makeText(CancelActivity.this, "tottttal is "+tat, Toast.LENGTH_SHORT).show();
                                        }
                                        cursor11.close();

                                        Cursor cursor111a = db1.rawQuery("SELECT SUM(newtotal) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = '' AND disc_thereornot = 'yes'", null);
                                        if (cursor111a.moveToFirst()){
                                            azf = cursor111a.getFloat(0);
                                            zzaa = String.valueOf(azf);
                                        }
                                        cursor111a.close();

                                        final String tot = String.valueOf(Float.parseFloat(tat) + Float.parseFloat(zzaa));
                                        onlybillnew.setText(tot);
                                        final String tot1 = String.valueOf(Float.parseFloat(tat1) + Float.parseFloat(zzaa));
                                        onlybillnew_hide.setText(tot1);
                                        System.out.println("onlybillnew3 "+tot1);
                                        /////////Toast.makeText(CancelActivity.this, "new bill is "+tot, Toast.LENGTH_SHORT).show();

                                        Cursor c = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = '' ", null);
                                        float result = 0;

                                        for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
                                            TextView tv = new TextView(CancelActivity.this);
                                            tv.setText(c.getString(9));

                                            if (tv.getText().toString().equals("")) {
                                                result += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(4)) / 100 + "\n");
                                            }else {
                                                result += Float.parseFloat(Float.parseFloat(c.getString(9)) * Float.parseFloat(c.getString(4)) / 100 + "\n");
                                            }

                                        }
                                        /////////////////Toast.makeText(CancelActivity.this, "tax is "+result, Toast.LENGTH_SHORT).show();

                                        Cursor cursor1 = db1.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
                                        if (cursor1.moveToFirst()) {
                                            do {
                                                String gt = cursor1.getString(10);
                                                /////////////////Toast.makeText(CancelActivity.this, "global total is " + gt, Toast.LENGTH_SHORT).show();
                                                if (gt.toString().equals("") || gt.toString().equals("0") || gt.toString().equals("0.0") || gt.toString().equals("0.00") || gt.toString().isEmpty()){

                                                }else {
                                                    float in = Float.parseFloat(onlybillnew_hide.getText().toString());
                                                    float inn = in * Float.parseFloat(gt) / 100;
                                                    float innn = result + inn;
                                                    /////////////////Toast.makeText(CancelActivity.this, "inside is "+result +" + "+ inn, Toast.LENGTH_SHORT).show();
                                                    String ni = String.format("%.2f", innn);
                                                    System.out.println("Tax19  " +innn+"  "+ni);
                                                    onlybilltaxnew.setText(String.valueOf(ni));
//                                                Toast.makeText(CancelActivity.this, "7 tax new "+onlybilltaxnew.getText().toString(), Toast.LENGTH_SHORT).show();
                                                    /////////Toast.makeText(CancelActivity.this, "tax 5 is " + String.valueOf(ni), Toast.LENGTH_SHORT).show();
                                                    /////////////////Toast.makeText(CancelActivity.this, "newwwwwwww taxxxxxxxxxxx is "+String.valueOf(ni), Toast.LENGTH_SHORT).show();
                                                    /////////////////Toast.makeText(CancelActivity.this, "total tax is "+result, Toast.LENGTH_SHORT).show();
                                                }
                                            } while (cursor1.moveToNext());
                                        }
                                        cursor1.close();


                                        float ro = Float.parseFloat(onlybilltaxnew.getText().toString()) + Float.parseFloat(onlybillnew_hide.getText().toString());
                                        System.out.println("onlybilltotalnew9 "+ro);
                                        if (str_round_off.toString().equals("No")) {
                                            onlybilltotalnew.setText(String.format("%.2f", ro));
                                            onlybillroundoffnew.setText("0.0");
                                        }else {
                                            if (ro % 1 != 0) {
                                                int newww = (int) ro;
                                                float decpart = ro - newww;
                                                if (decpart > 0.5) {
                                                    onlybilltotalnew.setText(String.valueOf(newww + 1));
                                                    float dee = 1 - decpart;
                                                    onlybillroundoffnew.setText("+ " + String.format("%.2f", dee));
                                                } else {
                                                    onlybilltotalnew.setText(String.valueOf(newww));
                                                    onlybillroundoffnew.setText("- " + String.format("%.2f", decpart));
                                                }
                                            } else {
                                                int addall = (int) ro;
                                                onlybilltotalnew.setText(String.valueOf(addall));
                                                onlybillroundoffnew.setText("0.0");
                                            }
                                        }

                                        Cursor ccursor = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
                                        if (ccursor.moveToFirst()) {
                                            taxperc = ccursor.getString(5);

                                            float newt = Float.parseFloat(onlybillnew_hide.getText().toString());
                                            float newtt = newt * Float.parseFloat(taxperc) / 100;
                                            float newttt = Float.parseFloat(onlybilltotalnew.getText().toString()) - newtt;
                                            onlybilltotalnew.setText(String.valueOf(newttt));
                                            System.out.println("onlybilltotalnew10 "+String.valueOf(newttt));

                                            if (str_round_off.toString().equals("No")) {
                                                onlybilltotalnew.setText("6"+String.format("%.2f", newttt));
                                            }else {
                                                if (newttt % 1 != 0) {
                                                    int newww = (int) newttt;
                                                    float decpart = newttt - newww;
                                                    if (decpart > 0.5) {
                                                        onlybilltotalnew.setText(String.valueOf(newww + 1));
                                                    } else {
                                                        onlybilltotalnew.setText(String.valueOf(newww));
                                                    }
                                                } else {
                                                    int addall = (int) newttt;
                                                    onlybilltotalnew.setText(String.valueOf(addall));
                                                }
                                            }
                                            hii();

                                            /////////////////Toast.makeText(CancelActivity.this, "full total is "+String.valueOf(newttt), Toast.LENGTH_SHORT).show();

                                        } else {
                                            /////////////////Toast.makeText(CancelActivity.this, "no record", Toast.LENGTH_SHORT).show();
                                        }

                                        ccursor = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billno.getText().toString() + "'", null);
                                        if (ccursor.moveToFirst()) {
                                            taxperc = ccursor.getString(5);

                                            float newt = Float.parseFloat(onlybillcancel.getText().toString());
                                            float newtt = newt * Float.parseFloat(taxperc) / 100;
                                            float newttt = Float.parseFloat(onlybilltotalcancel.getText().toString()) - newtt;
                                            onlybilltotalcancel.setText(String.format("%.2f", newttt));

                                            if (str_round_off.toString().equals("No")) {
                                                onlybilltotalcancel.setText(String.format("%.2f", newttt));
                                            }else {
                                                if (newttt % 1 != 0) {
                                                    int newww = (int) newttt;
                                                    float decpart = newttt - newww;
                                                    if (decpart > 0.5) {
//                                                        onlybilltotalcancel.setText(String.valueOf(newww + 1));
                                                        onlybilltotalcancel.setText(String.format("%.2f", newttt + 1));
                                                    } else {
//                                                        onlybilltotalcancel.setText(String.valueOf(newww));
                                                        onlybilltotalcancel.setText(String.format("%.2f", newttt));
                                                    }
                                                } else {
                                                    int addall = (int) newttt;
//                                                    onlybilltotalcancel.setText(String.valueOf(addall));
                                                    onlybilltotalcancel.setText(String.format("%.2f", newttt));
                                                }
                                            }

                                            /////////////////Toast.makeText(CancelActivity.this, "full total is "+String.valueOf(newttt), Toast.LENGTH_SHORT).show();

                                        } else {
                                            /////////////////Toast.makeText(CancelActivity.this, "no record", Toast.LENGTH_SHORT).show();
                                        }
                                        ccursor.close();


                                        //db1 = openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);
                                        Cursor cursorr11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete' ", null);
                                        if (cursorr11.moveToFirst()) {
                                            qwf = cursorr11.getFloat(0);
                                            tatt = String.valueOf(qwf);
                                        }


                                        float vf = Float.parseFloat(tatt);
                                        final String tott = String.format("%.2f", vf);
                                        onlybillcancel.setText(tott);

                                        c = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete'  ", null);
                                        float result1 = 0;

                                        for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
                                            TextView tv = new TextView(CancelActivity.this);
                                            tv.setText(c.getString(9));

                                            if (tv.getText().toString().equals("")) {
                                                result1 += Float.parseFloat(Float.parseFloat("0") * Float.parseFloat(c.getString(4)) / 100 + "\n");
                                            }else {
                                                result1 += Float.parseFloat(Float.parseFloat(c.getString(9)) * Float.parseFloat(c.getString(4)) / 100 + "\n");
                                            }
                                            //float qqq = oo-result;
                                            //String qqqq = String.format("%.2f", qqq);
                                            //onlybilltaxnew.setText(String.valueOf(qqqq));
                                        }
                                        /////////////////Toast.makeText(CancelActivity.this, "tax is "+result1, Toast.LENGTH_SHORT).show();

                                        Cursor cursor111 = db1.rawQuery("Select * from Billnumber WHERE billnumber = '" + billno.getText().toString() + "' ", null);
                                        if (cursor111.moveToFirst()) {
                                            do {
                                                String gt = cursor111.getString(10);
                                                /////////////////Toast.makeText(CancelActivity.this, "global total is " + gt, Toast.LENGTH_SHORT).show();
                                                if (gt.toString().equals("") || gt.toString().equals("0") || gt.toString().equals("0.0") || gt.toString().equals("0.00") || gt.toString().isEmpty()){

                                                }else {
                                                    float in = Float.parseFloat(onlybillcancel.getText().toString());
                                                    float inn = in * Float.parseFloat(gt) / 100;
                                                    float innn = result1 + inn;
                                                    /////////////////Toast.makeText(CancelActivity.this, "inside is "+result +" + "+ inn, Toast.LENGTH_SHORT).show();
                                                    String ni = String.format("%.2f", innn);
                                                    onlybilltaxcancel.setText(String.valueOf(ni));
                                                    System.out.println("Ntax15  "+ni);
                                                    /////////////////Toast.makeText(CancelActivity.this, "total tax is "+result, Toast.LENGTH_SHORT).show();
                                                }
                                            } while (cursor111.moveToNext());
                                        }
                                        cursor111.close();

                                        ro = Float.parseFloat(onlybilltaxcancel.getText().toString()) + Float.parseFloat(onlybillcancel.getText().toString());

                                        if (str_round_off.toString().equals("No")) {
                                            onlybilltotalcancel.setText(String.format("%.2f", ro));
                                            onlybillroundoffcancel.setText("0.0");
                                        }else {
                                            if (ro % 1 != 0) {
                                                int newww = (int) ro;
                                                float decpart = ro - newww;
                                                if (decpart > 0.5) {
//                                                    onlybilltotalcancel.setText(String.valueOf(newww + 1));
                                                    onlybilltotalcancel.setText(String.format("%.2f", ro + 1));
                                                    float dee = 1 - decpart;
                                                    onlybillroundoffcancel.setText("+ " + String.format("%.2f", dee));
                                                } else {
//                                                    onlybilltotalcancel.setText(String.valueOf(newww));
                                                    onlybilltotalcancel.setText(String.format("%.2f", ro));
                                                    onlybillroundoffcancel.setText("- " + String.format("%.2f", decpart));
                                                }
                                            } else {
                                                int addall = (int) ro;
//                                                onlybilltotalcancel.setText(String.valueOf(addall));
                                                onlybilltotalcancel.setText(String.format("%.2f", ro));
                                                onlybillroundoffcancel.setText("0.0");
                                            }
                                        }


                                        tableLayout2.removeAllViews();

                                        final Cursor cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'delete'  ", null);//replace to cursor = dbHelper.fetchAllHotels();
                                        while (cursor.moveToNext()) {

                                            Itemtype = cursor.getString(5);
                                            final String idis = cursor.getString(0);
                                            final String isid = cursor.getString(20);

                                            if (Itemtype.toString().equals("Item")) {
                                                ///////////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_SHORT).show();

                                                final String ttt = cursor.getString(5);
                                                final String pare = cursor.getString(6);
                                                final String pareid = cursor.getString(7);
                                                final String masss = cursor.getString(8);
                                                final String taxtaxtax = cursor.getString(9);
                                                final String taxtaxtaxname = cursor.getString(10);
                                                final String billnumb = cursor.getString(11);
                                                final String typebilll = cursor.getString(15);
                                                final String paymethodd = cursor.getString(16);
                                                final String nam = cursor.getString(1);

                                                final String idn = cursor.getString(20);

                                                final TableRow row3 = new TableRow(CancelActivity.this);
                                                row3.setLayoutParams(new TableLayout.LayoutParams(
                                                        TableRow.LayoutParams.MATCH_PARENT,
                                                        TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

                                                final TableLayout tableLayout4 = new TableLayout(CancelActivity.this);
                                                final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);

                                                if (a.toString().equals("0")){

                                                }else {
                                                    final TextView tv = new TextView(CancelActivity.this);
                                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                                    tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                                                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                    tv.setTextColor(Color.parseColor("#6a6a6d"));
                                                    tv.setText(a);
                                                    row3.addView(tv);


                                                    final String modidd = cursor.getString(0);
                                                    final int modid = Integer.parseInt(modidd);
                                                    tv.setId(modid);


                                                    name = cursor.getString(1);
                                                    final String iidd = cursor.getString(0);
                                                    final String hii = cursor.getString(1);
                                                    TextView tv1 = new TextView(CancelActivity.this);
                                                    tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.22f));
                                                    tv1.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                                                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                    tv1.setTextColor(Color.parseColor("#000000"));
                                                    tv1.setTypeface(Typeface.DEFAULT_BOLD);
                                                    tv1.setText(name);
                                                    row3.addView(tv1);

                                                    TextView textView = new TextView(CancelActivity.this);
                                                    textView.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                                    textView.setText(insert1_cc);;
                                                    textView.setGravity(Gravity.CENTER_VERTICAL);
                                                    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                    textView.setTextColor(Color.parseColor("#6a6a6d"));
                                                    row3.addView(textView);

                                                    //priceget = cursor.getString(3);
                                                    final TextView tv2 = new TextView(CancelActivity.this);
                                                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                                                    tv2.setGravity(Gravity.CENTER_VERTICAL);
                                                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                    tv2.setTextColor(Color.parseColor("#6a6a6d"));
                                                    final Float f = Float.parseFloat(cursor.getString(3));
                                                    price = String.valueOf(f);
                                                    tv2.setText(price);
                                                    //tv1.setText(c.getString(j));
                                                    row3.addView(tv2);

                                                    TextView textView1 = new TextView(CancelActivity.this);
                                                    textView1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                                    textView1.setText(insert1_cc);
                                                    textView1.setGravity(Gravity.CENTER_VERTICAL);
                                                    textView1.setTypeface(Typeface.DEFAULT_BOLD);
                                                    textView1.setTextColor(Color.parseColor("#000000"));
                                                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                    row3.addView(textView1);

                                                    //totalget = cursor.getString(4);
                                                    final TextView tv3 = new TextView(CancelActivity.this);
                                                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                                    tv3.setGravity(Gravity.CENTER_VERTICAL);
                                                    tv3.setTypeface(Typeface.DEFAULT_BOLD);
                                                    tv3.setTextColor(Color.parseColor("#000000"));
                                                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                    final String number = tv.getText().toString();
                                                    float newmul = Float.parseFloat(number);
                                                    //final float in = Float.parseFloat(cursor.getString(4));
                                                    float vbq = newmul * f;
                                                    final String multiply = String.format("%.2f", vbq);
                                                    //newmul = Integer.parseInt(multiply);
                                                    tv3.setText(multiply);
                                                    row3.addView(tv3);

                                                    final ImageView imageView = new ImageView(CancelActivity.this);
                                                    //imageView.setLayoutParams(new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
                                                    imageView.setImageResource(R.drawable.ic_remove_black_24dp);
                                                    imageView.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                                                    imageView.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                                                    LinearLayout.LayoutParams params = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                                            LinearLayout.LayoutParams.WRAP_CONTENT);
                                                    params.setMargins(6, 2, 6, 2);
                                                    imageView.setLayoutParams(params);
                                                    row3.addView(imageView);

                                                    imageView.setOnClickListener(new View.OnClickListener() {
                                                        @Override
                                                        public void onClick(View v) {
                                                            /////////////////Toast.makeText(CancelActivity.this, " item name is "+nam+" id is "+idis, Toast.LENGTH_SHORT).show();

                                                            ///////////////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_SHORT).show();

                                                            tableLayout2.removeView(row3);
                                                            tableLayout2.removeView(tableLayout4);


                                                            Cursor resetmode1 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + nam + "' AND _id = '" + idis + "' ", null);
                                                            while (resetmode1.moveToNext()) {

                                                                /////////////////Toast.makeText(CancelActivity.this, "deleted item "+hii+" and its id is "+modidd , Toast.LENGTH_SHORT).show();
                                                                ///////////////Toast.makeText(CancelActivity.this, "123123" , Toast.LENGTH_SHORT).show();

//                                                        final String iidd = resetmode1.getString(0);
//                                                        /////////////////Toast.makeText(CancelActivity.this, "id is " + iidd, Toast.LENGTH_SHORT).show();
//                                                        String where = "_id = '" + idis + "' ";
//                                                        db1.delete("All_Sales_Cancelled", where, new String[]{});
//                                                        updateinventory(Integer.valueOf(idis));

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "");
                                                                String where = "_id = '" + idis + "'  AND bill_no = '"+billno.getText().toString()+"' ";



                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",idis)
                                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);




                                                                //      db1.update("All_sales", newValues, where, new String[]{});


                                                            }

                                                            resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + nam + "' AND parentid = '" + isid + "' ", null);
                                                            while (resetmode1.moveToNext()) {
                                                                String zx = resetmode1.getString(1);
                                                                String zxx = resetmode1.getString(0);
                                                                /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();
                                                                ///////////////Toast.makeText(CancelActivity.this, "1231231111" , Toast.LENGTH_SHORT).show();


                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "");
                                                                String where = "_id = '" + zxx + "'  AND bill_no = '"+billno.getText().toString()+"' ";



                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",zxx)
                                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);



                                                                //         db1.update("All_sales", newValues, where, new String[]{});

                                                            }
                                                            resetmode1.close();

                                                            hii();

                                                        }
                                                    });

//                                        ///////////////Toast.makeText(CancelActivity.this, "Item inserted "+name, Toast.LENGTH_SHORT).show();

                                                    Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + idn + "' AND deleted_not = 'delete' ", null);
                                                    if (modcursor.moveToFirst()){
                                                        do {
                                                            ////////Toast.makeText(MainActivity.this, "Modifiers are", Toast.LENGTH_SHORT).show();

                                                            final String modiname = modcursor.getString(1);
                                                            final String modiquan = modcursor.getString(2);
                                                            String modiprice = modcursor.getString(3);
                                                            String moditotal = modcursor.getString(4);
                                                            final String modiid = modcursor.getString(0);

                                                            TextView quantity, tvmod, modprice, tvmod1, tvmod2;

//                                                TableRow.LayoutParams tableRowParams = new TableRow.LayoutParams();
//                                                tableRowParams.setMargins(1, 1, 1, 1);
//                                                tableRowParams.weight = 1;

                                                            tableRow1[0] = new TableRow(CancelActivity.this);
                                                            //tableRow1[0].setPadding(55, 0, 0, 0);
                                                            //tableRow.setBackgroundColor(Color.BLACK);

                                                            TextView textView2 = new TextView(CancelActivity.this);
                                                            textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                                            textView2.setText("");
                                                            tableRow1[0].addView(textView2);

                                                            ImageView imageView1 = new ImageView(CancelActivity.this);
                                                            //imageView1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                                            imageView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.22f));
                                                            imageView1.setImageResource(R.drawable.mod_filter);
                                                            tableRow1[0].addView(imageView1);

                                                            quantity = new TextView(CancelActivity.this);
                                                            String getquan = tv.getText().toString();
                                                            quantity.setText(modiquan);


                                                            //int  modid = Integer.parseInt(idd);
                                                            //int newmodid = modid+1;
                                                            //contentValues.put("_id", "1");

                                                            tvmod = new TextView(CancelActivity.this);
                                                            tvmod.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.00f));
                                                            //tvmod.setPadding(100, 0, 0, 0);
                                                            tvmod.setText(modiname);
                                                            tvmod.setGravity(Gravity.CENTER_VERTICAL);
                                                            tvmod.setTextColor(Color.parseColor("#000000"));
                                                            tableRow1[0].addView(tvmod);

                                                            TextView symbol = new TextView(CancelActivity.this);
                                                            //symbol.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                                            symbol.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                                            symbol.setText(insert1_cc);;
                                                            symbol.setGravity(Gravity.CENTER_VERTICAL);
                                                            symbol.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                            symbol.setTextColor(Color.parseColor("#6a6a6d"));
                                                            tableRow1[0].addView(symbol);

                                                            tvmod1 = new TextView(CancelActivity.this);
                                                            tvmod1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                                                            tvmod1.setGravity(Gravity.CENTER_VERTICAL);
                                                            tvmod1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                            tvmod1.setTextColor(Color.parseColor("#6a6a6d"));
                                                            tvmod1.setText(modiprice);
                                                            tableRow1[0].addView(tvmod1);

                                                            TextView symbol1 = new TextView(CancelActivity.this);
                                                            //symbol1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                                            symbol1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                                            symbol1.setText(insert1_cc);;
                                                            symbol1.setGravity(Gravity.CENTER_VERTICAL);
                                                            symbol1.setTypeface(Typeface.DEFAULT_BOLD);
                                                            symbol1.setTextColor(Color.parseColor("#000000"));
                                                            symbol1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                            tableRow1[0].addView(symbol1);

                                                            tvmod2 = new TextView(CancelActivity.this);
                                                            tvmod2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                                            String modtotal = String.valueOf(1 * Float.parseFloat(modiprice));
                                                            tvmod2.setText(modtotal);
                                                            tvmod2.setGravity(Gravity.CENTER_VERTICAL);
                                                            tvmod2.setTypeface(Typeface.DEFAULT_BOLD);
                                                            tvmod2.setTextColor(Color.parseColor("#000000"));
                                                            tvmod2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                                            tableRow1[0].addView(tvmod2);

                                                            final ImageView imageView2 = new ImageView(CancelActivity.this);
                                                            //imageView.setLayoutParams(new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
                                                            imageView2.setImageResource(R.drawable.ic_remove_black_24dp);
                                                            imageView2.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                                                            imageView2.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
//                                                        imageView2.setImageResource(R.drawable.cancel_order_close);
//                                                        imageView2.setBackgroundResource(R.drawable.edit_quantity);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                                                            LinearLayout.LayoutParams params1 = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                                                    LinearLayout.LayoutParams.WRAP_CONTENT);
                                                            params1.setMargins(6, 2, 6, 2);
                                                            imageView2.setLayoutParams(params1);
                                                            tableRow1[0].addView(imageView2);

//                                            ///////////////Toast.makeText(CancelActivity.this, "Modifiers inserted "+modiname, Toast.LENGTH_SHORT).show();

                                                            final TableRow finalTableRow = tableRow[0];
                                                            imageView2.setOnClickListener(new View.OnClickListener() {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    ///////////////Toast.makeText(CancelActivity.this, "delete modifier 111111111 " + modiname+" mod id is "+modiid, Toast.LENGTH_SHORT).show();
                                                                    ///////////////Toast.makeText(CancelActivity.this, " item parent is "+nam+" parent id is "+isid , Toast.LENGTH_SHORT).show();

                                                                    Cursor resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '" + nam + "' AND parentid = '" + isid + "' ", null);
                                                                    while (resetmode1.moveToNext()) {
                                                                        String zx = resetmode1.getString(1);
                                                                        String zxx = resetmode1.getString(0);
                                                                        ///////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();

                                                                        ///////////////Toast.makeText(CancelActivity.this, "1231232222" , Toast.LENGTH_SHORT).show();

                                                                        ContentValues newValues = new ContentValues();
                                                                        newValues.put("deleted_not", "");
                                                                        String where = "_id = '" + zxx + "'  AND bill_no = '"+billno.getText().toString()+"' ";



                                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                        getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProvider.AUTHORITY)
                                                                                .path("All_sales")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("_id",zxx)
                                                                                .appendQueryParameter("bill_no",billno.getText().toString())
                                                                                .build();
                                                                        getContentResolver().notifyChange(resultUri, null);




                                                                        //        db1.update("All_sales", newValues, where, new String[]{});

                                                                    }

                                                                }
                                                            });

                                                            hii( );


                                                            tableLayout4.addView(tableRow1[0]);
                                                        }while (modcursor.moveToNext());
                                                    }


                                                    modcursor.close();

                                                    tableLayout2.addView(row3);
                                                    ///////////////Toast.makeText(CancelActivity.this, "11", Toast.LENGTH_SHORT).show();

                                                    tableLayout2.addView(tableLayout4);
                                                }

                                            }
//                                        else {
//
//
//                                            tableRow1[0] = new TableRow(CancelActivity.this);
//                                            tableRow1[0].setPadding(55, 0, 0, 0);
//
//                                            final TableLayout tableLayout4 = new TableLayout(CancelActivity.this);
//
//                                            TextView textView2 = new TextView(CancelActivity.this);
//                                            textView2.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                                            //String modtotal = String.valueOf(Integer.parseInt(modiquan) * Integer.parseInt(modiprice));
//                                            textView2.setText("hiiiiiiiiiii");
//                                            textView2.setPadding(0, 0, 0, 0);
//                                            textView2.setTextColor(Color.parseColor("#000000"));
//                                            tableRow1[0].addView(textView2);
//
//                                            tableLayout4.addView(tableRow1[0]);
//
//                                            tableLayout2.addView(tableLayout4);
//
//                                        }

                                        }
                                        cursor.close();

                                        hii();

                                    } else {
                                        ///////////////Toast.makeText(CancelActivity.this, "Modifiers assigned, quantity is greater than 1 ", Toast.LENGTH_SHORT).show();

                                        if (tv.getText().toString().equals("1")){
                                            ///////////////Toast.makeText(CancelActivity.this, "only 1 only 1", Toast.LENGTH_SHORT).show();
                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                            if (cursor1.moveToFirst()) {
                                                do {
                                                    oorr = cursor1.getString(20);
                                                    nnaa = cursor1.getString(1);
                                                    String aacc = cursor1.getString(3);

                                                    ContentValues newValues = new ContentValues();
                                                    newValues.put("deleted_not", "delete");
                                                    newValues.put("quantitycopy", "0");
                                                    newValues.put("modifiedquantity", a);
                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a)*Float.parseFloat(aacc)));
                                                    String where1 = "parentid = '" + oorr + "' AND bill_no = '"+billno.getText().toString()+"' ";



                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                    getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("All_sales")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("parentid",oorr)
                                                            .appendQueryParameter("bill_no",billno.getText().toString())
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);





                                                    //   db1.update("All_sales", newValues, where1, new String[]{});
                                                    ///////////////Toast.makeText(CancelActivity.this, " item "+oorr+" id "+modid+" name "+nnaa, Toast.LENGTH_SHORT).show();

                                                } while (cursor1.moveToNext());
                                            }
                                            cursor1.close();

                                            ContentValues newValues = new ContentValues();
                                            newValues.put("deleted_not", "delete");
                                            newValues.put("quantitycopy", "0");
                                            newValues.put("modifiedquantity", a);
                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a)*Float.parseFloat(aacc1)));
                                            String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";



                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                            getContentResolver().update(contentUri, newValues,where,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_sales")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",modidd)
                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);





                                            //     db1.update("All_sales", newValues, where, new String[]{});
                                            ///////////////Toast.makeText(CancelActivity.this, " modifier "+modidd, Toast.LENGTH_SHORT).show();
                                            hii( );

                                        }else {
                                            ///////////////Toast.makeText(CancelActivity.this, ">1, >1", Toast.LENGTH_SHORT).show();
                                            final Dialog dialog = new Dialog(CancelActivity.this, R.style.notitle);
                                            dialog.setContentView(R.layout.quantity_edit);
                                            dialog.setTitle(Html.fromHtml("<font color='#ffffff'>Edit qty</font>"));
                                            ///////////////Toast.makeText(CancelActivity.this, "aaaaa", Toast.LENGTH_SHORT).show();
                                            dialog.show();

                                            TextView inn = (TextView) dialog.findViewById(R.id.inn);
                                            TextView inn1 = (TextView) dialog.findViewById(R.id.inn1);
                                            inn.setText(insert1_cc);
                                            inn1.setText(insert1_cc);

                                            Cursor cvb = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
                                            if (cvb.moveToFirst()){
                                                panetwo.setVisibility(View.VISIBLE);
                                                panethree.setVisibility(View.VISIBLE);
                                            }else {
                                                panetwo.setVisibility(View.GONE);
                                                panethree.setVisibility(View.INVISIBLE);
                                            }
                                            cvb.close();

                                            Cursor cursorcheck1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                            while (cursorcheck1.moveToNext()) {

                                                final String assmod = cursorcheck1.getString(1);
                                                final String ppp = cursorcheck1.getString(3);

                                                /////////////////Toast.makeText(CancelActivity.this, "assigned Modifiers are " + assmod, Toast.LENGTH_SHORT).show();


                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                if (cursor1.moveToFirst()){
                                                    do {
                                                        String qa = cursor1.getString(3);
                                                        /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                        Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
                                                        if (c1ursor1.moveToFirst()) {
                                                            do {

                                                                float aq = c1ursor1.getFloat(0);
                                                                String aqq = String.valueOf(aq);

                                                                //String aq = c1ursor1.getString(3);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                cal1 = Float.parseFloat(qa)+Float.parseFloat(aqq);

                                                                //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                            }while (c1ursor1.moveToNext());
                                                        }
                                                        c1ursor1.close();
                                                    }while (cursor1.moveToNext());
                                                }
                                                cursor1.close();


                                                final TextView editText = (TextView) dialog.findViewById(R.id.displayquantity);
                                                editText.setText(tv.getText().toString());

                                                final TextView textView = (TextView) dialog.findViewById(R.id.itemname);
                                                textView.setText(hii);

                                                final TextView textView1 = (TextView) dialog.findViewById(R.id.price);
                                                float zx = Float.parseFloat(tv.getText().toString())*cal1;
                                                textView1.setText(String.format("%.2f", zx));

                                                final TextView disc_var_textview = (TextView) dialog.findViewById(R.id.disc_price);

                                                if (disc_31.toString().equals("0")){
                                                    disc_var_textview.setText("0");
                                                }else {
                                                    TextView cz = new TextView(CancelActivity.this);
                                                    cz.setText(disc_notorig_quan1);
                                                    if (cz.getText().toString().equals("")){
                                                        if (disc_orig_type1.toString().equals("%")){
                                                            float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) * Float.parseFloat(editText.getText().toString());
                                                            String bb = String.format("%.2f", cws);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }else {
                                                            float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                            //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_orig_quan1);
                                                            float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                            String bb = String.format("%.2f", cws1);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }
                                                    }else {
                                                        if (disc_orig_type1.toString().equals("%")){
                                                            float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) *
                                                                    (Float.parseFloat(editText.getText().toString()));
                                                            String bb = String.format("%.2f", cws);
                                                            disc_var_textview.setText("("+bb+")");
                                                            /////////Toast.makeText(CancelActivity.this, "aa "+bb, Toast.LENGTH_SHORT).show();
                                                        }else {
                                                            float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                            //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_notorig_quan1);
                                                            float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                            String bb = String.format("%.2f", cws1);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }
                                                    }
//                                                    if (disc_27.toString().equals("%")){
//                                                        float vq = (Float.parseFloat(disc_orig_price1)/100) * (Float.parseFloat(disc_31)) * (Float.parseFloat(disc_orig_quan1));
//                                                    }else {
//
//                                                    }
//                                                    disc_var_textview.setText(disc_31);
                                                }


//                                                Button clse = (Button)dialog.findViewById(R.id.btndelete);
//                                                clse.setOnClickListener(new View.OnClickListener() {
//                                                    @Override
//                                                    public void onClick(View v) {
//                                                        dialog.dismiss();
//                                                    }
//                                                });


                                                ImageButton imageView2 = (ImageButton) dialog.findViewById(R.id.quantitydecrease);
                                                imageView2.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        final TextView editText1 = (TextView) dialog.findViewById(R.id.displayquantity);
                                                        String qa = "0";
                                                        String addorsub = editText.getText().toString();
                                                        int clickcountsss = 0;
                                                        float incc = Float.parseFloat(addorsub);
                                                        clickcountsss++;

                                                        float bd = incc - clickcountsss;
                                                        newv = String.format("%.2f", bd);
                                                        //newv = String.valueOf(incc - clickcountsss);
                                                        newvv = Float.parseFloat(newv);



                                                        if (newvv < 0) {
                                                            //row.removeAllViews();
                                                        } else {
                                                            editText.setText(newv);
                                                        }

                                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                        if (cursor1.moveToFirst()){
                                                            do {
                                                                qa = cursor1.getString(3);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                                Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
                                                                if (c1ursor1.moveToFirst()) {
                                                                    do {

                                                                        float aq = c1ursor1.getFloat(0);
                                                                        String aqq = String.valueOf(aq);

                                                                        //String aq = c1ursor1.getString(3);
                                                                        /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                        cal = Float.parseFloat(qa)+Float.parseFloat(aqq);

                                                                        //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                        /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                                    }while (c1ursor1.moveToNext());
                                                                }
                                                                c1ursor1.close();
                                                            }while (cursor1.moveToNext());
                                                        }
                                                        cursor1.close();

                                                        final Cursor cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = '' OR deleted_not = 'decrease') ", null);
                                                        if (cursor.moveToFirst()){
                                                            final String disc_notorig_quan1 = cursor.getString(22);
                                                            cz = new TextView(CancelActivity.this);
                                                            cz.setText(disc_notorig_quan1);
                                                        }else {
                                                            cz = new TextView(CancelActivity.this);
                                                            cz.setText("");
                                                        }

                                                        if (editText.getText().toString().equals("0") || editText.getText().toString().equals("0.0") || editText.getText().toString().equals("0.00")){
                                                            textView1.setText("0");
                                                        }else {
                                                            Float cc = newvv*cal;
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+cc, Toast.LENGTH_SHORT).show();
                                                            textView1.setText(String.format("%.2f", cc));

                                                            if (cz.getText().toString().equals("")){
                                                                if (disc_orig_type1.toString().equals("%")){
                                                                    float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                    String ug = String.format("%.2f", cce);
                                                                    disc_var_textview.setText(ug);
                                                                }else {
                                                                    float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * Float.parseFloat(editText1.getText().toString());
                                                                    float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                    String bb = String.format("%.2f", cws1);
                                                                    disc_var_textview.setText("("+bb+")");
                                                                }
                                                            }else {
                                                                if (disc_orig_type1.toString().equals("%")){
                                                                    float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                    String ug = String.format("%.2f", cce);
                                                                    disc_var_textview.setText(ug);
                                                                    ///////////Toast.makeText(CancelActivity.this, "aa "+disc_var_textview.getText().toString(), Toast.LENGTH_SHORT).show();
                                                                }else {
                                                                    float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText1.getText().toString()));
                                                                    float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                    String bb = String.format("%.2f", cws1);
                                                                    disc_var_textview.setText("("+bb+")");
                                                                }
                                                            }

//                                                            float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText.getText().toString()) * Float.parseFloat(disc_31));
//                                                            String ug = String.format("%.2f", cce);
//                                                            disc_var_textview.setText(ug);
                                                        }

                                                    }
                                                });

                                                Button removeitem = (Button)dialog.findViewById(R.id.quantityremove);
                                                removeitem.setVisibility(View.VISIBLE);
                                                removeitem.setText("Return item");
                                                removeitem.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                oorr = cursor1.getString(20);
                                                                nnaa = cursor1.getString(1);
                                                                String aacc = cursor1.getString(56);
                                                                String ccaa = cursor1.getString(2);
                                                                String stt = cursor1.getString(0);

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "delete");
                                                                newValues.put("quantitycopy", "0");
                                                                newValues.put("modifiedquantity", a);
                                                                newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(ccaa)*Float.parseFloat(aacc)));
                                                                String where1 = "_id = '" + stt + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",stt)
                                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);




                                                                //     db1.update("All_sales", newValues, where1, new String[]{});
                                                                ///////////////Toast.makeText(CancelActivity.this, " item "+oorr+" id "+stt+" name "+nnaa, Toast.LENGTH_SHORT).show();

                                                            } while (cursor1.moveToNext());
                                                        }
                                                        cursor1.close();

                                                        ContentValues newValues = new ContentValues();
                                                        newValues.put("deleted_not", "delete");
                                                        newValues.put("quantitycopy", "0");
                                                        newValues.put("modifiedquantity", a);
                                                        newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a)*Float.parseFloat(aacc1)));
                                                        String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";

                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                        getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProvider.AUTHORITY)
                                                                .path("All_sales")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id",modidd)
                                                                .appendQueryParameter("bill_no",billno.getText().toString())
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);





                                                        //    db1.update("All_sales", newValues, where, new String[]{});
                                                        ///////////////Toast.makeText(CancelActivity.this, " modifier "+modidd, Toast.LENGTH_SHORT).show();
                                                        dialog.dismiss();
                                                        hii();
                                                    }
                                                });

                                                ImageView ok = (ImageView) dialog.findViewById(R.id.save);
                                                ok.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {

                                                        String box = editText.getText().toString();
                                                        final String number1 = tv.getText().toString();

                                                        if (number1.toString().equals(box)){
                                                            dialog.dismiss();
                                                        }else {
                                                            if (Float.parseFloat(editText.getText().toString()) > Float.parseFloat(tv.getText().toString())) {
                                                                ///////////////Toast.makeText(CancelActivity.this, "Quantity has to be lesser than " + tv.getText().toString(), Toast.LENGTH_SHORT).show();
                                                            } else {
                                                                if (Float.parseFloat(number1) <= 0 || Float.parseFloat(box) <= 0) {
                                                                    //final EditText editText2 = (EditText) dialog.findViewById(R.id.displayquantity);
                                                                    //String box2 = editText2.getText().toString();
                                                                    row.removeAllViews();
                                                                    //row2.removeAllViews();

                                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                    if (cursor1.moveToFirst()) {
                                                                        do {
                                                                            oorr = cursor1.getString(20);
                                                                            String st21 = cursor1.getString(2);
                                                                            String aacc = cursor1.getString(3);

                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("deleted_not", "delete");
                                                                            newValues.put("quantitycopy", "0");
                                                                            newValues.put("modifiedquantity", st21);
                                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(st21) * Float.parseFloat(aacc)));
                                                                            String where1 = "parentid = '" + oorr + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("parentid", oorr)
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //    db1.update("All_sales", newValues, where1, new String[]{});
                                                                            ///////////////Toast.makeText(CancelActivity.this, "1 "+oorr+" id "+modid, Toast.LENGTH_SHORT).show();

                                                                        } while (cursor1.moveToNext());
                                                                    }
                                                                    cursor1.close();

                                                                    ContentValues newValues = new ContentValues();
                                                                    newValues.put("deleted_not", "delete");
                                                                    newValues.put("quantitycopy", "0");
                                                                    newValues.put("modifiedquantity", a);
                                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a) * Float.parseFloat(aacc1)));
                                                                    String where = "_id = '" + modidd + "' AND bill_no = '" + billno.getText().toString() + "' ";
                                                                    ///////////////Toast.makeText(CancelActivity.this, "2 "+oorr+" id "+modidd, Toast.LENGTH_SHORT).show();


                                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                    getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProvider.AUTHORITY)
                                                                            .path("All_sales")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", modidd)
                                                                            .appendQueryParameter("bill_no", billno.getText().toString())
                                                                            .build();
                                                                    getContentResolver().notifyChange(resultUri, null);


                                                                    //      db1.update("All_sales", newValues, where, new String[]{});


                                                                } else {
                                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                    if (cursor1.moveToFirst()) {
                                                                        do {
                                                                            oorr = cursor1.getString(20);
                                                                            String st21 = cursor1.getString(2);
                                                                            String ppp = cursor1.getString(3);
                                                                            String modqty = cursor1.getString(22);
                                                                            String qtycopy = cursor1.getString(23);

                                                                            if (modqty.toString().equals("")) {
                                                                                ContentValues newValues = new ContentValues();
                                                                                newValues.put("modifiedquantity", String.valueOf(Float.parseFloat(tv.getText().toString()) - Float.parseFloat(editText.getText().toString())));
                                                                                newValues.put("quantitycopy", editText.getText().toString());
                                                                                newValues.put("deleted_not", "decrease");
                                                                                newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Float.parseFloat(tv.getText().toString()) - Float.parseFloat(editText.getText().toString()))) * Float.parseFloat(ppp)));
                                                                                String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                                getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                                resultUri = new Uri.Builder()
                                                                                        .scheme("content")
                                                                                        .authority(StubProvider.AUTHORITY)
                                                                                        .path("All_sales")
                                                                                        .appendQueryParameter("operation", "update")
                                                                                        .appendQueryParameter("_id", modidd)
                                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                        .build();
                                                                                getContentResolver().notifyChange(resultUri, null);


                                                                                //          db1.update("All_sales", newValues, where1, new String[]{});
                                                                            } else {
                                                                                ContentValues newValues = new ContentValues();
                                                                                newValues.put("modifiedquantity", String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty)));
                                                                                newValues.put("quantitycopy", editText.getText().toString());
                                                                                newValues.put("deleted_not", "decrease");
                                                                                newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty))) * Float.parseFloat(ppp)));
                                                                                String where1 = "_id = '" + modid + "'  AND bill_no = '" + billno.getText().toString() + "' ";

                                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                                getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                                resultUri = new Uri.Builder()
                                                                                        .scheme("content")
                                                                                        .authority(StubProvider.AUTHORITY)
                                                                                        .path("All_sales")
                                                                                        .appendQueryParameter("operation", "update")
                                                                                        .appendQueryParameter("_id", modidd)
                                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                        .build();
                                                                                getContentResolver().notifyChange(resultUri, null);


                                                                                //       db1.update("All_sales", newValues, where1, new String[]{});

                                                                                ///////////////Toast.makeText(CancelActivity.this, "modifqty = "+String.valueOf(Integer.parseInt(qtycopy) - Integer.parseInt(editText.getText().toString())+Integer.parseInt(modqty)), Toast.LENGTH_SHORT).show();
                                                                            }


                                                                            ///////////////Toast.makeText(CancelActivity.this, "3 "+oorr+" id "+modid+
                                                                            //"total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();


                                                                        } while (cursor1.moveToNext());
                                                                    }
                                                                    cursor1.close();

                                                                    Cursor c1ursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' AND deleted_not = '' ", null);
                                                                    if (c1ursor1.moveToFirst()) {
                                                                        do {
                                                                            String st = c1ursor1.getString(0);
                                                                            String st21 = c1ursor1.getString(2);
                                                                            String ppp = c1ursor1.getString(3);
                                                                            String modqty = c1ursor1.getString(22);
                                                                            String qtycopy = c1ursor1.getString(23);

                                                                            if (modqty.toString().equals("")) {
                                                                                ContentValues newValues = new ContentValues();
                                                                                newValues.put("modifiedquantity", String.valueOf(Float.parseFloat(tv.getText().toString()) - Float.parseFloat(editText.getText().toString())));
                                                                                newValues.put("quantitycopy", editText.getText().toString());
                                                                                newValues.put("deleted_not", "decrease");
                                                                                newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Float.parseFloat(tv.getText().toString()) - Float.parseFloat(editText.getText().toString()))) * Float.parseFloat(ppp)));
                                                                                String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";

                                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                                getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                                resultUri = new Uri.Builder()
                                                                                        .scheme("content")
                                                                                        .authority(StubProvider.AUTHORITY)
                                                                                        .path("All_sales")
                                                                                        .appendQueryParameter("operation", "update")
                                                                                        .appendQueryParameter("_id", st)
                                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                        .build();
                                                                                getContentResolver().notifyChange(resultUri, null);


                                                                                //     db1.update("All_sales", newValues, where, new String[]{});
                                                                            } else {
                                                                                ContentValues newValues = new ContentValues();
                                                                                newValues.put("modifiedquantity", String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty)));
                                                                                newValues.put("quantitycopy", editText.getText().toString());
                                                                                newValues.put("deleted_not", "decrease");
                                                                                newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty))) * Float.parseFloat(ppp)));
                                                                                String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                                getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                                resultUri = new Uri.Builder()
                                                                                        .scheme("content")
                                                                                        .authority(StubProvider.AUTHORITY)
                                                                                        .path("All_sales")
                                                                                        .appendQueryParameter("operation", "update")
                                                                                        .appendQueryParameter("_id", st)
                                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                        .build();
                                                                                getContentResolver().notifyChange(resultUri, null);


                                                                                //       db1.update("All_sales", newValues, where, new String[]{});
                                                                            }


                                                                            ///////////////Toast.makeText(CancelActivity.this, "4 "+oorr+" id "+st+
                                                                            //" total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();
                                                                        } while (c1ursor1.moveToNext());
                                                                    }
                                                                    c1ursor1.close();


                                                                    tv.setText(editText.getText().toString());
                                                                }
                                                                dialog.dismiss();
//                                                tv.setText(editText.getText().toString());
//                                                dialog.dismiss();
                                                            }
                                                            hii();
                                                        }

//                                                    db = openOrCreateDatabase("mydb", Context.MODE_PRIVATE, null);
//                                                    Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = '' OR deleted_not = 'decrease') = ''  ", null);
//                                                    if (cursor11.moveToFirst()) {
//                                                        levelel = cursor11.getInt(0);
//                                                        tatat = String.valueOf(level);
//                                                        ///////////////Toast.makeText(CancelActivity.this, "tottttal is "+tat, Toast.LENGTH_SHORT).show();
//                                                    }
//
//                                                    final String tot = String.valueOf(Float.parseFloat(tat));
//                                                    onlybillnew.setText(tot);

                                                    }
                                                });

                                                ImageView cancel = (ImageView) dialog.findViewById(R.id.btndelete);
                                                cancel.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        dialog.dismiss();
                                                    }
                                                });








                                            }
                                            cursorcheck1.close();

                                        }


                                    }


                                } else {
                                    ///////////////Toast.makeText(CancelActivity.this, "Modifiers not assigned ", Toast.LENGTH_SHORT).show();
                                    if (tv.getText().toString().equals("1")) {
                                        ///////////////Toast.makeText(CancelActivity.this, "Modifiers not assigned, quantity is 1 ", Toast.LENGTH_SHORT).show();


                                        Cursor resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND itemname = '" + hii + "' AND _id = '" + idid + "' ", null);
                                        ///////////////Toast.makeText(CancelActivity.this, "Bill num is "+billno.getText().toString()+" itemname is "+hii+" id is "+idid , Toast.LENGTH_SHORT).show();
                                        while (resetmode1.moveToNext()) {
                                            String zx = resetmode1.getString(1);
                                            String zxx = resetmode1.getString(0);
                                            String st = resetmode1.getString(3);
                                            /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();



                                            ContentValues newValues = new ContentValues();
                                            newValues.put("deleted_not", "delete");
                                            newValues.put("modifiedquantity", "1");
                                            newValues.put("quantitycopy", "0");
                                            newValues.put("modifiedtotal", st);
                                            String where = "_id = '" + idid + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                            getContentResolver().update(contentUri, newValues,where,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_sales")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",idid)
                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);


                                            //      db1.update("All_sales", newValues, where, new String[]{});
                                            hii( );

                                        }
                                        resetmode1.close();


                                    } else {
                                        ///////////////Toast.makeText(CancelActivity.this, "Modifiers not assigned, quantity is greater than 1 ", Toast.LENGTH_SHORT).show();

                                        final Dialog dialog = new Dialog(CancelActivity.this, R.style.notitle);
                                        dialog.setContentView(R.layout.quantity_edit);
                                        ///////////////Toast.makeText(CancelActivity.this, "bbbbb", Toast.LENGTH_SHORT).show();
                                        dialog.setTitle(Html.fromHtml("<font color='#ffffff'>Edit qty</font>"));
                                        dialog.show();

                                        TextView inn = (TextView) dialog.findViewById(R.id.inn);
                                        TextView inn1 = (TextView) dialog.findViewById(R.id.inn1);
                                        inn.setText(insert1_cc);
                                        inn1.setText(insert1_cc);

                                        Cursor cvb = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
                                        if (cvb.moveToFirst()){
                                            panetwo.setVisibility(View.VISIBLE);
                                            panethree.setVisibility(View.VISIBLE);
                                        }else {
                                            panetwo.setVisibility(View.GONE);
                                            panethree.setVisibility(View.INVISIBLE);
                                        }
                                        cvb.close();

                                        Cursor cursorcheck1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND mod_assigned = 'no' ", null);
                                        ///////////////Toast.makeText(CancelActivity.this, "dialog box >1 itemname "+hii, Toast.LENGTH_SHORT).show();
                                        while (cursorcheck1.moveToNext()) {

                                            ///////////////Toast.makeText(CancelActivity.this, "dialog box >1>1", Toast.LENGTH_SHORT).show();

                                            final String assmod = cursorcheck1.getString(1);
                                            final String ppp = cursorcheck1.getString(3);

                                            /////////////////Toast.makeText(CancelActivity.this, "assigned Modifiers are " + assmod, Toast.LENGTH_SHORT).show();


                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                            if (cursor1.moveToFirst()){
                                                do {
                                                    String qa = cursor1.getString(3);
                                                    /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                    Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
                                                    if (c1ursor1.moveToFirst()) {
                                                        do {

                                                            float aq = c1ursor1.getFloat(0);
                                                            String aqq = String.valueOf(aq);

                                                            //String aq = c1ursor1.getString(3);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                            cal1 = Float.parseFloat(qa)+Float.parseFloat(aqq);

                                                            //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                        }while (c1ursor1.moveToNext());
                                                    }
                                                    c1ursor1.close();
                                                }while (cursor1.moveToNext());
                                            }
                                            cursor1.close();


                                            final TextView editText = (TextView) dialog.findViewById(R.id.displayquantity);
                                            editText.setText(tv.getText().toString());

                                            final TextView textView = (TextView) dialog.findViewById(R.id.itemname);
                                            textView.setText(hii);

                                            final TextView textView1 = (TextView) dialog.findViewById(R.id.price);
                                            float zx = Float.parseFloat(tv.getText().toString())*cal1;
                                            textView1.setText(String.format("%.2f", zx));

                                            final TextView disc_var_textview = (TextView) dialog.findViewById(R.id.disc_price);

                                            if (disc_31.toString().equals("0")){
                                                disc_var_textview.setText("0");
                                            }else {
                                                TextView cz = new TextView(CancelActivity.this);
                                                cz.setText(disc_notorig_quan1);
                                                if (cz.getText().toString().equals("")){
                                                    if (disc_orig_type1.toString().equals("%")){
                                                        float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) * Float.parseFloat(editText.getText().toString());
                                                        String bb = String.format("%.2f", cws);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }else {
                                                        float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                        //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_orig_quan1);
                                                        float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                        String bb = String.format("%.2f", cws1);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }
                                                }else {
                                                    if (disc_orig_type1.toString().equals("%")){
                                                        float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) *
                                                                (Float.parseFloat(editText.getText().toString()));
                                                        String bb = String.format("%.2f", cws);
                                                        disc_var_textview.setText("("+bb+")");
                                                        /////////Toast.makeText(CancelActivity.this, "bb "+bb, Toast.LENGTH_SHORT).show();
                                                    }else {
                                                        float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                        //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_notorig_quan1);
                                                        float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                        String bb = String.format("%.2f", cws1);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }
                                                }
                                            }

//                                        ImageView clse = (ImageView)dialog.findViewById(R.id.closetext);
//                                        clse.setOnClickListener(new View.OnClickListener() {
//                                            @Override
//                                            public void onClick(View v) {
//                                                dialog.dismiss();
//                                            }
//                                        });


                                            ImageButton imageView2 = (ImageButton) dialog.findViewById(R.id.quantitydecrease);
                                            imageView2.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    final TextView editText1 = (TextView) dialog.findViewById(R.id.displayquantity);
                                                    String qa = "0";
                                                    String addorsub = editText.getText().toString();
                                                    int clickcountsss = 0;
                                                    float incc = Float.parseFloat(addorsub);
                                                    clickcountsss++;

                                                    float bd = incc - clickcountsss;
                                                    newv = String.format("%.2f", bd);
                                                    //newv = String.valueOf(incc - clickcountsss);
                                                    newvv = Float.parseFloat(newv);



                                                    if (newvv < 0) {
                                                        //row.removeAllViews();
                                                    } else {
                                                        editText.setText(newv);
                                                    }

                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                    if (cursor1.moveToFirst()){
                                                        do {
                                                            qa = cursor1.getString(3);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                            Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
                                                            if (c1ursor1.moveToFirst()) {
                                                                do {

                                                                    float aq = c1ursor1.getFloat(0);
                                                                    String aqq = String.valueOf(aq);

                                                                    //String aq = c1ursor1.getString(3);
                                                                    /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                    cal = Float.parseFloat(qa)+Float.parseFloat(aqq);

                                                                    //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                    /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                                }while (c1ursor1.moveToNext());
                                                            }
                                                            c1ursor1.close();
                                                        }while (cursor1.moveToNext());
                                                    }
                                                    cursor1.close();

                                                    final Cursor cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = '' OR deleted_not = 'decrease') ", null);
                                                    if (cursor.moveToFirst()){
                                                        final String disc_notorig_quan1 = cursor.getString(22);
                                                        cz = new TextView(CancelActivity.this);
                                                        cz.setText(disc_notorig_quan1);
                                                    }else {
                                                        cz = new TextView(CancelActivity.this);
                                                        cz.setText("");
                                                    }

                                                    if (editText.getText().toString().equals("0") || editText.getText().toString().equals("0.0") || editText.getText().toString().equals("0.00")){
                                                        textView1.setText("0");
                                                    }else {
                                                        Float cc = newvv*cal;
                                                        /////////////////Toast.makeText(CancelActivity.this, " "+cc, Toast.LENGTH_SHORT).show();
                                                        textView1.setText(String.format("%.2f", cc));

                                                        if (cz.getText().toString().equals("")){
                                                            if (disc_orig_type1.toString().equals("%")){
                                                                float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                String ug = String.format("%.2f", cce);
                                                                disc_var_textview.setText(ug);
                                                            }else {
                                                                float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * Float.parseFloat(editText1.getText().toString());
                                                                float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                String bb = String.format("%.2f", cws1);
                                                                disc_var_textview.setText("("+bb+")");
                                                            }
                                                        }else {
                                                            if (disc_orig_type1.toString().equals("%")){
                                                                float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                String ug = String.format("%.2f", cce);
                                                                disc_var_textview.setText(ug);
                                                                ///////////Toast.makeText(CancelActivity.this, "aa "+disc_var_textview.getText().toString(), Toast.LENGTH_SHORT).show();
                                                            }else {
                                                                float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText1.getText().toString()));
                                                                float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                String bb = String.format("%.2f", cws1);
                                                                disc_var_textview.setText("("+bb+")");
                                                            }
                                                        }
                                                    }


                                                }
                                            });

                                            Button removeitem = (Button)dialog.findViewById(R.id.quantityremove);
                                            removeitem.setVisibility(View.VISIBLE);
                                            removeitem.setText("Return item");
                                            removeitem.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            oorr = cursor1.getString(20);
                                                            nnaa = cursor1.getString(1);
                                                            String aacc = cursor1.getString(3);
                                                            String ccaa = cursor1.getString(2);
                                                            String stt = cursor1.getString(0);

                                                            ContentValues newValues = new ContentValues();
                                                            newValues.put("deleted_not", "delete");
                                                            newValues.put("quantitycopy", "0");
                                                            newValues.put("modifiedquantity", a);
                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(ccaa)*Float.parseFloat(aacc)));
                                                            String where1 = "_id = '" + stt + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                            getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProvider.AUTHORITY)
                                                                    .path("All_sales")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id",stt)
                                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                                    .build();
                                                            getContentResolver().notifyChange(resultUri, null);



                                                            //      db1.update("All_sales", newValues, where1, new String[]{});
                                                            ///////////////Toast.makeText(CancelActivity.this, " item "+oorr+" id "+stt+" name "+nnaa, Toast.LENGTH_SHORT).show();

                                                        } while (cursor1.moveToNext());
                                                    }
                                                    cursor1.close();

                                                    ContentValues newValues = new ContentValues();
                                                    newValues.put("deleted_not", "delete");
                                                    newValues.put("quantitycopy", "0");
                                                    newValues.put("modifiedquantity", a);
                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a)*Float.parseFloat(aacc1)));
                                                    String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";




                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                    getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("All_sales")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id",modidd)
                                                            .appendQueryParameter("bill_no",billno.getText().toString())
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);




                                                    //        db1.update("All_sales", newValues, where, new String[]{});
                                                    ///////////////Toast.makeText(CancelActivity.this, " modifier "+modidd, Toast.LENGTH_SHORT).show();
                                                    dialog.dismiss();
                                                    hii( );
                                                }
                                            });

                                            ImageView ok = (ImageView) dialog.findViewById(R.id.save);
                                            ok.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {

                                                    String box = editText.getText().toString();
                                                    final String number1 = tv.getText().toString();

                                                    if (number1.toString().equals(box)){
                                                        dialog.dismiss();
                                                    }else {
                                                        if (Float.parseFloat(editText.getText().toString()) > Float.parseFloat(tv.getText().toString())) {
                                                            ///////////////Toast.makeText(CancelActivity.this, "Quantity has to be lesser than " + tv.getText().toString(), Toast.LENGTH_SHORT).show();
                                                        } else {
                                                            if (Float.parseFloat(number1) <= 0 || Float.parseFloat(box) <= 0) {
                                                                //final EditText editText2 = (EditText) dialog.findViewById(R.id.displayquantity);
                                                                //String box2 = editText2.getText().toString();
                                                                row.removeAllViews();
                                                                //row2.removeAllViews();

                                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                if (cursor1.moveToFirst()) {
                                                                    do {
                                                                        oorr = cursor1.getString(20);
                                                                        String st21 = cursor1.getString(2);
                                                                        String aacc = cursor1.getString(3);

                                                                        ContentValues newValues = new ContentValues();
                                                                        newValues.put("deleted_not", "delete");
                                                                        newValues.put("quantitycopy", "0");
                                                                        newValues.put("modifiedquantity", st21);
                                                                        newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(st21) * Float.parseFloat(aacc)));
                                                                        String where1 = "parentid = '" + oorr + "'  AND bill_no = '" + billno.getText().toString() + "' ";


                                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                        getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProvider.AUTHORITY)
                                                                                .path("All_sales")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("parentid", oorr)
                                                                                .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                .build();
                                                                        getContentResolver().notifyChange(resultUri, null);


                                                                        //       db1.update("All_sales", newValues, where1, new String[]{});
                                                                        ///////////////Toast.makeText(CancelActivity.this, "1 "+oorr+" id "+modid, Toast.LENGTH_SHORT).show();

                                                                    } while (cursor1.moveToNext());
                                                                }
                                                                cursor1.close();

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "delete");
                                                                newValues.put("quantitycopy", "0");
                                                                newValues.put("modifiedquantity", a);
                                                                newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a) * Float.parseFloat(aacc1)));
                                                                String where = "_id = '" + modidd + "'  AND bill_no = '" + billno.getText().toString() + "' ";
                                                                ///////////////Toast.makeText(CancelActivity.this, "2 "+oorr+" id "+modidd, Toast.LENGTH_SHORT).show();


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", modidd)
                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);


                                                                //    db1.update("All_sales", newValues, where, new String[]{});


                                                            } else {
                                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                if (cursor1.moveToFirst()) {
                                                                    do {
                                                                        oorr = cursor1.getString(20);
                                                                        String st21 = cursor1.getString(2);
                                                                        String ppp = cursor1.getString(3);
                                                                        String modqty = cursor1.getString(22);
                                                                        String qtycopy = cursor1.getString(23);

                                                                        if (modqty.toString().equals("")) {
                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", String.valueOf(Float.parseFloat(tv.getText().toString()) - Float.parseFloat(editText.getText().toString())));
                                                                            newValues.put("quantitycopy", editText.getText().toString());
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Float.parseFloat(tv.getText().toString()) - Float.parseFloat(editText.getText().toString()))) * Float.parseFloat(ppp)));
                                                                            String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", modidd)
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //   db1.update("All_sales", newValues, where1, new String[]{});
                                                                        } else {
                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty)));
                                                                            newValues.put("quantitycopy", editText.getText().toString());
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty))) * Float.parseFloat(ppp)));
                                                                            String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", modidd)
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //     db1.update("All_sales", newValues, where1, new String[]{});

                                                                            ///////////////Toast.makeText(CancelActivity.this, "modifqty = "+String.valueOf(Integer.parseInt(qtycopy) - Integer.parseInt(editText.getText().toString())+Integer.parseInt(modqty)), Toast.LENGTH_SHORT).show();
                                                                        }


                                                                        ///////////////Toast.makeText(CancelActivity.this, "3 "+oorr+" id "+modid+
                                                                        //"total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();


                                                                    } while (cursor1.moveToNext());
                                                                }
                                                                cursor1.close();

                                                                Cursor c1ursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' AND deleted_not = '' ", null);
                                                                if (c1ursor1.moveToFirst()) {
                                                                    do {
                                                                        String st = c1ursor1.getString(0);
                                                                        String st21 = c1ursor1.getString(2);
                                                                        String ppp = c1ursor1.getString(3);
                                                                        String modqty = c1ursor1.getString(22);
                                                                        String qtycopy = c1ursor1.getString(23);

                                                                        if (modqty.toString().equals("")) {
                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", String.valueOf(Float.parseFloat(tv.getText().toString()) - Float.parseFloat(editText.getText().toString())));
                                                                            newValues.put("quantitycopy", editText.getText().toString());
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Float.parseFloat(tv.getText().toString()) - Float.parseFloat(editText.getText().toString()))) * Float.parseFloat(ppp)));
                                                                            String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";

                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", st)
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //     db1.update("All_sales", newValues, where, new String[]{});
                                                                        } else {
                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty)));
                                                                            newValues.put("quantitycopy", editText.getText().toString());
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty))) * Float.parseFloat(ppp)));
                                                                            String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", st)
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //       db1.update("All_sales", newValues, where, new String[]{});
                                                                        }


                                                                        ///////////////Toast.makeText(CancelActivity.this, "4 "+oorr+" id "+st+
                                                                        //" total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();
                                                                    } while (c1ursor1.moveToNext());
                                                                }
                                                                c1ursor1.close();


                                                                tv.setText(editText.getText().toString());
                                                            }
                                                            dialog.dismiss();
//                                                tv.setText(editText.getText().toString());
//                                                dialog.dismiss();
                                                        }
                                                        hii();
                                                    }

//                                                    db = openOrCreateDatabase("mydb", Context.MODE_PRIVATE, null);
//                                                    Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = '' OR deleted_not = 'decrease') = ''  ", null);
//                                                    if (cursor11.moveToFirst()) {
//                                                        levelel = cursor11.getInt(0);
//                                                        tatat = String.valueOf(level);
//                                                        ///////////////Toast.makeText(CancelActivity.this, "tottttal is "+tat, Toast.LENGTH_SHORT).show();
//                                                    }
//
//                                                    final String tot = String.valueOf(Float.parseFloat(tat));
//                                                    onlybillnew.setText(tot);

                                                }
                                            });

                                            ImageView cancel = (ImageView) dialog.findViewById(R.id.btndelete);
                                            cancel.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    dialog.dismiss();
                                                }
                                            });








                                        }
                                        cursorcheck1.close();
                                    }
                                }
                            }
                            cursorcheck.close();


//                                tableLayout2.addView(tableLayout1);

                        }
                    });



                    Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '" + hii + "' AND parentid = '" + newid + "' AND (deleted_not = '' OR deleted_not = 'decrease')  ", null);

                    if (modcursor.moveToFirst()){
                        do {
                            /////////////////Toast.makeText(CancelActivity.this, "parent is "+hii, Toast.LENGTH_SHORT).show();

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);
                            final String ss = modcursor.getString(20);
                            final String modipar = modcursor.getString(6);
                            final String modiparid = modcursor.getString(7);
                            final String copymodiquan = modcursor.getString(23);

                            TextView quantity, tvmod, modprice, tvmod1, tvmod2;

//                    TableRow.LayoutParams tableRowParams = new TableRow.LayoutParams();
//                    tableRowParams.setMargins(1, 1, 1, 1);
//                    tableRowParams.weight = 1;

                            tableRow[0] = new TableRow(CancelActivity.this);
                            tableRow[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                            //tableRow.setBackgroundColor(Color.BLACK);

                            TextView textView2 = new TextView(CancelActivity.this);
                            textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                            textView2.setText("");
                            tableRow[0].addView(textView2);

                            ImageView imageView1 = new ImageView(CancelActivity.this);
                            //imageView1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                            imageView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.22f));
                            imageView1.setImageResource(R.drawable.mod_filter);
                            tableRow[0].addView(imageView1);

                            quantity = new TextView(CancelActivity.this);
                            String getquan = tv.getText().toString();
                            quantity.setText(copymodiquan);


                            //int  modid = Integer.parseInt(idd);
                            //int newmodid = modid+1;
                            //contentValues.put("_id", "1");

                            tvmod = new TextView(CancelActivity.this);
                            tvmod.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.00f));
                            //tvmod.setPadding(100, 0, 0, 0);
                            tvmod.setText(modiname);
                            tvmod.setGravity(Gravity.CENTER_VERTICAL);
                            tableRow[0].addView(tvmod);

                            TextView symbol = new TextView(CancelActivity.this);
                            symbol.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                            symbol.setText(insert1_cc);;
                            symbol.setGravity(Gravity.CENTER_VERTICAL);
                            symbol.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            symbol.setTextColor(Color.parseColor("#6a6a6d"));
                            tableRow[0].addView(symbol);

                            tvmod1 = new TextView(CancelActivity.this);
                            tvmod1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                            tvmod1.setGravity(Gravity.CENTER_VERTICAL);
                            tvmod1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tvmod1.setTextColor(Color.parseColor("#6a6a6d"));
                            tvmod1.setText(modiprice);
                            tableRow[0].addView(tvmod1);

                            TextView symbol1 = new TextView(CancelActivity.this);
                            symbol1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                            symbol1.setText(insert1_cc);;
                            symbol1.setGravity(Gravity.CENTER_VERTICAL);
                            symbol1.setTypeface(Typeface.DEFAULT_BOLD);
                            symbol1.setTextColor(Color.parseColor("#000000"));
                            symbol1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tableRow[0].addView(symbol1);

                            tvmod2 = new TextView(CancelActivity.this);
                            tvmod2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                            String modtotal = String.valueOf(Float.parseFloat(copymodiquan) * Float.parseFloat(modiprice));
                            tvmod2.setText(modtotal);
                            tvmod2.setGravity(Gravity.CENTER_VERTICAL);
                            tvmod2.setTypeface(Typeface.DEFAULT_BOLD);
                            tvmod2.setTextColor(Color.parseColor("#000000"));
                            tvmod2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tableRow[0].addView(tvmod2);

                            ImageView imageView2 = new ImageView(CancelActivity.this);
                            imageView2.setImageResource(R.drawable.ic_remove_black_24dp);
                            imageView2.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                            imageView2.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
//                        imageView2.setImageResource(R.drawable.cancel_order_close);
//                        imageView2.setBackgroundResource(R.drawable.edit_quantity);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                            LinearLayout.LayoutParams params1 = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                    LinearLayout.LayoutParams.WRAP_CONTENT);
                            params1.setMargins(6, 2, 6, 2);
                            imageView2.setLayoutParams(params1);
                            tableRow[0].addView(imageView2);

                            final TableRow finalTableRow = tableRow[0];
                            imageView2.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    /////////////////Toast.makeText(CancelActivity.this, "delete modifier "+modiname+" id is "+modiid+" parent is "+hii, Toast.LENGTH_SHORT).show();
                                    tableLayout1.removeView(tableRow[0]);

                                    panetwo.setVisibility(View.VISIBLE);
                                    panethree.setVisibility(View.VISIBLE);

                                    Cursor cursorcheck = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' and parent  = '"+modipar+"' and parentid = '"+modiparid+"' and itemname = '"+modiname+"' AND deleted_not = 'delete' ", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (cursorcheck.moveToFirst()){
                                        ///////////////Toast.makeText(CancelActivity.this, "data is there in All_Sales_Cancelled table ", Toast.LENGTH_SHORT).show();
                                    }

                                    else {
                                        ///////////////Toast.makeText(CancelActivity.this, "data is not there in All_Sales_Cancelled table ", Toast.LENGTH_SHORT).show();

                                        /////////////////Toast.makeText(CancelActivity.this, "Modifiers assigned ", Toast.LENGTH_SHORT).show();
                                        if (a.equals("1")) {
                                            ///////////////Toast.makeText(CancelActivity.this, "Quantityyyyyyyyyyy is 1 ", Toast.LENGTH_SHORT).show();

                                            Cursor resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '" + hii + "' AND _id = '" + modiid + "' ", null);
                                            /////////////////Toast.makeText(CancelActivity.this, "Bill num is "+billno.getText().toString()+" parent is "+hii+" id is "+modiid , Toast.LENGTH_SHORT).show();
                                            while (resetmode1.moveToNext()) {
                                                String zx = resetmode1.getString(1);
                                                String zxx = resetmode1.getString(0);
                                                String st = resetmode1.getString(3);
                                                /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();



                                                ContentValues newValues = new ContentValues();
                                                newValues.put("deleted_not", "delete");
                                                newValues.put("modifiedquantity", "1");
                                                newValues.put("quantitycopy", "0");
                                                newValues.put("modifiedtotal", st);
                                                String where = "_id = '" + zxx + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_sales")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",zxx)
                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);



                                                //        db1.update("All_sales", newValues, where, new String[]{});

                                            }
                                            resetmode1.close();

                                            //hii( );


                                        } else {
                                            ///////////////Toast.makeText(CancelActivity.this, "Quantity is greater than 111 ", Toast.LENGTH_SHORT).show();

                                            Cursor resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '" + hii + "' AND _id = '" + modiid + "' ", null);
                                            /////////////////Toast.makeText(CancelActivity.this, "Bill num is "+billno.getText().toString()+" parent is "+hii+" id is "+modiid , Toast.LENGTH_SHORT).show();
                                            while (resetmode1.moveToNext()) {
                                                String zx = resetmode1.getString(1);
                                                String zx1 = resetmode1.getString(2);
                                                String zxx = resetmode1.getString(0);
                                                String stt = resetmode1.getString(50);
                                                /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();



                                                ContentValues newValues = new ContentValues();
                                                newValues.put("deleted_not", "delete");
                                                newValues.put("modifiedquantity", zx1);
                                                newValues.put("quantitycopy", "0");
                                                newValues.put("modifiedtotal", stt);
                                                String where = "_id = '" + zxx + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_sales")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",zxx)
                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);



                                                //      db1.update("All_sales", newValues, where, new String[]{});

                                            }
                                            resetmode1.close();

                                        }

                                    }
                                    cursorcheck.close();
                                    hii();
                                }
                            });



                            tableLayout1.addView(tableRow[0]);
                        }while (modcursor.moveToNext());

                        //Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND parent = '" + hii + "' AND parentid = '" + newid + "
                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                float vtq = disc_cursor.getFloat(31);
                                String disc_orig_price = disc_cursor.getString(3);
                                String disc_orig_quan = disc_cursor.getString(2);
                                String disc_orig_total = disc_cursor.getString(4);
                                String disc_orig_type = disc_cursor.getString(27);
                                String disc_orig_value = disc_cursor.getString(28);
                                String disc_notorig_quan = disc_cursor.getString(22);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(CancelActivity.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(CancelActivity.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.56f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(CancelActivity.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                    disc_tv.setGravity(Gravity.CENTER_VERTICAL);
                                    TextView cz = new TextView(CancelActivity.this);
                                    cz.setText(disc_notorig_quan);
                                    if (cz.getText().toString().equals("")){
                                        if (disc_orig_type.toString().equals("%")){
                                            float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                            String bb = String.format("%.2f", cws);
                                            disc_tv.setText("("+"-" + bb+")");
                                        }else {
                                            float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                            float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                            String bb = String.format("%.2f", cws1);
                                            disc_tv.setText("("+"-" + bb+")");
                                        }
                                    }else {
                                        if (disc_orig_type.toString().equals("%")){
                                            float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                            String bb = String.format("%.2f", cws);
                                            disc_tv.setText("("+"-" + bb+")");
                                        }else {
                                            float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                            float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                            String bb = String.format("%.2f", cws1);
                                            disc_tv.setText("("+"-" + bb+")");
                                        }
                                    }
                                    //disc_tv.setText("("+"-" + disc_cursor.getString(31)+")");
                                    disc_tv.setTypeface(Typeface.DEFAULT_BOLD);
                                    disc_tv.setTextColor(Color.parseColor("#000000"));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    row_disc.addView(disc_tv);

                                    TextView textView21 = new TextView(CancelActivity.this);
                                    textView21.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.52f));
                                    textView21.setText("");
                                    row_disc.addView(textView21);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }

                    }else {
                        Cursor disc_cursor1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor1.moveToFirst()){
                            //do {
                            String disc_vv = disc_cursor1.getString(12);
                            String disc_there = disc_cursor1.getString(30);
                            float vtq = disc_cursor1.getFloat(31);
                            String disc_orig_price = disc_cursor1.getString(3);
                            String disc_orig_quan = disc_cursor1.getString(2);
                            String disc_orig_total = disc_cursor1.getString(4);
                            String disc_orig_type = disc_cursor1.getString(27);
                            String disc_orig_value = disc_cursor1.getString(28);
                            String disc_notorig_quan = disc_cursor1.getString(22);
                            if(disc_there.toString().equals("no")){

                            }else {
                                ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                final TableRow row_disc = new TableRow(CancelActivity.this);
                                row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                                //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                TextView textView2 = new TextView(CancelActivity.this);
                                textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.56f));
                                textView2.setText("");
                                row_disc.addView(textView2);

                                disc_tv = new TextView(CancelActivity.this);
                                disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                disc_tv.setGravity(Gravity.CENTER_VERTICAL);
                                TextView cz = new TextView(CancelActivity.this);
                                cz.setText(disc_notorig_quan);
                                if (cz.getText().toString().equals("")){
                                    if (disc_orig_type.toString().equals("%")){
                                        float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                        String bb = String.format("%.2f", cws);
                                        disc_tv.setText("("+"-" + bb+")");
                                    }else {
                                        float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                        float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                        String bb = String.format("%.2f", cws1);
                                        disc_tv.setText("("+"-" + bb+")");
                                    }
                                }else {
                                    if (disc_orig_type.toString().equals("%")){
                                        float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                        String bb = String.format("%.2f", cws);
                                        disc_tv.setText("("+"-" + bb+")");
                                    }else {
                                        float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                        float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                        String bb = String.format("%.2f", cws1);
                                        disc_tv.setText("("+"-" + bb+")");
                                    }
                                }

                                //disc_tv.setText("("+"-" + disc_cursor.getString(31)+")");
                                disc_tv.setTypeface(Typeface.DEFAULT_BOLD);
                                disc_tv.setTextColor(Color.parseColor("#000000"));
                                disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                row_disc.addView(disc_tv);

                                TextView textView21 = new TextView(CancelActivity.this);
                                textView21.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.52f));
                                textView21.setText("");
                                row_disc.addView(textView21);

                                tableLayout_disc.addView(row_disc);
                            }
                            //}while(disc_cursor1.moveToNext());
                        }
                    }
                    modcursor.close();

                    tableLayout.addView(row);

                    tableLayout.addView(tableLayout1);

                    tableLayout.addView(tableLayout_disc);


                    TextView tv11 = new TextView(CancelActivity.this);
                    tv11.setLayoutParams(new TableRow.LayoutParams(40, 2, 0.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv11.setGravity(Gravity.CENTER);
                    tv11.setTextSize(15);
                    tv11.setTypeface(null, Typeface.NORMAL);
                    tv11.setPadding(5, 0, 0, 0);
                    //text = cursor.getString(1);
                    //tv11.setText(total);
                    row2.addView(tv11);

//                    ImageView imageView1 = new ImageView(CancelActivity.this);
//                    imageView1.setLayoutParams(new TableRow.LayoutParams(120, ViewGroup.LayoutParams.MATCH_PARENT, 3.6f));
//                    imageView1.setImageResource(R.drawable.line_bill);
//                    row2.addView(imageView1);


                    tableLayout.addView(row1);
                    tableLayout.addView(row2);
                }


            }
        }
        cursor.close();



        final Cursor cursorr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'delete' ", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (cursorr.moveToFirst()){
            do {
                Itemtype = cursorr.getString(5);
                final String idis = cursorr.getString(0);
                final String idis1  = cursorr.getString(2);
                final String isid = cursorr.getString(20);
                final String nam = cursorr.getString(1);
                final String six = cursorr.getString(6);
                final String seven = cursorr.getString(7);
                final String a = cursorr.getString(2);
                final String xcs = cursorr.getString(31);

                final TextView xc1 = new TextView(CancelActivity.this);
                xc1.setText(xcs);

                if (idis1.toString().equals("1")) {

                    if (Itemtype.toString().equals("Item")) {

                        /////////////////Toast.makeText(CancelActivity.this, "items are "+nam, Toast.LENGTH_SHORT).show();

                        final String ii = cursorr.getString(2);
                        final String pp = cursorr.getString(3);
                        final String ttt = cursorr.getString(5);
                        final String pare = cursorr.getString(6);
                        final String pareid = cursorr.getString(7);
                        final String masss = cursorr.getString(8);
                        final String taxtaxtax = cursorr.getString(9);
                        final String taxtaxtaxname = cursorr.getString(10);
                        final String billnumb = cursorr.getString(11);
                        final String useruser = cursorr.getString(14);
                        final String typebilll = cursorr.getString(15);
                        final String paymethodd = cursorr.getString(16);


                        final String idn = cursorr.getString(20);

                        if (ii.toString().equals("0")){

                        }else {
//                            final TableRow row3 = new TableRow(CancelActivity.this);
//                        row3.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT, 1.0f));

                            final TableRow row3 = new TableRow(CancelActivity.this);
                            row3.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.04f));


                            final TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
                            tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

                            final TableRow[] tableRowa = {new TableRow(CancelActivity.this)};
                            tableRowa[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

                            final TableRow[] tableRow = {new TableRow(CancelActivity.this)};
                            //row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                            tableRow[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT, 4.04f));


                            final TableLayout tableLayout4 = new TableLayout(CancelActivity.this);
                            final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);

                            final TextView tv = new TextView(CancelActivity.this);
                            tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                            tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                            tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tv.setTextColor(Color.parseColor("#6a6a6d"));
                            tv.setText(ii);
                            row3.addView(tv);


                            final String modidd = cursorr.getString(0);
                            final int modid = Integer.parseInt(modidd);
                            tv.setId(modid);


                            name = cursorr.getString(1);
                            final String iidd = cursorr.getString(0);
                            final String nbg = cursorr.getString(1);
                            final String hii = cursorr.getString(1);
                            TextView tv1 = new TextView(CancelActivity.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.22f));
                            tv1.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tv1.setTextColor(Color.parseColor("#000000"));
                            tv1.setTypeface(Typeface.DEFAULT_BOLD);
                            tv1.setLines(2);
                            tv1.setMaxLines(2);
                            tv1.setEllipsize(TextUtils.TruncateAt.END);
                            tv1.setText(hii);
                            row3.addView(tv1);

                            TextView textView = new TextView(CancelActivity.this);
                            textView.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                            textView.setText(insert1_cc);;
                            textView.setGravity(Gravity.CENTER_VERTICAL);
                            textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            textView.setTextColor(Color.parseColor("#6a6a6d"));
                            row3.addView(textView);

                            //priceget = cursorr.getString(3);
                            final TextView tv2 = new TextView(CancelActivity.this);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                            tv2.setGravity(Gravity.CENTER_VERTICAL);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tv2.setTextColor(Color.parseColor("#6a6a6d"));
                            final Float f = Float.parseFloat(cursorr.getString(3));
                            price = String.valueOf(f);
                            tv2.setText(pp);
                            //tv1.setText(c.getString(j));
                            row3.addView(tv2);

                            TextView textView1 = new TextView(CancelActivity.this);
                            textView1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                            textView1.setText(insert1_cc);
                            textView1.setGravity(Gravity.CENTER_VERTICAL);
                            textView1.setTypeface(Typeface.DEFAULT_BOLD);
                            textView1.setTextColor(Color.parseColor("#000000"));
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            row3.addView(textView1);

                            //totalget = cursorr.getString(4);
                            final TextView tv3 = new TextView(CancelActivity.this);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                            tv3.setGravity(Gravity.CENTER_VERTICAL);
                            tv3.setTypeface(Typeface.DEFAULT_BOLD);
                            tv3.setTextColor(Color.parseColor("#000000"));
                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursorr.getString(4));
                            float vbq = newmul * f;
                            final String multiply = String.format("%.2f", vbq);
                            //final String multiply = String.valueOf(newmul * f);
                            //newmul = Integer.parseInt(multiply);
                            tv3.setText(multiply);
                            row3.addView(tv3);

                            final ImageView imageView = new ImageView(CancelActivity.this);
                            imageView.setImageResource(R.drawable.ic_remove_black_24dp);
                            imageView.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                            imageView.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                            LinearLayout.LayoutParams params = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                    LinearLayout.LayoutParams.WRAP_CONTENT);
                            params.setMargins(6, 2, 6, 2);
                            imageView.setLayoutParams(params);
                            row3.addView(imageView);

                            imageView.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    /////////////////Toast.makeText(CancelActivity.this, " item name is "+nam+" id is "+idis, Toast.LENGTH_SHORT).show();
                                    /////////////////Toast.makeText(CancelActivity.this, "123123 ",Toast.LENGTH_SHORT).show();
                                    /////////////Toast.makeText(CancelActivity.this, "3", Toast.LENGTH_SHORT).show();
                                    tableLayout2.removeView(row3);
                                    tableLayout2.removeView(tableLayout4);


                                    Cursor resetmode1 = db1.rawQuery("SELECT * FROM All_Sales WHERE itemname = '" + hii + "' AND _id = '" + idis + "' ", null);
                                    while (resetmode1.moveToNext()) {

                                        /////////////////Toast.makeText(CancelActivity.this, "deletedddddd item "+hii+" and its id is "+idis , Toast.LENGTH_SHORT).show();


                                        ContentValues newValues = new ContentValues();
                                        newValues.put("deleted_not", "");
                                        newValues.put("modifiedquantity", "");
                                        newValues.put("quantitycopy", "1");
                                        newValues.put("modifiedtotal", "");
                                        String where = "_id = '" + idis + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                        getContentResolver().update(contentUri, newValues,where,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("All_sales")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id",idis)
                                                .appendQueryParameter("bill_no",billno.getText().toString())
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);



                                        //       db1.update("All_sales", newValues, where, new String[]{});


                                    }

                                    /////////////////Toast.makeText(CancelActivity.this, "dsfsadvfadv parent = '"+hii+"' parent id is "+isid, Toast.LENGTH_SHORT).show();

                                    resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + isid + "' ", null);
                                    while (resetmode1.moveToNext()) {
                                        String zx = resetmode1.getString(1);
                                        String zxx = resetmode1.getString(0);
                                        /////////////////Toast.makeText(CancelActivity.this, "modifierssssssssss name and id is "+zx+" and parent id is "+isid, Toast.LENGTH_SHORT).show();

                                        ContentValues newValues = new ContentValues();
                                        newValues.put("deleted_not", "");
                                        newValues.put("modifiedquantity", "");
                                        newValues.put("quantitycopy", "1");
                                        newValues.put("modifiedtotal", "");
                                        String where = "_id = '" + zxx + "' AND bill_no = '"+billno.getText().toString()+"' ";



                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                        getContentResolver().update(contentUri, newValues,where,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("All_sales")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id",zxx)
                                                .appendQueryParameter("bill_no",billno.getText().toString())
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);



                                        //     db1.update("All_sales", newValues, where, new String[]{});


                                    }

                                    hii( );

                                }
                            });

                            Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + idn + "' AND deleted_not = 'delete'  ", null);
                            if (modcursor.moveToFirst()){
                                do {
                                    /////////////////Toast.makeText(CancelActivity.this, "parent is "+hii, Toast.LENGTH_SHORT).show();

                                    final String modiname = modcursor.getString(1);
                                    final String modiquan = modcursor.getString(2);
                                    String modiprice = modcursor.getString(3);
                                    String moditotal = modcursor.getString(4);
                                    final String modiid = modcursor.getString(0);
                                    final String ss = modcursor.getString(20);
                                    final String modipar = modcursor.getString(6);
                                    final String modiparid = modcursor.getString(7);
                                    final String copymodiquan = modcursor.getString(22);

                                    TextView quantity, tvmod, modprice, tvmod1, tvmod2;

//                    TableRow.LayoutParams tableRowParams = new TableRow.LayoutParams();
//                    tableRowParams.setMargins(1, 1, 1, 1);
//                    tableRowParams.weight = 1;

                                    tableRow[0] = new TableRow(CancelActivity.this);
                                    tableRow[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                                    //tableRow.setBackgroundColor(Color.BLACK);

                                    TextView textView2 = new TextView(CancelActivity.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                    textView2.setText("");
                                    tableRow[0].addView(textView2);

                                    ImageView imageView1 = new ImageView(CancelActivity.this);
                                    //imageView1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                    imageView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.22f));
                                    imageView1.setImageResource(R.drawable.mod_filter);
                                    tableRow[0].addView(imageView1);

                                    quantity = new TextView(CancelActivity.this);
                                    String getquan = tv.getText().toString();
                                    quantity.setText(copymodiquan);


                                    //int  modid = Integer.parseInt(idd);
                                    //int newmodid = modid+1;
                                    //contentValues.put("_id", "1");

                                    tvmod = new TextView(CancelActivity.this);
                                    tvmod.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.00f));
                                    //tvmod.setPadding(100, 0, 0, 0);
                                    tvmod.setText(modiname);
                                    tvmod.setGravity(Gravity.CENTER_VERTICAL);
                                    tableRow[0].addView(tvmod);

                                    TextView symbol = new TextView(CancelActivity.this);
                                    symbol.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                    symbol.setText(insert1_cc);;
                                    symbol.setGravity(Gravity.CENTER_VERTICAL);
                                    symbol.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    symbol.setTextColor(Color.parseColor("#6a6a6d"));
                                    tableRow[0].addView(symbol);

                                    tvmod1 = new TextView(CancelActivity.this);
                                    tvmod1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                                    tvmod1.setText(modiprice);
                                    tvmod1.setGravity(Gravity.CENTER_VERTICAL);
                                    tvmod1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    tvmod1.setTextColor(Color.parseColor("#6a6a6d"));
                                    tableRow[0].addView(tvmod1);

                                    TextView symbol1 = new TextView(CancelActivity.this);
                                    symbol1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                    symbol1.setText(insert1_cc);;
                                    symbol1.setGravity(Gravity.CENTER_VERTICAL);
                                    symbol1.setTypeface(Typeface.DEFAULT_BOLD);
                                    symbol1.setTextColor(Color.parseColor("#000000"));
                                    symbol1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    tableRow[0].addView(symbol1);

                                    tvmod2 = new TextView(CancelActivity.this);
                                    tvmod2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                    String modtotal = String.valueOf(Float.parseFloat(copymodiquan) * Float.parseFloat(modiprice));
                                    tvmod2.setText(modtotal);
                                    tvmod2.setGravity(Gravity.CENTER_VERTICAL);
                                    tvmod2.setTypeface(Typeface.DEFAULT_BOLD);
                                    tvmod2.setTextColor(Color.parseColor("#000000"));
                                    tvmod2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    tableRow[0].addView(tvmod2);

                                    ImageView imageView2 = new ImageView(CancelActivity.this);
                                    imageView2.setVisibility(View.INVISIBLE);
                                    imageView2.setImageResource(R.drawable.ic_remove_black_24dp);
                                    imageView2.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                                    imageView2.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
                                    //imageView2.setImageResource(R.drawable.cancel_order_close);
                                    //imageView2.setBackgroundResource(R.drawable.edit_quantity);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                                    LinearLayout.LayoutParams params1 = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                            LinearLayout.LayoutParams.WRAP_CONTENT);
                                    params1.setMargins(6, 2, 6, 2);
                                    imageView2.setLayoutParams(params1);
                                    tableRow[0].addView(imageView2);

                                    /////////////////Toast.makeText(CancelActivity.this, "Modifiers inserted "+modiname, Toast.LENGTH_SHORT).show();

//                            Not required
//                            imageView2.setOnClickListener(new View.OnClickListener() {
//                                @Override
//                                public void onClick(View v) {
//                                    ///////////////Toast.makeText(CancelActivity.this, "delete modifier"+modiname, Toast.LENGTH_SHORT).show();
//                                }
//                            });


                                    tableLayout4.addView(tableRow[0]);
                                }while (modcursor.moveToNext());

                            }

                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND _id = '" + nbg + "'  ", null);
                            if (disc_cursor.moveToFirst()){
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    float vtq = disc_cursor.getFloat(31);
                                    String disc_orig_price = disc_cursor.getString(3);
                                    String disc_orig_quan = disc_cursor.getString(2);
                                    String disc_orig_total = disc_cursor.getString(4);
                                    String disc_orig_type = disc_cursor.getString(27);
                                    String disc_orig_value = disc_cursor.getString(28);
                                    String disc_notorig_quan = disc_cursor.getString(22);
                                    if(disc_there.toString().equals("no")){

                                    }else {
                                        ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                        final TableRow row_disc = new TableRow(CancelActivity.this);
                                        row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                                TableRow.LayoutParams.MATCH_PARENT,
                                                TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                                        //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                        TextView textView2 = new TextView(CancelActivity.this);
                                        textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.56f));
                                        textView2.setText("");
                                        row_disc.addView(textView2);

                                        disc_tv = new TextView(CancelActivity.this);
                                        disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                        disc_tv.setGravity(Gravity.CENTER_VERTICAL);
                                        TextView cz = new TextView(CancelActivity.this);
                                        cz.setText(disc_notorig_quan);
                                        if (cz.getText().toString().equals("")){
                                            if (disc_orig_type.toString().equals("%")){
                                                float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                                String bb = String.format("%.2f", cws);
                                                disc_tv.setText("("+"-" + bb+")");
                                            }else {
                                                float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                                float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                                String bb = String.format("%.2f", cws1);
                                                disc_tv.setText("("+"-" + bb+")");
                                            }
                                        }else {
                                            if (disc_orig_type.toString().equals("%")){
                                                float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                                String bb = String.format("%.2f", cws);
                                                disc_tv.setText("("+"-" + bb+")");
                                            }else {
                                                float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                                float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                                String bb = String.format("%.2f", cws1);
                                                disc_tv.setText("("+"-" + bb+")");
                                            }
                                        }
                                        //disc_tv.setText("("+"-" + disc_cursor.getString(31)+")");
                                        disc_tv.setTypeface(Typeface.DEFAULT_BOLD);
                                        disc_tv.setTextColor(Color.parseColor("#000000"));
                                        disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        row_disc.addView(disc_tv);

                                        TextView textView21 = new TextView(CancelActivity.this);
                                        textView21.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.52f));
                                        textView21.setText("");
                                        row_disc.addView(textView21);

                                        tableLayout_disc.addView(row_disc);
                                    }
                                }while(disc_cursor.moveToNext());
                            }

                            modcursor.close();

                            tableLayout2.addView(row3);
                            ///////////////Toast.makeText(CancelActivity.this, "22", Toast.LENGTH_SHORT).show();

                            tableLayout2.addView(tableLayout4);

                            tableLayout2.addView(tableLayout_disc);
                        }
//

                    } else {

                        Cursor cursor2 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + nam + "' AND parent = '" + six + "' AND deleted_not = 'delete' ", null);

                        if (cursor2.moveToFirst()) {

                            Itemtype = cursor2.getString(5);
                            del = cursor2.getString(21);
                            final String ii = cursor2.getString(2);
                            final String pp = cursor2.getString(3);
                            final String pare = cursor2.getString(6);
                            String pareid = cursor2.getString(7);
                            String idd = cursor2.getString(20);
                            final String nuu = cursor2.getString(1);

                            /////////////////Toast.makeText(CancelActivity.this, "1111111111 Deleted modifierrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr    "+nuu+ " " +six+ "" +nam+ " " +pareid , Toast.LENGTH_SHORT).show();


                            if (Itemtype.toString().equals("Modifier")) {
                                Cursor cursor3 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + pare + "' AND _idd = '" + pareid + "' ", null);
                                if (cursor3.moveToFirst()) {
                                    do {
                                        /////////////////Toast.makeText(CancelActivity.this, "deleted item "+nam+" parent is "+pare+" pare id is "+pareid, Toast.LENGTH_SHORT).show();

                                        final String del = cursor3.getString(21);
                                        if (del.toString().equals("delete")) {
                                            /////////////////Toast.makeText(CancelActivity.this, "Both items and modifiers are deleted", Toast.LENGTH_SHORT).show();
                                        } else {
                                            /////////////////Toast.makeText(CancelActivity.this, "only modifier is deletd", Toast.LENGTH_SHORT).show();


                                            final String idn = cursorr.getString(20);
                                            final String fi = cursorr.getString(0);

                                            final TableRow row3 = new TableRow(CancelActivity.this);
                                            row3.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

                                            final TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
                                            tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

                                            final TableLayout tableLayout4 = new TableLayout(CancelActivity.this);
                                            final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);

                                            final TextView tv = new TextView(CancelActivity.this);
                                            tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                            tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                                            tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tv.setTextColor(Color.parseColor("#6a6a6d"));
                                            tv.setText(ii);
                                            row3.addView(tv);


                                            final String modidd = cursorr.getString(0);
                                            final int modid = Integer.parseInt(modidd);
                                            tv.setId(modid);


                                            name = cursorr.getString(1);
                                            final String iidd = cursorr.getString(0);
                                            final String hii = cursorr.getString(1);
                                            TextView tv1 = new TextView(CancelActivity.this);
                                            tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.22f));
                                            tv1.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tv1.setTextColor(Color.parseColor("#000000"));
                                            tv1.setTypeface(Typeface.DEFAULT_BOLD);
                                            tv1.setText(pare);
                                            row3.addView(tv1);

                                            TextView te1 = new TextView(CancelActivity.this);
                                            te1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.42f));
                                            te1.setText("");
                                            row3.addView(te1);


                                            ////////Toast.makeText(MainActivity.this, "Modifiers are", Toast.LENGTH_SHORT).show();


                                            TextView quantity, tvmod, modprice, tvmod1, tvmod2;

//                                            TableRow.LayoutParams tableRowParams = new TableRow.LayoutParams();
//                                            tableRowParams.setMargins(1, 1, 1, 1);
//                                            tableRowParams.weight = 1;

                                            tableRow1[0] = new TableRow(CancelActivity.this);
                                            //tableRow1[0].setPadding(55, 0, 0, 0);
                                            //tableRow.setBackgroundColor(Color.BLACK);

                                            TextView textView2 = new TextView(CancelActivity.this);
                                            textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                            textView2.setText("");
                                            tableRow1[0].addView(textView2);

                                            ImageView imageView1 = new ImageView(CancelActivity.this);
                                            //imageView1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                            imageView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.22f));
                                            imageView1.setImageResource(R.drawable.mod_filter);
                                            tableRow1[0].addView(imageView1);

                                            quantity = new TextView(CancelActivity.this);
                                            String getquan = tv.getText().toString();
                                            quantity.setText(ii);


                                            //int  modid = Integer.parseInt(idd);
                                            //int newmodid = modid+1;
                                            //contentValues.put("_id", "1");

                                            tvmod = new TextView(CancelActivity.this);
                                            tvmod.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.00f));
                                            //tvmod.setPadding(100, 0, 0, 0);
                                            tvmod.setText(nam);
                                            tvmod.setGravity(Gravity.CENTER_VERTICAL);
                                            tableRow1[0].addView(tvmod);

                                            TextView symbol = new TextView(CancelActivity.this);
                                            //symbol.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                            symbol.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                            symbol.setText(insert1_cc);;
                                            symbol.setGravity(Gravity.CENTER_VERTICAL);
                                            symbol.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            symbol.setTextColor(Color.parseColor("#6a6a6d"));
                                            tableRow1[0].addView(symbol);

                                            tvmod1 = new TextView(CancelActivity.this);
                                            tvmod1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                                            tvmod1.setText(pp);
                                            tvmod1.setGravity(Gravity.CENTER_VERTICAL);
                                            tvmod1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tvmod1.setTextColor(Color.parseColor("#6a6a6d"));
                                            tableRow1[0].addView(tvmod1);

                                            TextView symbol1 = new TextView(CancelActivity.this);
                                            //symbol1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                            symbol1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                            symbol1.setText(insert1_cc);;
                                            symbol1.setGravity(Gravity.CENTER_VERTICAL);
                                            symbol1.setTypeface(Typeface.DEFAULT_BOLD);
                                            symbol1.setTextColor(Color.parseColor("#000000"));
                                            symbol1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tableRow1[0].addView(symbol1);

                                            tvmod2 = new TextView(CancelActivity.this);
                                            tvmod2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                            String modtotal = String.valueOf(Float.parseFloat(ii) * Float.parseFloat(pp));
                                            tvmod2.setText(modtotal);
                                            tvmod2.setGravity(Gravity.CENTER_VERTICAL);
                                            tvmod2.setTypeface(Typeface.DEFAULT_BOLD);
                                            tvmod2.setTextColor(Color.parseColor("#000000"));
                                            tvmod2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tableRow1[0].addView(tvmod2);

//                                            ImageView imageView2 = new ImageView(CancelActivity.this);
//                                            imageView2.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
//                                            imageView2.setImageResource(R.drawable.cancel_order_close);
//                                            imageView2.setBackgroundResource(R.drawable.edit_quantity);

                                            final ImageView imageView2 = new ImageView(CancelActivity.this);
                                            //imageView.setLayoutParams(new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
                                            imageView2.setImageResource(R.drawable.ic_remove_black_24dp);
                                            imageView2.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                                            imageView2.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
//                                            imageView2.setImageResource(R.drawable.cancel_order_close);
//                                            imageView2.setBackgroundResource(R.drawable.edit_quantity);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                                            LinearLayout.LayoutParams params1 = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                                    LinearLayout.LayoutParams.WRAP_CONTENT);
                                            params1.setMargins(6, 2, 6, 2);
                                            imageView2.setLayoutParams(params1);

                                            tableRow1[0].addView(imageView2);

                                            imageView2.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    /////////////////Toast.makeText(CancelActivity.this, "delete modifier " + nam + " id is " + fi + " parent is " + six + " paernt id is " + seven, Toast.LENGTH_SHORT).show();
                                                    tableLayout4.removeView(tableRow1[0]);

                                                    Cursor cursorcheck = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' and parent  = '" + six + "' and parentid = '" + seven + "' and itemname = '" + nam + "' AND deleted_not = 'delete' ", null);//replace to cursor = dbHelper.fetchAllHotels();
                                                    if (cursorcheck.moveToFirst()) {
                                                        ///////////////Toast.makeText(CancelActivity.this, "data is not there in All_Sales_Cancelled table ", Toast.LENGTH_SHORT).show();

                                                        if (a.equals("1")) {
                                                            ///////////////Toast.makeText(CancelActivity.this, "Quantityyyyyyyyyyy is 1 ", Toast.LENGTH_SHORT).show();

                                                            Cursor resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "'AND itemname = '" + nam + "' AND parent = '" + six + "' AND parentid = '" + seven + "' ", null);
                                                            /////////////////Toast.makeText(CancelActivity.this, "Bill num is " + billno.getText().toString() + " parent is " + six + " parentid is " + seven, Toast.LENGTH_SHORT).show();
                                                            while (resetmode1.moveToNext()) {
                                                                String zx = resetmode1.getString(1);
                                                                String zxx = resetmode1.getString(0);
                                                                String st = resetmode1.getString(4);
                                                                /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();
                                                                ///////////////Toast.makeText(CancelActivity.this, "1231233333" , Toast.LENGTH_SHORT).show();

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "");
                                                                newValues.put("modifiedquantity", "");
                                                                newValues.put("quantitycopy", "1");
                                                                newValues.put("modifiedtotal", "");
                                                                String where = "_id = '" + zxx + "' AND bill_no = '"+billno.getText().toString()+"' ";

                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",zxx)
                                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);



                                                                //     db1.update("All_sales", newValues, where, new String[]{});

                                                            }

                                                            //hii( );


                                                        } else {
                                                            ///////////////Toast.makeText(CancelActivity.this, "Quantity is greater than 1 ", Toast.LENGTH_SHORT).show();
                                                        }
                                                    } else {
                                                        ///////////////Toast.makeText(CancelActivity.this, "data is there in All_Sales_Cancelled table ", Toast.LENGTH_SHORT).show();

                                                        /////////////////Toast.makeText(CancelActivity.this, "Modifiers assigned ", Toast.LENGTH_SHORT).show();
                                                    }
                                                    hii( );
                                                }
                                            });

                                            //                                            ///////////////Toast.makeText(CancelActivity.this, "Modifiers inserted "+modiname, Toast.LENGTH_SHORT).show();

                                            //final TableRow finalTableRow = tableRow[0];
                                            //                        imageView2.setOnClickListener(new View.OnClickListener() {
                                            //                            @Override
                                            //                            public void onClick(View v) {
                                            //                                ///////////////Toast.makeText(CancelActivity.this, "delete modifier"+modiname, Toast.LENGTH_SHORT).show();
                                            //                            }
                                            //                        });


                                            tableLayout4.addView(tableRow1[0]);


                                            tableLayout2.addView(row3);
                                            ///////////////Toast.makeText(CancelActivity.this, "33", Toast.LENGTH_SHORT).show();

                                            tableLayout2.addView(tableLayout4);


                                        }
//                                    ///////////////Toast.makeText(CancelActivity.this, "Select * where billno = '"+billno.getText().toString()+"' itemname "+pare+" idd is "+pareid, Toast.LENGTH_SHORT).show();
//
//                                    Cursor cursor4 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND itemname = '"+pare+"' AND _idd = '"+pareid+"'" , null);
//                                    if (cursor4.moveToFirst()){
//                                        do {
//                                            String ax = cursor3.getString(1);
//
//                                            ///////////////Toast.makeText(CancelActivity.this, "modi " + ax, Toast.LENGTH_SHORT).show();
//
////                                            final String idn = cursorr.getString(20);
////
////                                            final TableRow row3 = new TableRow(CancelActivity.this);
////                                            row3.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT, 1.0f));
////
////                                            final TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
////                                            tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
////
////                                            final TableLayout tableLayout4 = new TableLayout(CancelActivity.this);
////
////                                            final TextView tv = new TextView(CancelActivity.this);
////                                            tv.setLayoutParams(new TableRow.LayoutParams(40, ViewGroup.LayoutParams.MATCH_PARENT));
////                                            //tv.setBackgroundResource(R.drawable.cell_shape);
////                                            tv.setGravity(Gravity.CENTER);
////                                            tv.setTextSize(15);
////                                            tv.setTypeface(null, Typeface.NORMAL);
////                                            tv.setPadding(5, 0, 0, 0);
////                                            //text = cursorr.getString(1);
////                                            tv.setText(ii);
////                                            row3.addView(tv);
////
////
////                                            final String modidd = cursorr.getString(0);
////                                            final int modid = Integer.parseInt(modidd);
////                                            tv.setId(modid);
////
////
////                                            name = cursorr.getString(1);
////                                            final String iidd = cursorr.getString(0);
////                                            final String hii = cursorr.getString(1);
////                                            TextView tv1 = new TextView(CancelActivity.this);
////                                            tv1.setLayoutParams(new TableRow.LayoutParams(116, ViewGroup.LayoutParams.MATCH_PARENT));
////                                            //tv.setBackgroundResource(R.drawable.cell_shape);
////                                            tv1.setGravity(Gravity.CENTER_VERTICAL);
////                                            tv1.setTextSize(15);
////                                            tv1.setTextColor(getResources().getColor(R.color.itemname));
////                                            //tv.setPadding(0, 5, 0, 5);
////                                            tv1.setPadding(5, 0, 0, 0);
////                                            //tv.setPadding(0, 5, 0, 5);
////                                            //text = cursorr.getString(1);
////                                            tv1.setText(pare);
////                                            row3.addView(tv1);
////
////
////
////
////
////                                            ////////Toast.makeText(MainActivity.this, "Modifiers are", Toast.LENGTH_SHORT).show();
////
////
////                                            TextView quantity, tvmod, modprice, tvmod1, tvmod2;
////
////                                            TableRow.LayoutParams tableRowParams = new TableRow.LayoutParams();
////                                            tableRowParams.setMargins(1, 1, 1, 1);
////                                            tableRowParams.weight = 1;
////
////                                            tableRow1[0] = new TableRow(CancelActivity.this);
////                                            tableRow1[0].setPadding(55, 0, 0, 0);
////                                            //tableRow.setBackgroundColor(Color.BLACK);
////
////                                            ImageView imageView1 = new ImageView(CancelActivity.this);
////                                            imageView1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
////                                            imageView1.setImageResource(R.drawable.mod_filter);
////                                            tableRow1[0].addView(imageView1);
////
////                                            quantity = new TextView(CancelActivity.this);
////                                            String getquan = tv.getText().toString();
////                                            quantity.setText(ii);
////
////
////                                            //int  modid = Integer.parseInt(idd);
////                                            //int newmodid = modid+1;
////                                            //contentValues.put("_id", "1");
////
////                                            tvmod = new TextView(CancelActivity.this);
////                                            tvmod.setLayoutParams(new TableRow.LayoutParams(89, ViewGroup.LayoutParams.MATCH_PARENT));
////                                            //tvmod.setPadding(100, 0, 0, 0);
////                                            tvmod.setText(nam);
////                                            tvmod.setGravity(Gravity.CENTER_VERTICAL);
////                                            tvmod.setPadding(0, -5, 0, 0);
////                                            tvmod.setTextColor(Color.parseColor("#000000"));
////                                            tableRow1[0].addView(tvmod);
////
////                                            TextView symbol = new TextView(CancelActivity.this);
////                                            symbol.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
////                                            symbol.setText(insert1_cc);;
////                                            //symbol.setTextColor(getResources().getColor(R.color.red));
////                                            symbol.setTextSize(18);
////                                            tableRow1[0].addView(symbol);
////
////                                            tvmod1 = new TextView(CancelActivity.this);
////                                            tvmod1.setLayoutParams(new TableRow.LayoutParams(75, 34));
////                                            //String modtotal = String.valueOf(Integer.parseInt(getquan) * Integer.parseInt(price1));
////                                            tvmod1.setText(pp);
////                                            tvmod1.setPadding(0, 0, 0, 0);
////                                            tvmod1.setTextColor(Color.parseColor("#000000"));
////                                            tableRow1[0].addView(tvmod1);
////
////                                            TextView symbol1 = new TextView(CancelActivity.this);
////                                            symbol1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
////                                            symbol1.setText(insert1_cc);;
////                                            //symbol1.setTextColor(getResources().getColor(R.color.red));
////                                            symbol1.setTextSize(18);
////                                            tableRow1[0].addView(symbol1);
////
////                                            tvmod2 = new TextView(CancelActivity.this);
////                                            tvmod2.setLayoutParams(new TableRow.LayoutParams(89, 34));
////                                            String modtotal = String.valueOf(Integer.parseInt(ii) * Integer.parseInt(pp));
////                                            tvmod2.setText(modtotal);
////                                            tvmod2.setPadding(0, 0, 0, 0);
////                                            tvmod2.setTextColor(Color.parseColor("#000000"));
////                                            tableRow1[0].addView(tvmod2);
////
////                                            ImageView imageView2 = new ImageView(CancelActivity.this);
////                                            imageView2.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
////                                            imageView2.setImageResource(R.drawable.cancel_order_close);
////                                            imageView2.setBackgroundResource(R.drawable.edit_quantity);
////                                            tableRow1[0].addView(imageView2);
////
////                                            //                                            ///////////////Toast.makeText(CancelActivity.this, "Modifiers inserted "+modiname, Toast.LENGTH_SHORT).show();
////
////                                            //final TableRow finalTableRow = tableRow[0];
////                                            //                        imageView2.setOnClickListener(new View.OnClickListener() {
////                                            //                            @Override
////                                            //                            public void onClick(View v) {
////                                            //                                ///////////////Toast.makeText(CancelActivity.this, "delete modifier"+modiname, Toast.LENGTH_SHORT).show();
////                                            //                            }
////                                            //                        });
////
////
////
////                                            tableLayout4.addView(tableRow1[0]);
////
////
////
////
////                                            tableLayout2.addView(row3);
////                                            tableLayout2.addView(tableLayout4);
//
//                                        }while (cursor4.moveToNext());
//                                    }else {
//                                        ///////////////Toast.makeText(CancelActivity.this, "deleted only modifierrrrrrrrrrrrrrrrrrrrrssssssssss", Toast.LENGTH_SHORT).show();
//                                    }


                                    } while (cursor3.moveToNext());
                                }
                                cursor3.close();
                            } else {
                                ///////////////Toast.makeText(CancelActivity.this, "deleted only modifier", Toast.LENGTH_SHORT).show();
                            }
                        }
                        cursor2.close();


                    }
                }else {
                    ///////////////Toast.makeText(CancelActivity.this, "quantity removed is >>>>1111", Toast.LENGTH_SHORT).show();

                    if (Itemtype.toString().equals("Item")) {

                        /////////////////Toast.makeText(CancelActivity.this, "items are "+nam, Toast.LENGTH_SHORT).show();

                        final String ii = cursorr.getString(2);
                        final String pp = cursorr.getString(3);
                        final String ttt = cursorr.getString(5);
                        final String pare = cursorr.getString(6);
                        final String pareid = cursorr.getString(7);
                        final String masss = cursorr.getString(8);
                        final String taxtaxtax = cursorr.getString(9);
                        final String taxtaxtaxname = cursorr.getString(10);
                        final String billnumb = cursorr.getString(11);
                        final String useruser = cursorr.getString(14);
                        final String typebilll = cursorr.getString(15);
                        final String paymethodd = cursorr.getString(16);

                        final String newid = cursorr.getString(20);

                        final String aacc1 = cursorr.getString(3);


                        final String idn = cursorr.getString(20);

                        if (ii.toString().equals("0")){

                        }else {
                            final TableRow row3 = new TableRow(CancelActivity.this);
                            row3.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

//                        final TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
//                        tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(
//                                LayoutParams.MATCH_PARENT,
//                                LayoutParams.WRAP_CONTENT, 4.04f));

                            final TableLayout tableLayout4 = new TableLayout(CancelActivity.this);
                            final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);

                            final TextView tv = new TextView(CancelActivity.this);
                            tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                            tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                            tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tv.setTextColor(Color.parseColor("#6a6a6d"));
                            tv.setText(ii);
                            row3.addView(tv);


                            final String modidd = cursorr.getString(0);
                            final int modid = Integer.parseInt(modidd);
                            tv.setId(modid);


                            name = cursorr.getString(1);
                            final String iidd = cursorr.getString(0);
                            final String disc_31 = cursorr.getString(28);

                            final String disc_orig_price1 = cursorr.getString(3);
                            final String disc_orig_quan1 = cursorr.getString(2);
                            final String disc_orig_total1 = cursorr.getString(4);
                            final String disc_orig_type1 = cursorr.getString(27);
                            final String disc_orig_value1 = cursorr.getString(28);
                            final String disc_notorig_quan1 = cursorr.getString(22);

                            final String disc_27 = cursorr.getString(27);
                            final String nbg = cursorr.getString(0);
                            final String hii = cursorr.getString(1);
                            TextView tv1 = new TextView(CancelActivity.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.22f));
                            tv1.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tv1.setTextColor(Color.parseColor("#000000"));
                            tv1.setTypeface(Typeface.DEFAULT_BOLD);
                            tv1.setLines(2);
                            tv1.setMaxLines(2);
                            tv1.setEllipsize(TextUtils.TruncateAt.END);
                            tv1.setText(hii);
                            row3.addView(tv1);

                            TextView textView = new TextView(CancelActivity.this);
                            textView.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                            textView.setText(insert1_cc);;
                            textView.setGravity(Gravity.CENTER_VERTICAL);
                            textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            textView.setTextColor(Color.parseColor("#6a6a6d"));
                            row3.addView(textView);

                            //priceget = cursorr.getString(3);
                            final TextView tv2 = new TextView(CancelActivity.this);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                            tv2.setGravity(Gravity.CENTER_VERTICAL);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            tv2.setTextColor(Color.parseColor("#6a6a6d"));
                            final Float f = Float.parseFloat(cursorr.getString(3));
                            price = String.valueOf(f);
                            tv2.setText(pp);
                            //tv1.setText(c.getString(j));
                            row3.addView(tv2);

                            TextView textView1 = new TextView(CancelActivity.this);
                            textView1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                            textView1.setText(insert1_cc);
                            textView1.setGravity(Gravity.CENTER_VERTICAL);
                            textView1.setTypeface(Typeface.DEFAULT_BOLD);
                            textView1.setTextColor(Color.parseColor("#000000"));
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            row3.addView(textView1);

                            //totalget = cursorr.getString(4);
                            final TextView tv3 = new TextView(CancelActivity.this);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                            tv3.setGravity(Gravity.CENTER_VERTICAL);
                            tv3.setTypeface(Typeface.DEFAULT_BOLD);
                            tv3.setTextColor(Color.parseColor("#000000"));
                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursorr.getString(4));
                            float vbq = newmul * f;
                            final String multiply = String.format("%.2f", vbq);
                            //final String multiply = String.valueOf(newmul * f);
                            //newmul = Integer.parseInt(multiply);
                            tv3.setText(multiply);
                            row3.addView(tv3);

                            final ImageView imageView = new ImageView(CancelActivity.this);
                            imageView.setImageResource(R.drawable.ic_remove_black_24dp);
                            imageView.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                            imageView.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                            LinearLayout.LayoutParams params = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                    LinearLayout.LayoutParams.WRAP_CONTENT);
                            params.setMargins(6, 2, 6, 2);
                            imageView.setLayoutParams(params);
                            row3.addView(imageView);

                            imageView.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    ///////////////Toast.makeText(CancelActivity.this, "HIIIIIIII  disply dialog box", Toast.LENGTH_SHORT).show();

                                    ///////////////Toast.makeText(CancelActivity.this, "4", Toast.LENGTH_SHORT).show();
                                    if (masss.toString().equals("no")){
                                        if (tv.getText().toString().equals("1")) {
                                            ///////////////Toast.makeText(CancelActivity.this, "no modifiers with 1", Toast.LENGTH_SHORT).show();

                                            Cursor resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND itemname = '" + hii + "' AND _id = '" + modid + "' ", null);
                                            ///////////////Toast.makeText(CancelActivity.this, "Bill num is "+billno.getText().toString()+" itemname is "+hii+" id is "+modid , Toast.LENGTH_SHORT).show();
                                            while (resetmode1.moveToNext()) {
                                                String zx = resetmode1.getString(1);
                                                String zxx = resetmode1.getString(0);
                                                String st = resetmode1.getString(3);
                                                String ee = resetmode1.getString(2);
                                                /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();



                                                ContentValues newValues = new ContentValues();
                                                newValues.put("deleted_not", "");
                                                newValues.put("modifiedquantity", "");
                                                newValues.put("quantitycopy", ee);
                                                newValues.put("modifiedtotal", st);
                                                String where = "_id = '" + modid + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_sales")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("_id",modid+"")
                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);



                                                //     db1.update("All_sales", newValues, where, new String[]{});
                                                hii( );

                                            }

                                        }else {
                                            ///////////////Toast.makeText(CancelActivity.this, "no modifiers >1", Toast.LENGTH_SHORT).show();

                                            final Dialog dialog = new Dialog(CancelActivity.this, R.style.notitle);
                                            dialog.setContentView(R.layout.quantity_edit);
                                            ///////////////Toast.makeText(CancelActivity.this, "ccccc", Toast.LENGTH_SHORT).show();
                                            dialog.setTitle(Html.fromHtml("<font color='#ffffff'>Edit qty</font>"));
                                            dialog.show();

                                            TextView inn = (TextView) dialog.findViewById(R.id.inn);
                                            TextView inn1 = (TextView) dialog.findViewById(R.id.inn1);
                                            inn.setText(insert1_cc);
                                            inn1.setText(insert1_cc);

                                            Cursor cvb = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
                                            if (cvb.moveToFirst()){
                                                panetwo.setVisibility(View.VISIBLE);
                                                panethree.setVisibility(View.VISIBLE);
                                            }else {
                                                panetwo.setVisibility(View.GONE);
                                                panethree.setVisibility(View.INVISIBLE);
                                            }

                                            Cursor cursorcheck1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND mod_assigned = 'no' ", null);
                                            ///////////////Toast.makeText(CancelActivity.this, "dialog box >1 itemname "+hii, Toast.LENGTH_SHORT).show();
                                            while (cursorcheck1.moveToNext()) {

                                                ///////////////Toast.makeText(CancelActivity.this, "dialog box >1>1", Toast.LENGTH_SHORT).show();

                                                final String assmod = cursorcheck1.getString(1);
                                                final String ppp = cursorcheck1.getString(3);

                                                /////////////////Toast.makeText(CancelActivity.this, "assigned Modifiers are " + assmod, Toast.LENGTH_SHORT).show();


                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                if (cursor1.moveToFirst()){
                                                    do {
                                                        String qa = cursor1.getString(3);
                                                        /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                        Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
                                                        if (c1ursor1.moveToFirst()) {
                                                            do {

                                                                float aq = c1ursor1.getFloat(0);
                                                                String aqq = String.valueOf(aq);

                                                                //String aq = c1ursor1.getString(3);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                cal1 = Float.parseFloat(qa)+Float.parseFloat(aqq);

                                                                //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                            }while (c1ursor1.moveToNext());
                                                        }
                                                    }while (cursor1.moveToNext());
                                                }


                                                final TextView editText = (TextView) dialog.findViewById(R.id.displayquantity);
                                                editText.setText(tv.getText().toString());

                                                final TextView textView = (TextView) dialog.findViewById(R.id.itemname);
                                                textView.setText(hii);

                                                final TextView textView1 = (TextView) dialog.findViewById(R.id.price);
                                                float zx = Float.parseFloat(tv.getText().toString())*cal1;
                                                textView1.setText(String.format("%.2f", zx));

                                                final TextView disc_var_textview = (TextView) dialog.findViewById(R.id.disc_price);

                                                if (disc_31.toString().equals("0")){
                                                    disc_var_textview.setText("0");
                                                }else {
                                                    TextView cz = new TextView(CancelActivity.this);
                                                    cz.setText(disc_notorig_quan1);
                                                    if (cz.getText().toString().equals("")){
                                                        if (disc_orig_type1.toString().equals("%")){
                                                            float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) * Float.parseFloat(editText.getText().toString());
                                                            String bb = String.format("%.2f", cws);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }else {
                                                            float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                            //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_orig_quan1);
                                                            float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                            String bb = String.format("%.2f", cws1);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }
                                                    }else {
                                                        if (disc_orig_type1.toString().equals("%")){
                                                            float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) *
                                                                    (Float.parseFloat(editText.getText().toString()));
                                                            String bb = String.format("%.2f", cws);
                                                            disc_var_textview.setText("("+bb+")");
                                                            /////////Toast.makeText(CancelActivity.this, "cc "+bb, Toast.LENGTH_SHORT).show();
                                                        }else {
                                                            float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                            //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_notorig_quan1);
                                                            float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                            String bb = String.format("%.2f", cws1);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }
                                                    }
                                                }

//                                            ImageView clse = (ImageView)dialog.findViewById(R.id.closetext);
//                                            clse.setOnClickListener(new View.OnClickListener() {
//                                                @Override
//                                                public void onClick(View v) {
//                                                    dialog.dismiss();
//                                                }
//                                            });


                                                ImageButton imageView2 = (ImageButton) dialog.findViewById(R.id.quantitydecrease);
                                                imageView2.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        final TextView editText1 = (TextView) dialog.findViewById(R.id.displayquantity);
                                                        String qa = "0";
                                                        String addorsub = editText.getText().toString();
                                                        int clickcountsss = 0;
                                                        float incc = Float.parseFloat(addorsub);
                                                        clickcountsss++;

                                                        float bd = incc - clickcountsss;
                                                        newv = String.format("%.2f", bd);
                                                        //newv = String.valueOf(incc - clickcountsss);
                                                        newvv = Float.parseFloat(newv);



                                                        if (newvv < 0) {
                                                            //row.removeAllViews();
                                                        } else {
                                                            editText.setText(newv);
                                                        }

                                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                        if (cursor1.moveToFirst()){
                                                            do {
                                                                qa = cursor1.getString(3);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                                Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
                                                                if (c1ursor1.moveToFirst()) {
                                                                    do {

                                                                        float aq = c1ursor1.getFloat(0);
                                                                        String aqq = String.valueOf(aq);

                                                                        //String aq = c1ursor1.getString(3);
                                                                        /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                        cal = Float.parseFloat(qa)+Float.parseFloat(aqq);

                                                                        //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                        /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                                    }while (c1ursor1.moveToNext());
                                                                }
                                                            }while (cursor1.moveToNext());
                                                        }

                                                        final Cursor cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = '' OR deleted_not = 'decrease') ", null);
                                                        if (cursor.moveToFirst()){
                                                            final String disc_notorig_quan1 = cursor.getString(22);
                                                            cz = new TextView(CancelActivity.this);
                                                            cz.setText(disc_notorig_quan1);
                                                        }else {
                                                            cz = new TextView(CancelActivity.this);
                                                            cz.setText("");
                                                        }

                                                        if (editText.getText().toString().equals("0") || editText.getText().toString().equals("0.0") || editText.getText().toString().equals("0.00")){
                                                            textView1.setText("0");
                                                        }else {
                                                            Float cc = newvv*cal;
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+cc, Toast.LENGTH_SHORT).show();
                                                            textView1.setText(String.format("%.2f", cc));

                                                            if (cz.getText().toString().equals("")){
                                                                if (disc_orig_type1.toString().equals("%")){
                                                                    float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                    String ug = String.format("%.2f", cce);
                                                                    disc_var_textview.setText(ug);
                                                                }else {
                                                                    float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * Float.parseFloat(editText1.getText().toString());
                                                                    float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                    String bb = String.format("%.2f", cws1);
                                                                    disc_var_textview.setText("("+bb+")");
                                                                }
                                                            }else {
                                                                if (disc_orig_type1.toString().equals("%")){
                                                                    float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                    String ug = String.format("%.2f", cce);
                                                                    disc_var_textview.setText(ug);
                                                                    ///////////Toast.makeText(CancelActivity.this, "aa "+disc_var_textview.getText().toString(), Toast.LENGTH_SHORT).show();
                                                                }else {
                                                                    float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText1.getText().toString()));
                                                                    float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                    String bb = String.format("%.2f", cws1);
                                                                    disc_var_textview.setText("("+bb+")");
                                                                }
                                                            }
                                                        }


                                                    }
                                                });

                                                Button removeitem = (Button)dialog.findViewById(R.id.quantityremove);
                                                removeitem.setVisibility(View.VISIBLE);
                                                removeitem.setText("Revert back");
                                                removeitem.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                oorr = cursor1.getString(20);
                                                                nnaa = cursor1.getString(1);
                                                                String aacc = cursor1.getString(3);
                                                                String ccaa = cursor1.getString(2);
                                                                String stt = cursor1.getString(0);

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "");
                                                                newValues.put("quantitycopy", a);
                                                                newValues.put("modifiedquantity", "");
                                                                newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(ccaa)*Float.parseFloat(aacc)));
                                                                String where1 = "_id = '" + stt + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",stt+"")
                                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);



                                                                // db1.update("All_sales", newValues, where1, new String[]{});
                                                                ///////////////Toast.makeText(CancelActivity.this, " item "+oorr+" id "+stt+" name "+nnaa, Toast.LENGTH_SHORT).show();

                                                            } while (cursor1.moveToNext());
                                                        }

                                                        ContentValues newValues = new ContentValues();
                                                        newValues.put("deleted_not", "");
                                                        newValues.put("quantitycopy", a);
                                                        newValues.put("modifiedquantity", "");
                                                        newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a)*Float.parseFloat(aacc1)));
                                                        newValues.put("new_modified_total", xc1.getText().toString());
                                                        String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";



                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                        getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                        resultUri = new Uri.Builder()
                                                                .scheme("content")
                                                                .authority(StubProvider.AUTHORITY)
                                                                .path("All_sales")
                                                                .appendQueryParameter("operation", "update")
                                                                .appendQueryParameter("_id",modidd+"")
                                                                .appendQueryParameter("bill_no",billno.getText().toString())
                                                                .build();
                                                        getContentResolver().notifyChange(resultUri, null);




                                                        //       db1.update("All_sales", newValues, where, new String[]{});
                                                        ///////////////Toast.makeText(CancelActivity.this, " modifier "+modidd, Toast.LENGTH_SHORT).show();
                                                        dialog.dismiss();
                                                        hii( );
                                                    }
                                                });

                                                ImageView ok = (ImageView) dialog.findViewById(R.id.save);
                                                ok.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {

                                                        String box = editText.getText().toString();
                                                        final String number1 = tv.getText().toString();

                                                        if (number1.toString().equals(box)){
                                                            dialog.dismiss();
                                                        }else {
                                                            if (Float.parseFloat(editText.getText().toString()) > Float.parseFloat(tv.getText().toString())) {
                                                                ///////////////Toast.makeText(CancelActivity.this, "Quantity has to be lesser than " + tv.getText().toString(), Toast.LENGTH_SHORT).show();
                                                            } else {
                                                                if (Float.parseFloat(number1) <= 0 || Float.parseFloat(box) <= 0) {
                                                                    //final EditText editText2 = (EditText) dialog.findViewById(R.id.displayquantity);
                                                                    //String box2 = editText2.getText().toString();
                                                                    row3.removeAllViews();
                                                                    //row2.removeAllViews();

                                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                    if (cursor1.moveToFirst()) {
                                                                        do {
                                                                            oorr = cursor1.getString(20);
                                                                            String st21 = cursor1.getString(2);
                                                                            String aacc = cursor1.getString(3);

                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("deleted_not", "");
                                                                            newValues.put("quantitycopy", st21);
                                                                            newValues.put("modifiedquantity", "");
                                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(st21) * Float.parseFloat(aacc)));
                                                                            String where1 = "parentid = '" + oorr + "' AND bill_no = '" + billno.getText().toString() + "' ";

                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("parentid", oorr + "")
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //    db1.update("All_sales", newValues, where1, new String[]{});
                                                                            ///////////////Toast.makeText(CancelActivity.this, "1 "+oorr+" id "+modid, Toast.LENGTH_SHORT).show();

                                                                        } while (cursor1.moveToNext());
                                                                    }

                                                                    ContentValues newValues = new ContentValues();
                                                                    newValues.put("deleted_not", "");
                                                                    newValues.put("quantitycopy", a);
                                                                    newValues.put("modifiedquantity", "");
                                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a) * Float.parseFloat(aacc1)));
                                                                    String where = "_id = '" + modidd + "' AND bill_no = '" + billno.getText().toString() + "' ";
                                                                    ///////////////Toast.makeText(CancelActivity.this, "2 "+oorr+" id "+modidd, Toast.LENGTH_SHORT).show();


                                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                    getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProvider.AUTHORITY)
                                                                            .path("All_sales")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", modidd + "")
                                                                            .appendQueryParameter("bill_no", billno.getText().toString())
                                                                            .build();
                                                                    getContentResolver().notifyChange(resultUri, null);


                                                                    //  db1.update("All_sales", newValues, where, new String[]{});


                                                                } else {
                                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                    if (cursor1.moveToFirst()) {
                                                                        do {
                                                                            oorr = cursor1.getString(20);
                                                                            String st21 = cursor1.getString(2);
                                                                            String ppp = cursor1.getString(3);
                                                                            String modqty = cursor1.getString(22);
                                                                            String qtycopy = cursor1.getString(23);

                                                                            if (modqty.toString().equals("")) {
//                                                                    ContentValues newValues = new ContentValues();
//                                                                    newValues.put("modifiedquantity", editText.getText().toString());
//                                                                    newValues.put("quantitycopy", String.valueOf(Integer.parseInt(tv.getText().toString()) - Integer.parseInt(editText.getText().toString())));
//                                                                    newValues.put("deleted_not", "decrease");
//                                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Integer.parseInt(tv.getText().toString()) - Integer.parseInt(editText.getText().toString()))) * Float.parseFloat(ppp)));
                                                                                ContentValues newValues = new ContentValues();
                                                                                newValues.put("modifiedquantity", editText.getText().toString());
                                                                                newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                                newValues.put("deleted_not", "decrease");
                                                                                newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                                String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                                getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                                resultUri = new Uri.Builder()
                                                                                        .scheme("content")
                                                                                        .authority(StubProvider.AUTHORITY)
                                                                                        .path("All_sales")
                                                                                        .appendQueryParameter("operation", "update")
                                                                                        .appendQueryParameter("_id", modidd + "")
                                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                        .build();
                                                                                getContentResolver().notifyChange(resultUri, null);


                                                                                //     db1.update("All_sales", newValues, where1, new String[]{});
                                                                            } else {
//                                                                    ContentValues newValues = new ContentValues();
//                                                                    newValues.put("modifiedquantity", editText.getText().toString());
//                                                                    newValues.put("quantitycopy", String.valueOf(Integer.parseInt(qtycopy) - Integer.parseInt(editText.getText().toString()) + Integer.parseInt(modqty)));
//                                                                    newValues.put("deleted_not", "decrease");
//                                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Integer.parseInt(qtycopy) - Integer.parseInt(editText.getText().toString()) + Integer.parseInt(modqty))) * Float.parseFloat(ppp)));
                                                                                ContentValues newValues = new ContentValues();
                                                                                newValues.put("modifiedquantity", editText.getText().toString());
                                                                                newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                                newValues.put("deleted_not", "decrease");
                                                                                newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                                String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                                getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                                resultUri = new Uri.Builder()
                                                                                        .scheme("content")
                                                                                        .authority(StubProvider.AUTHORITY)
                                                                                        .path("All_sales")
                                                                                        .appendQueryParameter("operation", "update")
                                                                                        .appendQueryParameter("_id", modidd + "")
                                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                        .build();
                                                                                getContentResolver().notifyChange(resultUri, null);


                                                                                //    db1.update("All_sales", newValues, where1, new String[]{});

                                                                                ///////////////Toast.makeText(CancelActivity.this, "modifqty = "+String.valueOf(Integer.parseInt(qtycopy) - Integer.parseInt(editText.getText().toString())+Integer.parseInt(modqty)), Toast.LENGTH_SHORT).show();
                                                                            }


                                                                            ///////////////Toast.makeText(CancelActivity.this, "3 "+oorr+" id "+modid+
                                                                            //"total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();


                                                                        } while (cursor1.moveToNext());
                                                                    }

                                                                    Cursor c1ursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' AND deleted_not = '' ", null);
                                                                    if (c1ursor1.moveToFirst()) {
                                                                        do {
                                                                            String st = c1ursor1.getString(0);
                                                                            String st21 = c1ursor1.getString(2);
                                                                            String ppp = c1ursor1.getString(3);
                                                                            String modqty = c1ursor1.getString(22);
                                                                            String qtycopy = c1ursor1.getString(23);

                                                                            if (modqty.toString().equals("")) {
//                                                                    ContentValues newValues = new ContentValues();
//                                                                    newValues.put("modifiedquantity", editText.getText().toString());
//                                                                    newValues.put("quantitycopy", String.valueOf(Integer.parseInt(tv.getText().toString()) - Integer.parseInt(editText.getText().toString())));
//                                                                    newValues.put("deleted_not", "decrease");
//                                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Integer.parseInt(tv.getText().toString()) - Integer.parseInt(editText.getText().toString()))) * Float.parseFloat(ppp)));


                                                                                ContentValues newValues = new ContentValues();
                                                                                newValues.put("modifiedquantity", editText.getText().toString());
                                                                                newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                                newValues.put("deleted_not", "decrease");
                                                                                newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                                String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                                getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                                resultUri = new Uri.Builder()
                                                                                        .scheme("content")
                                                                                        .authority(StubProvider.AUTHORITY)
                                                                                        .path("All_sales")
                                                                                        .appendQueryParameter("operation", "update")
                                                                                        .appendQueryParameter("_id", st + "")
                                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                        .build();
                                                                                getContentResolver().notifyChange(resultUri, null);


                                                                                //    db1.update("All_sales", newValues, where, new String[]{});
                                                                            } else {
                                                                                ContentValues newValues = new ContentValues();
                                                                                newValues.put("modifiedquantity", editText.getText().toString());
                                                                                newValues.put("quantitycopy", String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty)));
                                                                                newValues.put("deleted_not", "decrease");
                                                                                newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                                String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                                getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                                resultUri = new Uri.Builder()
                                                                                        .scheme("content")
                                                                                        .authority(StubProvider.AUTHORITY)
                                                                                        .path("All_sales")
                                                                                        .appendQueryParameter("operation", "update")
                                                                                        .appendQueryParameter("_id", st + "")
                                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                        .build();
                                                                                getContentResolver().notifyChange(resultUri, null);


                                                                                //         db1.update("All_sales", newValues, where, new String[]{});
                                                                            }


                                                                            ///////////////Toast.makeText(CancelActivity.this, "4 "+oorr+" id "+st+
                                                                            //" total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();
                                                                        } while (c1ursor1.moveToNext());
                                                                    }


                                                                    tv.setText(editText.getText().toString());
                                                                }
                                                                dialog.dismiss();
//                                                tv.setText(editText.getText().toString());
//                                                dialog.dismiss();
                                                            }
                                                            hii();
                                                        }

//                                                    db = openOrCreateDatabase("mydb", Context.MODE_PRIVATE, null);
//                                                    Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = '' OR deleted_not = 'decrease') = ''  ", null);
//                                                    if (cursor11.moveToFirst()) {
//                                                        levelel = cursor11.getInt(0);
//                                                        tatat = String.valueOf(level);
//                                                        ///////////////Toast.makeText(CancelActivity.this, "tottttal is "+tat, Toast.LENGTH_SHORT).show();
//                                                    }
//
//                                                    final String tot = String.valueOf(Float.parseFloat(tat));
//                                                    onlybillnew.setText(tot);

                                                    }
                                                });

                                                ImageView cancel = (ImageView) dialog.findViewById(R.id.btndelete);
                                                cancel.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        dialog.dismiss();
                                                    }
                                                });








                                            }

                                        }

                                    }else {

                                        if (tv.getText().toString().equals("1")) {
                                            ///////////////Toast.makeText(CancelActivity.this, "only 1", Toast.LENGTH_SHORT).show();
                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                            if (cursor1.moveToFirst()) {
                                                do {
                                                    oorr = cursor1.getString(20);
                                                    nnaa = cursor1.getString(1);
                                                    String st21 = cursor1.getString(2);

                                                    ContentValues newValues = new ContentValues();
                                                    newValues.put("deleted_not", "");
                                                    newValues.put("quantitycopy", ii);
                                                    newValues.put("modifiedquantity", "");
                                                    newValues.put("modifiedtotal", "");
                                                    String where1 = "parentid = '" + oorr + "' AND bill_no = '"+billno.getText().toString()+"' ";



                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                    getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("All_sales")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("parentid",oorr+"")
                                                            .appendQueryParameter("bill_no",billno.getText().toString())
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);



                                                    //  db1.update("All_sales", newValues, where1, new String[]{});
                                                    ///////////////Toast.makeText(CancelActivity.this, " item " + oorr + " id " + modid + " name " + nnaa, Toast.LENGTH_SHORT).show();

                                                } while (cursor1.moveToNext());
                                            }

                                            ContentValues newValues = new ContentValues();
                                            newValues.put("deleted_not", "");
                                            newValues.put("quantitycopy", ii);
                                            newValues.put("modifiedquantity", "");
                                            newValues.put("modifiedtotal", "");
                                            String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";



                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                            getContentResolver().update(contentUri, newValues,where,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_sales")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",modidd+"")
                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);



                                            //        db1.update("All_sales", newValues, where, new String[]{});
                                            ///////////////Toast.makeText(CancelActivity.this, " modifier " + modidd, Toast.LENGTH_SHORT).show();

                                            hii( );
                                        } else {
                                            ///////////////Toast.makeText(CancelActivity.this, "> than 1, display dialog box", Toast.LENGTH_SHORT).show();

                                            final Dialog dialog = new Dialog(CancelActivity.this, R.style.notitle);
                                            dialog.setContentView(R.layout.quantity_edit);
                                            ///////////////Toast.makeText(CancelActivity.this, "ddddd", Toast.LENGTH_SHORT).show();
                                            dialog.show();

                                            TextView inn = (TextView) dialog.findViewById(R.id.inn);
                                            TextView inn1 = (TextView) dialog.findViewById(R.id.inn1);
                                            inn.setText(insert1_cc);
                                            inn1.setText(insert1_cc);

                                            Cursor cvb = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
                                            if (cvb.moveToFirst()){
                                                panetwo.setVisibility(View.VISIBLE);
                                                panethree.setVisibility(View.VISIBLE);
                                            }else {
                                                panetwo.setVisibility(View.GONE);
                                                panethree.setVisibility(View.INVISIBLE);
                                            }

                                            Cursor cursorcheck1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                            while (cursorcheck1.moveToNext()) {

                                                final String assmod = cursorcheck1.getString(1);
                                                final String ppp = cursorcheck1.getString(3);

                                                /////////////////Toast.makeText(CancelActivity.this, "assigned Modifiers are " + assmod, Toast.LENGTH_SHORT).show();


                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        String qa = cursor1.getString(3);
                                                        /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                        Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                        if (c1ursor1.moveToFirst()) {
                                                            do {

                                                                float aq = c1ursor1.getFloat(0);
                                                                String aqq = String.valueOf(aq);

                                                                //String aq = c1ursor1.getString(3);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                cal1 = Float.parseFloat(qa) + Float.parseFloat(aqq);

                                                                //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                            } while (c1ursor1.moveToNext());
                                                        }
                                                    } while (cursor1.moveToNext());
                                                }


                                                final TextView editText = (TextView) dialog.findViewById(R.id.displayquantity);
                                                editText.setText(tv.getText().toString());

                                                final TextView textView = (TextView) dialog.findViewById(R.id.itemname);
                                                textView.setText(hii);

                                                final TextView textView1 = (TextView) dialog.findViewById(R.id.price);
                                                float zx = Float.parseFloat(tv.getText().toString()) * cal1;
                                                textView1.setText(String.format("%.2f", zx));

                                                final TextView disc_var_textview = (TextView) dialog.findViewById(R.id.disc_price);

                                                if (disc_31.toString().equals("0")){
                                                    disc_var_textview.setText("0");
                                                }else {
                                                    TextView cz = new TextView(CancelActivity.this);
                                                    cz.setText(disc_notorig_quan1);
                                                    if (cz.getText().toString().equals("")){
                                                        if (disc_orig_type1.toString().equals("%")){
                                                            float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) * Float.parseFloat(editText.getText().toString());
                                                            String bb = String.format("%.2f", cws);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }else {
                                                            float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                            //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_orig_quan1);
                                                            float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                            String bb = String.format("%.2f", cws1);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }
                                                    }else {
                                                        if (disc_orig_type1.toString().equals("%")){
                                                            float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) *
                                                                    (Float.parseFloat(editText.getText().toString()));
                                                            String bb = String.format("%.2f", cws);
                                                            disc_var_textview.setText("("+bb+")");
                                                            /////////Toast.makeText(CancelActivity.this, "dd "+bb, Toast.LENGTH_SHORT).show();
                                                        }else {
                                                            float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                            //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_notorig_quan1);
                                                            float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                            String bb = String.format("%.2f", cws1);
                                                            disc_var_textview.setText("("+bb+")");
                                                        }
                                                    }
                                                }

//                                                ImageView clse = (ImageView) dialog.findViewById(R.id.closetext);
//                                                clse.setOnClickListener(new View.OnClickListener() {
//                                                    @Override
//                                                    public void onClick(View v) {
//                                                        dialog.dismiss();
//                                                    }
//                                                });


                                                ImageButton imageView2 = (ImageButton) dialog.findViewById(R.id.quantitydecrease);
                                                imageView2.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        final TextView editText1 = (TextView) dialog.findViewById(R.id.displayquantity);
                                                        String qa = "0";
                                                        String addorsub = editText.getText().toString();
                                                        int clickcountsss = 0;
                                                        float incc = Float.parseFloat(addorsub);
                                                        clickcountsss++;

                                                        float bd = incc - clickcountsss;
                                                        newv = String.format("%.2f", bd);
                                                        //newv = String.valueOf(incc - clickcountsss);
                                                        newvv = Float.parseFloat(newv);


                                                        if (newvv < 0) {
                                                            //row.removeAllViews();
                                                        } else {
                                                            editText.setText(newv);
                                                        }

                                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                qa = cursor1.getString(3);
                                                                /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                                Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                                if (c1ursor1.moveToFirst()) {
                                                                    do {

                                                                        float aq = c1ursor1.getFloat(0);
                                                                        String aqq = String.valueOf(aq);

                                                                        //String aq = c1ursor1.getString(3);
                                                                        /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                        cal = Float.parseFloat(qa) + Float.parseFloat(aqq);

                                                                        //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                        /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                                    } while (c1ursor1.moveToNext());
                                                                }
                                                            } while (cursor1.moveToNext());
                                                        }

                                                        final Cursor cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = '' OR deleted_not = 'decrease') ", null);
                                                        if (cursor.moveToFirst()){
                                                            final String disc_notorig_quan1 = cursor.getString(22);
                                                            cz = new TextView(CancelActivity.this);
                                                            cz.setText(disc_notorig_quan1);
                                                        }else {
                                                            cz = new TextView(CancelActivity.this);
                                                            cz.setText("");
                                                        }

                                                        if (editText.getText().toString().equals("0") || editText.getText().toString().equals("0.0") || editText.getText().toString().equals("0.00")) {
                                                            textView1.setText("0");
                                                        } else {
                                                            Float cc = newvv * cal;
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+cc, Toast.LENGTH_SHORT).show();
                                                            textView1.setText(String.format("%.2f", cc));

                                                            if (cz.getText().toString().equals("")){
                                                                if (disc_orig_type1.toString().equals("%")){
                                                                    float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                    String ug = String.format("%.2f", cce);
                                                                    disc_var_textview.setText(ug);
                                                                }else {
                                                                    float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * Float.parseFloat(editText1.getText().toString());
                                                                    float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                    String bb = String.format("%.2f", cws1);
                                                                    disc_var_textview.setText("("+bb+")");
                                                                }
                                                            }else {
                                                                if (disc_orig_type1.toString().equals("%")){
                                                                    float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                    String ug = String.format("%.2f", cce);
                                                                    disc_var_textview.setText(ug);
                                                                    ///////////Toast.makeText(CancelActivity.this, "aa "+disc_var_textview.getText().toString(), Toast.LENGTH_SHORT).show();
                                                                }else {
                                                                    float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText1.getText().toString()));
                                                                    float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                    String bb = String.format("%.2f", cws1);
                                                                    disc_var_textview.setText("("+bb+")");
                                                                }
                                                            }
                                                        }


                                                    }
                                                });

                                                Button removeitem = (Button) dialog.findViewById(R.id.quantityremove);
                                                removeitem.setVisibility(View.VISIBLE);
                                                removeitem.setText("Revert back");
                                                removeitem.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                oorr = cursor1.getString(20);
                                                                nnaa = cursor1.getString(1);
                                                                String st21 = cursor1.getString(2);
                                                                final String xcs = cursor1.getString(31);

                                                                TextView xc1 = new TextView(CancelActivity.this);
                                                                xc1.setText(xcs);

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "");
                                                                newValues.put("quantitycopy", ii);
                                                                newValues.put("modifiedquantity", "");
                                                                newValues.put("modifiedtotal", "");
                                                                newValues.put("new_modified_total", xc1.getText().toString());

                                                                String where1 = "_id = '" + modid + "' AND bill_no = '"+billno.getText().toString()+"'";



                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",modidd+"")
                                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);




                                                                //   db1.update("All_sales", newValues, where1, new String[]{});
                                                                ///////////////Toast.makeText(CancelActivity.this, " item " + oorr + " id " + modid + " name " + nnaa, Toast.LENGTH_SHORT).show();

                                                            } while (cursor1.moveToNext());
                                                        }

                                                        Cursor c1ursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                        ///////////////Toast.makeText(CancelActivity.this, "box11 parent "+hii+" par id "+newid, Toast.LENGTH_SHORT).show();
                                                        if (c1ursor1.moveToFirst()) {
                                                            do {
                                                                final String mm = c1ursor1.getString(0);

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "");
                                                                newValues.put("quantitycopy", ii);
                                                                newValues.put("modifiedquantity", "");
                                                                newValues.put("modifiedtotal", "");
                                                                String where = "_id = '" + mm + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",mm+"")
                                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);




                                                                //      db1.update("All_sales", newValues, where, new String[]{});
                                                                ///////////////Toast.makeText(CancelActivity.this, " modifier " + mm, Toast.LENGTH_SHORT).show();
                                                                dialog.dismiss();
                                                            } while (c1ursor1.moveToNext());
                                                        }

                                                        hii( );
                                                    }
                                                });

                                                ImageView ok = (ImageView) dialog.findViewById(R.id.save);
                                                ok.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {

                                                        String box = editText.getText().toString();
                                                        final String number1 = tv.getText().toString();

                                                        if (number1.toString().equals(box)){
                                                            dialog.dismiss();
                                                        }else {
                                                            if (Float.parseFloat(editText.getText().toString()) > Float.parseFloat(tv.getText().toString())) {
                                                                ///////////////Toast.makeText(CancelActivity.this, "Quantity has to be lesser than " + tv.getText().toString(), Toast.LENGTH_SHORT).show();
                                                            } else {
                                                                if (Float.parseFloat(number1) <= 0 || Float.parseFloat(box) <= 0) {
//                                                    final EditText editText2 = (EditText) dialog.findViewById(R.id.displayquantity);
//                                                    String box2 = editText2.getText().toString();
                                                                    row3.removeAllViews();
                                                                    //row2.removeAllViews();

                                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                    if (cursor1.moveToFirst()) {
                                                                        do {
                                                                            oorr = cursor1.getString(20);
                                                                            String st21 = cursor1.getString(2);

                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("deleted_not", "");
                                                                            newValues.put("quantitycopy", st21);
                                                                            newValues.put("modifiedquantity", "");
                                                                            newValues.put("modifiedtotal", "");
                                                                            String where1 = "parentid = '" + oorr + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("parentid", oorr + "")
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //   db1.update("All_sales", newValues, where1, new String[]{});
                                                                            ///////////////Toast.makeText(CancelActivity.this, "1 " + oorr + " id " + modid, Toast.LENGTH_SHORT).show();

                                                                        } while (cursor1.moveToNext());
                                                                    }

                                                                    ContentValues newValues = new ContentValues();
                                                                    newValues.put("deleted_not", "");
                                                                    newValues.put("quantitycopy", ii);
                                                                    newValues.put("modifiedquantity", "");
                                                                    newValues.put("modifiedtotal", "");
                                                                    String where = "_id = '" + modidd + "'  AND bill_no = '" + billno.getText().toString() + "'";
                                                                    ///////////////Toast.makeText(CancelActivity.this, "2 " + oorr + " id " + modidd, Toast.LENGTH_SHORT).show();


                                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                    getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                    resultUri = new Uri.Builder()
                                                                            .scheme("content")
                                                                            .authority(StubProvider.AUTHORITY)
                                                                            .path("All_sales")
                                                                            .appendQueryParameter("operation", "update")
                                                                            .appendQueryParameter("_id", modidd + "")
                                                                            .appendQueryParameter("bill_no", billno.getText().toString())
                                                                            .build();
                                                                    getContentResolver().notifyChange(resultUri, null);


                                                                    //   db1.update("All_sales", newValues, where, new String[]{});


                                                                } else {
                                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                    if (cursor1.moveToFirst()) {
                                                                        do {
                                                                            oorr = cursor1.getString(20);
                                                                            String ppp = cursor1.getString(3);
                                                                            String ori = cursor1.getString(2);
                                                                            String modqty = cursor1.getString(22);
                                                                            String qtycopy = cursor1.getString(23);


                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", editText.getText().toString());
                                                                            newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                            String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", modidd + "")
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //      db1.update("All_sales", newValues, where1, new String[]{});

                                                                            //String.valueOf(Integer.parseInt(modqty)+Integer.parseInt(editText.getText().toString())));

                                                                            ///////////////Toast.makeText(CancelActivity.this, "3 " + oorr + " id " + modid +
                                                                            //"total " + String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();

                                                                        } while (cursor1.moveToNext());
                                                                    }

                                                                    Cursor c1ursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                                    if (c1ursor1.moveToFirst()) {
                                                                        do {
                                                                            String st = c1ursor1.getString(0);
                                                                            String ppp = c1ursor1.getString(3);
                                                                            String modqty = c1ursor1.getString(22);
                                                                            String qtycopy = c1ursor1.getString(23);

                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", editText.getText().toString());
                                                                            newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                            String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", st + "")
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //      db1.update("All_sales", newValues, where, new String[]{});
                                                                            ///////////////Toast.makeText(CancelActivity.this, "4 " + oorr + " id " + st +
                                                                            //" total " + String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();
                                                                        } while (c1ursor1.moveToNext());
                                                                    }


                                                                    tv.setText(editText.getText().toString());
                                                                }
                                                                dialog.dismiss();
//                                                tv.setText(editText.getText().toString());
//                                                dialog.dismiss();
                                                            }
                                                            hii();
                                                        }

//                                            db = openOrCreateDatabase("mydb", Context.MODE_PRIVATE, null);
//                                            Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = '' OR deleted_not = 'decrease') = ''  ", null);
//                                            if (cursor11.moveToFirst()) {
//                                                levelel = cursor11.getInt(0);
//                                                tatat = String.valueOf(level);
//                                                ///////////////Toast.makeText(CancelActivity.this, "tottttal is "+tat, Toast.LENGTH_SHORT).show();
//                                            }
//
//                                            final String tot = String.valueOf(Float.parseFloat(tat));
//                                            onlybillnew.setText(tot);

                                                    }
                                                });

                                                ImageView cancel = (ImageView) dialog.findViewById(R.id.btndelete);
                                                cancel.setOnClickListener(new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        dialog.dismiss();
                                                    }
                                                });


                                            }
                                        }
                                    }




//                                final Dialog dialog = new Dialog(CancelActivity.this, R.style.cust_dialogg);
//                                dialog.setContentView(R.layout.quantity_edit);
//                                dialog.setTitle(Html.fromHtml("<font color='#ffffff'>Edit qty</font>"));
//                                dialog.show();
//
//                                Cursor cursorcheck1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
//                                while (cursorcheck1.moveToNext()) {
//
//                                    final String assmod = cursorcheck1.getString(1);
//                                    final String ppp = cursorcheck1.getString(3);
//
//                                    /////////////////Toast.makeText(CancelActivity.this, "assigned Modifiers are " + assmod, Toast.LENGTH_SHORT).show();
//
//
//                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
//                                    if (cursor1.moveToFirst()){
//                                        do {
//                                            String qa = cursor1.getString(3);
//                                            /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();
//
//                                            Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
//                                            if (c1ursor1.moveToFirst()) {
//                                                do {
//
//                                                    int aq = c1ursor1.getInt(0);
//                                                    String aqq = String.valueOf(aq);
//
//                                                    //String aq = c1ursor1.getString(3);
//                                                    /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
//                                                    cal1 = Float.parseFloat(qa)+Float.parseFloat(aqq);
//
//                                                    //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
//                                                    /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();
//
//                                                }while (c1ursor1.moveToNext());
//                                            }
//                                        }while (cursor1.moveToNext());
//                                    }
//
//
//                                    final TextView editText = (TextView) dialog.findViewById(R.id.displayquantity);
//                                    editText.setText(tv.getText().toString());
//
//                                    final TextView textView = (TextView) dialog.findViewById(R.id.itemname);
//                                    textView.setText(hii);
//
//                                    final TextView textView1 = (TextView) dialog.findViewById(R.id.price);
//                                    float zx = Float.parseFloat(tv.getText().toString())*cal1;
//                                    textView1.setText(String.valueOf(zx));
//
//                                    ImageView clse = (ImageView)dialog.findViewById(R.id.closetext);
//                                    clse.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View v) {
//                                            dialog.dismiss();
//                                        }
//                                    });
//
//
//                                    Button imageView2 = (Button) dialog.findViewById(R.id.quantitydecrease);
//                                    imageView2.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View v) {
//                                            String addorsub = editText.getText().toString();
//                                            int clickcountsss = 0;
//                                            int incc = Integer.parseInt(addorsub);
//                                            clickcountsss++;
//
//                                            newv = String.valueOf(incc - clickcountsss);
//                                            newvv = Integer.parseInt(newv);
//
//
//                                            if (newvv < 0) {
//                                                //row.removeAllViews();
//                                            } else {
//                                                editText.setText(newv);
//                                            }
//
//                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
//                                            if (cursor1.moveToFirst()) {
//                                                do {
//                                                    String qa = cursor1.getString(3);
//                                                    /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();
//
//                                                    Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
//                                                    if (c1ursor1.moveToFirst()) {
//                                                        do {
//
//                                                            int aq = c1ursor1.getInt(0);
//                                                            String aqq = String.valueOf(aq);
//
//                                                            //String aq = c1ursor1.getString(3);
//                                                            /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
//                                                            cal = Float.parseFloat(qa) + Float.parseFloat(aqq);
//
//                                                            //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
//                                                            /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();
//
//                                                        } while (c1ursor1.moveToNext());
//                                                    }
//                                                } while (cursor1.moveToNext());
//                                            }
//
//                                            if (editText.getText().toString().equals("0") || editText.getText().toString().equals("0.0") || editText.getText().toString().equals("0.00")) {
//                                                textView1.setText("0");
//                                            } else {
//                                                Float cc = newvv * cal;
//                                                /////////////////Toast.makeText(CancelActivity.this, " "+cc, Toast.LENGTH_SHORT).show();
//                                                textView1.setText(String.valueOf(cc));
//                                            }
//
//
//                                        }
//                                    });
//
//                                    Button removeitem = (Button)dialog.findViewById(R.id.quantityremove);
//                                    removeitem.setVisibility(View.VISIBLE);
//                                    removeitem.setText("Revert back");
//                                    removeitem.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View v) {
//                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
//                                            if (cursor1.moveToFirst()) {
//                                                do {
//                                                    oorr = cursor1.getString(20);
//                                                    nnaa = cursor1.getString(1);
//
//                                                    ContentValues newValues = new ContentValues();
//                                                    newValues.put("deleted_not", "");
//                                                    newValues.put("quantitycopy", tv.getText().toString());
//                                                    newValues.put("modifiedquantity", "");
//                                                    newValues.put("modifiedtotal", "");
//                                                    String where1 = "parentid = '" + oorr + "' ";
//                                                    db1.update("All_sales", newValues, where1, new String[]{});
//                                                    ///////////////Toast.makeText(CancelActivity.this, " item "+oorr+" id "+modid+" name "+nnaa, Toast.LENGTH_SHORT).show();
//
//                                                } while (cursor1.moveToNext());
//                                            }
//
//                                            ContentValues newValues = new ContentValues();
//                                            newValues.put("deleted_not", "");
//                                            newValues.put("quantitycopy", tv.getText().toString());
//                                            newValues.put("modifiedquantity", "");
//                                            newValues.put("modifiedtotal", "");
//                                            String where = "_id = '" + modidd + "' ";
//                                            db1.update("All_sales", newValues, where, new String[]{});
//                                            ///////////////Toast.makeText(CancelActivity.this, " modifier "+modidd, Toast.LENGTH_SHORT).show();
//                                            dialog.dismiss();
//                                            hii( );
//                                        }
//                                    });
//
//                                    Button ok = (Button) dialog.findViewById(R.id.save);
//                                    ok.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View v) {
//
//                                            String box = editText.getText().toString();
//                                            final String number1 = tv.getText().toString();
//
//                                            if (Integer.parseInt(editText.getText().toString()) > Integer.parseInt(tv.getText().toString())) {
//                                                ///////////////Toast.makeText(CancelActivity.this, "Quantity has to be lesser than " + tv.getText().toString(), Toast.LENGTH_SHORT).show();
//                                            } else {
//                                                if (Integer.parseInt(number1) <= 0 || Integer.parseInt(box) <= 0) {
////                                                    final EditText editText2 = (EditText) dialog.findViewById(R.id.displayquantity);
////                                                    String box2 = editText2.getText().toString();
//                                                    row3.removeAllViews();
//                                                    //row2.removeAllViews();
//
//                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
//                                                    if (cursor1.moveToFirst()) {
//                                                        do {
//                                                            oorr = cursor1.getString(20);
//
//                                                            ContentValues newValues = new ContentValues();
//                                                            newValues.put("deleted_not", "");
//                                                            newValues.put("quantitycopy", tv.getText().toString());
//                                                            newValues.put("modifiedquantity", "");
//                                                            newValues.put("modifiedtotal", "");
//                                                            String where1 = "parentid = '" + oorr + "' ";
//                                                            db1.update("All_sales", newValues, where1, new String[]{});
//                                                            ///////////////Toast.makeText(CancelActivity.this, "1 "+oorr+" id "+modid, Toast.LENGTH_SHORT).show();
//
//                                                        } while (cursor1.moveToNext());
//                                                    }
//
//                                                    ContentValues newValues = new ContentValues();
//                                                    newValues.put("deleted_not", "");
//                                                    newValues.put("quantitycopy", tv.getText().toString());
//                                                    newValues.put("modifiedquantity", "");
//                                                    newValues.put("modifiedtotal", "");
//                                                    String where = "_id = '" + modidd + "' ";
//                                                    ///////////////Toast.makeText(CancelActivity.this, "2 "+oorr+" id "+modidd, Toast.LENGTH_SHORT).show();
//                                                    db1.update("All_sales", newValues, where, new String[]{});
//
//
//                                                } else {
//                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
//                                                    if (cursor1.moveToFirst()) {
//                                                        do {
//                                                            oorr = cursor1.getString(20);
//                                                            String ppp = cursor1.getString(3);
//
//                                                            ContentValues newValues = new ContentValues();
//                                                            newValues.put("modifiedquantity", editText.getText().toString());
//                                                            newValues.put("quantitycopy", Integer.parseInt(tv.getText().toString())-Integer.parseInt(editText.getText().toString()));
//                                                            newValues.put("deleted_not", "decrease");
//                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)));
//                                                            String where1 = "_id = '" + modid + "' ";
//                                                            db1.update("All_sales", newValues, where1, new String[]{});
//                                                            ///////////////Toast.makeText(CancelActivity.this, "3 "+oorr+" id "+modid+
//                                                                    "total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();
//
//                                                        } while (cursor1.moveToNext());
//                                                    }
//
//                                                    Cursor c1ursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "'", null);
//                                                    if (c1ursor1.moveToFirst()) {
//                                                        do {
//                                                            String st = c1ursor1.getString(0);
//                                                            String ppp = c1ursor1.getString(3);
//                                                            ContentValues newValues = new ContentValues();
//                                                            newValues.put("modifiedquantity", editText.getText().toString());
//                                                            newValues.put("quantitycopy", Integer.parseInt(tv.getText().toString())-Integer.parseInt(editText.getText().toString()));
//                                                            newValues.put("deleted_not", "decrease");
//                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)));
//                                                            String where = "_id = '" + st + "' ";
//                                                            db1.update("All_sales", newValues, where, new String[]{});
//                                                            ///////////////Toast.makeText(CancelActivity.this, "4 "+oorr+" id "+st+
//                                                                    " total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();
//                                                        } while (c1ursor1.moveToNext());
//                                                    }
//
//
//
//                                                    tv.setText(editText.getText().toString());
//                                                }
//                                                dialog.dismiss();
////                                                tv.setText(editText.getText().toString());
////                                                dialog.dismiss();
//                                            }
//                                            hii( );
//                                        }
//                                    });
//
//                                    Button cancel = (Button) dialog.findViewById(R.id.btndelete);
//                                    cancel.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View v) {
//                                            dialog.dismiss();
//                                        }
//                                    });
//
//
//
//
//
//
//
//
//                                }

                                    ////////////////////////////
//                                tableLayout2.removeView(row3);
//                                tableLayout2.removeView(tableLayout4);
//
//
//                                Cursor resetmode1 = db1.rawQuery("SELECT * FROM All_Sales WHERE itemname = '" + nam + "' AND _id = '" + idis + "' ", null);
//                                while (resetmode1.moveToNext()) {
//
//                                    /////////////////Toast.makeText(CancelActivity.this, "deleted item "+hii+" and its id is "+modidd , Toast.LENGTH_SHORT).show();
//
////                                                        final String iidd = resetmode1.getString(0);
////                                                        /////////////////Toast.makeText(CancelActivity.this, "id is " + iidd, Toast.LENGTH_SHORT).show();
////                                                        String where = "_id = '" + idis + "' ";
////                                                        db1.delete("All_Sales_Cancelled", where, new String[]{});
////                                                        updateinventory(Integer.valueOf(idis));
//
//                                    ContentValues newValues = new ContentValues();
//                                    newValues.put("deleted_not", "");
//                                    String where = "_id = '" + idis + "' ";
//                                    db1.update("All_sales", newValues, where, new String[]{});
//
//
//                                }
//
//                                resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + nam + "' AND parentid = '" + isid + "' ", null);
//                                while (resetmode1.moveToNext()) {
//                                    String zx = resetmode1.getString(1);
//                                    String zxx = resetmode1.getString(0);
//                                    /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();
//
//
//                                    ContentValues newValues = new ContentValues();
//                                    newValues.put("deleted_not", "");
//                                    String where = "_id = '" + zxx + "' ";
//                                    db1.update("All_sales", newValues, where, new String[]{});
//
//                                }
//
//                                hii( );


                                }
                            });

                            Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + idn + "' AND deleted_not = 'delete'  ", null);
                            if (modcursor.moveToFirst()){
                                do {
                                    ////////Toast.makeText(MainActivity.this, "Modifiers are", Toast.LENGTH_SHORT).show();

                                    final String modiname = modcursor.getString(1);
                                    final String modiquan = modcursor.getString(2);
                                    String modiprice = modcursor.getString(3);
                                    String moditotal = modcursor.getString(4);
                                    final String modiid = modcursor.getString(0);

                                    TextView quantity, tvmod, modprice, tvmod1, tvmod2;

//                            TableRow.LayoutParams tableRowParams = new TableRow.LayoutParams();
//                            tableRowParams.setMargins(1, 1, 1, 1);
//                            tableRowParams.weight = 1;

                                    TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
                                    tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                                    //tableRow.setBackgroundColor(Color.BLACK);

                                    TextView textView2 = new TextView(CancelActivity.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                    textView2.setText("");
                                    tableRow1[0].addView(textView2);

                                    ImageView imageView1 = new ImageView(CancelActivity.this);
                                    //imageView1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                    imageView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.22f));
                                    imageView1.setImageResource(R.drawable.mod_filter);
                                    tableRow1[0].addView(imageView1);

                                    quantity = new TextView(CancelActivity.this);
                                    String getquan = tv.getText().toString();
                                    quantity.setText(modiquan);


                                    //int  modid = Integer.parseInt(idd);
                                    //int newmodid = modid+1;
                                    //contentValues.put("_id", "1");

                                    tvmod = new TextView(CancelActivity.this);
                                    tvmod.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.00f));
                                    //tvmod.setPadding(100, 0, 0, 0);
                                    tvmod.setText(modiname);
                                    tvmod.setGravity(Gravity.CENTER_VERTICAL);
                                    tvmod.setTextColor(Color.parseColor("#000000"));
                                    tableRow1[0].addView(tvmod);

                                    TextView symbol = new TextView(CancelActivity.this);
                                    symbol.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                    symbol.setText(insert1_cc);;
                                    symbol.setGravity(Gravity.CENTER_VERTICAL);
                                    symbol.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    symbol.setTextColor(Color.parseColor("#6a6a6d"));
                                    tableRow1[0].addView(symbol);

                                    tvmod1 = new TextView(CancelActivity.this);
                                    tvmod1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                                    tvmod1.setGravity(Gravity.CENTER_VERTICAL);
                                    tvmod1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    tvmod1.setTextColor(Color.parseColor("#6a6a6d"));
                                    tvmod1.setText(modiprice);
                                    tableRow1[0].addView(tvmod1);

                                    TextView symbol1 = new TextView(CancelActivity.this);
                                    symbol1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                    symbol1.setText(insert1_cc);;
                                    symbol1.setGravity(Gravity.CENTER_VERTICAL);
                                    symbol1.setTypeface(Typeface.DEFAULT_BOLD);
                                    symbol1.setTextColor(Color.parseColor("#000000"));
                                    symbol1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    tableRow1[0].addView(symbol1);

                                    tvmod2 = new TextView(CancelActivity.this);
                                    tvmod2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                    String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));
                                    tvmod2.setText(modtotal);
                                    tvmod2.setGravity(Gravity.CENTER_VERTICAL);
                                    tvmod2.setTypeface(Typeface.DEFAULT_BOLD);
                                    tvmod2.setTextColor(Color.parseColor("#000000"));
                                    tvmod2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    tableRow1[0].addView(tvmod2);

                                    ImageView imageView2 = new ImageView(CancelActivity.this);
                                    imageView2.setVisibility(View.INVISIBLE);
                                    imageView2.setImageResource(R.drawable.ic_remove_black_24dp);
                                    imageView2.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                                    imageView2.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
                                    //imageView2.setImageResource(R.drawable.cancel_order_close);
                                    //imageView2.setBackgroundResource(R.drawable.edit_quantity);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                                    LinearLayout.LayoutParams params1 = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                            LinearLayout.LayoutParams.WRAP_CONTENT);
                                    params1.setMargins(6, 2, 6, 2);
                                    imageView2.setLayoutParams(params1);
                                    tableRow1[0].addView(imageView2);

                                    tableLayout4.addView(tableRow1[0]);
                                }while (modcursor.moveToNext());
                            }

                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND _id = '" + nbg + "'  ", null);
                            if (disc_cursor.moveToFirst()){
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    float vtq = disc_cursor.getFloat(31);
                                    String disc_orig_price = disc_cursor.getString(3);
                                    String disc_orig_quan = disc_cursor.getString(2);
                                    String disc_orig_total = disc_cursor.getString(4);
                                    String disc_orig_type = disc_cursor.getString(27);
                                    String disc_orig_value = disc_cursor.getString(28);
                                    String disc_notorig_quan = disc_cursor.getString(22);
                                    if(disc_there.toString().equals("no")){

                                    }else {
                                        ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                        final TableRow row_disc = new TableRow(CancelActivity.this);
                                        row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                                TableRow.LayoutParams.MATCH_PARENT,
                                                TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                                        //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                        TextView textView2 = new TextView(CancelActivity.this);
                                        textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.56f));
                                        textView2.setText("");
                                        row_disc.addView(textView2);

                                        disc_tv = new TextView(CancelActivity.this);
                                        disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                        disc_tv.setGravity(Gravity.CENTER_VERTICAL);
                                        TextView cz = new TextView(CancelActivity.this);
                                        cz.setText(disc_notorig_quan);
                                        if (cz.getText().toString().equals("")){
                                            if (disc_orig_type.toString().equals("%")){
                                                float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                                String bb = String.format("%.2f", cws);
                                                disc_tv.setText("("+"-" + bb+")");
                                            }else {
                                                float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                                float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                                String bb = String.format("%.2f", cws1);
                                                disc_tv.setText("("+"-" + bb+")");
                                            }
                                        }else {
                                            if (disc_orig_type.toString().equals("%")){
                                                float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                                String bb = String.format("%.2f", cws);
                                                disc_tv.setText("("+"-" + bb+")");
                                            }else {
                                                float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                                float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                                String bb = String.format("%.2f", cws1);
                                                disc_tv.setText("("+"-" + bb+")");
                                            }
                                        }
                                        //disc_tv.setText("("+"-" + disc_cursor.getString(31)+")");
                                        disc_tv.setTypeface(Typeface.DEFAULT_BOLD);
                                        disc_tv.setTextColor(Color.parseColor("#000000"));
                                        disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        row_disc.addView(disc_tv);

                                        TextView textView21 = new TextView(CancelActivity.this);
                                        textView21.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.52f));
                                        textView21.setText("");
                                        row_disc.addView(textView21);

                                        tableLayout_disc.addView(row_disc);
                                    }
                                }while(disc_cursor.moveToNext());
                            }

                            modcursor.close();

                            tableLayout2.addView(row3);
                            ///////////////Toast.makeText(CancelActivity.this, "44", Toast.LENGTH_SHORT).show();

                            tableLayout2.addView(tableLayout4);

                            tableLayout2.addView(tableLayout_disc);
                        }

                    }else {

                        Cursor cursor2 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + nam + "' AND parent = '" + six + "' AND deleted_not = 'delete' ", null);

                        if (cursor2.moveToFirst()) {

                            Itemtype = cursor2.getString(5);
                            del = cursor2.getString(21);
                            final String ii = cursor2.getString(2);
                            final String pp = cursor2.getString(3);
                            final String pare = cursor2.getString(6);
                            String pareid = cursor2.getString(7);
                            String idd = cursor2.getString(20);
                            final String nuu = cursor2.getString(1);

                            /////////////////Toast.makeText(CancelActivity.this, "Deleted modifierrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr    "+nuu+ " " +six+ "" +nam+ " " +pareid , Toast.LENGTH_SHORT).show();


                            if (Itemtype.toString().equals("Modifier")) {
                                Cursor cursor3 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + pare + "' AND _idd = '" + pareid + "' ", null);
                                if (cursor3.moveToFirst()) {
                                    do {
                                        /////////////////Toast.makeText(CancelActivity.this, "deleted item "+nam+" parent is "+pare+" pare id is "+pareid, Toast.LENGTH_SHORT).show();

                                        final String del = cursor3.getString(21);
                                        if (del.toString().equals("delete")) {
                                            /////////////////Toast.makeText(CancelActivity.this, "Both items and modifiers are deleted", Toast.LENGTH_SHORT).show();
                                        } else {
                                            /////////////////Toast.makeText(CancelActivity.this, "only modifier is deletd", Toast.LENGTH_SHORT).show();


                                            final String idn = cursorr.getString(20);
                                            final String fi = cursorr.getString(0);

                                            final TableRow row3 = new TableRow(CancelActivity.this);
                                            row3.setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

                                            final TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
                                            tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(
                                                    TableRow.LayoutParams.MATCH_PARENT,
                                                    TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

                                            final TableLayout tableLayout4 = new TableLayout(CancelActivity.this);
                                            final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);

                                            final TextView tv = new TextView(CancelActivity.this);
                                            tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                            tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                                            tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tv.setTextColor(Color.parseColor("#6a6a6d"));
                                            tv.setText(ii);
                                            row3.addView(tv);


                                            final String modidd = cursorr.getString(0);
                                            final int modid = Integer.parseInt(modidd);
                                            tv.setId(modid);


                                            name = cursorr.getString(1);
                                            final String iidd = cursorr.getString(0);
                                            final String hii = cursorr.getString(1);
                                            TextView tv1 = new TextView(CancelActivity.this);
                                            tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.22f));
                                            tv1.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tv1.setTextColor(Color.parseColor("#000000"));
                                            tv1.setTypeface(Typeface.DEFAULT_BOLD);
                                            tv1.setText(pare);
                                            row3.addView(tv1);

                                            TextView te1 = new TextView(CancelActivity.this);
                                            te1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.42f));
                                            te1.setText("");
                                            row3.addView(te1);


                                            ////////Toast.makeText(MainActivity.this, "Modifiers are", Toast.LENGTH_SHORT).show();


                                            TextView quantity, tvmod, modprice, tvmod1, tvmod2;

//                                            TableRow.LayoutParams tableRowParams = new TableRow.LayoutParams();
//                                            tableRowParams.setMargins(1, 1, 1, 1);
//                                            tableRowParams.weight = 1;

                                            tableRow1[0] = new TableRow(CancelActivity.this);
                                            //tableRow1[0].setPadding(55, 0, 0, 0);
                                            //tableRow.setBackgroundColor(Color.BLACK);

                                            TextView textView2 = new TextView(CancelActivity.this);
                                            textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                            textView2.setText("");
                                            tableRow1[0].addView(textView2);

                                            ImageView imageView1 = new ImageView(CancelActivity.this);
                                            //imageView1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                            imageView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.22f));
                                            imageView1.setImageResource(R.drawable.mod_filter);
                                            tableRow1[0].addView(imageView1);

                                            quantity = new TextView(CancelActivity.this);
                                            String getquan = tv.getText().toString();
                                            quantity.setText(ii);


                                            //int  modid = Integer.parseInt(idd);
                                            //int newmodid = modid+1;
                                            //contentValues.put("_id", "1");

                                            tvmod = new TextView(CancelActivity.this);
                                            tvmod.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.00f));
                                            //tvmod.setPadding(100, 0, 0, 0);
                                            tvmod.setText(nam);
                                            tvmod.setGravity(Gravity.CENTER_VERTICAL);
                                            tvmod.setTextColor(Color.parseColor("#000000"));
                                            tableRow1[0].addView(tvmod);

                                            TextView symbol = new TextView(CancelActivity.this);
                                            //symbol.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                            symbol.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                            symbol.setText(insert1_cc);;
                                            symbol.setGravity(Gravity.CENTER_VERTICAL);
                                            symbol.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            symbol.setTextColor(Color.parseColor("#6a6a6d"));
                                            tableRow1[0].addView(symbol);

                                            tvmod1 = new TextView(CancelActivity.this);
                                            tvmod1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                                            tvmod1.setGravity(Gravity.CENTER_VERTICAL);
                                            tvmod1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tvmod1.setTextColor(Color.parseColor("#6a6a6d"));
                                            tvmod1.setText(pp);
                                            tableRow1[0].addView(tvmod1);

                                            TextView symbol1 = new TextView(CancelActivity.this);
                                            //symbol1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                            symbol1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                            symbol1.setText(insert1_cc);;
                                            symbol1.setGravity(Gravity.CENTER_VERTICAL);
                                            symbol1.setTypeface(Typeface.DEFAULT_BOLD);
                                            symbol1.setTextColor(Color.parseColor("#000000"));
                                            symbol1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tableRow1[0].addView(symbol1);

                                            tvmod2 = new TextView(CancelActivity.this);
                                            tvmod2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                            String modtotal = String.valueOf(Float.parseFloat(ii) * Float.parseFloat(pp));
                                            tvmod2.setText(modtotal);
                                            tvmod2.setGravity(Gravity.CENTER_VERTICAL);
                                            tvmod2.setTypeface(Typeface.DEFAULT_BOLD);
                                            tvmod2.setTextColor(Color.parseColor("#000000"));
                                            tvmod2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                            tableRow1[0].addView(tvmod2);

                                            final ImageView imageView2 = new ImageView(CancelActivity.this);
                                            //imageView.setLayoutParams(new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
                                            imageView2.setImageResource(R.drawable.ic_remove_black_24dp);
                                            imageView2.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                                            imageView2.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
//                                            imageView2.setImageResource(R.drawable.cancel_order_close);
//                                            imageView2.setBackgroundResource(R.drawable.edit_quantity);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                                            LinearLayout.LayoutParams params1 = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                                    LinearLayout.LayoutParams.WRAP_CONTENT);
                                            params1.setMargins(6, 2, 6, 2);
                                            imageView2.setLayoutParams(params1);
                                            tableRow1[0].addView(imageView2);

                                            imageView2.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    ///////////////Toast.makeText(CancelActivity.this, "delete modifier " + nam + " id is " + fi + " parent is " + six + " paernt id is " + seven, Toast.LENGTH_SHORT).show();
                                                    tableLayout4.removeView(tableRow1[0]);

                                                    Cursor cursorcheck = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' and parent  = '" + six + "' and parentid = '" + seven + "' and itemname = '" + nam + "' AND deleted_not = 'delete' ", null);//replace to cursor = dbHelper.fetchAllHotels();
                                                    if (cursorcheck.moveToFirst()) {
                                                        ///////////////Toast.makeText(CancelActivity.this, "data is not there in All_Sales_Cancelled table ", Toast.LENGTH_SHORT).show();

                                                        if (a.equals("1")) {
                                                            ///////////////Toast.makeText(CancelActivity.this, "Quantityyyyyyyyyyy is 1 ", Toast.LENGTH_SHORT).show();
                                                            //hii( );


                                                        } else {
                                                            ///////////////Toast.makeText(CancelActivity.this, "Quantity is greater than 1 ", Toast.LENGTH_SHORT).show();

                                                            Cursor resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "'AND itemname = '" + nam + "' AND parent = '" + six + "' AND parentid = '" + seven + "' ", null);
                                                            ///////////////Toast.makeText(CancelActivity.this, "Bill num is " + billno.getText().toString() + " parent is " + six + " parentid is " + seven, Toast.LENGTH_SHORT).show();
                                                            while (resetmode1.moveToNext()) {
                                                                String zx = resetmode1.getString(1);
                                                                String zxx = resetmode1.getString(0);
                                                                String st = resetmode1.getString(4);
                                                                String qquuaa = resetmode1.getString(2);
                                                                String thre = resetmode1.getString(3);
                                                                /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();
                                                                ///////////////Toast.makeText(CancelActivity.this, "1231234444" , Toast.LENGTH_SHORT).show();

                                                                Cursor c11 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "'AND itemname = '" + six + "' AND _idd = '" + seven + "' ", null);
                                                                while (c11.moveToNext()) {
                                                                    ra = c11.getString(21);
                                                                    raww = c11.getString(22);
                                                                    raw1 = c11.getString(23);
                                                                }

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", ra);
                                                                newValues.put("modifiedquantity", raww);
                                                                newValues.put("quantitycopy", raw1);
                                                                if (raww.equals("")) {
                                                                    newValues.put("modifiedtotal", "");
                                                                } else {
                                                                    newValues.put("modifiedtotal", Float.parseFloat(raww) * Float.parseFloat(thre));
                                                                }
                                                                String where = "_id = '" + zxx + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id",zxx+"")
                                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);


                                                                //    db1.update("All_sales", newValues, where, new String[]{});

                                                            }
                                                        }
                                                    } else {
                                                        ///////////////Toast.makeText(CancelActivity.this, "data is there in All_Sales_Cancelled table ", Toast.LENGTH_SHORT).show();

                                                        /////////////////Toast.makeText(CancelActivity.this, "Modifiers assigned ", Toast.LENGTH_SHORT).show();
                                                    }
                                                    hii();
                                                }
                                            });


                                            tableLayout4.addView(tableRow1[0]);


                                            tableLayout2.addView(row3);
                                            ///////////////Toast.makeText(CancelActivity.this, "55", Toast.LENGTH_SHORT).show();

                                            tableLayout2.addView(tableLayout4);


                                        }

                                    } while (cursor3.moveToNext());
                                }
                                cursor3.close();
                            } else {
                                ///////////////Toast.makeText(CancelActivity.this, "deleted only modifier", Toast.LENGTH_SHORT).show();
                            }
                        }
                        cursor2.close();


                    }
                }



            }while (cursorr.moveToNext());

        }
        cursorr.close();

        final Cursor cursorrr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND deleted_not = 'decrease' ", null);
        if (cursorrr.moveToFirst()){
            do {
                Itemtype = cursorrr.getString(5);
                final String idis = cursorrr.getString(0);
                final String isid = cursorrr.getString(20);
                final String nam = cursorrr.getString(1);
                final String six = cursorrr.getString(6);
                final String seven = cursorrr.getString(7);
                final String a = cursorrr.getString(2);

                final String xcs = cursorrr.getString(31);

                final TextView xc1 = new TextView(CancelActivity.this);
                xc1.setText(xcs);

                if (Itemtype.toString().equals("Item")) {

                    /////////////////Toast.makeText(CancelActivity.this, "Modified item decrease", Toast.LENGTH_SHORT).show();

                    final String ii = cursorrr.getString(2);
                    final String pp = cursorrr.getString(3);
                    final String ttt = cursorrr.getString(5);
                    final String pare = cursorrr.getString(6);
                    final String pareid = cursorrr.getString(7);
                    final String masss = cursorrr.getString(8);
                    final String taxtaxtax = cursorrr.getString(9);
                    final String taxtaxtaxname = cursorrr.getString(10);
                    final String billnumb = cursorrr.getString(11);
                    final String useruser = cursorrr.getString(14);
                    final String typebilll = cursorrr.getString(15);
                    final String paymethodd = cursorrr.getString(16);

                    final String newid = cursorrr.getString(20);

                    final String idn = cursorrr.getString(20);
                    final String qq = cursorrr.getString(22);

                    final String aacc1 = cursorrr.getString(3);

                    if (qq.toString().equals("0")){

                    }else {
                        final TableRow row3 = new TableRow(CancelActivity.this);
                        row3.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.04f));

//                    final TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
//                    tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(
//                            LayoutParams.MATCH_PARENT,
//                            LayoutParams.WRAP_CONTENT, 4.04f));

                        final TableLayout tableLayout4 = new TableLayout(CancelActivity.this);
                        final TableLayout tableLayout_disc = new TableLayout(CancelActivity.this);

                        final TextView tv = new TextView(CancelActivity.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                        tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                        tv.setTextColor(Color.parseColor("#6a6a6d"));
                        tv.setText(qq);
                        row3.addView(tv);


                        final String modidd = cursorrr.getString(0);
                        final int modid = Integer.parseInt(modidd);
                        tv.setId(modid);


                        name = cursorrr.getString(1);
                        final String iidd = cursorrr.getString(0);
                        final String disc_31 = cursorrr.getString(28);

                        final String disc_orig_price1 = cursorrr.getString(3);
                        final String disc_orig_quan1 = cursorrr.getString(2);
                        final String disc_orig_total1 = cursorrr.getString(4);
                        final String disc_orig_type1 = cursorrr.getString(27);
                        final String disc_orig_value1 = cursorrr.getString(28);
                        final String disc_notorig_quan1 = cursorrr.getString(22);

                        final String disc_27 = cursorrr.getString(27);
                        final String nbg = cursorrr.getString(0);
                        final String hii = cursorrr.getString(1);
                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.22f));
                        tv1.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                        tv1.setTextColor(Color.parseColor("#000000"));
                        tv1.setTypeface(Typeface.DEFAULT_BOLD);
                        tv1.setLines(2);
                        tv1.setMaxLines(2);
                        tv1.setEllipsize(TextUtils.TruncateAt.END);
                        tv1.setText(hii);
                        row3.addView(tv1);

                        TextView textView = new TextView(CancelActivity.this);
                        textView.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                        textView.setText(insert1_cc);;
                        textView.setGravity(Gravity.CENTER_VERTICAL);
                        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                        textView.setTextColor(Color.parseColor("#6a6a6d"));
                        row3.addView(textView);

                        //priceget = cursorr.getString(3);
                        final TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                        tv2.setGravity(Gravity.CENTER_VERTICAL);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                        tv2.setTextColor(Color.parseColor("#6a6a6d"));
                        final Float f = Float.parseFloat(cursorrr.getString(3));
                        price = String.valueOf(f);
                        tv2.setText(pp);
                        //tv1.setText(c.getString(j));
                        row3.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                        textView1.setText(insert1_cc);
                        textView1.setGravity(Gravity.CENTER_VERTICAL);
                        textView1.setTypeface(Typeface.DEFAULT_BOLD);
                        textView1.setTextColor(Color.parseColor("#000000"));
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                        row3.addView(textView1);

                        //totalget = cursorr.getString(4);
                        final TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                        tv3.setGravity(Gravity.CENTER_VERTICAL);
                        tv3.setTypeface(Typeface.DEFAULT_BOLD);
                        tv3.setTextColor(Color.parseColor("#000000"));
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursorr.getString(4));
                        float vbq = newmul * f;
                        final String multiply = String.format("%.2f", vbq);
                        //final String multiply = String.valueOf(newmul * f);
                        //newmul = Integer.parseInt(multiply);
                        tv3.setText(multiply);
                        row3.addView(tv3);

                        final ImageView imageView = new ImageView(CancelActivity.this);
                        //imageView.setLayoutParams(new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
                        imageView.setImageResource(R.drawable.ic_remove_black_24dp);
                        imageView.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                        imageView.setPadding(size_in_10px, size_in_10px,size_in_10px,size_in_10px);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                        LinearLayout.LayoutParams params = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                LinearLayout.LayoutParams.WRAP_CONTENT);
                        params.setMargins(6, 2, 6, 2);
                        imageView.setLayoutParams(params);
                        row3.addView(imageView);



                        imageView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                ///////////////Toast.makeText(CancelActivity.this, "5", Toast.LENGTH_SHORT).show();
                                if (masss.toString().equals("no")){
                                    if (tv.getText().toString().equals("1")) {
                                        ///////////////Toast.makeText(CancelActivity.this, "no modifiers with 1", Toast.LENGTH_SHORT).show();

                                        Cursor resetmode1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND itemname = '" + hii + "' AND _id = '" + modid + "' ", null);
                                        ///////////////Toast.makeText(CancelActivity.this, "Bill num is "+billno.getText().toString()+" itemname is "+hii+" id is "+modid , Toast.LENGTH_SHORT).show();
                                        while (resetmode1.moveToNext()) {
                                            String zx = resetmode1.getString(1);
                                            String zxx = resetmode1.getString(0);
                                            String st = resetmode1.getString(3);
                                            String ee = resetmode1.getString(2);
                                            /////////////////Toast.makeText(CancelActivity.this, "modifiers name and id is "+zx+" "+zxx, Toast.LENGTH_SHORT).show();



                                            ContentValues newValues = new ContentValues();
                                            newValues.put("deleted_not", "");
                                            newValues.put("modifiedquantity", "");
                                            newValues.put("quantitycopy", ee);
                                            newValues.put("modifiedtotal", st);
                                            String where = "_id = '" + modid + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                            getContentResolver().update(contentUri, newValues,where,new String[]{});
                                            resultUri = new Uri.Builder()
                                                    .scheme("content")
                                                    .authority(StubProvider.AUTHORITY)
                                                    .path("All_sales")
                                                    .appendQueryParameter("operation", "update")
                                                    .appendQueryParameter("_id",modid+"")
                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                    .build();
                                            getContentResolver().notifyChange(resultUri, null);



                                            //     db1.update("All_sales", newValues, where, new String[]{});
                                            hii( );

                                        }

                                    }else {
                                        ///////////////Toast.makeText(CancelActivity.this, "no modifiers >1", Toast.LENGTH_SHORT).show();

                                        final Dialog dialog = new Dialog(CancelActivity.this, R.style.notitle);
                                        dialog.setContentView(R.layout.quantity_edit);
                                        ///////////////Toast.makeText(CancelActivity.this, "eeeee", Toast.LENGTH_SHORT).show();
                                        dialog.setTitle(Html.fromHtml("<font color='#ffffff'>Edit qty</font>"));
                                        dialog.show();

                                        TextView inn = (TextView) dialog.findViewById(R.id.inn);
                                        TextView inn1 = (TextView) dialog.findViewById(R.id.inn1);
                                        inn.setText(insert1_cc);
                                        inn1.setText(insert1_cc);

                                        Cursor cvb = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
                                        if (cvb.moveToFirst()){
                                            panetwo.setVisibility(View.VISIBLE);
                                            panethree.setVisibility(View.VISIBLE);
                                        }else {
                                            panetwo.setVisibility(View.GONE);
                                            panethree.setVisibility(View.INVISIBLE);
                                        }

                                        Cursor cursorcheck1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND mod_assigned = 'no' ", null);
                                        ///////////////Toast.makeText(CancelActivity.this, "dialog box >1 itemname "+hii, Toast.LENGTH_SHORT).show();
                                        while (cursorcheck1.moveToNext()) {

                                            ///////////////Toast.makeText(CancelActivity.this, "dialog box >1>1", Toast.LENGTH_SHORT).show();

                                            final String assmod = cursorcheck1.getString(1);
                                            final String ppp = cursorcheck1.getString(3);

                                            /////////////////Toast.makeText(CancelActivity.this, "assigned Modifiers are " + assmod, Toast.LENGTH_SHORT).show();


                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                            if (cursor1.moveToFirst()){
                                                do {
                                                    String qa = cursor1.getString(3);
                                                    /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                    Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
                                                    if (c1ursor1.moveToFirst()) {
                                                        do {

                                                            float aq = c1ursor1.getFloat(0);
                                                            String aqq = String.valueOf(aq);

                                                            //String aq = c1ursor1.getString(3);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                            cal1 = Float.parseFloat(qa)+Float.parseFloat(aqq);

                                                            //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                        }while (c1ursor1.moveToNext());
                                                    }
                                                }while (cursor1.moveToNext());
                                            }


                                            final TextView editText = (TextView) dialog.findViewById(R.id.displayquantity);
                                            editText.setText(tv.getText().toString());

                                            final TextView textView = (TextView) dialog.findViewById(R.id.itemname);
                                            textView.setText(hii);

                                            final TextView textView1 = (TextView) dialog.findViewById(R.id.price);
                                            float zx = Float.parseFloat(tv.getText().toString())*cal1;
                                            textView1.setText(String.format("%.2f", zx));

                                            final TextView disc_var_textview = (TextView) dialog.findViewById(R.id.disc_price);

                                            if (disc_31.toString().equals("0")){
                                                disc_var_textview.setText("0");
                                            }else {
                                                TextView cz = new TextView(CancelActivity.this);
                                                cz.setText(disc_notorig_quan1);
                                                if (cz.getText().toString().equals("")){
                                                    if (disc_orig_type1.toString().equals("%")){
                                                        float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) * Float.parseFloat(editText.getText().toString());
                                                        String bb = String.format("%.2f", cws);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }else {
                                                        float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                        //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_orig_quan1);
                                                        float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                        String bb = String.format("%.2f", cws1);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }
                                                }else {
                                                    if (disc_orig_type1.toString().equals("%")){
                                                        float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) *
                                                                (Float.parseFloat(editText.getText().toString()));
                                                        String bb = String.format("%.2f", cws);
                                                        disc_var_textview.setText("("+bb+")");
                                                        /////////Toast.makeText(CancelActivity.this, "ee "+bb, Toast.LENGTH_SHORT).show();
                                                    }else {
                                                        float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                        //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_notorig_quan1);
                                                        float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                        String bb = String.format("%.2f", cws1);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }
                                                }
                                            }

//                                        ImageView clse = (ImageView)dialog.findViewById(R.id.closetext);
//                                        clse.setOnClickListener(new View.OnClickListener() {
//                                            @Override
//                                            public void onClick(View v) {
//                                                dialog.dismiss();
//                                            }
//                                        });


                                            ImageButton imageView2 = (ImageButton) dialog.findViewById(R.id.quantitydecrease);
                                            imageView2.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    final TextView editText1 = (TextView) dialog.findViewById(R.id.displayquantity);
                                                    String qa = "0";
                                                    String addorsub = editText.getText().toString();
                                                    int clickcountsss = 0;
                                                    float incc = Float.parseFloat(addorsub);
                                                    clickcountsss++;

                                                    float bd = incc - clickcountsss;
                                                    newv = String.format("%.2f", bd);
                                                    //newv = String.valueOf(incc - clickcountsss);
                                                    newvv = Float.parseFloat(newv);



                                                    if (newvv <= 0) {
                                                        //row.removeAllViews();
                                                    } else {
                                                        editText.setText(newv);
                                                    }

                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                    if (cursor1.moveToFirst()){
                                                        do {
                                                            qa = cursor1.getString(3);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                            Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '"+hii+"' AND parentid = '" + newid + "' ", null);
                                                            if (c1ursor1.moveToFirst()) {
                                                                do {

                                                                    float aq = c1ursor1.getFloat(0);
                                                                    String aqq = String.valueOf(aq);

                                                                    //String aq = c1ursor1.getString(3);
                                                                    /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                    cal = Float.parseFloat(qa)+Float.parseFloat(aqq);

                                                                    //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                    /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                                }while (c1ursor1.moveToNext());
                                                            }
                                                        }while (cursor1.moveToNext());
                                                    }

                                                    final Cursor cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = '' OR deleted_not = 'decrease') ", null);
                                                    if (cursor.moveToFirst()){
                                                        final String disc_notorig_quan1 = cursor.getString(22);
                                                        cz = new TextView(CancelActivity.this);
                                                        cz.setText(disc_notorig_quan1);
                                                    }else {
                                                        cz = new TextView(CancelActivity.this);
                                                        cz.setText("");
                                                    }

                                                    if (editText.getText().toString().equals("0") || editText.getText().toString().equals("0.0") || editText.getText().toString().equals("0.00")){
                                                        textView1.setText("0");
                                                    }else {
                                                        Float cc = newvv*cal;
                                                        /////////////////Toast.makeText(CancelActivity.this, " "+cc, Toast.LENGTH_SHORT).show();
                                                        textView1.setText(String.format("%.2f", cc));

                                                        if (cz.getText().toString().equals("")){
                                                            if (disc_orig_type1.toString().equals("%")){
                                                                float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                String ug = String.format("%.2f", cce);
                                                                disc_var_textview.setText(ug);
                                                            }else {
                                                                float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * Float.parseFloat(editText1.getText().toString());
                                                                float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                String bb = String.format("%.2f", cws1);
                                                                disc_var_textview.setText("("+bb+")");
                                                            }
                                                        }else {
                                                            if (disc_orig_type1.toString().equals("%")){
                                                                float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                String ug = String.format("%.2f", cce);
                                                                disc_var_textview.setText(ug);
                                                                ///////////Toast.makeText(CancelActivity.this, "aa "+disc_var_textview.getText().toString(), Toast.LENGTH_SHORT).show();
                                                            }else {
                                                                float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText1.getText().toString()));
                                                                float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                String bb = String.format("%.2f", cws1);
                                                                disc_var_textview.setText("("+bb+")");
                                                            }
                                                        }
                                                    }


                                                }
                                            });

                                            Button removeitem = (Button)dialog.findViewById(R.id.quantityremove);
                                            removeitem.setVisibility(View.VISIBLE);
                                            removeitem.setText("Revert back");
                                            removeitem.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            oorr = cursor1.getString(20);
                                                            nnaa = cursor1.getString(1);
                                                            String aacc = cursor1.getString(3);
                                                            String ccaa = cursor1.getString(2);
                                                            String stt = cursor1.getString(0);

                                                            ContentValues newValues = new ContentValues();
                                                            newValues.put("deleted_not", "");
                                                            newValues.put("quantitycopy", a);
                                                            newValues.put("modifiedquantity", "");
                                                            newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(ccaa) * Float.parseFloat(aacc)));
                                                            String where1 = "_id = '" + stt + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                            getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProvider.AUTHORITY)
                                                                    .path("All_sales")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("_id",stt+"")
                                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                                    .build();
                                                            getContentResolver().notifyChange(resultUri, null);


                                                            //      db1.update("All_sales", newValues, where1, new String[]{});
                                                            ///////////////Toast.makeText(CancelActivity.this, " item "+oorr+" id "+stt+" name "+nnaa, Toast.LENGTH_SHORT).show();

                                                        } while (cursor1.moveToNext());
                                                    }

                                                    ContentValues newValues = new ContentValues();
                                                    newValues.put("deleted_not", "");
                                                    newValues.put("quantitycopy", a);
                                                    newValues.put("modifiedquantity", "");
                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a)*Float.parseFloat(aacc1)));
                                                    newValues.put("new_modified_total", xc1.getText().toString());
                                                    String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";




                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                    getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("All_sales")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id",modidd+"")
                                                            .appendQueryParameter("bill_no",billno.getText().toString())
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);





                                                    //    db1.update("All_sales", newValues, where, new String[]{});
                                                    ///////////////Toast.makeText(CancelActivity.this, " modifier "+modidd, Toast.LENGTH_SHORT).show();
                                                    dialog.dismiss();
                                                    hii( );
                                                }
                                            });

                                            ImageView ok = (ImageView) dialog.findViewById(R.id.save);
                                            ok.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {

                                                    String box = editText.getText().toString();
                                                    final String number1 = tv.getText().toString();

                                                    if (number1.toString().equals(box)){
                                                        dialog.dismiss();
                                                    }else {
                                                        if (Float.parseFloat(editText.getText().toString()) > Float.parseFloat(tv.getText().toString())) {
                                                            ///////////////Toast.makeText(CancelActivity.this, "Quantity has to be lesser than " + tv.getText().toString(), Toast.LENGTH_SHORT).show();
                                                        } else {
                                                            if (Float.parseFloat(number1) <= 0 || Float.parseFloat(box) <= 0) {
                                                                //final EditText editText2 = (EditText) dialog.findViewById(R.id.displayquantity);
                                                                //String box2 = editText2.getText().toString();
                                                                row3.removeAllViews();
                                                                //row2.removeAllViews();

                                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                if (cursor1.moveToFirst()) {
                                                                    do {
                                                                        oorr = cursor1.getString(20);
                                                                        String st21 = cursor1.getString(2);
                                                                        String aacc = cursor1.getString(3);

                                                                        ContentValues newValues = new ContentValues();
                                                                        newValues.put("deleted_not", "");
                                                                        newValues.put("quantitycopy", st21);
                                                                        newValues.put("modifiedquantity", "");
                                                                        newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(st21) * Float.parseFloat(aacc)));
                                                                        String where1 = "parentid = '" + oorr + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                        getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProvider.AUTHORITY)
                                                                                .path("All_sales")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("parentid", oorr + "")
                                                                                .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                .build();
                                                                        getContentResolver().notifyChange(resultUri, null);


                                                                        //       db1.update("All_sales", newValues, where1, new String[]{});
                                                                        ///////////////Toast.makeText(CancelActivity.this, "1 "+oorr+" id "+modid, Toast.LENGTH_SHORT).show();

                                                                    } while (cursor1.moveToNext());
                                                                }

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "");
                                                                newValues.put("quantitycopy", a);
                                                                newValues.put("modifiedquantity", "");
                                                                newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(a) * Float.parseFloat(aacc1)));
                                                                String where = "_id = '" + modidd + "' AND bill_no = '" + billno.getText().toString() + "' ";
                                                                ///////////////Toast.makeText(CancelActivity.this, "2 "+oorr+" id "+modidd, Toast.LENGTH_SHORT).show();


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", modidd + "")
                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);


                                                                //      db1.update("All_sales", newValues, where, new String[]{});


                                                            } else {
                                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                if (cursor1.moveToFirst()) {
                                                                    do {
                                                                        oorr = cursor1.getString(20);
                                                                        String st21 = cursor1.getString(2);
                                                                        String ppp = cursor1.getString(3);
                                                                        String modqty = cursor1.getString(22);
                                                                        String qtycopy = cursor1.getString(23);

                                                                        if (modqty.toString().equals("")) {
//                                                                    ContentValues newValues = new ContentValues();
//                                                                    newValues.put("modifiedquantity", editText.getText().toString());
//                                                                    newValues.put("quantitycopy", String.valueOf(Integer.parseInt(tv.getText().toString()) - Integer.parseInt(editText.getText().toString())));
//                                                                    newValues.put("deleted_not", "decrease");
//                                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Integer.parseInt(tv.getText().toString()) - Integer.parseInt(editText.getText().toString()))) * Float.parseFloat(ppp)));
                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", editText.getText().toString());
                                                                            newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                            String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";

                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", modid + "")
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //     db1.update("All_sales", newValues, where1, new String[]{});
                                                                        } else {
//                                                                    ContentValues newValues = new ContentValues();
//                                                                    newValues.put("modifiedquantity", editText.getText().toString());
//                                                                    newValues.put("quantitycopy", String.valueOf(Integer.parseInt(qtycopy) - Integer.parseInt(editText.getText().toString()) + Integer.parseInt(modqty)));
//                                                                    newValues.put("deleted_not", "decrease");
//                                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Integer.parseInt(qtycopy) - Integer.parseInt(editText.getText().toString()) + Integer.parseInt(modqty))) * Float.parseFloat(ppp)));
                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", editText.getText().toString());
                                                                            newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                            String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", modid + "")
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //     db1.update("All_sales", newValues, where1, new String[]{});

                                                                            ///////////////Toast.makeText(CancelActivity.this, "modifqty = "+String.valueOf(Integer.parseInt(qtycopy) - Integer.parseInt(editText.getText().toString())+Integer.parseInt(modqty)), Toast.LENGTH_SHORT).show();
                                                                        }


                                                                        ///////////////Toast.makeText(CancelActivity.this, "3 "+oorr+" id "+modid+
                                                                        //"total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();


                                                                    } while (cursor1.moveToNext());
                                                                }

                                                                Cursor c1ursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' AND deleted_not = '' ", null);
                                                                if (c1ursor1.moveToFirst()) {
                                                                    do {
                                                                        String st = c1ursor1.getString(0);
                                                                        String st21 = c1ursor1.getString(2);
                                                                        String ppp = c1ursor1.getString(3);
                                                                        String modqty = c1ursor1.getString(22);
                                                                        String qtycopy = c1ursor1.getString(23);

                                                                        if (modqty.toString().equals("")) {
//                                                                    ContentValues newValues = new ContentValues();
//                                                                    newValues.put("modifiedquantity", editText.getText().toString());
//                                                                    newValues.put("quantitycopy", String.valueOf(Integer.parseInt(tv.getText().toString()) - Integer.parseInt(editText.getText().toString())));
//                                                                    newValues.put("deleted_not", "decrease");
//                                                                    newValues.put("modifiedtotal", String.valueOf(Float.parseFloat(String.valueOf(Integer.parseInt(tv.getText().toString()) - Integer.parseInt(editText.getText().toString()))) * Float.parseFloat(ppp)));


                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", editText.getText().toString());
                                                                            newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                            String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", st + "")
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //          db1.update("All_sales", newValues, where, new String[]{});
                                                                        } else {
                                                                            ContentValues newValues = new ContentValues();
                                                                            newValues.put("modifiedquantity", editText.getText().toString());
                                                                            newValues.put("quantitycopy", String.valueOf(Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty)));
                                                                            newValues.put("deleted_not", "decrease");
                                                                            newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                            String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                            getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                            resultUri = new Uri.Builder()
                                                                                    .scheme("content")
                                                                                    .authority(StubProvider.AUTHORITY)
                                                                                    .path("All_sales")
                                                                                    .appendQueryParameter("operation", "update")
                                                                                    .appendQueryParameter("_id", st + "")
                                                                                    .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                    .build();
                                                                            getContentResolver().notifyChange(resultUri, null);


                                                                            //        db1.update("All_sales", newValues, where, new String[]{});
                                                                        }


                                                                        ///////////////Toast.makeText(CancelActivity.this, "4 "+oorr+" id "+st+
                                                                        //" total "+String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();
                                                                    } while (c1ursor1.moveToNext());
                                                                }


                                                                tv.setText(editText.getText().toString());
                                                            }
                                                            dialog.dismiss();
//                                                tv.setText(editText.getText().toString());
//                                                dialog.dismiss();
                                                        }
                                                        hii();
                                                    }

//                                                    db = openOrCreateDatabase("mydb", Context.MODE_PRIVATE, null);
//                                                    Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = '' OR deleted_not = 'decrease') = ''  ", null);
//                                                    if (cursor11.moveToFirst()) {
//                                                        levelel = cursor11.getInt(0);
//                                                        tatat = String.valueOf(level);
//                                                        ///////////////Toast.makeText(CancelActivity.this, "tottttal is "+tat, Toast.LENGTH_SHORT).show();
//                                                    }
//
//                                                    final String tot = String.valueOf(Float.parseFloat(tat));
//                                                    onlybillnew.setText(tot);

                                                }
                                            });

                                            ImageView cancel = (ImageView) dialog.findViewById(R.id.btndelete);
                                            cancel.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    dialog.dismiss();
                                                }
                                            });








                                        }

                                    }

                                }else {

                                    if (tv.getText().toString().equals("1")) {
                                        ///////////////Toast.makeText(CancelActivity.this, "only 1", Toast.LENGTH_SHORT).show();
                                        Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                        if (cursor1.moveToFirst()) {
                                            do {
                                                oorr = cursor1.getString(20);
                                                nnaa = cursor1.getString(1);
                                                String st21 = cursor1.getString(2);

                                                ContentValues newValues = new ContentValues();
                                                newValues.put("deleted_not", "");
                                                newValues.put("quantitycopy", ii);
                                                newValues.put("modifiedquantity", "");
                                                newValues.put("modifiedtotal", "");
                                                String where1 = "parentid = '" + oorr + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                resultUri = new Uri.Builder()
                                                        .scheme("content")
                                                        .authority(StubProvider.AUTHORITY)
                                                        .path("All_sales")
                                                        .appendQueryParameter("operation", "update")
                                                        .appendQueryParameter("parentid",oorr+"")
                                                        .appendQueryParameter("bill_no",billno.getText().toString())
                                                        .build();
                                                getContentResolver().notifyChange(resultUri, null);





                                                //     db1.update("All_sales", newValues, where1, new String[]{});
                                                ///////////////Toast.makeText(CancelActivity.this, " item " + oorr + " id " + modid + " name " + nnaa, Toast.LENGTH_SHORT).show();

                                            } while (cursor1.moveToNext());
                                        }

                                        ContentValues newValues = new ContentValues();
                                        newValues.put("deleted_not", "");
                                        newValues.put("quantitycopy", ii);
                                        newValues.put("modifiedquantity", "");
                                        newValues.put("modifiedtotal", "");
                                        String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                        getContentResolver().update(contentUri, newValues,where,new String[]{});
                                        resultUri = new Uri.Builder()
                                                .scheme("content")
                                                .authority(StubProvider.AUTHORITY)
                                                .path("All_sales")
                                                .appendQueryParameter("operation", "update")
                                                .appendQueryParameter("_id",modidd+"")
                                                .appendQueryParameter("bill_no",billno.getText().toString())
                                                .build();
                                        getContentResolver().notifyChange(resultUri, null);

                                        //   db1.update("All_sales", newValues, where, new String[]{});
                                        ///////////////Toast.makeText(CancelActivity.this, " modifier " + modidd, Toast.LENGTH_SHORT).show();

                                        hii( );
                                    } else {
                                        ///////////////Toast.makeText(CancelActivity.this, "> than 1, display dialog box", Toast.LENGTH_SHORT).show();

                                        final Dialog dialog = new Dialog(CancelActivity.this, R.style.notitle);
                                        dialog.setContentView(R.layout.quantity_edit);
                                        ///////////////Toast.makeText(CancelActivity.this, "fffff", Toast.LENGTH_SHORT).show();
                                        dialog.show();

                                        TextView inn = (TextView) dialog.findViewById(R.id.inn);
                                        TextView inn1 = (TextView) dialog.findViewById(R.id.inn1);
                                        inn.setText(insert1_cc);
                                        inn1.setText(insert1_cc);

                                        Cursor cvb = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = 'delete' OR deleted_not = 'decrease')", null);
                                        if (cvb.moveToFirst()){
                                            panetwo.setVisibility(View.VISIBLE);
                                            panethree.setVisibility(View.VISIBLE);
                                        }else {
                                            panetwo.setVisibility(View.GONE);
                                            panethree.setVisibility(View.INVISIBLE);
                                        }

                                        Cursor cursorcheck1 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                        while (cursorcheck1.moveToNext()) {

                                            final String assmod = cursorcheck1.getString(1);
                                            final String ppp = cursorcheck1.getString(3);

                                            /////////////////Toast.makeText(CancelActivity.this, "assigned Modifiers are " + assmod, Toast.LENGTH_SHORT).show();


                                            Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                            if (cursor1.moveToFirst()) {
                                                do {
                                                    String qa = cursor1.getString(3);
                                                    /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                    Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                    if (c1ursor1.moveToFirst()) {
                                                        do {

                                                            float aq = c1ursor1.getFloat(0);
                                                            String aqq = String.valueOf(aq);

                                                            //String aq = c1ursor1.getString(3);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                            cal1 = Float.parseFloat(qa) + Float.parseFloat(aqq);

                                                            //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                        } while (c1ursor1.moveToNext());
                                                    }
                                                } while (cursor1.moveToNext());
                                            }


                                            final TextView editText = (TextView) dialog.findViewById(R.id.displayquantity);
                                            editText.setText(tv.getText().toString());

                                            final TextView textView = (TextView) dialog.findViewById(R.id.itemname);
                                            textView.setText(hii);

                                            final TextView textView1 = (TextView) dialog.findViewById(R.id.price);
                                            float zx = Float.parseFloat(tv.getText().toString()) * cal1;
                                            textView1.setText(String.format("%.2f", zx));

                                            final TextView disc_var_textview = (TextView) dialog.findViewById(R.id.disc_price);

                                            if (disc_31.toString().equals("0")){
                                                disc_var_textview.setText("0");
                                            }else {
                                                TextView cz = new TextView(CancelActivity.this);
                                                cz.setText(disc_notorig_quan1);
                                                if (cz.getText().toString().equals("")){
                                                    if (disc_orig_type1.toString().equals("%")){
                                                        float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) * Float.parseFloat(editText.getText().toString());
                                                        String bb = String.format("%.2f", cws);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }else {
                                                        float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                        //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_orig_quan1);
                                                        float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                        String bb = String.format("%.2f", cws1);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }
                                                }else {
                                                    if (disc_orig_type1.toString().equals("%")){
                                                        float cws = (Float.parseFloat(disc_orig_price1)/100) * Float.parseFloat(disc_31) *
                                                                (Float.parseFloat(editText.getText().toString()));
                                                        String bb = String.format("%.2f", cws);
                                                        disc_var_textview.setText("("+bb+")");
                                                        /////////Toast.makeText(CancelActivity.this, "ff "+bb, Toast.LENGTH_SHORT).show();
                                                    }else {
                                                        float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText.getText().toString()));
                                                        //float cws = (Float.parseFloat(disc_orig_price1) - 100) * Float.parseFloat(disc_31) * Float.parseFloat(disc_notorig_quan1);
                                                        float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                        String bb = String.format("%.2f", cws1);
                                                        disc_var_textview.setText("("+bb+")");
                                                    }
                                                }
                                            }

//                                            ImageView clse = (ImageView) dialog.findViewById(R.id.closetext);
//                                            clse.setOnClickListener(new View.OnClickListener() {
//                                                @Override
//                                                public void onClick(View v) {
//                                                    dialog.dismiss();
//                                                }
//                                            });


                                            ImageButton imageView2 = (ImageButton) dialog.findViewById(R.id.quantitydecrease);
                                            imageView2.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    final TextView editText1 = (TextView) dialog.findViewById(R.id.displayquantity);
                                                    String qa = "0";
                                                    String addorsub = editText.getText().toString();
                                                    int clickcountsss = 0;
                                                    float incc = Float.parseFloat(addorsub);
                                                    clickcountsss++;

                                                    float bd = incc - clickcountsss;
                                                    newv = String.format("%.2f", bd);
                                                    //newv = String.valueOf(incc - clickcountsss);
                                                    newvv = Float.parseFloat(newv);


                                                    if (newvv < 0) {
                                                        //row.removeAllViews();
                                                    } else {
                                                        editText.setText(newv);
                                                    }

                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "'", null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            qa = cursor1.getString(3);
                                                            /////////////////Toast.makeText(CancelActivity.this, " "+qa, Toast.LENGTH_SHORT).show();

                                                            Cursor c1ursor1 = db1.rawQuery("SELECT Sum(price) FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                            if (c1ursor1.moveToFirst()) {
                                                                do {

                                                                    float aq = c1ursor1.getFloat(0);
                                                                    String aqq = String.valueOf(aq);

                                                                    //String aq = c1ursor1.getString(3);
                                                                    /////////////////Toast.makeText(CancelActivity.this, " "+aqq, Toast.LENGTH_SHORT).show();
                                                                    cal = Float.parseFloat(qa) + Float.parseFloat(aqq);

                                                                    //cal = Integer.parseInt(qa)+Integer.parseInt(aq);
                                                                    /////////////////Toast.makeText(CancelActivity.this, " "+cal, Toast.LENGTH_SHORT).show();

                                                                } while (c1ursor1.moveToNext());
                                                            }
                                                        } while (cursor1.moveToNext());
                                                    }

                                                    final Cursor cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '"+billno.getText().toString()+"' AND (deleted_not = '' OR deleted_not = 'decrease') ", null);
                                                    if (cursor.moveToFirst()){
                                                        final String disc_notorig_quan1 = cursor.getString(22);
                                                        cz = new TextView(CancelActivity.this);
                                                        cz.setText(disc_notorig_quan1);
                                                    }else {
                                                        cz = new TextView(CancelActivity.this);
                                                        cz.setText("");
                                                    }

                                                    if (editText.getText().toString().equals("0") || editText.getText().toString().equals("0.0") || editText.getText().toString().equals("0.00")) {
                                                        textView1.setText("0");
                                                    } else {
                                                        Float cc = newvv * cal;
                                                        /////////////////Toast.makeText(CancelActivity.this, " "+cc, Toast.LENGTH_SHORT).show();
                                                        textView1.setText(String.format("%.2f", cc));

                                                        if (cz.getText().toString().equals("")){
                                                            if (disc_orig_type1.toString().equals("%")){
                                                                float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                String ug = String.format("%.2f", cce);
                                                                disc_var_textview.setText(ug);
                                                            }else {
                                                                float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * Float.parseFloat(editText1.getText().toString());
                                                                float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                String bb = String.format("%.2f", cws1);
                                                                disc_var_textview.setText("("+bb+")");
                                                            }
                                                        }else {
                                                            if (disc_orig_type1.toString().equals("%")){
                                                                float cce = (Float.parseFloat(qa)/100) * (Float.parseFloat(editText1.getText().toString()) * Float.parseFloat(disc_31));
                                                                String ug = String.format("%.2f", cce);
                                                                disc_var_textview.setText(ug);
                                                                ///////////Toast.makeText(CancelActivity.this, "aa "+disc_var_textview.getText().toString(), Toast.LENGTH_SHORT).show();
                                                            }else {
                                                                float cws = (Float.parseFloat(disc_orig_price1) - Float.parseFloat(disc_31)) * (Float.parseFloat(editText1.getText().toString()));
                                                                float cws1 = cws - Float.parseFloat(textView1.getText().toString());
                                                                String bb = String.format("%.2f", cws1);
                                                                disc_var_textview.setText("("+bb+")");
                                                            }
                                                        }
                                                    }


                                                }
                                            });

                                            Button removeitem = (Button) dialog.findViewById(R.id.quantityremove);
                                            removeitem.setVisibility(View.VISIBLE);
                                            removeitem.setText("Revert back");
                                            removeitem.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            oorr = cursor1.getString(20);
                                                            nnaa = cursor1.getString(1);
                                                            String st21 = cursor1.getString(2);

                                                            ContentValues newValues = new ContentValues();
                                                            newValues.put("deleted_not", "");
                                                            newValues.put("quantitycopy", ii);
                                                            newValues.put("modifiedquantity", "");
                                                            newValues.put("modifiedtotal", "");
                                                            String where1 = "parentid = '" + oorr + "' AND bill_no = '"+billno.getText().toString()+"' AND deleted_not = 'decrease' ";

                                                            contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                            getContentResolver().update(contentUri, newValues,where1,new String[]{});
                                                            resultUri = new Uri.Builder()
                                                                    .scheme("content")
                                                                    .authority(StubProvider.AUTHORITY)
                                                                    .path("All_sales")
                                                                    .appendQueryParameter("operation", "update")
                                                                    .appendQueryParameter("parentid",oorr+"")
                                                                    .appendQueryParameter("bill_no",billno.getText().toString())
                                                                    .build();
                                                            getContentResolver().notifyChange(resultUri, null);



                                                            //     db1.update("All_sales", newValues, where1, new String[]{});
                                                            ///////////////Toast.makeText(CancelActivity.this, " item " + oorr + " id " + modid + " name " + nnaa, Toast.LENGTH_SHORT).show();

                                                        } while (cursor1.moveToNext());
                                                    }

                                                    ContentValues newValues = new ContentValues();
                                                    newValues.put("deleted_not", "");
                                                    newValues.put("quantitycopy", ii);
                                                    newValues.put("modifiedquantity", "");
                                                    newValues.put("modifiedtotal", "");
                                                    newValues.put("new_modified_total", xc1.getText().toString());
                                                    String where = "_id = '" + modidd + "' AND bill_no = '"+billno.getText().toString()+"' ";


                                                    contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                    getContentResolver().update(contentUri, newValues,where,new String[]{});
                                                    resultUri = new Uri.Builder()
                                                            .scheme("content")
                                                            .authority(StubProvider.AUTHORITY)
                                                            .path("All_sales")
                                                            .appendQueryParameter("operation", "update")
                                                            .appendQueryParameter("_id",modidd+"")
                                                            .appendQueryParameter("bill_no",billno.getText().toString())
                                                            .build();
                                                    getContentResolver().notifyChange(resultUri, null);


                                                    //          db1.update("All_sales", newValues, where, new String[]{});
                                                    ///////////////Toast.makeText(CancelActivity.this, " modifier " + modidd, Toast.LENGTH_SHORT).show();
                                                    dialog.dismiss();
                                                    hii( );
                                                }
                                            });

                                            ImageView ok = (ImageView) dialog.findViewById(R.id.save);
                                            ok.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {

                                                    String box = editText.getText().toString();
                                                    final String number1 = tv.getText().toString();

                                                    if (number1.toString().equals(box)){
                                                        dialog.dismiss();
                                                    }else {
                                                        if (Float.parseFloat(editText.getText().toString()) > Float.parseFloat(tv.getText().toString())) {
                                                            ///////////////Toast.makeText(CancelActivity.this, "Quantity has to be lesser than " + tv.getText().toString(), Toast.LENGTH_SHORT).show();
                                                        } else {
                                                            if (Float.parseFloat(number1) <= 0 || Float.parseFloat(box) <= 0) {
//                                                    final EditText editText2 = (EditText) dialog.findViewById(R.id.displayquantity);
//                                                    String box2 = editText2.getText().toString();
                                                                row3.removeAllViews();
                                                                //row2.removeAllViews();

                                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                if (cursor1.moveToFirst()) {
                                                                    do {
                                                                        oorr = cursor1.getString(20);
                                                                        String st21 = cursor1.getString(2);

                                                                        ContentValues newValues = new ContentValues();
                                                                        newValues.put("deleted_not", "");
                                                                        newValues.put("quantitycopy", st21);
                                                                        newValues.put("modifiedquantity", "");
                                                                        newValues.put("modifiedtotal", "");
                                                                        String where1 = "parentid = '" + oorr + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                        getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProvider.AUTHORITY)
                                                                                .path("All_sales")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("parentid", oorr + "")
                                                                                .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                .build();
                                                                        getContentResolver().notifyChange(resultUri, null);


                                                                        //    db1.update("All_sales", newValues, where1, new String[]{});
                                                                        ///////////////Toast.makeText(CancelActivity.this, "1 " + oorr + " id " + modid, Toast.LENGTH_SHORT).show();

                                                                    } while (cursor1.moveToNext());
                                                                }

                                                                ContentValues newValues = new ContentValues();
                                                                newValues.put("deleted_not", "");
                                                                newValues.put("quantitycopy", ii);
                                                                newValues.put("modifiedquantity", "");
                                                                newValues.put("modifiedtotal", "");
                                                                String where = "_id = '" + modidd + "' AND bill_no = '" + billno.getText().toString() + "' ";
                                                                ///////////////Toast.makeText(CancelActivity.this, "2 " + oorr + " id " + modidd, Toast.LENGTH_SHORT).show();


                                                                contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                resultUri = new Uri.Builder()
                                                                        .scheme("content")
                                                                        .authority(StubProvider.AUTHORITY)
                                                                        .path("All_sales")
                                                                        .appendQueryParameter("operation", "update")
                                                                        .appendQueryParameter("_id", modidd + "")
                                                                        .appendQueryParameter("bill_no", billno.getText().toString())
                                                                        .build();
                                                                getContentResolver().notifyChange(resultUri, null);

                                                                //        db1.update("All_sales", newValues, where, new String[]{});


                                                            } else {
                                                                Cursor cursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND _id = '" + modid + "'", null);
                                                                if (cursor1.moveToFirst()) {
                                                                    do {
                                                                        oorr = cursor1.getString(20);
                                                                        String ppp = cursor1.getString(3);
                                                                        String ori = cursor1.getString(2);
                                                                        String modqty = cursor1.getString(22);
                                                                        String qtycopy = cursor1.getString(23);


                                                                        ContentValues newValues = new ContentValues();
                                                                        newValues.put("modifiedquantity", editText.getText().toString());
                                                                        newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                        newValues.put("deleted_not", "decrease");
                                                                        newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                        String where1 = "_id = '" + modid + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                        getContentResolver().update(contentUri, newValues, where1, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProvider.AUTHORITY)
                                                                                .path("All_sales")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("_id", modid + "")
                                                                                .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                .build();
                                                                        getContentResolver().notifyChange(resultUri, null);


                                                                        //       db1.update("All_sales", newValues, where1, new String[]{});

                                                                        //String.valueOf(Integer.parseInt(modqty)+Integer.parseInt(editText.getText().toString())));

                                                                        ///////////////Toast.makeText(CancelActivity.this, "3 " + oorr + " id " + modid +
                                                                        //"total " + String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();

                                                                    } while (cursor1.moveToNext());
                                                                }

                                                                Cursor c1ursor1 = db1.rawQuery("SELECT * FROM ALL_SALES WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + newid + "' ", null);
                                                                if (c1ursor1.moveToFirst()) {
                                                                    do {
                                                                        String st = c1ursor1.getString(0);
                                                                        String ppp = c1ursor1.getString(3);
                                                                        String modqty = c1ursor1.getString(22);
                                                                        String qtycopy = c1ursor1.getString(23);

                                                                        ContentValues newValues = new ContentValues();
                                                                        newValues.put("modifiedquantity", editText.getText().toString());
                                                                        newValues.put("quantitycopy", Float.parseFloat(qtycopy) - Float.parseFloat(editText.getText().toString()) + Float.parseFloat(modqty));
                                                                        newValues.put("deleted_not", "decrease");
                                                                        newValues.put("modifiedtotal", (Float.parseFloat(editText.getText().toString())) * (Float.parseFloat(ppp)));
                                                                        String where = "_id = '" + st + "' AND bill_no = '" + billno.getText().toString() + "' ";


                                                                        contentUri = Uri.withAppendedPath(StubProvider.CONTENT_URI, "All_sales");
                                                                        getContentResolver().update(contentUri, newValues, where, new String[]{});
                                                                        resultUri = new Uri.Builder()
                                                                                .scheme("content")
                                                                                .authority(StubProvider.AUTHORITY)
                                                                                .path("All_sales")
                                                                                .appendQueryParameter("operation", "update")
                                                                                .appendQueryParameter("_id", st + "")
                                                                                .appendQueryParameter("bill_no", billno.getText().toString())
                                                                                .build();
                                                                        getContentResolver().notifyChange(resultUri, null);


                                                                        //     db1.update("All_sales", newValues, where, new String[]{});
                                                                        ///////////////Toast.makeText(CancelActivity.this, "4 " + oorr + " id " + st +
                                                                        //" total " + String.valueOf(Float.parseFloat(editText.getText().toString()) * Float.parseFloat(ppp)), Toast.LENGTH_SHORT).show();
                                                                    } while (c1ursor1.moveToNext());
                                                                }


                                                                tv.setText(editText.getText().toString());
                                                            }
                                                            dialog.dismiss();
//                                                tv.setText(editText.getText().toString());
//                                                dialog.dismiss();
                                                        }
                                                        hii();
                                                    }

//                                            db = openOrCreateDatabase("mydb", Context.MODE_PRIVATE, null);
//                                            Cursor cursor11 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND (deleted_not = '' OR deleted_not = 'decrease') = ''  ", null);
//                                            if (cursor11.moveToFirst()) {
//                                                levelel = cursor11.getInt(0);
//                                                tatat = String.valueOf(level);
//                                                ///////////////Toast.makeText(CancelActivity.this, "tottttal is "+tat, Toast.LENGTH_SHORT).show();
//                                            }
//
//                                            final String tot = String.valueOf(Float.parseFloat(tat));
//                                            onlybillnew.setText(tot);

                                                }
                                            });

                                            ImageView cancel = (ImageView) dialog.findViewById(R.id.btndelete);
                                            cancel.setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    dialog.dismiss();
                                                }
                                            });


                                        }
                                    }
                                }
                            }
                        });

                        Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND parent = '" + hii + "' AND parentid = '" + idn + "' AND deleted_not = 'decrease'  ", null);
                        if (modcursor.moveToFirst()){
                            do {
                                ///////////////Toast.makeText(CancelActivity.this, "Modified modifier decrease", Toast.LENGTH_SHORT).show();

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                final String qqq = modcursor.getString(22);

                                TextView quantity, tvmod, modprice, tvmod1, tvmod2;

//                        TableRow.LayoutParams tableRowParams = new TableRow.LayoutParams();
//                        tableRowParams.setMargins(1, 1, 1, 1);
//                        tableRowParams.weight = 1;

                                TableRow[] tableRow1 = {new TableRow(CancelActivity.this)};
                                tableRow1[0].setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                                //tableRow1[0].setPadding(55, 0, 0, 0);
                                //tableRow.setBackgroundColor(Color.BLACK);

                                TextView textView2 = new TextView(CancelActivity.this);
                                textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.40f));
                                textView2.setText("");
                                tableRow1[0].addView(textView2);

                                ImageView imageView1 = new ImageView(CancelActivity.this);
                                //imageView1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                imageView1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.22f));
                                imageView1.setImageResource(R.drawable.mod_filter);
                                tableRow1[0].addView(imageView1);

                                quantity = new TextView(CancelActivity.this);
                                String getquan = tv.getText().toString();
                                quantity.setText(modiquan);


                                //int  modid = Integer.parseInt(idd);
                                //int newmodid = modid+1;
                                //contentValues.put("_id", "1");

                                tvmod = new TextView(CancelActivity.this);
                                tvmod.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.00f));
                                //tvmod.setPadding(100, 0, 0, 0);
                                tvmod.setText(modiname);
                                tvmod.setGravity(Gravity.CENTER_VERTICAL);
                                tvmod.setTextColor(Color.parseColor("#000000"));
                                tableRow1[0].addView(tvmod);

                                TextView symbol = new TextView(CancelActivity.this);
                                //symbol.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                symbol.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                symbol.setText(insert1_cc);;
                                symbol.setGravity(Gravity.CENTER_VERTICAL);
                                symbol.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                symbol.setTextColor(Color.parseColor("#6a6a6d"));
                                tableRow1[0].addView(symbol);

                                tvmod1 = new TextView(CancelActivity.this);
                                tvmod1.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.94f));
                                tvmod1.setGravity(Gravity.CENTER_VERTICAL);
                                tvmod1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                tvmod1.setTextColor(Color.parseColor("#6a6a6d"));
                                tvmod1.setText(modiprice);
                                tableRow1[0].addView(tvmod1);

                                TextView symbol1 = new TextView(CancelActivity.this);
                                //symbol1.setLayoutParams(new TableRow.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                                symbol1.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));
                                symbol1.setText(insert1_cc);;
                                symbol1.setGravity(Gravity.CENTER_VERTICAL);
                                symbol1.setTypeface(Typeface.DEFAULT_BOLD);
                                symbol1.setTextColor(Color.parseColor("#000000"));
                                symbol1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                tableRow1[0].addView(symbol1);

                                tvmod2 = new TextView(CancelActivity.this);
                                tvmod2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                String modtotal = String.valueOf(Float.parseFloat(qqq) * Float.parseFloat(modiprice));
                                tvmod2.setText(modtotal);
                                tvmod2.setGravity(Gravity.CENTER_VERTICAL);
                                tvmod2.setTypeface(Typeface.DEFAULT_BOLD);
                                tvmod2.setTextColor(Color.parseColor("#000000"));
                                tvmod2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                tableRow1[0].addView(tvmod2);

                                ImageView imageView2 = new ImageView(CancelActivity.this);
                                imageView2.setVisibility(View.INVISIBLE);
                                imageView2.setImageResource(R.drawable.ic_remove_black_24dp);
                                imageView2.setBackgroundResource(R.drawable.light_black_click_shape_rounded_corners);
                                imageView2.setPadding(size_in_10px, size_in_10px, size_in_10px, size_in_10px);
                                //imageView2.setImageResource(R.drawable.cancel_order_close);
                                //imageView2.setBackgroundResource(R.drawable.edit_quantity);
//                        linearLayout6.addView(imageView);
//                        //linearLayout1.addView(linearLayout6);
//                        row.addView(linearLayout6);
                                LinearLayout.LayoutParams params1 = new TableRow.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                                        LinearLayout.LayoutParams.WRAP_CONTENT);
                                params1.setMargins(6, 2, 6, 2);
                                imageView2.setLayoutParams(params1);
                                tableRow1[0].addView(imageView2);


                                tableLayout4.addView(tableRow1[0]);
                            }while (modcursor.moveToNext());
                        }

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billno.getText().toString() + "' AND itemname = '" + hii + "' AND _id = '" + nbg + "'  ", null);
                        if (disc_cursor.moveToFirst()){
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                float vtq = disc_cursor.getFloat(31);
                                String disc_orig_price = disc_cursor.getString(3);
                                String disc_orig_quan = disc_cursor.getString(2);
                                String disc_orig_total = disc_cursor.getString(4);
                                String disc_orig_type = disc_cursor.getString(27);
                                String disc_orig_value = disc_cursor.getString(28);
                                String disc_notorig_quan = disc_cursor.getString(22);
                                if(disc_there.toString().equals("no")){

                                }else {
                                    ///Toast.makeText(CancelActivity.this, "aaa " +disc_vv, Toast.LENGTH_SHORT).show();

                                    final TableRow row_disc = new TableRow(CancelActivity.this);
                                    row_disc.setLayoutParams(new TableLayout.LayoutParams(
                                            TableRow.LayoutParams.MATCH_PARENT,
                                            TableRow.LayoutParams.WRAP_CONTENT, 4.04f));
                                    //row_disc.setPadding(padding_in_px, padding_in_px1, padding_in_px, padding_in_px1);

                                    TextView textView2 = new TextView(CancelActivity.this);
                                    textView2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.56f));
                                    textView2.setText("");
                                    row_disc.addView(textView2);

                                    disc_tv = new TextView(CancelActivity.this);
                                    disc_tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.96f));
                                    disc_tv.setGravity(Gravity.CENTER_VERTICAL);
                                    TextView cz = new TextView(CancelActivity.this);
                                    cz.setText(disc_notorig_quan);
                                    if (cz.getText().toString().equals("")){
                                        if (disc_orig_type.toString().equals("%")){
                                            float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                            String bb = String.format("%.2f", cws);
                                            disc_tv.setText("("+"-" + bb+")");
                                        }else {
                                            float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                            float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                            String bb = String.format("%.2f", cws1);
                                            disc_tv.setText("("+"-" + bb+")");
                                        }
                                    }else {
                                        if (disc_orig_type.toString().equals("%")){
                                            float cws = (Float.parseFloat(disc_orig_price)/100) * Float.parseFloat(disc_orig_value) * Float.parseFloat(tv.getText().toString());
                                            String bb = String.format("%.2f", cws);
                                            disc_tv.setText("("+"-" + bb+")");
                                        }else {
                                            float cws = (Float.parseFloat(disc_orig_price) - Float.parseFloat(disc_orig_value)) * Float.parseFloat(tv.getText().toString());
                                            float cws1 = Float.parseFloat(tv3.getText().toString()) - cws;
                                            String bb = String.format("%.2f", cws1);
                                            disc_tv.setText("("+"-" + bb+")");
                                        }
                                    }
                                    //disc_tv.setText("("+"-" + disc_cursor.getString(31)+")");
                                    disc_tv.setTypeface(Typeface.DEFAULT_BOLD);
                                    disc_tv.setTextColor(Color.parseColor("#000000"));
                                    disc_tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                    row_disc.addView(disc_tv);

                                    TextView textView21 = new TextView(CancelActivity.this);
                                    textView21.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.52f));
                                    textView21.setText("");
                                    row_disc.addView(textView21);

                                    tableLayout_disc.addView(row_disc);
                                }
                            }while(disc_cursor.moveToNext());
                        }


                        modcursor.close();

                        tableLayout2.addView(row3);
                        ///////////////Toast.makeText(CancelActivity.this, "66", Toast.LENGTH_SHORT).show();

                        tableLayout2.addView(tableLayout4);

                        tableLayout2.addView(tableLayout_disc);
                    }

                }



            }while (cursorrr.moveToNext());
        }
        cursorrr.close();


        /////////////////Toast.makeText(CancelActivity.this, "new total is "+onlybillnew.getText().toString(), Toast.LENGTH_SHORT).show();

        return null;
    }

    public static void hideKeyboard(Context ctx) {
        InputMethodManager inputManager = (InputMethodManager) ctx
                .getSystemService(Context.INPUT_METHOD_SERVICE);

        // check if no view has focus:
        View v = ((Activity) ctx).getCurrentFocus();
        if (v == null)
            return;

        inputManager.hideSoftInputFromWindow(v.getWindowToken(), 0);
    }

    private class AsyncTaskRunner extends AsyncTask<String, String, String> {

        @Override
        protected String doInBackground(String... params) {
            hi();
            hii();
            return null;
        }
    }

    public void displayKeyboard() {
        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);
    }

    public void donotdisplayKeyboard() {
        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.toggleSoftInput(InputMethodManager.RESULT_HIDDEN, 0);
    }

    public static void donotshowKeyboard(Activity activity) {
        if (activity != null) {
            activity.getWindow()
                    .setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        }
    }


    public void footer(){

        Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }

        Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }

        Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        Cursor cc=db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x27, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x08,0x17,0x27,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    allbufline = new byte[][]{
                            left, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    setHT32 = new byte[]{0x1b,0x44,0x19,0x00};//2 tabs 2"
                    setHT321 = new byte[]{0x1b,0x44,0x13,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x15,0x00};//2 tabs 3"
                    setHT33 = new byte[] {0x1b,0x44,0x09,0x19,0x00};//3 tabs 2"
                    setHT34 = new byte[]{0x1b,0x44,0x04,0x12,0x19,0x00};//4 tabs 2"
                    nPaperWidth = 384;
                    allbufline = new byte[][]{
                            left, "--------------------------------".getBytes(), LF

                    };
                }
            }while(cc.moveToNext());
        }

//        allbuf2 = new byte[][]{
//                normal, "Thank you! visit again.".getBytes(), LF, LF
//
//        };
//        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//        if (statussusbs.toString().equals("ok")) {
//            BluetoothPrintDriver.BT_Write(normal);	//
//            BT_Write("Thank you! visit again.");
//            BluetoothPrintDriver.BT_Write(LF);	//
//            BluetoothPrintDriver.BT_Write(LF);	//
//        } else {
//            if (statusnets_counter.toString().equals("ok")) {
//                wifiSocket2.WIFI_Write(normal);	//
//                wifiSocket2.WIFI_Write("Thank you! visit again.");
//                wifiSocket2.WIFI_Write(LF);	//
//                wifiSocket2.WIFI_Write(LF);	//
//            }else {
//                if (statusnets.toString().equals("ok")) {
//                    wifiSocket.WIFI_Write(normal);	//
//                    wifiSocket.WIFI_Write("Thank you! visit again.");
//                    wifiSocket.WIFI_Write(LF);	//
//                    wifiSocket.WIFI_Write(LF);	//
//                }
//            }
//        }

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")){

        }else {
            allbuf2 = new byte[][]{
                    normal, strbillone.getBytes(), LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                BluetoothPrintDriver.BT_Write(normal);	//
                BT_Write(strbillone);
                BluetoothPrintDriver.BT_Write(LF);	//
            } else {
                if (statusnets_counter.toString().equals("ok")) {
                    wifiSocket2.WIFI_Write(normal);	//
                    wifiSocket2.WIFI_Write(strbillone);
                    wifiSocket2.WIFI_Write(LF);	//
                }else {
                    if (statusnets.toString().equals("ok")) {
                        wifiSocket.WIFI_Write(normal);	//
                        wifiSocket.WIFI_Write(strbillone);
                        wifiSocket.WIFI_Write(LF);	//
                    }
                }
            }
        }

        feedcut();

    }

    public void feedcut(){
        Cursor cc=db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                }
                else {
                    feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                }
            }while(cc.moveToNext());
        }

        byte[][] allbuf = new byte[][]{
                feedcut2
        };
        if (statussusbs.toString().equals("ok")) {
            BluetoothPrintDriver.BT_Write(feedcut2);	//
        }else {
            if (statusnets_counter.toString().equals("ok")) {
                wifiSocket2.WIFI_Write(feedcut2);	//
            }else {
                if (statusnets.toString().equals("ok")) {
                    wifiSocket.WIFI_Write(feedcut2);	//
                }
            }
        }

        if (str_print_ty.toString().equals("POS")) {
            if (statussusbs.equals("ok")) {
                BluetoothPrintDriver.BT_Write(feedcut2);	//
            }else {
                if (statusnets_counter.equals("ok")) {
                    wifiSocket2.WIFI_Write(feedcut2);	//
                }else {
                    if (statusnets.equals("ok")) {
                        wifiSocket.WIFI_Write(feedcut2);	//
                    }
                }
            }
        }
    }


    public void cashopen(){
        byte[] cashopen = {0x1b,0x70,0x00,0x60,0x60};

        byte[][] allbuf = new byte[][]{
                cashopen
        };
        if (statussusbs.toString().equals("ok")) {
            BluetoothPrintDriver.BT_Write(cashopen);	//
        }else {
            if (statusnets_counter.toString().equals("ok")) {
                wifiSocket2.WIFI_Write(cashopen);	//
            }else {
                if (statusnets.toString().equals("ok")) {
                    wifiSocket.WIFI_Write(cashopen);	//
                }
            }
        }
    }


    class DownloadMusicfromInternet extends AsyncTask<String, Void, Integer>{

        private ProgressDialog dialog = new ProgressDialog(CancelActivity.this, R.style.timepicker_date_dialog);


        @Override
        protected Integer doInBackground(String... params) {
            String sql = "UPDATE All_Sales SET deleted_not = '' WHERE bill_no = '"+billnoget+"'";
            db1.execSQL(sql);

            String sql1 = "UPDATE All_Sales SET modifiedquantity = '' WHERE bill_no = '"+billnoget+"'";
            db1.execSQL(sql1);

            String sql2 = "UPDATE All_Sales SET quantitycopy = quantity WHERE bill_no = '"+billnoget+"'";
            db1.execSQL(sql2);

            String sql3 = "UPDATE All_Sales SET modifiedtotal = '' WHERE bill_no = '"+billnoget+"'";
            db1.execSQL(sql3);

            String sql4 = "UPDATE All_Sales SET new_modified_total = '' WHERE bill_no = '"+billnoget+"'";
            db1.execSQL(sql4);
            return null;
        }

        // Show Progress bar before downloading Music
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            // Shows Progress Bar Dialog and then call doInBackground method
            //showDialog(progress_bar_type);

            dialog.setMessage("Loading");
            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);
//            dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
//                @Override
//                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
//                    if (keyCode == KeyEvent.KEYCODE_BACK) {
//                        //dialog.dismiss();
//                        //row.setBackgroundResource(0);
//                        return true;
//                    }
//                    return false;
//                }
//            });
            dialog.show();
        }



        // Once Music File is downloaded
        @Override
        protected void onPostExecute(Integer file_url) {
            dialog.dismiss();
        }
    }



    private class MakeRequestTask extends AsyncTask<Void, Void, String> {
        private com.google.api.services.gmail.Gmail mService = null;
        private Exception mLastError = null;
//        private View view = sendFabButton;

        public MakeRequestTask(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
            mService = new com.google.api.services.gmail.Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName(getResources().getString(R.string.app_name))
                    .build();
        }

        @Override
        protected String doInBackground(Void... params) {
            try {
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                return null;
            }
        }

        private String getDataFromApi() throws IOException {
            // getting Values for to Address, from Address, Subject and Body

            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }

            String url = "www.intuitionsoftwares.com";


//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);


            Date dtt_new = new Date();
            SimpleDateFormat sdf1t_new = new SimpleDateFormat("yyyyMMddkkmm");
            final String time24_new = sdf1t_new.format(dtt_new);

            SimpleDateFormat normal = new SimpleDateFormat("dd MMM yyyy");
            final String normal1 = normal.format(new Date());

            SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy MM dd");
            final String currentDateandTime1 = sdf2.format(new Date());

            Date dt = new Date();
            SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss aa");
            final String time1 = sdf1.format(dt);

            String bill_reason = "";
            if (radioBtncash.getText().toString().equals("Other")){
                bill_reason = editText.getText().toString();
            }else {
                bill_reason = radioBtncash.getText().toString();
            }

            final TextView onlybilltotalnew = (TextView) findViewById(R.id.totalnew);
            final TextView onlybilltotalcancel = (TextView) findViewById(R.id.totalcancel);

            if (onlybilltotalnew.getText().toString().equals("")){
                onlybilltotalnew.setText("0");
            }
            if (onlybilltotalcancel.getText().toString().equals("")){
                onlybilltotalcancel.setText("0");
            }


            float gb = Float.parseFloat(onlybilltotalnew.getText().toString())+Float.parseFloat(onlybilltotalcancel.getText().toString());
            String gb1 = String.valueOf(gb);

            String msg = "Returns/Refunds" +
                    "\n"+normal1 +","+ time1+
                    "\nBill no: "+billno.getText().toString()+
                    "\n"+"Bill amount: "+gb1+
                    "\n"+"Refunded: "+onlybilltotalcancel.getText().toString()+
                    "\nUser: "+username+
                    "\nResason: "+bill_reason;

            Cursor last_four_no = db.rawQuery("SElECT * FROM Email_recipient", null);
            if (last_four_no.moveToFirst()){
                String ph = last_four_no.getString(2);
                String ema_send = last_four_no.getString(3);
//                    String unn = cursor1.getString(3);
                TextView edtToAddress = new TextView(CancelActivity.this);
                edtToAddress.setText(ema_send);

                TextView edtSubject = new TextView(CancelActivity.this);
                edtSubject.setText(strcompanyname);

                TextView edtMessage = new TextView(CancelActivity.this);
                edtMessage.setText(msg);

                String user = "me";
                String to = Utils.getString(edtToAddress);
                String from = mCredential.getSelectedAccountName();
                Log.v("sender email", from);
                String subject = Utils.getString(edtSubject);
                String body = Utils.getString(edtMessage);
                MimeMessage mimeMessage;
                response = "";
                try {

//                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");

//                        String filename = Environment.getExternalStorageDirectory().toString()+"/Download/IvePOS_items_report"+currentDateandTimee1+"_"+timee1+".csv";

//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+"12May17"+"_"+"013048PM"+".csv";
//                String path = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_backup/";


//                        File f = new File(filename);
//
//                        mimeMessage = createEmailWithAttachment(to, from, subject, body, f);



                    mimeMessage = createEmail(to, from, subject, body);
                    response = sendMessage(mService, user, mimeMessage);
                } catch (MessagingException e) {
                    e.printStackTrace();
                }

//                } while (cursor1.moveToNext());
            }
            return response;
        }

        // Method to send email
        private String sendMessage(Gmail service,
                                   String userId,
                                   MimeMessage email)
                throws MessagingException, IOException {
            com.google.api.services.gmail.model.Message message = createMessageWithEmail(email);
            // GMail's official method to send email with oauth2.0
            message = service.users().messages().send(userId, message).execute();

            System.out.println("user ID " + userId);

            System.out.println("Message id: " + message.getId());
            System.out.println(message.toPrettyString());
            return message.getId();
        }

        public MimeMessage createEmailWithAttachment(String to,
                                                     String from,
                                                     String subject,
                                                     String bodyText,
                                                     File file)
                throws MessagingException, IOException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);

            email.setFrom(new InternetAddress(from));
            email.addRecipient(javax.mail.Message.RecipientType.TO,
                    new InternetAddress(to));
            email.setSubject(subject);

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(bodyText, "text/plain");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            mimeBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);

            mimeBodyPart.setDataHandler(new DataHandler(source));
            mimeBodyPart.setFileName(file.getName());

            multipart.addBodyPart(mimeBodyPart);
            email.setContent(multipart);

            return email;
        }

        // Method to create email Params
        private MimeMessage createEmail(String to,
                                        String from,
                                        String subject,
                                        String bodyText) throws MessagingException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);
            InternetAddress tAddress = new InternetAddress(to);
            InternetAddress fAddress = new InternetAddress(from);


            System.out.println("From  " + from);
            System.out.println("To  " + to);


            email.setFrom(fAddress);
            email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);
            email.setSubject(subject);
            email.setText(bodyText);
            return email;
        }

        private com.google.api.services.gmail.model.Message createMessageWithEmail(MimeMessage email)
                throws MessagingException, IOException {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            email.writeTo(bytes);
            String encodedEmail = Base64.encodeBase64URLSafeString(bytes.toByteArray());
            com.google.api.services.gmail.model.Message message = new com.google.api.services.gmail.model.Message();
            message.setRaw(encodedEmail);
            return message;
        }

        @Override
        protected void onPreExecute() {
            mProgress.show();
        }

        @Override
        protected void onPostExecute(String output) {
            Log.d("post execute", "error");
            mProgress.hide();
            if (output == null || output.length() == 0) {
                Toast.makeText(CancelActivity.this, "not success", Toast.LENGTH_SHORT).show();
//                showMessage(view, "No results returned.");
            } else {
                Toast.makeText(CancelActivity.this, "success", Toast.LENGTH_SHORT).show();
//                showMessage(view, output);
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
//                Log.v("Errors3", mLastError.getMessage());
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
//                    Log.v("Errors1", mLastError.getMessage());
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
//                    Log.v("Errors2", mLastError.getMessage());
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            Utils.REQUEST_AUTHORIZATION);
                } else {
//                    showMessage(view, "The following error occurred:\n" + mLastError.getMessage());
//                    Log.v("Errors", mLastError.getMessage());
                }
            } else {
//                showMessage(view, "Request Cancelled.");
            }
        }
    }

    void showGooglePlayServicesAvailabilityErrorDialog(
            final int connectionStatusCode) {
        GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
        Dialog dialog = apiAvailability.getErrorDialog(
                CancelActivity.this,
                connectionStatusCode,
                REQUEST_GOOGLE_PLAY_SERVICES);
        dialog.show();
    }

    private void getResultsFromApi() {

        Cursor cursorr = db.rawQuery("SELECT * FROM Email_setup", null);
        if (cursorr.moveToFirst()) {
            String unn = cursorr.getString(1);
//            Toast.makeText(CancelActivity.this, "a4 " + unn, Toast.LENGTH_SHORT).show();

            TextView tvv = new TextView(CancelActivity.this);
            tvv.setText(unn);

            if (tvv.getText().toString().equals("")) {

            }else {
                mCredential.setSelectedAccountName(tvv.getText().toString());
            }
        }

        if (! isGooglePlayServicesAvailable()) {
//            Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_SHORT).show();
            acquireGooglePlayServices();
        } else if (mCredential.getSelectedAccountName() == null) {
//            Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_SHORT).show();
//            chooseAccount();
        } else if (! isDeviceOnline()) {
//            Toast.makeText(CancelActivity.this, "3", Toast.LENGTH_SHORT).show();
//            mOutputText.setText("No network connection available.");
        } else {
//            Toast.makeText(CancelActivity.this, "4", Toast.LENGTH_SHORT).show();
            new MakeRequestTask1(mCredential).execute();
        }
    }

    /**
     * Checks whether the device currently has a network connection.
     * @return true if the device has a network connection, false otherwise.
     */
    private boolean isDeviceOnline() {
        ConnectivityManager connMgr =
                (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
        return (networkInfo != null && networkInfo.isConnected());
    }

    /**
     * Check that Google Play services APK is installed and up to date.
     * @return true if Google Play Services is available and up to
     *     date on this device; false otherwise.
     */
    private boolean isGooglePlayServicesAvailable() {
        GoogleApiAvailability apiAvailability =
                GoogleApiAvailability.getInstance();
        final int connectionStatusCode =
                apiAvailability.isGooglePlayServicesAvailable(CancelActivity.this);
        return connectionStatusCode == ConnectionResult.SUCCESS;
    }

    /**
     * Attempt to resolve a missing, out-of-date, invalid or disabled Google
     * Play Services installation via a user dialog, if possible.
     */
    private void acquireGooglePlayServices() {
        GoogleApiAvailability apiAvailability =
                GoogleApiAvailability.getInstance();
        final int connectionStatusCode =
                apiAvailability.isGooglePlayServicesAvailable(CancelActivity.this);
        if (apiAvailability.isUserResolvableError(connectionStatusCode)) {
            showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);
        }
    }


    /**
     * Attempts to set the account used with the API credentials. If an account
     * name was previously saved it will use that one; otherwise an account
     * picker dialog will be shown to the user. Note that the setting the
     * account to use with the credentials object requires the app to have the
     * GET_ACCOUNTS permission, which is requested here if it is not already
     * present. The AfterPermissionGranted annotation indicates that this
     * function will be rerun automatically whenever the GET_ACCOUNTS permission
     * is granted.
     */
    @AfterPermissionGranted(REQUEST_PERMISSION_GET_ACCOUNTS)
    private void chooseAccount() {
//        Toast.makeText(getActivity(), "s1", Toast.LENGTH_SHORT).show();
        if (EasyPermissions.hasPermissions(
                CancelActivity.this, Manifest.permission.GET_ACCOUNTS)) {
            String accountName = getPreferences(Context.MODE_PRIVATE)
                    .getString(PREF_ACCOUNT_NAME, null);
//            Toast.makeText(CancelActivity.this, "s2", Toast.LENGTH_SHORT).show();
//            if (accountName != null) {
//                mCredential.setSelectedAccountName(accountName);
//                Toast.makeText(getActivity(), "s3", Toast.LENGTH_SHORT).show();
//                getResultsFromApi();
//            } else {
            // Start a dialog from which the user can choose an account
            startActivityForResult(
                    mCredential.newChooseAccountIntent(),
                    REQUEST_ACCOUNT_PICKER);
//            Toast.makeText(CancelActivity.this, "s4", Toast.LENGTH_SHORT).show();
//            }
        } else {
            // Request the GET_ACCOUNTS permission via a user dialog
//            Toast.makeText(CancelActivity.this, "s5", Toast.LENGTH_SHORT).show();
            EasyPermissions.requestPermissions(
                    this,
                    "This app needs to access your Google account (via Contacts).",
                    REQUEST_PERMISSION_GET_ACCOUNTS,
                    Manifest.permission.GET_ACCOUNTS);
        }
    }

    private class MakeRequestTask1 extends AsyncTask<Void, Void, List<String>> {
        private com.google.api.services.gmail.Gmail mService = null;
        private Exception mLastError = null;

        MakeRequestTask1(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

            System.out.println("labels mservice11 " + mService);

            mService = new com.google.api.services.gmail.Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName("Gmail API Android Quickstart")
                    .build();
            Log.d("labels credential", String.valueOf(credential));

            System.out.println("labels mservice " + mService);
        }

        /**
         * Background task to call Gmail API.
         * @param params no parameters needed for this task.
         */
        @Override
        protected List<String> doInBackground(Void... params) {
            Log.d("hiiiiii11", "error");

            try {
                Log.d("hiiiiii111", "error");
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                Log.d("hiiiiii1111", "error");
                return null;
            }
        }

        /**
         * Fetch a list of Gmail labels attached to the specified account.
         * @return List of Strings labels.
         * @throws IOException
         */
        private List<String> getDataFromApi() throws IOException {
            // Get the labels in the user's account.
            String user = "me";
            List<String> labels = new ArrayList<String>();
            ListLabelsResponse listResponse =
                    mService.users().labels().list(user).execute();
            System.out.println("ListLabelsResponse " + listResponse);
            for (Label label : listResponse.getLabels()) {
                labels.add(label.getName());

//                Log.d("labels", String.valueOf(labels));//will be displaying all the folders one by one by looping

//                System.out.println("user ID " + labels.add(label.getName()));
            }
            return labels;
        }


        @Override
        protected void onPreExecute() {
//            mOutputText.setText("");
            mProgress.show();
        }

        @Override
        protected void onPostExecute(List<String> output) {
//            System.out.println("labelsss " + output);//will be displaying details and folders in mail like inbox, sent, outbox, junk, etc
            mProgress.hide();
            if (output == null || output.size() == 0) {
//                mOutputText.setText("No results returned.");
            } else {
                output.add(0, "Data retrieved using the Gmail API:");
//                mOutputText.setText(TextUtils.join("\n", output));
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            EmailSetup_Google.REQUEST_AUTHORIZATION);
                } else {
//                    mOutputText.setText("The following error occurred:\n"
//                            + mLastError.getMessage());
                }
            } else {
//                mOutputText.setText("Request cancelled.");
            }
        }
    }

    private class MakeRequestTask_bill extends AsyncTask<Void, Void, String> {
        private com.google.api.services.gmail.Gmail mService = null;
        private Exception mLastError = null;
//        private View view = sendFabButton;

        public MakeRequestTask_bill(GoogleAccountCredential credential) {
            HttpTransport transport = AndroidHttp.newCompatibleTransport();
            JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
            mService = new com.google.api.services.gmail.Gmail.Builder(
                    transport, jsonFactory, credential)
                    .setApplicationName(getResources().getString(R.string.app_name))
                    .build();
        }

        @Override
        protected String doInBackground(Void... params) {
            try {
                return getDataFromApi();
            } catch (Exception e) {
                mLastError = e;
                cancel(true);
                return null;
            }
        }

        private String getDataFromApi() throws IOException {
            // getting Values for to Address, from Address, Subject and Body

            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                } while (getcom.moveToNext());
            }

            String url = "www.intuitionsoftwares.com";

//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

            final String msg = "Refund confirmation from "+compna+"\n\nDear Customer, \n\nThis is to inform that you have been refunded an amount of "+""+insert1_rs+refundamout.getText().toString()+" on your bill "+billnoget+" dated "+datee+".\n\nWe appreciate your business and hope to see you again soon. \n"+compna+"\n\n\n" +
                    "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
                    "Powered by: "+ Uri.parse(url);

            Cursor getcomm = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcomm.moveToFirst()) {
                do {
                    strcompanyname = getcomm.getString(1);
                    straddress1 = getcomm.getString(14);
                    stremailid = getcomm.getString(15);
                } while (getcomm.moveToNext());
            }else {
                strcompanyname = "";
                stremailid = "";
            }

            String name_mail = "";
            Cursor em = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '"+billnoget+"'", null);
            if (em.moveToFirst()){
                name_mail = em.getString(1);
            }

            String date_mail = "", time_mail = "";
            Cursor cursor9 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '"+billnoget+"'", null);
            if (cursor9.moveToFirst()){
                date_mail = cursor9.getString(25);
                time_mail = cursor9.getString(12);
            }


//            String msg = "Disclaimer: This information may be confidential and is intended only for the recipient. If you think this mail is not for you, please delete it.\n\n" +
//                    "You can open the attached file with apps like Microsoft excel, WPS office, Apple numbers and etc.,\n\n" +
//                    "Powered by: " + Uri.parse(url);

            String sub = "";
            Cursor cursor81 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '"+billnoget+"'", null);
            if (cursor81.moveToFirst()){
                sub = cursor81.getString(2);
            }

//            final String msg =
//                    "<Html>" +
//                            "<Body>" +
//                            "<div>" +
//                            " <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody>" +
//                            "<tr>" +
//                            "<td width=\"100%\" valign=\"top\" bgcolor=\"#f8f8f8\">" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1;margin-top:50px\">" +
//                            "<tbody>" +
//                            "<tr>" +
//                            "<td width=\"460\" >" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody>" +
//                            "<tr>" +
//                            "<td height=\"30\">" +
//                            "</td>" +
//                            "</tr>" +
//                            "</tbody>" +
//                            "</table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody>" +
//                            "<tr>" +
//                            "<td width=\"40\">" +
//                            "</td>" +
//                            "<td width=\"460\" style=\"font-size:16px;color:#00929f;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
////                        "<img src=\"http://www.intuitionsoftwares.com/resources/intuition_logo_header_with_text_240.png\" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
////                        "<img src="+logo+" width=\"200\" style=\"margin:0 0 20px 0;width:200px\">" +
//                            "<p><h1>"+strcompanyname+"</h1></p>" +
//
//                            "</td>" +
//                            "<td width=\"40\">" +
//                            "</td>" +
//                            "</tr>" +
//                            "<tr>" +
//                            "<td width=\"40\">" +
//                            "</td>" +
//                            "<td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                            "<span style=\"text-decoration:none;color:#2f2f36;font-weight:bold;font-size:32px;line-height:32px\">Bill "+billnoget+"</span><br>" +
//                            "</td>" +
//                            "<td width=\"40\"></td>" +
//                            "</tr>" +
//                            "<tr>" +
//                            "<td width=\"40\"></td>" +
//                            "<td width=\"460\" style=\"font-size:16px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">for Customer <br> from <b>"+strcompanyname+"</b><br>" +
//                            " </td>" +
//                            "<td width=\"40\">" +
//                            "</td>" +
//                            "</tr>" +
//                            "<tr></tr>" +
//                            "<tr><td width=\"40\"></td>" +
//                            "<td width=\"512\" height=\"30\">" +
//                            "</td> <td width=\"40\"></td></tr></tbody></table></td>" +
//                            "</tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" bgcolor=\"#ffffff\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                            "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                            "<tr><td width=\"460\" height=\"5\" bgcolor=\"#ffffff\"></td></tr>" +
//                            "<tr><td width=\"460\" height=\"1\" bgcolor=\"#e1e1e1\"></td></tr>" +
//                            "<tr><td width=\"460\" height=\"10\" bgcolor=\"#ffffff\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\"><tbody>" +
//                            "<tr> <td width=\"460\">" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"20\"></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                            "<td width=\"40\"></td><td width=\"510\" style=\"font-size:14px;color:#444;font-weight:normal;text-align:left;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">Hi "+name_mail+",<br>Your Refunded amount is Rs."+refundamout.getText().toString()+" <br><br>We appreciate your Business and hope to see you again soon,<br>Intuition Systems <br>" +
//                            //Correct(tic) symbol
//                            "<p align=\"center\"> <img src=\"https://http://www.intuitionsoftwares.com/resources/ic_tick_gradientgreen_48dp.png\" width=\"60\" height=\"60\"></p>" +
//
//                            "<p style=\"font-size:18px;border-top:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;padding:10px 0;background:#fefefe;text-align:center;margin:5px 0\">Refund: <span style=\"white-space:nowrap;font-weight:bold;font-size:18px\">Rs. "+refundamout.getText().toString()+" </span>" +
//                            "</p><br></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                            "<tbody>" +
//                            "<tr><td width=\"\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                            "<td width=\"40\"></td>" +
//                            "<td width=\"510\" style=\"font-size:14px;color:#a0a0a5;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                            "<div></div>" +
//                            "<p style=\"margin-top:3px;color:#444\">Dated: <span style=\"white-space:nowrap;font-weight:bold;font-size:14px\">"+date_mail+",</span> "+time_mail+" </p>" +
//                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td>" +
//                            "<td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#ffffff\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                            "<tbody><tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td width=\"460\" height=\"10\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f9f9f9\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\"><tbody>" +
//                            "<tr><td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                            "<tr><td height=\"10\" ></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody><tr><td width=\"40\"></td><td width=\"460\" style=\"font-size:16px;color:#b8b9c1;font-weight:normal;text-align:center;font-family:Helvetica,Arial,sans-serif;line-height:24px;vertical-align:top\">" +
//                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td>" +
//                            "<td width=\"460\" style=\"font-size:14px;color:#959599;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:20px;text-align:center\">" +
//                            "<p>Disclaimer: This information may be confidential and is intended only for the recipient.</p>" +
//                            "</td><td width=\"40\"></td></tr><tr><td width=\"40\"></td><td width=\"512\" height=\"10\"></td><td width=\"40\"></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"462\" bgcolor=\"#f0f0f0\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-top:1px solid #e1e1e1\">" +
//                            "<tbody> <tr> <td width=\"462\" height=\"10\"></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1\">" +
//                            "<tbody> <tr> <td width=\"460\" bgcolor=\"#f0f0f0\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody> <tr> <td width=\"460\"><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody>" +
//                            "<tr><td width=\"30\"></td><td width=\"530\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" ><tbody><tr>" +
//                            "<td height=\"0\" align=\"center\" style=\"font-size:14px;color:#b8b9c1;font-weight:normal;font-family:Helvetica,Arial,sans-serif;line-height:24px\">" +
//                            "<p><a style=\"text-decoration:none;color:#959599\" target=\"_blank\">If you think this mail is not for you, please delete and contact<a href=\"mailto:"+stremailid+"\" style=\"text-decoration:none;color:#008f9b;font-weight:bold\" target=\"_blank\">\n" +
//                            ""+stremailid+"</a> </a></td>" +
//                            "</tr></tbody></table><table width=\"140\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"left\">" +
//                            "<tbody><tr><td width=\"140\"></td></tr></tbody></table></td><td width=\"30\"></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr>" +
//                            "<td width=\"460\" style=\"border-left:1px solid #e1e1e1;border-right:1px solid #e1e1e1;border-bottom:1px solid #e1e1e1;border-radius:0 0 10px 10px;background:#f0f0f0\">" +
//                            "<table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><tbody><tr><td height=\"14\"></td></tr></tbody></table></td></tr></tbody></table><table width=\"460\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" +
//                            "<tbody><tr><td height=\"20\"></td></tr><tr>" +
//                            "<td style=\"text-align:center\"><a href=\"http://www.intuitionsoftwares.com/\" target=\"_blank\" ><img src=\"https://http://www.intuitionsoftwares.com/resources/Powered%20by%20Intuition.png\" alt=\"Powered by Intuition\" border=\"0\" style=\"text-align:center;min-width:65px\"></a></td></tr>" +
//                            "<tr>" +
//                            "<td height=\"40\" style=\"line-height:1px\"></td></tr></tbody></table></td></tr></tbody></table><div><div>" +
//                            "</div></div><span></span><img width=\"1px\" height=\"1px\" alt=\"\" src=\"https://ci6.googleusercontent.com/proxy/v_Shs6iOLq12vwu0Xt6qngxx4kneWRfK5sqTLGcXNVHFoKVZ7lS25nHt7H1Jm2usy7rNYKDLkgiPnf-6WwR9Yr0RCUdQGIUR6UAzInSh4IrJBqQk62YtXVDscuCYMCes1p7ddQyWrPxBcb46UqOG8GZUToV8KTB0InbN_nhjjaBySA-Eqsgb7FQUv71BB8c9vjZIesQTibEyktzooZmRj0q-8JfvlIrF5j5PjutWDHROpXD5l5f1J8DthU5s3aqJVnp_My3uDAuVgualRg=s0-d-e1-ft#http://email.mg.waveapps.com/o/eJwNzDEOwyAMAMDXlA1kU8Aw8BjXBAUpgYoQ9fvNdtOVTFUSW9WyBSQIQOgfWYNgIZlIFPHl4DtH0SyytOz90IBqz4SONw8hfAQ9hhgLvD2nJLE4TraqmblzL4afoPV1t9VGv0ZdP57bZWScf2cRJRo\" ><div></div><div></div></div>" +
//                            "</Body>" +
//                            "</Html>";


//            Cursor cursor1 = db.rawQuery("SELECT * FROM Email_recipient", null);
//            if (cursor1.moveToFirst()) {
//                do {
//                    String unn = cursor1.getString(3);
            TextView edtToAddress = new TextView(CancelActivity.this);
            edtToAddress.setText(email_id_send.getText().toString());

            TextView edtSubject = new TextView(CancelActivity.this);
            edtSubject.setText(strcompanyname);

            TextView edtMessage = new TextView(CancelActivity.this);
            edtMessage.setText(msg);

            String user = "me";
            String to = Utils.getString(edtToAddress);
            String from = mCredential.getSelectedAccountName();
            Log.v("sender email", from);
            String subject = Utils.getString(edtSubject);
            String body = Utils.getString(edtMessage);
            MimeMessage mimeMessage;
            response = "";
            try {

//                        File exportDir = new File(Environment.getExternalStorageDirectory(), "/IVEPOS_reports/IVEPOS_customer_list");
//                        if (!exportDir.exists()) {
//                            exportDir.mkdirs();
//                        }
//
//                        file = new File(exportDir, "IvePOS_customer_list" + currentDateandTimee1 + "_" + timee1 + ".csv");

//                        File exportDir1 = new File(Environment.getExternalStorageDirectory(), "/Download");
//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_Bills/IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg";
                String filename = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)+"/IVEPOS_Bills/IvePOS_bill_"+currentDateandTimee1+"_"+timee1+".jpeg";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_product_report/IvePOS_product_report"+currentDateandTimee1+"_"+timee1+".csv";
//                        String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_customer_list/IvePOS_customer_list"+currentDateandTimee1+"_"+timee1+".csv";

//                String filename = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_reports/IVEPOS_sales_report/IvePOS_sales_report"+"12May17"+"_"+"013048PM"+".csv";
//                String path = Environment.getExternalStorageDirectory().toString()+"/IVEPOS_backup/";


                File f = new File(filename);
//
                mimeMessage = createEmailWithAttachment(to, from, subject, body, f);



//                        mimeMessage = createEmail(to, from, subject, body);
                response = sendMessage(mService, user, mimeMessage);
            } catch (MessagingException e) {
                e.printStackTrace();
            }

//                } while (cursor1.moveToNext());
//            }
            return response;
        }

        // Method to send email
        private String sendMessage(Gmail service,
                                   String userId,
                                   MimeMessage email)
                throws MessagingException, IOException {
            com.google.api.services.gmail.model.Message message = createMessageWithEmail(email);
            // GMail's official method to send email with oauth2.0
            message = service.users().messages().send(userId, message).execute();

            System.out.println("user ID " + userId);

            System.out.println("Message id: " + message.getId());
            System.out.println(message.toPrettyString());
            return message.getId();
        }

        public MimeMessage createEmailWithAttachment(String to,
                                                     String from,
                                                     String subject,
                                                     String bodyText,
                                                     File file)
                throws MessagingException, IOException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);

            email.setFrom(new InternetAddress(from));
            email.addRecipient(javax.mail.Message.RecipientType.TO,
                    new InternetAddress(to));
            email.setSubject(subject);

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(bodyText, "text/html");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            mimeBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);

            mimeBodyPart.setDataHandler(new DataHandler(source));
            mimeBodyPart.setFileName(file.getName());

            multipart.addBodyPart(mimeBodyPart);
            email.setContent(multipart);

            return email;
        }

        // Method to create email Params
        private MimeMessage createEmail(String to,
                                        String from,
                                        String subject,
                                        String bodyText) throws MessagingException {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);

            MimeMessage email = new MimeMessage(session);
            InternetAddress tAddress = new InternetAddress(to);
            InternetAddress fAddress = new InternetAddress(from);


            System.out.println("From  " + from);
            System.out.println("To  " + to);


            email.setFrom(fAddress);
            email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);
            email.setSubject(subject);
            email.setText(bodyText);
            return email;
        }

        private com.google.api.services.gmail.model.Message createMessageWithEmail(MimeMessage email)
                throws MessagingException, IOException {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            email.writeTo(bytes);
            String encodedEmail = Base64.encodeBase64URLSafeString(bytes.toByteArray());
            com.google.api.services.gmail.model.Message message = new com.google.api.services.gmail.model.Message();
            message.setRaw(encodedEmail);
            return message;
        }

        @Override
        protected void onPreExecute() {
            mProgress.show();
        }

        @Override
        protected void onPostExecute(String output) {
            Log.d("post execute", "error");
            mProgress.hide();
            if (output == null || output.length() == 0) {
                Toast.makeText(CancelActivity.this, "not success", Toast.LENGTH_SHORT).show();
//                showMessage(view, "No results returned.");
            } else {
                Toast.makeText(CancelActivity.this, "success", Toast.LENGTH_SHORT).show();
//                showMessage(view, output);
            }
        }

        @Override
        protected void onCancelled() {
            mProgress.hide();
            if (mLastError != null) {
//                Log.v("Errors3", mLastError.getMessage());
                if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
//                    Log.v("Errors1", mLastError.getMessage());
                    showGooglePlayServicesAvailabilityErrorDialog(
                            ((GooglePlayServicesAvailabilityIOException) mLastError)
                                    .getConnectionStatusCode());
                } else if (mLastError instanceof UserRecoverableAuthIOException) {
//                    Log.v("Errors2", mLastError.getMessage());
                    startActivityForResult(
                            ((UserRecoverableAuthIOException) mLastError).getIntent(),
                            Utils.REQUEST_AUTHORIZATION);
                } else {
//                    showMessage(view, "The following error occurred:\n" + mLastError.getMessage());
//                    Log.v("Errors", mLastError.getMessage());
                }
            } else {
//                showMessage(view, "Request Cancelled.");
            }
        }
    }


    private boolean runPrintCouponSequence(Dialog dialog) {
        if (!initializeObject()) {
            return false;
        }

        if (!createCouponData(dialog)) {
            finalizeObject();
            return false;
        }

        if (!printData()) {
            finalizeObject();
            return false;
        }

        return true;
    }

    private boolean initializeObject() {
        try {
            mPrinter = new com.epson.epos2.printer.Printer(((SpnModelsItem) mSpnSeries.getSelectedItem()).getModelConstant(),
                    ((SpnModelsItem) mSpnLang.getSelectedItem()).getModelConstant(),
                    mContext);
        } catch (Exception e) {
//            Toast.makeText(CancelActivity.this, "Here3", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "Printer", mContext);
            return false;
        }

        mPrinter.setReceiveEventListener(this);

        return true;
    }

    private void finalizeObject() {
        if (mPrinter == null) {
            return;
        }

        mPrinter.clearCommandBuffer();

        mPrinter.setReceiveEventListener(null);

        mPrinter = null;
    }

    @Override
    public void onPtrReceive(final com.epson.epos2.printer.Printer printerObj, final int code, final PrinterStatusInfo status, final String printJobId) {
        runOnUiThread(new Runnable() {
            @Override
            public synchronized void run() {
                ShowMsg.showResult(code, makeErrorMessage(status), mContext);

                dispPrinterWarnings(status);

//                updateButtonState(true);

                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        disconnectPrinter();
                    }
                }).start();
            }
        });
    }

    private String makeErrorMessage(PrinterStatusInfo status) {
        String msg = "";

        if (status.getOnline() == com.epson.epos2.printer.Printer.FALSE) {
            msg += getString(R.string.handlingmsg_err_offline);
        }
        if (status.getConnection() == com.epson.epos2.printer.Printer.FALSE) {
            msg += getString(R.string.handlingmsg_err_no_response);
        }
        if (status.getCoverOpen() == com.epson.epos2.printer.Printer.TRUE) {
            msg += getString(R.string.handlingmsg_err_cover_open);
        }
        if (status.getPaper() == com.epson.epos2.printer.Printer.PAPER_EMPTY) {
            msg += getString(R.string.handlingmsg_err_receipt_end);
        }
        if (status.getPaperFeed() == com.epson.epos2.printer.Printer.TRUE || status.getPanelSwitch() == com.epson.epos2.printer.Printer.SWITCH_ON) {
            msg += getString(R.string.handlingmsg_err_paper_feed);
        }
        if (status.getErrorStatus() == com.epson.epos2.printer.Printer.MECHANICAL_ERR || status.getErrorStatus() == com.epson.epos2.printer.Printer.AUTOCUTTER_ERR) {
            msg += getString(R.string.handlingmsg_err_autocutter);
            msg += getString(R.string.handlingmsg_err_need_recover);
        }
        if (status.getErrorStatus() == com.epson.epos2.printer.Printer.UNRECOVER_ERR) {
            msg += getString(R.string.handlingmsg_err_unrecover);
        }
        if (status.getErrorStatus() == com.epson.epos2.printer.Printer.AUTORECOVER_ERR) {
            if (status.getAutoRecoverError() == com.epson.epos2.printer.Printer.HEAD_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_head);
            }
            if (status.getAutoRecoverError() == com.epson.epos2.printer.Printer.MOTOR_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_motor);
            }
            if (status.getAutoRecoverError() == com.epson.epos2.printer.Printer.BATTERY_OVERHEAT) {
                msg += getString(R.string.handlingmsg_err_overheat);
                msg += getString(R.string.handlingmsg_err_battery);
            }
            if (status.getAutoRecoverError() == com.epson.epos2.printer.Printer.WRONG_PAPER) {
                msg += getString(R.string.handlingmsg_err_wrong_paper);
            }
        }
        if (status.getBatteryLevel() == com.epson.epos2.printer.Printer.BATTERY_LEVEL_0) {
            msg += getString(R.string.handlingmsg_err_battery_real_end);
        }

        return msg;
    }

    private void dispPrinterWarnings(PrinterStatusInfo status) {
//        EditText edtWarnings = (EditText) findViewById(R.id.edtWarnings);
        String warningsMsg = "";

        if (status == null) {
            return;
        }

        if (status.getPaper() == com.epson.epos2.printer.Printer.PAPER_NEAR_END) {
            warningsMsg += getString(R.string.handlingmsg_warn_receipt_near_end);
        }

        if (status.getBatteryLevel() == com.epson.epos2.printer.Printer.BATTERY_LEVEL_1) {
            warningsMsg += getString(R.string.handlingmsg_warn_battery_near_end);
        }

//        edtWarnings.setText(warningsMsg);
    }

    private void disconnectPrinter() {
        if (mPrinter == null) {
            return;
        }

        try {
            mPrinter.endTransaction();
        } catch (final Exception e) {
            runOnUiThread(new Runnable() {
                @Override
                public synchronized void run() {
//                    Toast.makeText(CancelActivity.this, "Here6", Toast.LENGTH_SHORT).show();
                    ShowMsg.showException(e, "endTransaction", mContext);
                }
            });
        }

        try {
            mPrinter.disconnect();
        } catch (final Exception e) {
            runOnUiThread(new Runnable() {
                @Override
                public synchronized void run() {
//                    Toast.makeText(CancelActivity.this, "Here7", Toast.LENGTH_SHORT).show();
                    ShowMsg.showException(e, "disconnect", mContext);
                }
            });
        }

        finalizeObject();
    }

    private boolean printData() {
        if (mPrinter == null) {
            return false;
        }

        if (!connectPrinter()) {
            return false;
        }

        PrinterStatusInfo status = mPrinter.getStatus();

        dispPrinterWarnings(status);

        if (!isPrintable(status)) {
            ShowMsg.showMsg(makeErrorMessage(status), mContext);
            try {
                mPrinter.disconnect();
            } catch (Exception ex) {
//                Toast.makeText(CancelActivity.this, "Here9", Toast.LENGTH_SHORT).show();
                // Do nothing
            }
            return false;
        }

        try {
            mPrinter.sendData(com.epson.epos2.printer.Printer.PARAM_DEFAULT);
        } catch (Exception e) {
//            Toast.makeText(CancelActivity.this, "Here10", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "sendData", mContext);
            try {
                mPrinter.disconnect();
            } catch (Exception ex) {
//                Toast.makeText(CancelActivity.this, "Here11", Toast.LENGTH_SHORT).show();
                // Do nothing
            }
            return false;
        }

        return true;
    }

    private boolean isPrintable(PrinterStatusInfo status) {
        if (status == null) {
            return false;
        }

        if (status.getConnection() == com.epson.epos2.printer.Printer.FALSE) {
            return false;
        } else if (status.getOnline() == com.epson.epos2.printer.Printer.FALSE) {
            return false;
        } else {
            ;//print available
        }

        return true;
    }

    private boolean connectPrinter() {
        boolean isBeginTransaction = false;

        if (mPrinter == null) {
            return false;
        }

        try {
            mPrinter.connect(mEditTarget.getText().toString(), com.epson.epos2.printer.Printer.PARAM_DEFAULT);
        } catch (Exception e) {
//            Toast.makeText(CancelActivity.this, "Here4", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "connect", mContext);
            return false;
        }

        try {
            mPrinter.beginTransaction();
            isBeginTransaction = true;
        } catch (Exception e) {
//            Toast.makeText(CancelActivity.this, "Here12", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, "beginTransaction", mContext);
        }

        if (isBeginTransaction == false) {
            try {
                mPrinter.disconnect();
            } catch (Epos2Exception e) {
//                Toast.makeText(CancelActivity.this, "Here5", Toast.LENGTH_SHORT).show();
                // Do nothing
                return false;
            }
        }

        return true;
    }


    private boolean createCouponData(Dialog dialog) {

        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor cc=db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                    setHT321 = new byte[]{0x1b,0x44,0x23,0x00};//2 tabs 3"
                    setHT3212 = new byte[]{0x1b,0x44,0x25,0x00};//2 tabs 3"
                    setHT33 = new byte[]{0x1b,0x44,0x13,0x27,0x00};//3 tabs 3"
                    setHT34 = new byte[]{0x1b,0x44,0x06,0x20,0x29,0x00};//4 tabs 3"
                    nPaperWidth = 576;
                    charlength = 23;
                    charlength1 = 46;
                    charlength2 = 69;
                    quanlentha = 5;
                    str_line = "------------------------------------------------";
                    allbufline = new byte[][]{
                            left,un1, "------------------------------------------------".getBytes(), LF

                    };
                }
                else {
                    Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
                    if (print_ty.moveToFirst()){
                        str_print_ty = print_ty.getString(1);
                    }
                    if (str_print_ty.toString().equals("Generic")) {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
//                        Toast.makeText(Cash_Card_Credit_Sales1.this, "epson", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 16;
                        charlength1 = 32;
                        charlength2 = 48;
                        quanlentha = 5;
                        str_line = "------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------".getBytes(), LF
                        };
                    }
                }
            }while(cc.moveToNext());
        }

//        Cursor getprint_type = db.rawQuery("SELECT * FROM Printer_text_size", null);
//        if (getprint_type.moveToFirst()) {
//            String type = getprint_type.getString(1);
//
//            Cursor cc = db.rawQuery("SELECT * FROM Printerreceiptsize", null);
//
//            if (cc.moveToFirst()) {
//                cc.moveToFirst();
//                do {
//                    NAME = cc.getString(1);
//                    if (NAME.equals("3 inch")) {
//                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
//                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
//                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
//                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
//                        setHT34 = new byte[]{0x1b, 0x44, 0x08, 0x20, 0x29, 0x00};//4 tabs 3"
//                        setHTKOT = new byte[]{0x1b, 0x44, 0x06, 0x00};//2 tabs 3"
//                        feedcut2 = new byte[]{0x1b, 0x64, 0x05, 0x1d, 0x56, 0x00};
//                        nPaperWidth = 576;
//                        charlength = 41;
//                        str_line = "------------------------------------------------";
//                        allbufline = new byte[][]{
//                                left, un1, "------------------------------------------------".getBytes(), LF
//
//                        };
//                    } else {
//
//                        Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
//                        if (print_ty.moveToFirst()){
//                            str_print_ty = print_ty.getString(1);
//                        }
//                        if (str_print_ty.toString().equals("Generic")) {
//                            Toast.makeText(Cash_Card_Credit_Sales1.this, "phi", Toast.LENGTH_SHORT).show();
//                            setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
//                            setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
//                            setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
//                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                            setHT34 = new byte[]{0x1b, 0x44, 0x04, 0x12, 0x19, 0x00};//4 tabs 2"
//                            setHTKOT = new byte[]{0x1b, 0x44, 0x06, 0x00};//2 tabs 2"
//                            feedcut2 = new byte[]{0x1b, 0x64, 0x03, 0x1d, 0x56, 0x00};
//                            nPaperWidth = 384;
//                            charlength = 25;
//                            str_line = "--------------------------------";
//                            allbufline = new byte[][]{
//                                    left, un1, "--------------------------------".getBytes(), LF
//                            };
//                        }else {
//                            Toast.makeText(Cash_Card_Credit_Sales1.this, "epson", Toast.LENGTH_SHORT).show();
//                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
//                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
//                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
//                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
//                            setHTKOT = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
//                            feedcut2 = new byte[]{0x1b, 0x64, 0x03, 0x1d, 0x56, 0x00};
//                            nPaperWidth = 384;
//                            charlength = 28;
//                            str_line = "------------------------------------------";
//                            allbufline = new byte[][]{
//                                    left, un1, "------------------------------------------".getBytes(), LF
//                            };
//                        }
//                    }
//                } while (cc.moveToNext());
//            }
//
//        }

//        final int barcodeWidth = 2;
//        final int barcodeHeight = 64;
        final int pageAreaHeight = 384;
        final int pageAreaWidth = 384;
//        final int fontAHeight = 24;
//        final int fontAWidth = 12;
//        final int barcodeWidthPos = 110;
//        final int barcodeHeightPos = 70;

        ArrayList<byte[]> list = new ArrayList<byte[]>();
        String method = "";
        String[] col = {"companylogo"};
        Cursor c = db.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
            yourBitmap = BitmapFactory.decodeByteArray(img, 0, img.length);
        }

//        String method = "";
//        Bitmap coffeeData = BitmapFactory.decodeResource(getResources(), R.drawable.coffee);
//        Bitmap wmarkData = BitmapFactory.decodeResource(getResources(), R.drawable.wmark);

        if (mPrinter == null) {
            return false;
        }
        try{
//            method = "addPageBegin";
//            mPrinter.addPageBegin();

            method = "addPageArea";
            mPrinter.addPageArea(0, 0, nPaperWidth, pageAreaHeight);

            method = "addPageDirection";
            mPrinter.addPageDirection(com.epson.epos2.printer.Printer.DIRECTION_TOP_TO_BOTTOM);

            method = "addFeedLine";
            mPrinter.addFeedLine(1);
            method = "addPagePosition";
            mPrinter.addPagePosition(0, nPaperWidth);

//            // RECEIPT BODY//

            mPrinter.addCommand(LF);

//            method = "addPagePosition";
//            mPrinter.addPagePosition(0, wmarkData.getHeight());
//            mPrinter.addPagePosition(0, logoData.getScaledHeight(0));

//            method = "addImage";
//            mPrinter.addImage(wmarkData, 0, 0, wmarkData.getWidth(), wmarkData.getHeight(),
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT,
//                    Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
//Free coffee text

//            method = "addTextSize";
//            mPrinter.addTextSize(3, 3);
//            method = "addTextStyle";
//            mPrinter.addTextStyle(Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.TRUE, Printer.PARAM_DEFAULT);
//            method = "addTextSmooth";
//            mPrinter.addTextSmooth(Printer.TRUE);
//            method = "addText";
//            mPrinter.addText("FREE Coffee\n");

            Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
            if (connnet.moveToFirst()) {
                ipnamegets = connnet.getString(1);
                portgets = connnet.getString(2);
                statusnets = connnet.getString(3);
            }
            Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
            if (connusb.moveToFirst()) {
                addgets = connusb.getString(1);
                namegets = connusb.getString(2);
                statussusbs = connusb.getString(3);
            }


            imageViewPicture = (ImageView) dialog.findViewById(R.id.imageViewPicturew);
            mView = dialog.findViewById(R.id.f_vieww1);

            if (c.moveToFirst()) {
                method = "addImage";

                if (NAME.equals("3 inch")) {
                    logoData = Bitmap.createScaledBitmap(yourBitmap, 576, 94, true);
                    mPrinter.addImage(logoData, 0, 0, logoData.getWidth(), logoData.getHeight(),
                            com.epson.epos2.printer.Printer.PARAM_DEFAULT, com.epson.epos2.printer.Printer.PARAM_DEFAULT, com.epson.epos2.printer.Printer.PARAM_DEFAULT,
                            com.epson.epos2.printer.Printer.PARAM_DEFAULT, com.epson.epos2.printer.Printer.PARAM_DEFAULT);
                } else {
                    logoData = Bitmap.createScaledBitmap(yourBitmap, 384, 94, true);
                    mPrinter.addImage(logoData, 0, 0, logoData.getWidth(), logoData.getHeight(),
                            com.epson.epos2.printer.Printer.PARAM_DEFAULT, com.epson.epos2.printer.Printer.PARAM_DEFAULT, com.epson.epos2.printer.Printer.PARAM_DEFAULT,
                            com.epson.epos2.printer.Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT);
                }
            }

            Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
            if (getcom.moveToFirst()) {
                do {
                    strcompanyname = getcom.getString(1);
                    straddress1 = getcom.getString(14);
                    straddress2 = getcom.getString(17);
                    straddress3 = getcom.getString(18);
                    strphone = getcom.getString(2);
                    stremailid = getcom.getString(15);
                    strwebsite = getcom.getString(16);
                    strtaxone = getcom.getString(10);
                    strbillone = getcom.getString(12);
                } while (getcom.moveToNext());
            }


            tvkot.setText(strcompanyname);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf1 = new byte[][]{
                        bold, un1, cen, strcompanyname.getBytes(), LF

                };
                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(bold);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strcompanyname);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

/////////
            tvkot.setText(straddress1);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf2 = new byte[][]{
                        normal, straddress1.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress1);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot.setText(straddress2);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf3 = new byte[][]{
                        normal, straddress2.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress2);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            tvkot.setText(straddress3);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf4 = new byte[][]{
                        normal, straddress3.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(straddress3);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strphone);
            String pp = "Ph. " + strphone;
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf5 = new byte[][]{
                        normal, pp.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(pp);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(stremailid);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf6 = new byte[][]{
                        normal, stremailid.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(stremailid);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strwebsite);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf7 = new byte[][]{
                        normal, strwebsite.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strwebsite);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            tvkot.setText(strtaxone);
            if (tvkot.getText().toString().equals("")) {

            } else {
                allbuf8 = new byte[][]{
                        normal, strtaxone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    mPrinter.addCommand(un1);
                    mPrinter.addCommand(cen);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strtaxone);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor cursor10 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (cursor10.moveToFirst()) {
                billtypea = cursor10.getString(5);
                paymmethoda = cursor10.getString(6);
            }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

            if (billtypea.toString().equals("  Cash")) {
                billtypeaa = "Cash"; //0
            }
            if (billtypea.toString().equals("  Card")) {
                billtypeaa = "Card"; //0
            }
            if (billtypea.toString().equals("  Paytm")) {
                billtypeaa = "Paytm"; //0
            }
            if (billtypea.toString().equals("  Mobikwik")) {
                billtypeaa = "Mobikwik"; //0
            }
            if (billtypea.toString().equals("  Freecharge")) {
                billtypeaa = "Freecharge"; //0
            }
            if (billtypea.toString().equals("  Pay Later")) {
                billtypeaa = "Pay Later"; //0
            }
            if (billtypea.toString().equals("  Cheque")) {
                billtypeaa = "Cheque"; //0
            }
            if (billtypea.toString().equals("  Sodexo")) {
                billtypeaa = "Sodexo"; //0
            }
            if (billtypea.toString().equals("  Zeta")) {
                billtypeaa = "Zeta"; //0
            }
            if (billtypea.toString().equals("  Ticket")) {
                billtypeaa = "Ticket"; //0
            }
            billtypeaa = billtypea.toString().replace(" ", "");

            //String bill_no = billnum.getText().toString();
            allbufbillno = new byte[][]{
                    setHT32, "Bill no.".getBytes(), billnoget.getBytes(), HT, "   ".getBytes(), billtypeaa.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Bill no."+billnoget);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("   "+billtypeaa);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                paymmethodaa = "Dine-in";
                //billtypee.setText("Dine-in");
            } else {
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    paymmethodaa = "Takeaway";
                    //billtypee.setText("Takeaway");
                } else {
                    paymmethodaa = "Home delivery";
                    //billtypee.setText("Home delivery");
                }
            }

            Cursor date = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (date.moveToFirst()) {
                datee = date.getString(25);
                timee = date.getString(12);
            } else {
                Cursor date_cancel = db1.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (date_cancel.moveToFirst()) {
                    datee = date_cancel.getString(22);
                    timee = date_cancel.getString(12);
                }
            }

            allbuf10 = new byte[][]{
                    setHT321, left, paymmethodaa.getBytes(), HT, "  ".getBytes(), datee.getBytes(), LF
                    //setHT321,left,paymmethodaa.getBytes(),HT,datee.getBytes(),LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(paymmethodaa);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+datee);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor cursor9 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor9.moveToFirst()) {
                tableida = cursor9.getString(15);
            }
//        else {
//            Cursor cursor9_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

            Cursor vbnm = db.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
            if (vbnm.moveToFirst()) {
                assa1 = vbnm.getString(1);
                assa2 = vbnm.getString(2);
            }
            TextView cx = new TextView(CancelActivity.this);
            cx.setText(assa1);
            if (cx.getText().toString().equals("")) {
                tableidaa = "Tab" + assa2;
                allbuftime = new byte[][]{
                        setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
                };
            } else {
                tableidaa = "Tab" + assa1;
                allbuftime = new byte[][]{
                        setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
                };
            }

//        tableidaa = "Table"+tableida;
//        allbuftime = new byte[][]{
//                setHT321,left, tableidaa.getBytes(),HT,"  ".getBytes(),timee.getBytes(),LF
//        };


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT321);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(tableidaa);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("  "+timee);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LFv
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

            Cursor caddress = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
            if (caddress.moveToFirst()) {
                String nam = caddress.getString(1);
                String addr = caddress.getString(4);
                String phon = caddress.getString(2);
                String emai = caddress.getString(3);

                if (nam.toString().length() > 0 || addr.toString().length() > 0 ||
                        phon.toString().length() > 0 || emai.toString().length() > 0) {
                    allbufcust = new byte[][]{
                            left, un, "Customer:".getBytes(), LF, un1,
                    };

                    if (statussusbs.toString().equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(un);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append("Customer:");
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                        mPrinter.addCommand(un1); //LF
                    }
                } else {

                }

                if (nam.toString().length() > 0) {
                    allbufcustname = new byte[][]{
                            nam.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(nam);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                    }
                } else {

                }

                if (addr.toString().length() > 0) {
                    allbufcustadd = new byte[][]{
                            addr.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(addr);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                    }
                } else {

                }

                if (phon.toString().length() > 0) {
                    String cust_ph = "Ph. " + phon.toString();
                    allbufcustph = new byte[][]{
                            cust_ph.getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(cust_ph);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                    }
                } else {

                }

                if (emai.toString().length() > 0) {
                    allbufcustemail = new byte[][]{
                            emai.toString().getBytes(), LF

                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(emai);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(LF);
                    }
                } else {

                }

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(left);
                    mPrinter.addCommand(un1);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(str_line);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }

            allbufqty = new byte[][]{
                    setHT34, normal, "Qty".getBytes(), HT, "Item".getBytes(), HT, "Price".getBytes(), HT, "Amount".getBytes(), left, LF
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT34);
                mPrinter.addCommand(normal);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Qty");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("Item");
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData3 = new StringBuilder();
                textData3.append("Price");
                mPrinter.addText(textData3.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData4 = new StringBuilder();
                textData4.append("Amount");
                mPrinter.addText(textData4.toString());
                mPrinter.addCommand(left);
                mPrinter.addCommand(LF); //LF
            }


            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }


            Cursor ccursorr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursorr.moveToFirst()) {

                do {

                    String name = ccursorr.getString(1);
                    String value = ccursorr.getString(2);
                    String pq = ccursorr.getString(5);
                    String itna = ccursorr.getString(2);
                    String pricee = ccursorr.getString(3);
                    String tototot = ccursorr.getString(4);

                    final String newid = ccursorr.getString(20);

                    final String newids = ccursorr.getString(0);

                    int padding_in_px;

                    int padding_in_dp = 30;  // 34 dps
                    final float scale1 = getResources().getDisplayMetrics().density;
                    padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                    if (pq.equals("Item")) {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                        final TableRow row1 = new TableRow(CancelActivity.this);
                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                        final TableRow row2 = new TableRow(CancelActivity.this);
                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));

                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                        final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                        //tv.setTextSize(18);
                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv.setText(value);
                        row.addView(tv);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv1.setTextSize(15);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv1.setText(name);
                        String value1 = tv1.getText().toString();
                        row.addView(tv1);

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.append(value + "% " + name);
                        tv2.setText(pricee);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv2.setTextColor(R.color.black);
                        row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.setPadding(0, 0, 1, 0);
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv3.setText(tototot);
                        //tv3.setTextColor(R.color.black);
                        //row.addView(tv3);


                        String value2 = tv3.getText().toString();

                        Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                        if (modcursor.moveToFirst()) {

                            Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                            if (cursor4.moveToFirst()) {
                                sub2a = cursor4.getFloat(0);
                                String sub2a1 = String.valueOf(sub2a);
                                ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                                ss1 = String.format("%.1f", ss);
                            }

                            if (name.toString().length() > charlength) {
                                int print1 = 0;

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(string1quan);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(ss1);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF); //LF
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append(string2quan);
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        print1 = 1;
                                    }
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(value);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(ss1);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF); //LF
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("      ");
                                        mPrinter.addText(textData5.toString());
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        print1 = 1;
                                    }
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, ss1.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
/////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(string1quan);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(ss1);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF); //LF
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append(string2quan);
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append("      ");
                                        mPrinter.addText(textData7.toString());
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append(string3);
                                        mPrinter.addText(textData8.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF);
                                        print1 = 1;
                                    }
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(value);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(ss1);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF); //LF
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("      ");
                                        mPrinter.addText(textData5.toString());
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append("      ");
                                        mPrinter.addText(textData7.toString());
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append(string3);
                                        mPrinter.addText(textData8.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF);
                                        print1 = 1;
                                    }
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            } else {
                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(ss1);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(LF);
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, ss1.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(ss1);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            }

                            do {

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                float modprice1 = Float.parseFloat(modiprice);
                                String modpricestr = String.valueOf(modprice1);

                                if (modiname.toString().length() > charlength) {
                                    if (modiname.toString().length() > charlength) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                        };
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(string1);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append("      ");
                                        mPrinter.addText(textData6.toString());
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append(string2);
                                        mPrinter.addText(textData7.toString());
                                        mPrinter.addCommand(LF); //LF
                                    }
                                    if (modiname.toString().length() > charlength1) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength, charlength1);
                                        String string3 = modiname.substring(charlength1);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(string1);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append("      ");
                                        mPrinter.addText(textData6.toString());
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append(string2);
                                        mPrinter.addText(textData7.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append("      ");
                                        mPrinter.addText(textData8.toString());
                                        StringBuilder textData9 = new StringBuilder();
                                        textData9.append(string3);
                                        mPrinter.addText(textData9.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.toString().equals("ok")) {
                                                mPrinter.addCommand(left);
                                                mPrinter.addCommand(normal);
                                                StringBuilder textData1 = new StringBuilder();
                                                textData1.append("HSN "+hsn);
                                                mPrinter.addText(textData1.toString());
                                                mPrinter.addCommand(HT);
                                                mPrinter.addCommand(LF); //LF
                                            }
                                        }
                                    }

                                } else {
                                    allbufmodifiers = new byte[][]{
                                            setHT34, normal, "".getBytes(), HT, ">".getBytes(), modiname.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), left, LF
                                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                    };
                                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                                    if (statussusbs.toString().equals("ok")) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(modiname);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(34);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.toString().equals("ok")) {
                                                mPrinter.addCommand(left);
                                                mPrinter.addCommand(normal);
                                                StringBuilder textData1 = new StringBuilder();
                                                textData1.append("HSN "+hsn);
                                                mPrinter.addText(textData1.toString());
                                                mPrinter.addCommand(HT);
                                                mPrinter.addCommand(LF); //LF
                                            }
                                        }
                                    }

                                }

                                final TableRow tableRow11 = new TableRow(CancelActivity.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                                final TextView tvv = new TextView(CancelActivity.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(CancelActivity.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);

                                row.removeView(tv8);


                                tv8 = new TextView(CancelActivity.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tv.getText().toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(ss));
                                row.addView(tv8);


                                tableLayout1.addView(tableRow11);
                            } while (modcursor.moveToNext());

                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(31);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(setHT34);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("");
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData2 = new StringBuilder();
                                            textData2.append("");
                                            mPrinter.addText(textData2.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData3 = new StringBuilder();
                                            textData3.append("");
                                            mPrinter.addText(textData3.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData4 = new StringBuilder();
                                            textData4.append("(");
                                            mPrinter.addText(textData4.toString());
                                            StringBuilder textData5 = new StringBuilder();
                                            textData5.append("-");
                                            mPrinter.addText(textData5.toString());
                                            StringBuilder textData6 = new StringBuilder();
                                            textData6.append(total_disc_print_q);
                                            mPrinter.addText(textData6.toString());
                                            StringBuilder textData7 = new StringBuilder();
                                            textData7.append(")");
                                            mPrinter.addText(textData7.toString());
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }
                        } else {

                            float fgh = Float.parseFloat(tototot);
                            String tototott = String.format("%.1f", fgh);
                            if (name.toString().length() > charlength) {
                                int print1 = 0;

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(string1quan);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(tototott);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append(string2quan);
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF); //LF
                                        print1 = 1;
                                    }
                                }
                                if (name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(value);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(tototott);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("      ");
                                        mPrinter.addText(textData5.toString());
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF); //LF
                                        print1 = 1;
                                    }
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,total.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(string1quan);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(tototott);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append(string2quan);
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append("      ");
                                        mPrinter.addText(textData7.toString());
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append(string3);
                                        mPrinter.addText(textData8.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                        print1 = 1;
                                    }
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    if (print1 == 0) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append(value);
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(string1);
                                        mPrinter.addText(textData2.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(pricee);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(tototott);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("      ");
                                        mPrinter.addText(textData5.toString());
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append(string2);
                                        mPrinter.addText(textData6.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append("      ");
                                        mPrinter.addText(textData7.toString());
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append(string3);
                                        mPrinter.addText(textData8.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                        print1 = 1;
                                    }
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            } else {
                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(LF); //LF
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(34);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            }

                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(multiply));
                            row.addView(tv8);

                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(30);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(31);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(setHT34);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("");
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData2 = new StringBuilder();
                                            textData2.append("");
                                            mPrinter.addText(textData2.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData3 = new StringBuilder();
                                            textData3.append("");
                                            mPrinter.addText(textData3.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData4 = new StringBuilder();
                                            textData4.append("(");
                                            mPrinter.addText(textData4.toString());
                                            StringBuilder textData5 = new StringBuilder();
                                            textData5.append("-");
                                            mPrinter.addText(textData5.toString());
                                            StringBuilder textData6 = new StringBuilder();
                                            textData6.append(total_disc_print_q);
                                            mPrinter.addText(textData6.toString());
                                            StringBuilder textData7 = new StringBuilder();
                                            textData7.append(")");
                                            mPrinter.addText(textData7.toString());
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }

                        }
                    }


                } while (ccursorr.moveToNext());
            }

            allbuf6 = new byte[][]{
                    normal, un, "Returns/Cancel:".getBytes(), LF, un1,

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(normal);
                mPrinter.addCommand(un);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Returns/Cancel:");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
                mPrinter.addCommand(un1);
            }


            Cursor ccursorreturn = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursorreturn.moveToFirst()) {

                do {

                    String name = ccursorreturn.getString(1);
                    String value = ccursorreturn.getString(2);
                    String pq = ccursorreturn.getString(5);
                    String itna = ccursorreturn.getString(2);
                    String pricee = ccursorreturn.getString(3);
                    String tototot = ccursorreturn.getString(4);

                    final String newtt = ccursorreturn.getString(4);

                    final String newid = ccursorreturn.getString(19);

                    final String newids = ccursorreturn.getString(0);
                    int padding_in_px;

                    int padding_in_dp = 30;  // 34 dps
                    final float scale1 = getResources().getDisplayMetrics().density;
                    padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                    if (pq.equals("Item")) {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                        final TableRow row1 = new TableRow(CancelActivity.this);
                        row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                        final TableRow row2 = new TableRow(CancelActivity.this);
                        row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));

                        //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                        final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                        //tv.setTextSize(18);
                        tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv.setText(value);
                        row.addView(tv);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setGravity(Gravity.CENTER_VERTICAL);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv1.setTextSize(15);
                        //tv.setPadding(0, 0, 0, 0);
                        //text = ccursorr.getString(1);
                        tv1.setText(name);
                        String value1 = tv1.getText().toString();
                        row.addView(tv1);

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.append(value + "% " + name);
                        tv2.setText(pricee);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        //tv2.setTextColor(R.color.black);
                        row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                        tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setPadding(5, 0, 0, 0);
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv2.setPadding(0, 0, 1, 0);
                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv3.setText(tototot);
                        //tv3.setTextColor(R.color.black);
                        //row.addView(tv3);


                        String value2 = tv3.getText().toString();

                        //tableLayoutt.addView(row);

                        Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                        if (modcursor.moveToFirst()) {

                            Cursor modt = db1.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                            if (modt.moveToFirst()) {
                                do {
                                    //row.removeView(tv3);
                                    float aq = modt.getFloat(0);
                                    String aqq = String.valueOf(aq);
                                    aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                    aqq2 = String.format("%.1f", aqq1);
                                } while (modt.moveToNext());
                            }


                            if (name.toString().length() > charlength) {

                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append("      ");
                                    mPrinter.addText(textData5.toString());
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34, normal,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, aqq2.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
////////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = total.substring(0, quanlentha);
                                    String string2quan = total.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), LF, string2quan.getBytes(), HT, string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    mPrinter.addCommand(un1);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData7 = new StringBuilder();
                                    textData7.append("      ");
                                    mPrinter.addText(textData7.toString());
                                    StringBuilder textData8 = new StringBuilder();
                                    textData8.append(string3);
                                    mPrinter.addText(textData8.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF);
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append("      ");
                                    mPrinter.addText(textData5.toString());
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData7 = new StringBuilder();
                                    textData7.append("      ");
                                    mPrinter.addText(textData7.toString());
                                    StringBuilder textData8 = new StringBuilder();
                                    textData8.append(string3);
                                    mPrinter.addText(textData8.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF);
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            } else {
                                if (total.toString().length() > quanlentha) {
                                    String string1quan = total.substring(0, quanlentha);
                                    String string2quan = total.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(LF);
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, aqq2.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(aqq2);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            }

                            do {

                                final String modiname = modcursor.getString(1);
                                final String modiquan = modcursor.getString(2);
                                String modiprice = modcursor.getString(3);
                                String moditotal = modcursor.getString(4);
                                final String modiid = modcursor.getString(0);

                                float modprice1 = Float.parseFloat(modiprice);
                                String modpricestr = String.valueOf(modprice1);

                                if (modiname.toString().length() > charlength) {
                                    if (modiname.toString().length() > charlength) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, un1, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(string1);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append("      ");
                                        mPrinter.addText(textData6.toString());
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append(string2);
                                        mPrinter.addText(textData7.toString());
                                        mPrinter.addCommand(LF); //LF
                                    }
                                    if (modiname.toString().length() > charlength1) {
                                        String string1 = modiname.substring(0, charlength);
                                        String string2 = modiname.substring(charlength, charlength1);
                                        String string3 = modiname.substring(charlength1);
                                        allbufmodifiers = new byte[][]{
                                                setHT34, un1, normal, "".getBytes(), HT, ">".getBytes(), string1.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF
                                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                        };
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(string1);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData6 = new StringBuilder();
                                        textData6.append("      ");
                                        mPrinter.addText(textData6.toString());
                                        StringBuilder textData7 = new StringBuilder();
                                        textData7.append(string2);
                                        mPrinter.addText(textData7.toString());
                                        mPrinter.addCommand(LF);
                                        StringBuilder textData8 = new StringBuilder();
                                        textData8.append("      ");
                                        mPrinter.addText(textData8.toString());
                                        StringBuilder textData9 = new StringBuilder();
                                        textData9.append(string3);
                                        mPrinter.addText(textData9.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.toString().equals("ok")) {
                                                mPrinter.addCommand(left);
                                                mPrinter.addCommand(normal);
                                                StringBuilder textData1 = new StringBuilder();
                                                textData1.append("HSN "+hsn);
                                                mPrinter.addText(textData1.toString());
                                                mPrinter.addCommand(HT);
                                                mPrinter.addCommand(LF); //LF
                                            }
                                        }
                                    }

                                } else {
                                    allbufmodifiers = new byte[][]{
                                            setHT34, normal, un1, "".getBytes(), HT, ">".getBytes(), modiname.getBytes(), HT, modpricestr.getBytes(), HT, "".getBytes(), left, LF
                                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF

                                    };
                                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                                    if (statussusbs.toString().equals("ok")) {
                                        mPrinter.addCommand(setHT34);
                                        mPrinter.addCommand(normal);
                                        StringBuilder textData1 = new StringBuilder();
                                        textData1.append("");
                                        mPrinter.addText(textData1.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData2 = new StringBuilder();
                                        textData2.append(">");
                                        mPrinter.addText(textData2.toString());
                                        StringBuilder textData3 = new StringBuilder();
                                        textData3.append(modiname);
                                        mPrinter.addText(textData3.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData4 = new StringBuilder();
                                        textData4.append(modpricestr);
                                        mPrinter.addText(textData4.toString());
                                        mPrinter.addCommand(HT);
                                        StringBuilder textData5 = new StringBuilder();
                                        textData5.append("");
                                        mPrinter.addText(textData5.toString());
                                        mPrinter.addCommand(left);
                                        mPrinter.addCommand(LF); //LF
                                    }

                                    Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                    if (ccursor.moveToFirst()) {
                                        String hsn = ccursor.getString(38);

                                        TextView hsn_hsn = new TextView(CancelActivity.this);
                                        hsn_hsn.setText(hsn);

                                        if (hsn_hsn.getText().toString().equals("")) {
                                        } else {
                                            allbuftaxestype1 = new byte[][]{
                                                    left, normal, hsn.getBytes(), HT, LF
                                            };
                                            if (statussusbs.toString().equals("ok")) {
                                                mPrinter.addCommand(left);
                                                mPrinter.addCommand(normal);
                                                StringBuilder textData1 = new StringBuilder();
                                                textData1.append("HSN "+hsn);
                                                mPrinter.addText(textData1.toString());
                                                mPrinter.addCommand(HT);
                                                mPrinter.addCommand(LF); //LF
                                            }
                                        }
                                    }

                                }


                                final TableRow tableRow11 = new TableRow(CancelActivity.this);
                                tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                        TableRow.LayoutParams.MATCH_PARENT,
                                        TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                                final TextView tvv = new TextView(CancelActivity.this);
                                // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                                tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                //tv.setGravity(Gravity.CENTER);
                                tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tvv.setText("");
                                tableRow11.addView(tvv);

                                TextView tv4 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv4.setText(modiname);
                                tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv4.setGravity(Gravity.CENTER_VERTICAL);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv4);

                                TextView tv5 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                                //tv3.setPadding(5, 0, 0, 0);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv2.setPadding(0, 0, 1, 0);
                                tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                tv5.setText(modiprice);
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv5);

                                TextView tv6 = new TextView(CancelActivity.this);
                                //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                                tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setPadding(5, 0, 0, 0);
                                tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv6.setText("");
                                //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                                //tv3.setTextColor(R.color.black);
                                tableRow11.addView(tv6);


                                final TextView tv7 = new TextView(CancelActivity.this);
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                //tv3.setPadding(0,0,10,0);
                                tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                                final String number = tv.getText().toString();
                                float newmul = Float.parseFloat(number);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                                //row.addView(tv3);


                                row.removeView(tv8);
                                tv8 = new TextView(CancelActivity.this);
                                tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                                //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                                //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                                //tv.setBackgroundResource(R.drawable.cell_shape);
                                tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                                //tv3.setPadding(0, 0, 10, 0);
                                tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                                tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                                final String numberr = tv.getText().toString();
                                float newmulr = Float.parseFloat(numberr);
                                //final float in = Float.parseFloat(cursor.getString(4));
                                String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                                //newmul = Integer.parseInt(multiply);
                                tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                                row.addView(tv8);


                                tableLayout1.addView(tableRow11);
                            } while (modcursor.moveToNext());

                            //Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(27);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(28);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(setHT34);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("");
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData2 = new StringBuilder();
                                            textData2.append("");
                                            mPrinter.addText(textData2.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData3 = new StringBuilder();
                                            textData3.append("");
                                            mPrinter.addText(textData3.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData4 = new StringBuilder();
                                            textData4.append("(");
                                            mPrinter.addText(textData4.toString());
                                            StringBuilder textData5 = new StringBuilder();
                                            textData5.append("-");
                                            mPrinter.addText(textData5.toString());
                                            StringBuilder textData6 = new StringBuilder();
                                            textData6.append(total_disc_print_q);
                                            mPrinter.addText(textData6.toString());
                                            StringBuilder textData7 = new StringBuilder();
                                            textData7.append(")");
                                            mPrinter.addText(textData7.toString());
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }
                        } else {

                            float fgh = Float.parseFloat(tototot);
                            String tototott = String.format("%.1f", fgh);

                            if (name.toString().length() > charlength) {
                                if (value.length() > quanlentha && name.toString().length() > charlength) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF); //LF
                                }
                                if (value.length() < quanlentha && name.toString().length() > charlength) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append("      ");
                                    mPrinter.addText(textData5.toString());
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF); //LF
                                }
//                            if (name.toString().length()>charlength){
//                                String string1 = name.substring(0, charlength);
//                                String string2 = name.substring(charlength);
//                                allbufitems = new byte[][]{
//                                        setHT34,normal,un1,value.getBytes(),HT,string1.getBytes(),HT, pricee.getBytes(),HT, tototot.getBytes(),LF,"      ".getBytes(),string2.getBytes(),LF
//                                };
//                            }
//////////////////////////////////////////////
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, string1quan.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, string2quan.getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData7 = new StringBuilder();
                                    textData7.append("      ");
                                    mPrinter.addText(textData7.toString());
                                    StringBuilder textData8 = new StringBuilder();
                                    textData8.append(string3);
                                    mPrinter.addText(textData8.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }
                                if (value.length() > quanlentha && name.toString().length() > charlength1) {
                                    String string1 = name.substring(0, charlength);
                                    String string2 = name.substring(charlength, charlength1);
                                    String string3 = name.substring(charlength1);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, string1.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), LF, "      ".getBytes(), string2.getBytes(), LF, "      ".getBytes(), string3.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(string1);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append("      ");
                                    mPrinter.addText(textData5.toString());
                                    StringBuilder textData6 = new StringBuilder();
                                    textData6.append(string2);
                                    mPrinter.addText(textData6.toString());
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData7 = new StringBuilder();
                                    textData7.append("      ");
                                    mPrinter.addText(textData7.toString());
                                    StringBuilder textData8 = new StringBuilder();
                                    textData8.append(string3);
                                    mPrinter.addText(textData8.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            } else {

                                if (value.toString().length() > quanlentha) {
                                    String string1quan = value.substring(0, quanlentha);
                                    String string2quan = value.substring(quanlentha);
                                    allbufitems = new byte[][]{
                                            setHT34, normal, string1quan.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), left, LF, string2quan.getBytes(), LF
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(string1quan);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF);
                                    StringBuilder textData5 = new StringBuilder();
                                    textData5.append(string2quan);
                                    mPrinter.addText(textData5.toString());
                                    mPrinter.addCommand(LF); //LF
                                } else {
                                    allbufitems = new byte[][]{
                                            setHT34, normal, un1, value.getBytes(), HT, name.getBytes(), HT, pricee.getBytes(), HT, tototott.getBytes(), left, LF,
                                    };
                                    mPrinter.addCommand(setHT34);
                                    mPrinter.addCommand(normal);
                                    StringBuilder textData1 = new StringBuilder();
                                    textData1.append(value);
                                    mPrinter.addText(textData1.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData2 = new StringBuilder();
                                    textData2.append(name);
                                    mPrinter.addText(textData2.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData3 = new StringBuilder();
                                    textData3.append(pricee);
                                    mPrinter.addText(textData3.toString());
                                    mPrinter.addCommand(HT);
                                    StringBuilder textData4 = new StringBuilder();
                                    textData4.append(tototott);
                                    mPrinter.addText(textData4.toString());
                                    mPrinter.addCommand(left);
                                    mPrinter.addCommand(LF); //LF
                                }

                                Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                                if (ccursor.moveToFirst()) {
                                    String hsn = ccursor.getString(38);

                                    TextView hsn_hsn = new TextView(CancelActivity.this);
                                    hsn_hsn.setText(hsn);

                                    if (hsn_hsn.getText().toString().equals("")) {
                                    } else {
                                        allbuftaxestype1 = new byte[][]{
                                                left, normal, hsn.getBytes(), HT, LF
                                        };
                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("HSN "+hsn);
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                }

                            }

                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(multiply));
                            row.addView(tv8);

                            Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                            if (disc_cursor.moveToFirst()) {
                                do {
                                    String disc_vv = disc_cursor.getString(12);
                                    String disc_there = disc_cursor.getString(27);
                                    if (disc_there.toString().equals("no")) {

                                    } else {

                                        Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                        if (cursor113.moveToFirst()) {
                                            float vtq = cursor113.getFloat(28);
                                            total_disc_print_q = String.valueOf(vtq);
                                        }

                                        allbufrounded = new byte[][]{
                                                setHT34, normal, "".getBytes(), HT, "".getBytes(), HT, "".getBytes(), HT, "(".getBytes(), "-".getBytes(), total_disc_print_q.getBytes(), ")".getBytes(), left, LF,
                                        };

                                        if (statussusbs.toString().equals("ok")) {
                                            mPrinter.addCommand(setHT34);
                                            mPrinter.addCommand(normal);
                                            StringBuilder textData1 = new StringBuilder();
                                            textData1.append("");
                                            mPrinter.addText(textData1.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData2 = new StringBuilder();
                                            textData2.append("");
                                            mPrinter.addText(textData2.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData3 = new StringBuilder();
                                            textData3.append("");
                                            mPrinter.addText(textData3.toString());
                                            mPrinter.addCommand(HT);
                                            StringBuilder textData4 = new StringBuilder();
                                            textData4.append("(");
                                            mPrinter.addText(textData4.toString());
                                            StringBuilder textData5 = new StringBuilder();
                                            textData5.append("-");
                                            mPrinter.addText(textData5.toString());
                                            StringBuilder textData6 = new StringBuilder();
                                            textData6.append(total_disc_print_q);
                                            mPrinter.addText(textData6.toString());
                                            StringBuilder textData7 = new StringBuilder();
                                            textData7.append(")");
                                            mPrinter.addText(textData7.toString());
                                            mPrinter.addCommand(left);
                                            mPrinter.addCommand(LF); //LF
                                        }
                                    }
                                } while (disc_cursor.moveToNext());
                            }

                        }

                    }
                } while (ccursorreturn.moveToNext());


            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }
////////////////////////////////////sub total

            Cursor cursor3 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (cursor3.moveToFirst()) {
                sub1 = cursor3.getFloat(0);
            }

            Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (cursor4.moveToFirst()) {
                sub2 = cursor4.getFloat(0);
            }
            float sub12 = sub1 + sub2;
            String total2 = String.valueOf(sub12);
            float to = Float.parseFloat(total2);
            String tot = String.valueOf(to);


            allbufsubtot = new byte[][]{
                    setHT32, left, "Sub total".getBytes(), HT, tot.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Sub total");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(tot);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }
/////////////////////////////////// tax
            TableLayout tableLayout1 = new TableLayout(CancelActivity.this);
            tableLayout1.removeAllViews();


            Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor.moveToFirst()) {

                do {
                    String name = ccursor.getString(10);
                    String value = ccursor.getString(9);
                    String pq = ccursor.getString(50);
                    String itna = ccursor.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor.moveToNext());
            }

            Cursor ccursor2 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor2.moveToFirst()) {

                do {
                    String name = ccursor2.getString(35);
                    String value = ccursor2.getString(36);
                    String pq = ccursor2.getString(50);
                    String itna = ccursor2.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor2.moveToNext());
            }

            Cursor ccursor3 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor3.moveToFirst()) {

                do {
                    String name = ccursor3.getString(37);
                    String value = ccursor3.getString(38);
                    String pq = ccursor3.getString(50);
                    String itna = ccursor3.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor3.moveToNext());
            }

            Cursor ccursor4 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor4.moveToFirst()) {

                do {
                    String name = ccursor4.getString(39);
                    String value = ccursor4.getString(40);
                    String pq = ccursor4.getString(50);
                    String itna = ccursor4.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor4.moveToNext());
            }

            Cursor ccursor5 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursor5.moveToFirst()) {

                do {
                    String name = ccursor5.getString(41);
                    String value = ccursor5.getString(42);
                    String pq = ccursor5.getString(50);
                    String itna = ccursor5.getString(1);

                    TextView v = new TextView(CancelActivity.this);
                    v.setText(value);

                    TextView v1 = new TextView(CancelActivity.this);
                    v1.setText(name);
                    if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                            || v.getText().toString().equals("")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        tv3.setText(String.valueOf(tota));
                        String bnm = String.format("%.2f", tota);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursor5.moveToNext());
            }

//            Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//
////                    final TableRow row = new TableRow(CancelActivity.this);
////                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
////                            TableRow.LayoutParams.WRAP_CONTENT));
////                    row.setGravity(Gravity.CENTER);
//
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TableRow.LayoutParams lp, lp1, lp2;
//
////                                    final TextView tv = new TextView(CancelActivity.this);
////                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                    tv.setTextSize(16);
////                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                                    row.addView(tv);
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
////                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        //tv2.setTextColor(Color.parseColor("#000000"));
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
////                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        //tv3.setPadding(0,0,10,0);
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        //tv3.setTextColor(Color.parseColor("#000000"));
//                        //row.addView(tv3);
//
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                        };
//                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                        if (statussusbs.toString().equals("ok")) {
//                            mPrinter.addCommand(left);
//                            mPrinter.addCommand(normal);
//                            StringBuilder textData1 = new StringBuilder();
//                            textData1.append(mod1);
//                            mPrinter.addText(textData1.toString());
//                            mPrinter.addCommand(HT);
//                            mPrinter.addCommand(LF); //LF
//                        }
//                    }
//
//
//                } while (ccursor.moveToNext());
//            }

//            Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//
////                    final TableRow row = new TableRow(CancelActivity.this);
////                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
////                            TableRow.LayoutParams.WRAP_CONTENT));
////                    row.setGravity(Gravity.CENTER);
//
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TableRow.LayoutParams lp, lp1, lp2;
//
////                                    final TextView tv = new TextView(CancelActivity.this);
////                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                    tv.setTextSize(16);
////                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                                    row.addView(tv);
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
////                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        //tv2.setTextColor(Color.parseColor("#000000"));
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
////                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        //tv3.setPadding(0,0,10,0);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        //tv3.setTextColor(Color.parseColor("#000000"));
//                        //row.addView(tv3);
//
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(tota1);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                        };
//                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                        if (statussusbs.toString().equals("ok")) {
//                            mPrinter.addCommand(left);
//                            mPrinter.addCommand(normal);
//                            StringBuilder textData1 = new StringBuilder();
//                            textData1.append(mod1);
//                            mPrinter.addText(textData1.toString());
//                            mPrinter.addCommand(HT);
//                            mPrinter.addCommand(LF); //LF
//                        }
//                    }
//
//
//                } while (ccursortaxreturn.moveToNext());
//            }


            Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn.moveToFirst()) {

                do {
                    String name = ccursortaxreturn.getString(10);
                    String value = ccursortaxreturn.getString(9);
                    String pq = ccursortaxreturn.getString(39);
                    String itna = ccursortaxreturn.getString(1);

                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn.moveToNext());
            }

            Cursor ccursortaxreturn2 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn2.moveToFirst()) {

                do {
                    String name = ccursortaxreturn2.getString(30);
                    String value = ccursortaxreturn2.getString(31);
                    String pq = ccursortaxreturn2.getString(39);
                    String itna = ccursortaxreturn2.getString(1);

                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn2.moveToNext());
            }

            Cursor ccursortaxreturn3 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn3.moveToFirst()) {

                do {
                    String name = ccursortaxreturn3.getString(32);
                    String value = ccursortaxreturn3.getString(33);
                    String pq = ccursortaxreturn3.getString(39);
                    String itna = ccursortaxreturn3.getString(1);

                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn3.moveToNext());
            }

            Cursor ccursortaxreturn4 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn4.moveToFirst()) {

                do {
                    String name = ccursortaxreturn4.getString(34);
                    String value = ccursortaxreturn4.getString(35);
                    String pq = ccursortaxreturn4.getString(39);
                    String itna = ccursortaxreturn4.getString(1);

                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn4.moveToNext());
            }


            Cursor ccursortaxreturn5 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
            if (ccursortaxreturn5.moveToFirst()) {

                do {
                    String name = ccursortaxreturn5.getString(36);
                    String value = ccursortaxreturn5.getString(37);
                    String pq = ccursortaxreturn5.getString(39);
                    String itna = ccursortaxreturn5.getString(1);

                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {

                    } else {
                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(
                                TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tv1.setText(value);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + "@" + value + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);
                    }

                } while (ccursortaxreturn5.moveToNext());
            }


            ArrayList<String> groupList1 = new ArrayList<String>();

            float sum_p1 = 0;
            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

                if (groupList1.contains(mTextView.getText().toString())) {

                }else {
                    sum_p1 = 0;
                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                        mTextView1 = (TextView) mRow1.getChildAt(0);
                        mTextView2 = (TextView) mRow1.getChildAt(2);
                        if (groupList1.contains(mTextView.getText().toString())) {
                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                            }
                        } else {
                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                                groupList1.add(mTextView.getText().toString());
                                sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                            }
                        }
                    }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                    String mod1 = mTextView.getText().toString() + "---" + String.valueOf(String.format("%.2f", sum_p1));
                    allbuftaxestype1 = new byte[][]{
                            left, normal, mod1.getBytes(), HT, LF
                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                    };
                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                    if (statussusbs.toString().equals("ok")) {
                        mPrinter.addCommand(left);
                        mPrinter.addCommand(normal);
                        StringBuilder textData1 = new StringBuilder();
                        textData1.append(mod1);
                        mPrinter.addText(textData1.toString());
                        mPrinter.addCommand(HT);
                        mPrinter.addCommand(LF); //LF
                    }

                    String match = "@";
                    int position = mTextView.getText().toString().indexOf(match);
                    String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
                    Cursor ccursor6 = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    if (ccursor6.moveToFirst()) {
                        String hsn = ccursor6.getString(38);

                        TextView hsn_hsn = new TextView(CancelActivity.this);
                        hsn_hsn.setText(hsn);

                        if (hsn_hsn.getText().toString().equals("")) {
                        } else {
                            allbuftaxestype1 = new byte[][]{
                                    left, normal, hsn.getBytes(), HT, LF
                            };
                            if (statussusbs.toString().equals("ok")) {
                                mPrinter.addCommand(left);
                                mPrinter.addCommand(normal);
                                StringBuilder textData1 = new StringBuilder();
                                textData1.append("HSN "+hsn);
                                mPrinter.addText(textData1.toString());
                                mPrinter.addCommand(HT);
                                mPrinter.addCommand(LF); //LF
                            }
                        }
                    }

                }
            }


            String phon = "0";

            Cursor caddress1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
            if (caddress1.moveToFirst()) {
                phon = caddress1.getString(2);
            }

            TextView tvvs = new TextView(CancelActivity.this);
            tvvs.setText(phon);


            Cursor us_name1 = db1.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
            if (us_name1.moveToLast()) {
//            Toast.makeText(CancelActivity.this, "user id there", Toast.LENGTH_LONG).show();
                String na53 = us_name1.getString(53);
                String na38 = us_name1.getString(38);
                String na39 = us_name1.getString(39);
                String na40 = us_name1.getString(40);
                String na41 = us_name1.getString(41);
                String na42 = us_name1.getString(42);
                String na43 = us_name1.getString(43);
                String na44 = us_name1.getString(44);
                String na45 = us_name1.getString(45);
                String na46 = us_name1.getString(46);
                String na47 = us_name1.getString(47);
                String na48 = us_name1.getString(48);
                String na49 = us_name1.getString(49);
                String na50 = us_name1.getString(50);
                String na51 = us_name1.getString(51);
                String na52 = us_name1.getString(52);
                String na38_value = us_name1.getString(54);
                String na39_value = us_name1.getString(55);
                String na40_value = us_name1.getString(56);
                String na41_value = us_name1.getString(57);
                String na42_value = us_name1.getString(58);
                String na43_value = us_name1.getString(59);
                String na44_value = us_name1.getString(60);
                String na45_value = us_name1.getString(61);
                String na46_value = us_name1.getString(62);
                String na47_value = us_name1.getString(63);
                String na48_value = us_name1.getString(64);
                String na49_value = us_name1.getString(65);
                String na50_value = us_name1.getString(66);
                String na51_value = us_name1.getString(67);
                String na52_value = us_name1.getString(68);

                String proc = us_name1.getString(69);

                TextView hid = new TextView(CancelActivity.this);
                hid.setText(proc);

                if (hid.getText().toString().equals("off")) {
                    Cursor cursorr = null;
                    if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                        cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                        cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
                    if (paymmethoda.toString().equals("  Home delivery")) {
                        cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                    }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                    if (cursorr.moveToFirst()) {

                        do {

                            String name = cursorr.getString(1);
                            String value = cursorr.getString(2);

                            final TableRow row = new TableRow(CancelActivity.this);
                            row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT));
                            row.setGravity(Gravity.CENTER);

                            TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                            TextView tvv = new TextView(CancelActivity.this);
                            tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tvv.setGravity(Gravity.START);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText(name);

                            TextView tv1 = new TextView(CancelActivity.this);
                            tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                            tv1.setGravity(Gravity.START);
                            tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv1.setText(value);
                            tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            String value1 = tv1.getText().toString();

                            TextView tv2 = new TextView(CancelActivity.this);
                            //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                            //tv2.setLayoutParams(lp);
                            tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                            tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                            tv2.append(name + " @ " + value + "%");
                            tv2.setPadding(0, 0, 20, 0);
                            tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(tv2);

                            TextView textView1 = new TextView(CancelActivity.this);
                            textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            row.addView(textView1);

                            TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                            tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                            //tv3.setPadding(0,0,10,0);
                            tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                            float tota = mul;
                            String tota1 = String.format("%.2f", tota);
                            tv3.setText(String.valueOf(tota));
                            //row.addView(tv3);


                            tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            String value2 = tv3.getText().toString();
                            row.addView(tv3);

                            tableLayout1.addView(row);

                            String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                            allbuftaxestype2 = new byte[][]{
                                    left, normal, mod1.getBytes(), HT, LF
                                    //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                            };
                            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                            if (statussusbs.toString().equals("ok")) {
                                mPrinter.addCommand(left);
                                mPrinter.addCommand(normal);
                                StringBuilder textData1 = new StringBuilder();
                                textData1.append(mod1);
                                mPrinter.addText(textData1.toString());
                                mPrinter.addCommand(HT);
                                mPrinter.addCommand(LF); //LF
                            }

                        } while (cursorr.moveToNext());
                    }
                } else {
                    for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                        int i1 = 0;
                        if (i2 == 38) {
                            i1 = 54;
                        }
                        if (i2 == 39) {
                            i1 = 55;
                        }
                        if (i2 == 40) {
                            i1 = 56;
                        }
                        if (i2 == 41) {
                            i1 = 57;
                        }
                        if (i2 == 42) {
                            i1 = 58;
                        }
                        if (i2 == 43) {
                            i1 = 59;
                        }
                        if (i2 == 44) {
                            i1 = 60;
                        }
                        if (i2 == 45) {
                            i1 = 61;
                        }
                        if (i2 == 46) {
                            i1 = 62;
                        }
                        if (i2 == 47) {
                            i1 = 63;
                        }
                        if (i2 == 48) {
                            i1 = 64;
                        }
                        if (i2 == 49) {
                            i1 = 65;
                        }
                        if (i2 == 50) {
                            i1 = 66;
                        }
                        if (i2 == 51) {
                            i1 = 67;
                        }
                        if (i2 == 52) {
                            i1 = 68;
                        }


                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

                        TextView tv = new TextView(CancelActivity.this);
                        tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv.setGravity(Gravity.START);
                        tv.setTextSize(15);
                        //text = cursor.getString(1);
//                String v = na;

                        tv.setText(us_name1.getString(i2));


                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        //text = cursor.getString(1);
                        tv1.setText(us_name1.getString(i1));
                        String value1 = "0";
                        if (tv1.getText().toString().equals("")) {

                        } else {
                            value1 = tv1.getText().toString();
                        }


                        TextView tv2 = new TextView(CancelActivity.this);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);
//                    Toast.makeText(CancelActivity.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

//                    Toast.makeText(CancelActivity.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                        TextView tv33 = new TextView(CancelActivity.this);
                        tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv33.setText(String.valueOf(tota));
                        tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        //tv3.setTextColor(Color.parseColor("#000000"));
                        //row.addView(tv3);


                        tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv33);

                        String value2 = tv33.getText().toString();
//                    Toast.makeText(CancelActivity.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                        if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                                || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                        } else {
                            tableLayout1.addView(row);

                            String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);
                            allbuftaxestype2 = new byte[][]{
                                    left, normal, mod1.getBytes(), HT, LF
                                    //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                            };
                            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                            if (statussusbs.toString().equals("ok")) {
                                mPrinter.addCommand(left);
                                mPrinter.addCommand(normal);
                                StringBuilder textData1 = new StringBuilder();
                                textData1.append(mod1);
                                mPrinter.addText(textData1.toString());
                                mPrinter.addCommand(HT);
                                mPrinter.addCommand(LF); //LF
                            }
                        }

                    }
                }

            } else {
//            Toast.makeText(CancelActivity.this, "user id not there", Toast.LENGTH_LONG).show();
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);
                        allbuftaxestype2 = new byte[][]{
                                left, normal, mod1.getBytes(), HT, LF
                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                        };
                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                        if (statussusbs.toString().equals("ok")) {
                            mPrinter.addCommand(left);
                            mPrinter.addCommand(normal);
                            StringBuilder textData1 = new StringBuilder();
                            textData1.append(mod1);
                            mPrinter.addText(textData1.toString());
                            mPrinter.addCommand(HT);
                            mPrinter.addCommand(LF); //LF
                        }

                    } while (cursorr.moveToNext());
                }
            }


            float sum = 0;
            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
                TextView mTextView = (TextView) mRow.getChildAt(2);
                sum = sum
                        + Float.parseFloat(mTextView.getText().toString());
            }


            String newsum = String.format("%.2f", sum);

            if (sum == 0 || sum == 0.0 || sum == 0.00) {

            } else {
                allbuftax = new byte[][]{
                        setHT32, left, "Tax".getBytes(), HT, newsum.getBytes(), LF
                };

                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(setHT32);
                    mPrinter.addCommand(left);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("Tax");
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    StringBuilder textData2 = new StringBuilder();
                    textData2.append(newsum);
                    mPrinter.addText(textData2.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


///////////////////////////////// discount


            Cursor cursor5 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
            if (cursor5.moveToFirst()) {
                dsirs = cursor5.getString(7);
                float ds = Float.parseFloat(dsirs);
                dsirs1 = String.format("%.2f", ds);
            } else {
                dsirs = "0";
            }
            TextView dis = new TextView(CancelActivity.this);
            Cursor cursor7 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
            if (cursor7.moveToFirst()) {
                taxpe = cursor7.getString(5);
                float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
                on1 = String.format("%.1f", on);
                if (on % 1 != 0) {
                    // //////Toast.makeText(CancelActivity.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                    int newww = (int) on;
                    float decpart = on - newww;
                    ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                    ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                    if (decpart > 0.5) {
                        ////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                        float addall = on;
                        //alltotal.setText(String.valueOf(newww + 1));
                        //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                        float dee = 1 - decpart;
                        dis.setText("+ " + String.format("%.2f", dee));

                    } else {
                        // //////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_SHORT).show();
                        //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                        float addall = on;
                        //alltotal1.setText(String.valueOf(newww));
                        //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                        dis.setText("- " + String.format("%.2f", decpart));

                    }
                } else {
                    ////////Toast.makeText(CancelActivity.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    int addall = (int) on;
                    //alltotal1.setText(String.valueOf(addall));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("+ " + "0.00");
                    ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
                }
            } else {
                taxpe = "0";
                dis.setText("+ " + "0.00");
                on1 = "0";
            }

            //tot-is-subtotal

            String alldiscinperc1 = "Discount(" + taxpe + "%)";
            allbufdisc = new byte[][]{
                    setHT32, left, alldiscinperc1.getBytes(), HT, on1.getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(alldiscinperc1);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(on1);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }
            float newe;

//////////////////////////////////////////

            Cursor cursor113 = db1.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
            if (cursor113.moveToFirst()) {
                float level = cursor113.getFloat(0);
                total = String.valueOf(level);
                total1 = Float.parseFloat(total);
                total_disc_print_q = String.format("%.2f", total1);

                allbufrounded = new byte[][]{
                        setHT32, left, "Savings".getBytes(), HT, total_disc_print_q.getBytes(), LF
                };

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(setHT32);
                    mPrinter.addCommand(left);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("Savings");
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    StringBuilder textData2 = new StringBuilder();
                    textData2.append(total_disc_print_q);
                    mPrinter.addText(textData2.toString());
                    mPrinter.addCommand(LF); //LF
                }

            }

////////////////////////////////rounded

            if (taxpe.toString().equals("")) {
                newe = sum + Float.parseFloat(String.valueOf(tot));
            } else {
                newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
            }

            if (str_round_off.toString().equals("No")) {

            }else {
                TextView round = new TextView(CancelActivity.this);
                if (newe % 1 != 0) {
                    int newww = (int) newe;
                    float decpart = newe - newww;
                    if (decpart > 0.5) {
                        float addall = newe;
                        float dee = 1 - decpart;
                        round.setText("+ " + String.format("%.2f", dee));
                    } else {
                        float addall = newe;
                        round.setText("- " + String.format("%.2f", decpart));
                    }
                } else {
                    int addall = (int) newe;
                    round.setText("+ " + "0.00");
                }

                allbufrounded = new byte[][]{
                        setHT32, left, "Rounded".getBytes(), HT, round.getText().toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                };

                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(setHT32);
                    mPrinter.addCommand(left);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append("Rounded");
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(HT);
                    StringBuilder textData2 = new StringBuilder();
                    textData2.append(round.getText().toString());
                    mPrinter.addText(textData2.toString());
                    mPrinter.addCommand(LF); //LFv
                }
            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

/////////////////////refund

            //19
            Cursor billcan = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
            if (billcan.moveToFirst()) {
                String asd = billcan.getString(18);
                refundamounta = String.valueOf(asd);
            } else {
                Cursor billcan_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
                if (billcan_cancel.moveToFirst()) {
                    String asd = billcan_cancel.getString(17);
                    refundamounta = String.valueOf(asd);
                }
            }

            Cursor c1 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
            if (c1.moveToFirst()) {
                String c11 = c1.getString(2);
                alltotal1 = c11;
            } else {
                alltotal1 = "0";
            }
            float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
            String mn1 = String.valueOf(min);

            allbufrounded = new byte[][]{
                    setHT32, left, "Refund".getBytes(), HT, "-".getBytes(), mn1.toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT32);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Refund");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append("-"+mn1);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
            final String normal1 = normal5.format(new Date());

            Date dt = new Date();
            SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
            final String time1 = sdf1.format(dt);

            Date dtt = new Date();
            SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
            String time24 = sdf1t.format(dtt);

            String refundtime = "(" + normal1 + "," + time1 + ")";
            allbuf6 = new byte[][]{
                    left, normal, refundtime.getBytes(), LF

            };
            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(normal);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(refundtime);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }
/////////////////////////

            float all = Float.parseFloat(alltotal1);
            String newf = String.valueOf(all);

            allbufrounded = new byte[][]{
                    setHT3212, left, "Total".getBytes(), HT, "Rs ".getBytes(), newf.toString().getBytes(), LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
            };

            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(setHT3212);
                mPrinter.addCommand(left);
                StringBuilder textData1 = new StringBuilder();
                textData1.append("Total");
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(HT);
                StringBuilder textData2 = new StringBuilder();
                textData2.append(insert1_rs+newf);
                mPrinter.addText(textData2.toString());
                mPrinter.addCommand(LF); //LF
            }

            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(left);
                mPrinter.addCommand(un1);
                StringBuilder textData1 = new StringBuilder();
                textData1.append(str_line);
                mPrinter.addText(textData1.toString());
                mPrinter.addCommand(LF); //LF
            }

//            footer();
//            cashopen();

//            allbuf2 = new byte[][]{
//                    normal, "Thank you! visit again.".getBytes(), LF, LF
//
//            };
//            //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//            if (statussusbs.toString().equals("ok")) {
//                mPrinter.addCommand(normal);
//                StringBuilder textData1 = new StringBuilder();
//                textData1.append("Thank you! visit again.");
//                mPrinter.addText(textData1.toString());
//                mPrinter.addCommand(LF); //LF
//                mPrinter.addCommand(LF); //LF
//            }

            tvkot.setText(strbillone);
            if (tvkot.getText().toString().equals("")){

            }else {
                allbuf2 = new byte[][]{
                        normal, strbillone.getBytes(), LF

                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                if (statussusbs.toString().equals("ok")) {
                    mPrinter.addCommand(normal);
                    StringBuilder textData1 = new StringBuilder();
                    textData1.append(strbillone);
                    mPrinter.addText(textData1.toString());
                    mPrinter.addCommand(LF); //LF
                }
            }


            Cursor acc=db.rawQuery("SELECT * FROM Printerreceiptsize", null);

            if(acc.moveToFirst()){
                acc.moveToFirst();
                do{
                    NAME = acc.getString(1);
                    if (NAME.equals("3 inch")) {
                        feedcut2 = new byte[]{0x1b,0x64,0x05, 0x1d,0x56,0x00};
                    }
                    else {
                        feedcut2 = new byte[]{0x1b,0x64,0x03, 0x1d,0x56,0x00};
                    }
                }while(acc.moveToNext());
            }

            byte[][] allbuf = new byte[][]{
                    feedcut2
            };
            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(feedcut2);
            }

            byte[] cashopen = {0x1b,0x70,0x00,0x60,0x60};

            byte[][] allbufc = new byte[][]{
                    cashopen
            };
            if (statussusbs.toString().equals("ok")) {
                mPrinter.addCommand(feedcut2);
            }

//            method = "addCut";
//            mPrinter.addCut(Printer.CUT_FEED);
        } catch (Exception e) {
//            Toast.makeText(CancelActivity.this, "Here2", Toast.LENGTH_SHORT).show();
            ShowMsg.showException(e, method, mContext);
            return false;
        }

        return true;
    }

    public void webservicequery_sales(final String webserviceQuery){


        SharedPreferences sharedpreferences = getDefaultSharedPreferencesMultiProcess(CancelActivity.this);
        final String company = sharedpreferences.getString("companyname", null);
        final String store = sharedpreferences.getString("storename", null);
        final String device = sharedpreferences.getString("devicename", null);
        RequestQueue queue;
        StringRequest sr1;
        // queue = Volley.newRequestQueue(getActivity());

        queue= RequestSingleton.getInstance(CancelActivity.this).getInstance();

        sr1 = new StringRequest(
                com.android.volley.Request.Method.POST,
                WebserviceUrl + "webservicequery_sales.php",
                new com.android.volley.Response.Listener<String>() {
                    @Override
                    public void onResponse(String responseString) {

                    }
                },
                new com.android.volley.Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.d("Signup confirm", "Error: " + error.getMessage());
                    }
                }) {
            @Override
            protected Map<String, String> getParams() {
                Map<String, String> params = new HashMap<String, String>();
                               /*     params.put("email", email + "");
                                    params.put("password", password + "");*/


//                            final String email = prefs.getString("emailid", "");
//                            final String pwd = prefs.getString("password", "");
                params.put("device", device);
                params.put("store", store);
                params.put("company", company);
                params.put("data", webserviceQuery);
                return params;
            }
        };
    /*    sr.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));*/
        sr1.setRetryPolicy(new DefaultRetryPolicy(0, 0,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(sr1);
    }

    @Override
    public void onStart() {
        super.onStart();
        db = openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        String printer_type="";
        Cursor aallrows = db.rawQuery("SELECT * FROM Printer_type WHERE _id = '1'", null);
        if (aallrows.moveToFirst()) {
            do {
                printer_type = aallrows.getString(1);

            } while (aallrows.moveToNext());
        }
        aallrows.close();

        if(printer_type.equalsIgnoreCase("wiseposplus")){
            doBindMswipeWisepadDeviceService();
        }

    }

    @Override
    protected void onStop() {
        super.onStop();
        db = openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        String printer_type="";
        Cursor aallrows = db.rawQuery("SELECT * FROM Printer_type WHERE _id = '1'", null);
        if (aallrows.moveToFirst()) {
            do {
                printer_type = aallrows.getString(1);

            } while (aallrows.moveToNext());
        }
        aallrows.close();

        if(printer_type.equalsIgnoreCase("wiseposplus")){
            doUnbindMswipeWisepadDeviceService();
        }


    }

    void doBindMswipeWisepadDeviceService()
    {
        bindService(new Intent(this, MSWisepadDeviceController.class), mMSWisepadDeviceControllerService, Context.BIND_AUTO_CREATE);
    }


    public void doUnbindMswipeWisepadDeviceService()
    {

        if (ApplicationData.IS_DEBUGGING_ON)
            Logs.v(ApplicationData.packName,  "wisePadConnection ", true, true);

        unbindService(mMSWisepadDeviceControllerService);

    }

    private ServiceConnection mMSWisepadDeviceControllerService = new ServiceConnection()
    {
        public void onServiceConnected(ComponentName className, IBinder service)
        {
            try
            {
                MSWisepadDeviceController.LocalBinder localBinder = (MSWisepadDeviceController.LocalBinder) service;
                mMSWisepadDeviceController = localBinder.getService();

                if(mMSWisepadDeviceController != null) {

                    mMSWisepadDeviceController.initMswipeWisepadDeviceController(new CancelActivity.MSWisepadDeviceObserver(),
                            true, false, false,
                            false, null);

                }
            }
            catch (Exception e) {

                if (ApplicationData.IS_DEBUGGING_ON)
                    Logs.v(ApplicationData.packName, "exception."+e.toString(), true, true);
            }
        }

        public void onServiceDisconnected(ComponentName className)
        {
            if (ApplicationData.IS_DEBUGGING_ON)
                Logs.v(ApplicationData.packName, "Wisepad servcie un-binded and wisepad is disconnected...", true, true);
            /**
             * This is called when the connection with the service has been
             * unexpectedly disconnected - process crashed.
             *
             */

            mMSWisepadDeviceController = null;

        }
    };


    class MSWisepadDeviceObserver implements MSWisepadDeviceControllerResponseListener
    {

        @Override
        public void onReturnWisepadConnection(WisePadConnection wisePadConntection, BluetoothDevice bluetoothDevice) {

            if (ApplicationData.IS_DEBUGGING_ON)
                Logs.v(ApplicationData.packName,  "wisePadConntection " + wisePadConntection, true, true);

            String msg = getString(R.string.unknown);

            if(wisePadConntection == WisePadConnection.WisePadConnection_CONNECTED)
            {
                msg = getString(R.string.device_connected);
            }
            else if(wisePadConntection == WisePadConnection.WisePadConnection_CONNECTING){

                msg = getString(R.string.device_connecting);
            }
            else if(wisePadConntection == WisePadConnection.WisePadConnection_NOT_CONNECTED){

                msg = getString(R.string.device_not_connected);
            }
            else if(wisePadConntection == WisePadConnection.WisePadConnection_DIS_CONNECTED){

                msg = getString(R.string.device_disconnected);
            }

            //mTXTStatus.setText(msg);

        }

        @Override
        public void onRequestWisePadCheckCardProcess(CheckCardProcess checkCardProcess, ArrayList<String> dataList) {

        }

        @Override
        public void onReturnWisePadOfflineCardTransactionResults(CheckCardProcessResults checkCardResults, Hashtable<String, Object> paramHashtable) {

        }

        @Override
        public void onError(Error error, String errorMsg) {

            if (ApplicationData.IS_DEBUGGING_ON)
                Logs.v(ApplicationData.packName,  "error " + error, true, true);

        }

        @Override
        public void onRequestDisplayWispadStatusInfo(DisplayText msg) {

        }

        @Override
        public void onReturnDeviceInfo(Hashtable<String, String> paramHashtable) {

        }

        @Override
        public void onReturnFunctionKeyResult(FunctionKeyResult keyType) {

        }

        @Override
        public void onReturnWispadNetwrokSettingInfo(WispadNetwrokSetting wispadNetwrokSetting, boolean status, Hashtable<String, Object> netwrokSettingInfo) {

        }

        @Override
        public void onReturnNfcDetectCardResult(NfcDetectCardResult nfcDetectCardResult, Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onReturnNfcDataExchangeResult(boolean isSuccess, Hashtable<String, String> data) {

        }

        @Override
        public void onPrintResult(PrintResult printResult) {


            if (ApplicationData.IS_DEBUGGING_ON)
                Logs.v(ApplicationData.packName,  "printResult " + printResult, true, true);

            String msg = getString(R.string.unknown);

            if(printResult == PrintResult.PRINT_SUCCESS)
            {
                msg = getString(R.string.printer_command_success);

            }
            else if(printResult == PrintResult.PRINT_NO_PAPER_OR_COVER_OPENED)
            {
                msg = getString(R.string.no_paper);

            }
            else if(printResult == PrintResult.PRINT_WRONG_PRINTER_COMMAND)
            {
                msg = getString(R.string.printer_command_not_available);

            }
            else if(printResult == PrintResult.PRINT_OVERHEAT)
            {
                msg = getString(R.string.printer_overheat);

            }
            else if(printResult == PrintResult.PRINT_PRINTER_ERROR)
            {
                msg = getString(R.string.printer_command_not_available);

            }

            //mTXTStatus.setText(msg);


        }
    }

    public void print_printbill(Dialog dialog) {

        fmt = new Formatter();

        db =   openOrCreateDatabase("mydb_Appdata", Context.MODE_PRIVATE, null);
        db1 =   openOrCreateDatabase("mydb_Salesdata", Context.MODE_PRIVATE, null);

        Cursor connnet = db.rawQuery("SELECT * FROM IPConn", null);
        if (connnet.moveToFirst()) {
            ipnamegets = connnet.getString(1);
            portgets = connnet.getString(2);
            statusnets = connnet.getString(3);
        }

        Cursor connnet_counter = db.rawQuery("SELECT * FROM IPConn_Counter", null);
        if (connnet_counter.moveToFirst()) {
            ipnamegets_counter = connnet_counter.getString(1);
            portgets_counter = connnet_counter.getString(2);
            statusnets_counter = connnet_counter.getString(3);
        }

        Cursor connusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (connusb.moveToFirst()) {
            addgets = connusb.getString(1);
            namegets = connusb.getString(2);
            statussusbs = connusb.getString(3);
        }

        /////////////Toast.makeText(CancelActivity.this, "printbillonly one ", Toast.LENGTH_SHORT).show();
        byte[] setHT34M = {0x1b,0x44,0x04,0x11,0x19,0x00};
        byte[] dotfeed = {0x1b,0x4a,0x10};
        byte[] HTRight = {0x1b,0x61, 0x02,0x09};
        byte[] HT = {0x09};
        byte[] HT1 = {0x09};
        byte[] LF = {0x0d,0x0a};

        byte[] left = {0x1b,0x61, 0x00};
        byte[] cen = {0x1b,0x61, 0x01};
        byte[] right = {0x1b,0x61, 0x02};
        byte[] bold = {0x1B,0x21,0x10};
        byte[] normal = {0x1d, 0x21, 0x00};
        byte[] horiz1 = {0x1b,0x44,0x19, 0x19, 0x00};
        byte[] horiz = {0x1b,0x44, 0x04, 0x06, 0x04, 0x04, 0x0A, 0x00, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x09, 0x33, 0x09, 0x34, 0x0d,0x0a};

        byte[] un = {0x1b, 0x2d, 0x02};
        byte[] un1 = {0x1b, 0x2d, 0x00};
        String str_line = "";

        Cursor print_ty = db.rawQuery("SELECT * FROM Printer_type", null);
        if (print_ty.moveToFirst()){
            str_print_ty = print_ty.getString(1);
        }

        Cursor cc=db.rawQuery("SELECT * FROM Printerreceiptsize", null);

        if(cc.moveToFirst()){
            cc.moveToFirst();
            do{
                NAME = cc.getString(1);
                if (NAME.equals("3 inch")) {
                    if (str_print_ty.toString().equals("Generic") || str_print_ty.toString().equals("Epson/others")) {
                        setHT32 = new byte[]{0x1b, 0x44, 0x29, 0x00};//2 tabs 3"
                        setHT321 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x25, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x20, 0x29, 0x00};//4 tabs 3"
                        nPaperWidth = 576;
                        charlength = 23;
                        charlength1 = 46;
                        charlength2 = 69;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "------------------------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "------------------------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("POS")) {
                            setHT32 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT321 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x10, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x13, 0x27, 0x00};//3 tabs 3"
                            setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x10, 0x15, 0x00};//4 tabs 3"
                            nPaperWidth = 576;
                            charlength = 23;
                            charlength1 = 46;
                            charlength2 = 69;
                            quanlentha = 4;
                            HT1 = new byte[]{0x2F};
                            str_line = "------------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------------".getBytes(), LF

                            };
                        }
                    }
                }
                else {
                    if (str_print_ty.toString().equals("Generic")) {
//                        Toast.makeText(CancelActivity.this, "phi", Toast.LENGTH_SHORT).show();
                        setHT32 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 2"
                        setHT321 = new byte[]{0x1b, 0x44, 0x13, 0x00};//2 tabs 3"
                        setHT3212 = new byte[]{0x1b, 0x44, 0x15, 0x00};//2 tabs 3"
                        setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                        setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x12, 0x19, 0x00};//4 tabs 2"
                        nPaperWidth = 384;
                        charlength = 10;
                        charlength1 = 20;
                        charlength2 = 30;
                        quanlentha = 5;
                        HT1 = new byte[]{0x09};
                        str_line = "--------------------------------";
                        allbufline = new byte[][]{
                                left, un1, "--------------------------------".getBytes(), LF

                        };
                    }else {
                        if (str_print_ty.toString().equals("Epson/others")) {
//                        Toast.makeText(CancelActivity.this, "epson", Toast.LENGTH_SHORT).show();
                            setHT32 = new byte[]{0x1b, 0x44, 0x23, 0x00};//2 tabs 2"
                            setHT321 = new byte[]{0x1b, 0x44, 0x19, 0x00};//2 tabs 3"
                            setHT3212 = new byte[]{0x1b, 0x44, 0x21, 0x00};//2 tabs 3"
                            setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
                            setHT34 = new byte[]{0x1b, 0x44, 0x06, 0x19, 0x21, 0x00};//4 tabs 2"
                            nPaperWidth = 384;
                            charlength = 16;
                            charlength1 = 32;
                            charlength2 = 48;
                            quanlentha = 5;
                            HT1 = new byte[]{0x09};
                            str_line = "------------------------------------------";
                            allbufline = new byte[][]{
                                    left, un1, "------------------------------------------".getBytes(), LF
                            };
                        }else {
                            if (str_print_ty.toString().equals("POS")) {
                                setHT32 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT321 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 2"
                                setHT3212 = new byte[]{0x1b, 0x44, 0x09, 0x00};//2 tabs 3"
                                setHT33 = new byte[]{0x1b, 0x44, 0x09, 0x19, 0x00};//3 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x03, 0x12, 0x21, 0x00};//4 tabs 2"
//                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x05, 0x08, 0x00};//4 tabs 2"
                                setHT34 = new byte[]{0x1b, 0x44, 0x02, 0x08, 0x09, 0x00};//4 tabs 2"
                                nPaperWidth = 384;
                                charlength = 11;
                                charlength1 = 22;
                                charlength2 = 33;
                                quanlentha = 3;
                                HT1 = new byte[]{0x2F};
                                str_line = "--------------------------------";
                                allbufline = new byte[][]{
                                        left, un1, "--------------------------------".getBytes(), LF
                                };
                            }
                        }
                    }
                }
            }while(cc.moveToNext());
        }

        String dd = "";
        TextView qazcvb = new TextView(CancelActivity.this);
        Cursor cvonnusb = db.rawQuery("SELECT * FROM BTConn", null);
        if (cvonnusb.moveToFirst()) {
            addgets = cvonnusb.getString(1);
            namegets = cvonnusb.getString(2);
            statussusbs = cvonnusb.getString(3);
            dd = cvonnusb.getString(4);
        }
        qazcvb.setText(dd);
        imageViewPicture = (ImageView) dialog.findViewById(R.id.imageViewPicture);
        mView = dialog.findViewById(R.id.f_viewreturns);


        ImageView imageButton = (ImageView) mView.findViewById(R.id.viewImagee);
        if (NAME.equals("3 inch")) {
//            Toast.makeText(CancelActivity.this, "3 inch", Toast.LENGTH_SHORT).show();
            imageViewPicture.getLayoutParams().height = 94;
            imageViewPicture.getLayoutParams().width = 576;
            imageButton.getLayoutParams().height = 94;
            imageButton.getLayoutParams().width = 576;
        } else {
//            Toast.makeText(CancelActivity.this, "2 inch", Toast.LENGTH_SHORT).show();
            imageViewPicture.getLayoutParams().height = 94;
            imageViewPicture.getLayoutParams().width = 384;
            imageButton.getLayoutParams().height = 94;
            imageButton.getLayoutParams().width = 384;
        }
        //LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(116, 95);
        //imageButton.setLayoutParams(layoutParams);
        //imageButton.setLayoutParams(116, 95);
        int image_there = 0;
        String[] col = {"companylogo"};
        Cursor c = db.query("Logo", col, null, null, null, null, null);
        if (c.moveToFirst()) {
            do {
                byte[] img = c.getBlob(c.getColumnIndex("companylogo"));
                final Bitmap b1 = BitmapFactory.decodeByteArray(img, 0, img.length);

                imageButton.setImageBitmap(b1);


                mView.setDrawingCacheEnabled(true);
                mView.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                        View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
                mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
                mView.buildDrawingCache(true);

                Bitmap b = Bitmap.createBitmap(mView.getDrawingCache());
                //mView.setDrawingCacheEnabled(false);
                ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                b.compress(Bitmap.CompressFormat.JPEG, 100, bytes);

                imageViewPicture.setImageBitmap(b);

                Bitmap mBitmap = ((BitmapDrawable) imageViewPicture.getDrawable())
                        .getBitmap();

                image_there = 1;
                command = Utils.decodeBitmap(mBitmap);
                //}
            } while (c.moveToNext());
        } else {
            imageButton.setVisibility(View.GONE);
        }

        Cursor getcom = db.rawQuery("SELECT * FROM Companydetailss", null);
        if (getcom.moveToFirst()) {
            do {
                strcompanyname = getcom.getString(1);
                straddress1 = getcom.getString(14);
                straddress2 = getcom.getString(17);
                straddress3 = getcom.getString(18);
                strphone = getcom.getString(2);
                stremailid = getcom.getString(15);
                strwebsite = getcom.getString(16);
                strtaxone = getcom.getString(10);
                strbillone = getcom.getString(12);
            } while (getcom.moveToNext());
        }

        tvkot.setText(strcompanyname);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(strcompanyname+"\n");
        }

/////////
        tvkot.setText(straddress1);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(straddress1+"\n");
        }


        tvkot.setText(straddress2);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(straddress2+"\n");
        }


        tvkot.setText(strphone);
        String pp = "Ph. " + strphone;
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(strphone+"\n");
        }


        tvkot.setText(stremailid);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(stremailid+"\n");
        }


        tvkot.setText(strwebsite);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(strwebsite+"\n");
        }


        tvkot.setText(strtaxone);
        if (tvkot.getText().toString().equals("")) {

        } else {
            fmt.format(strtaxone+"\n");
        }

        fmt.format("------------------------------------------------", " ");


        Cursor cursor10 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (cursor10.moveToFirst()) {
            billtypea = cursor10.getString(5);
            paymmethoda = cursor10.getString(6);
        }
//            if (billtypea.toString().equals("  Cash")) {
//                billtypeaa = "Cash";
//            } else {
//                billtypeaa = "Card";
//            }

        if (billtypea.toString().equals("  Cash")) {
            billtypeaa = "Cash"; //0
        }
        if (billtypea.toString().equals("  Card")) {
            billtypeaa = "Card"; //0
        }
        if (billtypea.toString().equals("  Paytm")) {
            billtypeaa = "Paytm"; //0
        }
        if (billtypea.toString().equals("  Mobikwik")) {
            billtypeaa = "Mobikwik"; //0
        }
        if (billtypea.toString().equals("  Freecharge")) {
            billtypeaa = "Freecharge"; //0
        }
        if (billtypea.toString().equals("  Pay Later")) {
            billtypeaa = "Pay Later"; //0
        }
        if (billtypea.toString().equals("  Cheque")) {
            billtypeaa = "Cheque"; //0
        }
        if (billtypea.toString().equals("  Sodexo")) {
            billtypeaa = "Sodexo"; //0
        }
        if (billtypea.toString().equals("  Zeta")) {
            billtypeaa = "Zeta"; //0
        }
        if (billtypea.toString().equals("  Ticket")) {
            billtypeaa = "Ticket"; //0
        }
        billtypeaa = billtypea.toString().replace(" ", "");

        fmt.format("%-34s %13s\n", "Bill no." + billnoget, billtypeaa);


        if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
            paymmethodaa = "Dine-in";
            //billtypee.setText("Dine-in");
        } else {
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                paymmethodaa = "Takeaway";
                //billtypee.setText("Takeaway");
            } else {
                paymmethodaa = "Home delivery";
                //billtypee.setText("Home delivery");
            }
        }

        Cursor date = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (date.moveToFirst()) {
            datee = date.getString(25);
            timee = date.getString(12);
        } else {
            Cursor date_cancel = db1.rawQuery("Select * from All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (date_cancel.moveToFirst()) {
                datee = date_cancel.getString(22);
                timee = date_cancel.getString(12);
            }
        }

        fmt.format("%-34s %13s\n", paymmethodaa, datee);

        Cursor cursor9 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor9.moveToFirst()) {
            tableida = cursor9.getString(15);
        }
//        else {
//            Cursor cursor9_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '"+billnoget+"'", null);
//            if (cursor9_cancel.moveToFirst()) {
//                tableida = cursor9_cancel.getString(15);
//            }
//        }

        Cursor vbnm = db.rawQuery("SELECT * FROM asd1 WHERE _id = '" + tableida + "'", null);
        if (vbnm.moveToFirst()) {
            assa1 = vbnm.getString(1);
            assa2 = vbnm.getString(2);
        }
        TextView cx = new TextView(CancelActivity.this);
        cx.setText(assa1);
        if (cx.getText().toString().equals("")) {
            tableidaa = "Tab" + assa2;
            allbuftime = new byte[][]{
                    setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
            };
        } else {
            tableidaa = "Tab" + assa1;
            allbuftime = new byte[][]{
                    setHT321, left, tableidaa.getBytes(), HT, "  ".getBytes(), timee.getBytes(), LF
            };
        }
        fmt.format("%-34s %13s\n", tableidaa, timee);

        fmt.format("------------------------------------------------", " ");

        Cursor caddress = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress.moveToFirst()) {
            String nam = caddress.getString(1);
            String addr = caddress.getString(4);
            String phon = caddress.getString(2);
            String emai = caddress.getString(3);

            if (nam.toString().length() > 0 || addr.toString().length() > 0 ||
                    phon.toString().length() > 0 || emai.toString().length() > 0) {
                fmt.format("Customer:"+"\n");
            } else {

            }

            if (nam.toString().length() > 0) {
                fmt.format(nam+"\n");
            } else {

            }

            if (addr.toString().length() > 0) {
                fmt.format(addr+"\n");
            } else {

            }

            if (phon.toString().length() > 0) {
                String cust_ph = "Ph. " + phon;
                fmt.format(cust_ph+"\n");
            } else {

            }

            if (emai.toString().length() > 0) {
                fmt.format(emai+"\n");
            } else {

            }

            fmt.format("------------------------------------------------", " ");
        }

        fmt.format("%-5s %-25s %7s %7s\n", "Qty", "Item", "Price", "Amount");
        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

        fmt.format("------------------------------------------------", " ");

        Cursor ccursorr = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorr.moveToFirst()) {

            do {

                String name = ccursorr.getString(1);
                String value = ccursorr.getString(2);
                String pq = ccursorr.getString(5);
                String itna = ccursorr.getString(2);
                String pricee = ccursorr.getString(3);
                String tototot = ccursorr.getString(4);

                final String newid = ccursorr.getString(20);

                final String newids = ccursorr.getString(0);

                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);
                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'AND parent = '" + name + "' AND parentid = '" + newid + "'", null);
                        if (cursor4.moveToFirst()) {
                            sub2a = cursor4.getFloat(0);
                            String sub2a1 = String.valueOf(sub2a);
                            ss = Float.parseFloat(sub2a1) + Float.parseFloat(tototot);
                            ss1 = String.format("%.1f", ss);
                        }

                        String[][] items_array = {{value, name, pricee, ss1}};

                        for (int i = 0; i < items_array.length; i++) {
                            List<String> item_split_qty = new ArrayList<>();
                            List<String> item_split_item = new ArrayList<>();
                            List<String> item_split_price = new ArrayList<>();
                            List<String> item_split_amount = new ArrayList<>();

                            for (int j = 0; j < items_array[i][0].length(); j += 5) {
                                item_split_qty.add(items_array[i][0].substring(j, Math.min(items_array[i][0].length(), j + 5)));
                            }
                            for (int j = 0; j < items_array[i][1].length(); j += 25) {
                                item_split_item.add(items_array[i][1].substring(j, Math.min(items_array[i][1].length(), j + 25)));
                            }
                            for (int j = 0; j < items_array[i][2].length(); j += 7) {
                                item_split_price.add(items_array[i][2].substring(j, Math.min(items_array[i][2].length(), j + 7)));
                            }
                            for (int j = 0; j < items_array[i][3].length(); j += 7) {
                                item_split_amount.add(items_array[i][3].substring(j, Math.min(items_array[i][3].length(), j + 7)));
                            }

                            Log.d("DATA_QTY", String.valueOf(item_split_qty));
                            Log.d("DATA_ITEM", String.valueOf(item_split_item));
                            Log.d("DATA_PRICE", String.valueOf(item_split_price));
                            Log.d("DATA_Amount", String.valueOf(item_split_amount));

                            List<Integer> maxListValue = new ArrayList<>();
                            maxListValue.add(item_split_qty.size());
                            maxListValue.add(item_split_item.size());
                            maxListValue.add(item_split_price.size());
                            maxListValue.add(item_split_amount.size());

                            int maxValue = maxListValue.get(0);

                            for (int x = 1; x < maxListValue.size(); x++) {
                                if (maxValue < maxListValue.get(x)) {
                                    maxValue = maxListValue.get(x);
                                }
                            }

                            Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                            for (int k = 0; k < maxValue; k++) {

                                String qty,item,price_new,amount = "";

                                boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                boolean item_check = (k >= 0) && (k < item_split_item.size());
                                boolean price_check = (k >= 0) && (k < item_split_price.size());
                                boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                if(qty_check == true){
                                    qty = item_split_qty.get(k);
                                }
                                else {
                                    qty = " ";
                                }
                                if(item_check == true){
                                    item = item_split_item.get(k);
                                }
                                else {
                                    item = " ";
                                }
                                if(price_check == true){
                                    price_new = item_split_price.get(k);
                                }
                                else {
                                    price_new = " ";
                                }
                                if(amount_check == true){
                                    amount = item_split_amount.get(k);
                                }
                                else {
                                    amount = " ";
                                }

                                fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                            }
                            item_split_qty.removeAll(item_split_qty);
                            item_split_item.removeAll(item_split_item);
                            item_split_price.removeAll(item_split_price);
                            item_split_amount.removeAll(item_split_amount);

                        }

                        Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor.moveToFirst()) {
                            String hsn = ccursor.getString(34);

                            TextView hsn_hsn = new TextView(CancelActivity.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {
                                fmt.format("HSN "+hsn, " ");
                            }
                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            String[][] items_array1 = {{"", ">", modiname, modpricestr}};

                            for (int i = 0; i < items_array1.length; i++) {
                                List<String> item_split_qty = new ArrayList<>();
                                List<String> item_split_item = new ArrayList<>();
                                List<String> item_split_price = new ArrayList<>();
                                List<String> item_split_amount = new ArrayList<>();

                                for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                    item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                }
                                for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                    item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                }
                                for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                    item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                }
                                for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                    item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                }

                                Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                List<Integer> maxListValue = new ArrayList<>();
                                maxListValue.add(item_split_qty.size());
                                maxListValue.add(item_split_item.size());
                                maxListValue.add(item_split_price.size());
                                maxListValue.add(item_split_amount.size());

                                int maxValue = maxListValue.get(0);

                                for (int x = 1; x < maxListValue.size(); x++) {
                                    if (maxValue < maxListValue.get(x)) {
                                        maxValue = maxListValue.get(x);
                                    }
                                }

                                Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                for (int k = 0; k < maxValue; k++) {

                                    String qty,item,price_new,amount = "";

                                    boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                    boolean item_check = (k >= 0) && (k < item_split_item.size());
                                    boolean price_check = (k >= 0) && (k < item_split_price.size());
                                    boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                    if(qty_check == true){
                                        qty = item_split_qty.get(k);
                                    }
                                    else {
                                        qty = " ";
                                    }
                                    if(item_check == true){
                                        item = item_split_item.get(k);
                                    }
                                    else {
                                        item = " ";
                                    }
                                    if(price_check == true){
                                        price_new = item_split_price.get(k);
                                    }
                                    else {
                                        price_new = " ";
                                    }
                                    if(amount_check == true){
                                        amount = item_split_amount.get(k);
                                    }
                                    else {
                                        amount = " ";
                                    }

                                    fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                }
                                item_split_qty.removeAll(item_split_qty);
                                item_split_item.removeAll(item_split_item);
                                item_split_price.removeAll(item_split_price);
                                item_split_amount.removeAll(item_split_amount);

                            }

                            Cursor cccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (cccursor.moveToFirst()) {
                                String hsn = cccursor.getString(34);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    fmt.format("HSN "+hsn, " ");
                                }
                            }

                            final TableRow tableRow11 = new TableRow(CancelActivity.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                            final TextView tvv = new TextView(CancelActivity.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(CancelActivity.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);

                            row.removeView(tv8);


                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(ss));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    String[][] items_array1 = {{"", "", "", "("+"-"+total_disc_print_q+")"}};

                                    for (int i = 0; i < items_array1.length; i++) {
                                        List<String> item_split_qty = new ArrayList<>();
                                        List<String> item_split_item = new ArrayList<>();
                                        List<String> item_split_price = new ArrayList<>();
                                        List<String> item_split_amount = new ArrayList<>();

                                        for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                            item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                        }
                                        for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                            item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                        }
                                        for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                            item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                        }
                                        for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                            item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                        }

                                        Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                        Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                        Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                        Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                        List<Integer> maxListValue = new ArrayList<>();
                                        maxListValue.add(item_split_qty.size());
                                        maxListValue.add(item_split_item.size());
                                        maxListValue.add(item_split_price.size());
                                        maxListValue.add(item_split_amount.size());

                                        int maxValue = maxListValue.get(0);

                                        for (int x = 1; x < maxListValue.size(); x++) {
                                            if (maxValue < maxListValue.get(x)) {
                                                maxValue = maxListValue.get(x);
                                            }
                                        }

                                        Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                        for (int k = 0; k < maxValue; k++) {

                                            String qty,item,price_new,amount = "";

                                            boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                            boolean item_check = (k >= 0) && (k < item_split_item.size());
                                            boolean price_check = (k >= 0) && (k < item_split_price.size());
                                            boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                            if(qty_check == true){
                                                qty = item_split_qty.get(k);
                                            }
                                            else {
                                                qty = " ";
                                            }
                                            if(item_check == true){
                                                item = item_split_item.get(k);
                                            }
                                            else {
                                                item = " ";
                                            }
                                            if(price_check == true){
                                                price_new = item_split_price.get(k);
                                            }
                                            else {
                                                price_new = " ";
                                            }
                                            if(amount_check == true){
                                                amount = item_split_amount.get(k);
                                            }
                                            else {
                                                amount = " ";
                                            }

                                            fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                        }
                                        item_split_qty.removeAll(item_split_qty);
                                        item_split_item.removeAll(item_split_item);
                                        item_split_price.removeAll(item_split_price);
                                        item_split_amount.removeAll(item_split_amount);

                                    }
                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);

                        String[][] items_array = {{value, name, pricee, tototott}};

                        for (int i = 0; i < items_array.length; i++) {
                            List<String> item_split_qty = new ArrayList<>();
                            List<String> item_split_item = new ArrayList<>();
                            List<String> item_split_price = new ArrayList<>();
                            List<String> item_split_amount = new ArrayList<>();

                            for (int j = 0; j < items_array[i][0].length(); j += 5) {
                                item_split_qty.add(items_array[i][0].substring(j, Math.min(items_array[i][0].length(), j + 5)));
                            }
                            for (int j = 0; j < items_array[i][1].length(); j += 25) {
                                item_split_item.add(items_array[i][1].substring(j, Math.min(items_array[i][1].length(), j + 25)));
                            }
                            for (int j = 0; j < items_array[i][2].length(); j += 7) {
                                item_split_price.add(items_array[i][2].substring(j, Math.min(items_array[i][2].length(), j + 7)));
                            }
                            for (int j = 0; j < items_array[i][3].length(); j += 7) {
                                item_split_amount.add(items_array[i][3].substring(j, Math.min(items_array[i][3].length(), j + 7)));
                            }

                            Log.d("DATA_QTY", String.valueOf(item_split_qty));
                            Log.d("DATA_ITEM", String.valueOf(item_split_item));
                            Log.d("DATA_PRICE", String.valueOf(item_split_price));
                            Log.d("DATA_Amount", String.valueOf(item_split_amount));

                            List<Integer> maxListValue = new ArrayList<>();
                            maxListValue.add(item_split_qty.size());
                            maxListValue.add(item_split_item.size());
                            maxListValue.add(item_split_price.size());
                            maxListValue.add(item_split_amount.size());

                            int maxValue = maxListValue.get(0);

                            for (int x = 1; x < maxListValue.size(); x++) {
                                if (maxValue < maxListValue.get(x)) {
                                    maxValue = maxListValue.get(x);
                                }
                            }

                            Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                            for (int k = 0; k < maxValue; k++) {

                                String qty,item,price_new,amount = "";

                                boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                boolean item_check = (k >= 0) && (k < item_split_item.size());
                                boolean price_check = (k >= 0) && (k < item_split_price.size());
                                boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                if(qty_check == true){
                                    qty = item_split_qty.get(k);
                                }
                                else {
                                    qty = " ";
                                }
                                if(item_check == true){
                                    item = item_split_item.get(k);
                                }
                                else {
                                    item = " ";
                                }
                                if(price_check == true){
                                    price_new = item_split_price.get(k);
                                }
                                else {
                                    price_new = " ";
                                }
                                if(amount_check == true){
                                    amount = item_split_amount.get(k);
                                }
                                else {
                                    amount = " ";
                                }

                                fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                            }
                            item_split_qty.removeAll(item_split_qty);
                            item_split_item.removeAll(item_split_item);
                            item_split_price.removeAll(item_split_price);
                            item_split_amount.removeAll(item_split_amount);

                        }

                        Cursor ccursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor.moveToFirst()) {
                            String hsn = ccursor.getString(34);

                            TextView hsn_hsn = new TextView(CancelActivity.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {
                                fmt.format("%-48s\n", "HSN " + hsn);
                            }
                        }

                        tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(30);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(31);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

//                                    total_disc_print_q = String.valueOf(vtq);

                                    String[][] items_array1 = {{"", "", "", "("+"-"+total_disc_print_q+")"}};

                                    for (int i = 0; i < items_array1.length; i++) {
                                        List<String> item_split_qty = new ArrayList<>();
                                        List<String> item_split_item = new ArrayList<>();
                                        List<String> item_split_price = new ArrayList<>();
                                        List<String> item_split_amount = new ArrayList<>();

                                        for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                            item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                        }
                                        for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                            item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                        }
                                        for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                            item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                        }
                                        for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                            item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                        }

                                        Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                        Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                        Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                        Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                        List<Integer> maxListValue = new ArrayList<>();
                                        maxListValue.add(item_split_qty.size());
                                        maxListValue.add(item_split_item.size());
                                        maxListValue.add(item_split_price.size());
                                        maxListValue.add(item_split_amount.size());

                                        int maxValue = maxListValue.get(0);

                                        for (int x = 1; x < maxListValue.size(); x++) {
                                            if (maxValue < maxListValue.get(x)) {
                                                maxValue = maxListValue.get(x);
                                            }
                                        }

                                        Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                        for (int k = 0; k < maxValue; k++) {

                                            String qty,item,price_new,amount = "";

                                            boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                            boolean item_check = (k >= 0) && (k < item_split_item.size());
                                            boolean price_check = (k >= 0) && (k < item_split_price.size());
                                            boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                            if(qty_check == true){
                                                qty = item_split_qty.get(k);
                                            }
                                            else {
                                                qty = " ";
                                            }
                                            if(item_check == true){
                                                item = item_split_item.get(k);
                                            }
                                            else {
                                                item = " ";
                                            }
                                            if(price_check == true){
                                                price_new = item_split_price.get(k);
                                            }
                                            else {
                                                price_new = " ";
                                            }
                                            if(amount_check == true){
                                                amount = item_split_amount.get(k);
                                            }
                                            else {
                                                amount = " ";
                                            }

                                            fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                        }
                                        item_split_qty.removeAll(item_split_qty);
                                        item_split_item.removeAll(item_split_item);
                                        item_split_price.removeAll(item_split_price);
                                        item_split_amount.removeAll(item_split_amount);

                                    }
                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }
                }


            } while (ccursorr.moveToNext());
        }

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
        fmt.format("Returns/Cancel:"+"\n", " ");


        Cursor ccursorreturn = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursorreturn.moveToFirst()) {

            do {

                String name = ccursorreturn.getString(1);
                String value = ccursorreturn.getString(2);
                String pq = ccursorreturn.getString(5);
                String itna = ccursorreturn.getString(2);
                String pricee = ccursorreturn.getString(3);
                String tototot = ccursorreturn.getString(4);

                final String newtt = ccursorreturn.getString(4);

                final String newid = ccursorreturn.getString(19);

                final String newids = ccursorreturn.getString(0);
                int padding_in_px;

                int padding_in_dp = 30;  // 34 dps
                final float scale1 = getResources().getDisplayMetrics().density;
                padding_in_px = (int) (padding_in_dp * scale1 + 0.5f);


                if (pq.equals("Item")) {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                    final TableRow row1 = new TableRow(CancelActivity.this);
                    row1.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT));

                    final TableRow row2 = new TableRow(CancelActivity.this);
                    row2.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));

                    //TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams();
                    final TableLayout tableLayout1 = new TableLayout(CancelActivity.this);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
                    //tv.setTextSize(18);
                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv.setText(value);
                    row.addView(tv);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setGravity(Gravity.CENTER_VERTICAL);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv1.setTextSize(15);
                    //tv.setPadding(0, 0, 0, 0);
                    //text = ccursorr.getString(1);
                    tv1.setText(name);
                    String value1 = tv1.getText().toString();
                    row.addView(tv1);

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 4.5f);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.append(value + "% " + name);
                    tv2.setText(pricee);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    //tv2.setTextColor(R.color.black);
                    row.addView(tv2);

//                                            TextView textView1 = new TextView(CancelActivity.this);
//                                            //lp1 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT, 1.5f);
//                                            textView1.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
//                                                    android.widget.TableRow.LayoutParams.WRAP_CONTENT, 1.5f));
//                                            //tv.setBackgroundResource(R.drawable.cell_shape);
//                                            textView1.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
//                                            textView1.setText(insert1_cc);
//                                            //textView1.setBackgroundResource(R.drawable.rs_border);
//                                            textView1.setPadding(0, 0, 5, 0);
//                                            //textView1.setTextColor(R.color.black);
//                                            textView1.setTextSize(14);
//                                            row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(0, padding_in_px, 1.2f));
                    //tv3.setPadding(5, 0, 0, 0);
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tv2.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv2.setPadding(0, 0, 1, 0);
                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv3.setText(tototot);
                    //tv3.setTextColor(R.color.black);
                    //row.addView(tv3);


                    String value2 = tv3.getText().toString();

                    //tableLayoutt.addView(row);

                    Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);

                    if (modcursor.moveToFirst()) {

                        Cursor modt = db1.rawQuery("Select SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        if (modt.moveToFirst()) {
                            do {
                                //row.removeView(tv3);
                                float aq = modt.getFloat(0);
                                String aqq = String.valueOf(aq);
                                aqq1 = Float.parseFloat(aqq) + Float.parseFloat(newtt);
                                aqq2 = String.format("%.1f", aqq1);
                            } while (modt.moveToNext());
                        }

                        String[][] items_array = {{value, name, pricee, aqq2}};

                        for (int i = 0; i < items_array.length; i++) {
                            List<String> item_split_qty = new ArrayList<>();
                            List<String> item_split_item = new ArrayList<>();
                            List<String> item_split_price = new ArrayList<>();
                            List<String> item_split_amount = new ArrayList<>();

                            for (int j = 0; j < items_array[i][0].length(); j += 5) {
                                item_split_qty.add(items_array[i][0].substring(j, Math.min(items_array[i][0].length(), j + 5)));
                            }
                            for (int j = 0; j < items_array[i][1].length(); j += 25) {
                                item_split_item.add(items_array[i][1].substring(j, Math.min(items_array[i][1].length(), j + 25)));
                            }
                            for (int j = 0; j < items_array[i][2].length(); j += 7) {
                                item_split_price.add(items_array[i][2].substring(j, Math.min(items_array[i][2].length(), j + 7)));
                            }
                            for (int j = 0; j < items_array[i][3].length(); j += 7) {
                                item_split_amount.add(items_array[i][3].substring(j, Math.min(items_array[i][3].length(), j + 7)));
                            }

                            Log.d("DATA_QTY", String.valueOf(item_split_qty));
                            Log.d("DATA_ITEM", String.valueOf(item_split_item));
                            Log.d("DATA_PRICE", String.valueOf(item_split_price));
                            Log.d("DATA_Amount", String.valueOf(item_split_amount));

                            List<Integer> maxListValue = new ArrayList<>();
                            maxListValue.add(item_split_qty.size());
                            maxListValue.add(item_split_item.size());
                            maxListValue.add(item_split_price.size());
                            maxListValue.add(item_split_amount.size());

                            int maxValue = maxListValue.get(0);

                            for (int x = 1; x < maxListValue.size(); x++) {
                                if (maxValue < maxListValue.get(x)) {
                                    maxValue = maxListValue.get(x);
                                }
                            }

                            Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                            for (int k = 0; k < maxValue; k++) {

                                String qty,item,price_new,amount = "";

                                boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                boolean item_check = (k >= 0) && (k < item_split_item.size());
                                boolean price_check = (k >= 0) && (k < item_split_price.size());
                                boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                if(qty_check == true){
                                    qty = item_split_qty.get(k);
                                }
                                else {
                                    qty = " ";
                                }
                                if(item_check == true){
                                    item = item_split_item.get(k);
                                }
                                else {
                                    item = " ";
                                }
                                if(price_check == true){
                                    price_new = item_split_price.get(k);
                                }
                                else {
                                    price_new = " ";
                                }
                                if(amount_check == true){
                                    amount = item_split_amount.get(k);
                                }
                                else {
                                    amount = " ";
                                }

                                fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                            }
                            item_split_qty.removeAll(item_split_qty);
                            item_split_item.removeAll(item_split_item);
                            item_split_price.removeAll(item_split_price);
                            item_split_amount.removeAll(item_split_amount);

                        }

                        Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor.moveToFirst()) {
                            String hsn = ccursor.getString(38);

                            TextView hsn_hsn = new TextView(CancelActivity.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {
                                fmt.format("HSN "+hsn, " ");
                            }
                        }

                        do {

                            final String modiname = modcursor.getString(1);
                            final String modiquan = modcursor.getString(2);
                            String modiprice = modcursor.getString(3);
                            String moditotal = modcursor.getString(4);
                            final String modiid = modcursor.getString(0);

                            float modprice1 = Float.parseFloat(modiprice);
                            String modpricestr = String.valueOf(modprice1);

                            String[][] items_array1 = {{"", ">", modiname, modpricestr}};

                            for (int i = 0; i < items_array1.length; i++) {
                                List<String> item_split_qty = new ArrayList<>();
                                List<String> item_split_item = new ArrayList<>();
                                List<String> item_split_price = new ArrayList<>();
                                List<String> item_split_amount = new ArrayList<>();

                                for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                    item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                }
                                for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                    item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                }
                                for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                    item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                }
                                for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                    item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                }

                                Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                List<Integer> maxListValue = new ArrayList<>();
                                maxListValue.add(item_split_qty.size());
                                maxListValue.add(item_split_item.size());
                                maxListValue.add(item_split_price.size());
                                maxListValue.add(item_split_amount.size());

                                int maxValue = maxListValue.get(0);

                                for (int x = 1; x < maxListValue.size(); x++) {
                                    if (maxValue < maxListValue.get(x)) {
                                        maxValue = maxListValue.get(x);
                                    }
                                }

                                Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                for (int k = 0; k < maxValue; k++) {

                                    String qty,item,price_new,amount = "";

                                    boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                    boolean item_check = (k >= 0) && (k < item_split_item.size());
                                    boolean price_check = (k >= 0) && (k < item_split_price.size());
                                    boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                    if(qty_check == true){
                                        qty = item_split_qty.get(k);
                                    }
                                    else {
                                        qty = " ";
                                    }
                                    if(item_check == true){
                                        item = item_split_item.get(k);
                                    }
                                    else {
                                        item = " ";
                                    }
                                    if(price_check == true){
                                        price_new = item_split_price.get(k);
                                    }
                                    else {
                                        price_new = " ";
                                    }
                                    if(amount_check == true){
                                        amount = item_split_amount.get(k);
                                    }
                                    else {
                                        amount = " ";
                                    }

                                    fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                }
                                item_split_qty.removeAll(item_split_qty);
                                item_split_item.removeAll(item_split_item);
                                item_split_price.removeAll(item_split_price);
                                item_split_amount.removeAll(item_split_amount);

                            }

                            Cursor cccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                            if (cccursor.moveToFirst()) {
                                String hsn = cccursor.getString(38);

                                TextView hsn_hsn = new TextView(CancelActivity.this);
                                hsn_hsn.setText(hsn);

                                if (hsn_hsn.getText().toString().equals("")) {
                                } else {
                                    fmt.format("HSN "+hsn, " ");
                                }
                            }

                            final TableRow tableRow11 = new TableRow(CancelActivity.this);
                            tableRow11.setLayoutParams(new TableLayout.LayoutParams(
                                    TableRow.LayoutParams.MATCH_PARENT,
                                    TableRow.LayoutParams.WRAP_CONTENT, 4.5f));


                            final TextView tvv = new TextView(CancelActivity.this);
                            // tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
                            tvv.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 0.70f));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            //tv.setGravity(Gravity.CENTER);
                            tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tvv.setText("");
                            tableRow11.addView(tvv);

                            TextView tv4 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv4.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.6f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv4.setText(modiname);
                            tv4.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv4.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv4.setGravity(Gravity.CENTER_VERTICAL);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv4);

                            TextView tv5 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv5.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.0f));
                            //tv3.setPadding(5, 0, 0, 0);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv5.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv5.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv2.setPadding(0, 0, 1, 0);
                            tv5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            tv5.setText(modiprice);
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv5);

                            TextView tv6 = new TextView(CancelActivity.this);
                            //lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
                            tv6.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setPadding(5, 0, 0, 0);
                            tv6.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv6.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv6.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv6.setText("");
                            //tv3.setBackgroundColor(getResources().getColor(R.color.six));
                            //tv3.setTextColor(R.color.black);
                            tableRow11.addView(tv6);


                            final TextView tv7 = new TextView(CancelActivity.this);
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            tv7.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            tv7.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            tv7.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            //tv3.setPadding(0,0,10,0);
                            tv7.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            String modtotal = String.valueOf(Float.parseFloat(modiquan) * Float.parseFloat(modiprice));

                            final String number = tv.getText().toString();
                            float newmul = Float.parseFloat(number);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            //tv3.setText(String.valueOf(Float.parseFloat(multiply)+Float.parseFloat(modtotal)));
                            //row.addView(tv3);


                            row.removeView(tv8);
                            tv8 = new TextView(CancelActivity.this);
                            tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                            //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                            //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                            //tv.setBackgroundResource(R.drawable.cell_shape);
                            tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                            //tv3.setPadding(0, 0, 10, 0);
                            tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                            tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                            final String numberr = tv.getText().toString();
                            float newmulr = Float.parseFloat(numberr);
                            //final float in = Float.parseFloat(cursor.getString(4));
                            String multiplyr = String.valueOf(newmulr * Float.parseFloat(pricee));
                            //newmul = Integer.parseInt(multiply);
                            tv8.setText(String.valueOf(Float.parseFloat(multiply) + Float.parseFloat(modtotal)));
                            row.addView(tv8);


                            tableLayout1.addView(tableRow11);
                        } while (modcursor.moveToNext());

                        //Cursor modcursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND parent = '" + name + "' AND parentid = '" + newid + "' ", null);
                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    String[][] items_array1 = {{"", "", "", "("+"-"+total_disc_print_q+")"}};

                                    for (int i = 0; i < items_array1.length; i++) {
                                        List<String> item_split_qty = new ArrayList<>();
                                        List<String> item_split_item = new ArrayList<>();
                                        List<String> item_split_price = new ArrayList<>();
                                        List<String> item_split_amount = new ArrayList<>();

                                        for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                            item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                        }
                                        for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                            item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                        }
                                        for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                            item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                        }
                                        for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                            item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                        }

                                        Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                        Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                        Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                        Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                        List<Integer> maxListValue = new ArrayList<>();
                                        maxListValue.add(item_split_qty.size());
                                        maxListValue.add(item_split_item.size());
                                        maxListValue.add(item_split_price.size());
                                        maxListValue.add(item_split_amount.size());

                                        int maxValue = maxListValue.get(0);

                                        for (int x = 1; x < maxListValue.size(); x++) {
                                            if (maxValue < maxListValue.get(x)) {
                                                maxValue = maxListValue.get(x);
                                            }
                                        }

                                        Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                        for (int k = 0; k < maxValue; k++) {

                                            String qty,item,price_new,amount = "";

                                            boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                            boolean item_check = (k >= 0) && (k < item_split_item.size());
                                            boolean price_check = (k >= 0) && (k < item_split_price.size());
                                            boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                            if(qty_check == true){
                                                qty = item_split_qty.get(k);
                                            }
                                            else {
                                                qty = " ";
                                            }
                                            if(item_check == true){
                                                item = item_split_item.get(k);
                                            }
                                            else {
                                                item = " ";
                                            }
                                            if(price_check == true){
                                                price_new = item_split_price.get(k);
                                            }
                                            else {
                                                price_new = " ";
                                            }
                                            if(amount_check == true){
                                                amount = item_split_amount.get(k);
                                            }
                                            else {
                                                amount = " ";
                                            }

                                            fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                        }
                                        item_split_qty.removeAll(item_split_qty);
                                        item_split_item.removeAll(item_split_item);
                                        item_split_price.removeAll(item_split_price);
                                        item_split_amount.removeAll(item_split_amount);

                                    }
                                }
                            } while (disc_cursor.moveToNext());
                        }
                    } else {

                        float fgh = Float.parseFloat(tototot);
                        String tototott = String.format("%.1f", fgh);

                        String[][] items_array = {{value, name, pricee, tototott}};

                        for (int i = 0; i < items_array.length; i++) {
                            List<String> item_split_qty = new ArrayList<>();
                            List<String> item_split_item = new ArrayList<>();
                            List<String> item_split_price = new ArrayList<>();
                            List<String> item_split_amount = new ArrayList<>();

                            for (int j = 0; j < items_array[i][0].length(); j += 5) {
                                item_split_qty.add(items_array[i][0].substring(j, Math.min(items_array[i][0].length(), j + 5)));
                            }
                            for (int j = 0; j < items_array[i][1].length(); j += 25) {
                                item_split_item.add(items_array[i][1].substring(j, Math.min(items_array[i][1].length(), j + 25)));
                            }
                            for (int j = 0; j < items_array[i][2].length(); j += 7) {
                                item_split_price.add(items_array[i][2].substring(j, Math.min(items_array[i][2].length(), j + 7)));
                            }
                            for (int j = 0; j < items_array[i][3].length(); j += 7) {
                                item_split_amount.add(items_array[i][3].substring(j, Math.min(items_array[i][3].length(), j + 7)));
                            }

                            Log.d("DATA_QTY", String.valueOf(item_split_qty));
                            Log.d("DATA_ITEM", String.valueOf(item_split_item));
                            Log.d("DATA_PRICE", String.valueOf(item_split_price));
                            Log.d("DATA_Amount", String.valueOf(item_split_amount));

                            List<Integer> maxListValue = new ArrayList<>();
                            maxListValue.add(item_split_qty.size());
                            maxListValue.add(item_split_item.size());
                            maxListValue.add(item_split_price.size());
                            maxListValue.add(item_split_amount.size());

                            int maxValue = maxListValue.get(0);

                            for (int x = 1; x < maxListValue.size(); x++) {
                                if (maxValue < maxListValue.get(x)) {
                                    maxValue = maxListValue.get(x);
                                }
                            }

                            Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                            for (int k = 0; k < maxValue; k++) {

                                String qty,item,price_new,amount = "";

                                boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                boolean item_check = (k >= 0) && (k < item_split_item.size());
                                boolean price_check = (k >= 0) && (k < item_split_price.size());
                                boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                if(qty_check == true){
                                    qty = item_split_qty.get(k);
                                }
                                else {
                                    qty = " ";
                                }
                                if(item_check == true){
                                    item = item_split_item.get(k);
                                }
                                else {
                                    item = " ";
                                }
                                if(price_check == true){
                                    price_new = item_split_price.get(k);
                                }
                                else {
                                    price_new = " ";
                                }
                                if(amount_check == true){
                                    amount = item_split_amount.get(k);
                                }
                                else {
                                    amount = " ";
                                }

                                fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                            }
                            item_split_qty.removeAll(item_split_qty);
                            item_split_item.removeAll(item_split_item);
                            item_split_price.removeAll(item_split_price);
                            item_split_amount.removeAll(item_split_amount);

                        }

                        Cursor ccursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '"+name+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                        if (ccursor.moveToFirst()) {
                            String hsn = ccursor.getString(38);

                            TextView hsn_hsn = new TextView(CancelActivity.this);
                            hsn_hsn.setText(hsn);

                            if (hsn_hsn.getText().toString().equals("")) {
                            } else {
                                fmt.format("HSN "+hsn, " ");
                            }
                        }

                        tv8 = new TextView(CancelActivity.this);
                        tv8.setLayoutParams(new TableRow.LayoutParams(0, padding_in_px, 1.2f));
                        //tv3.setLayoutParams(new TableRow.LayoutParams(90, TableRow.LayoutParams.MATCH_PARENT));
                        //tv3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tv8.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        //tv3.setPadding(0, 0, 10, 0);
                        tv8.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv8.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);

                        final String number = tv.getText().toString();
                        float newmul = Float.parseFloat(number);
                        //final float in = Float.parseFloat(cursor.getString(4));
                        String multiply = String.valueOf(newmul * Float.parseFloat(pricee));
                        //newmul = Integer.parseInt(multiply);
                        tv8.setText(String.valueOf(multiply));
                        row.addView(tv8);

                        Cursor disc_cursor = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND itemname = '" + name + "' AND _id = '" + newids + "'  ", null);
                        if (disc_cursor.moveToFirst()) {
                            do {
                                String disc_vv = disc_cursor.getString(12);
                                String disc_there = disc_cursor.getString(27);
                                if (disc_there.toString().equals("no")) {

                                } else {

                                    Cursor cursor113 = db1.rawQuery("SELECT * FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes' AND itemname = '" + name + "' AND _id = '" + newids + "'", null);
                                    if (cursor113.moveToFirst()) {
                                        float vtq = cursor113.getFloat(28);
                                        total_disc_print_q = String.valueOf(vtq);
                                    }

                                    String[][] items_array1 = {{"", "", "", "("+"-"+total_disc_print_q+")"}};

                                    for (int i = 0; i < items_array1.length; i++) {
                                        List<String> item_split_qty = new ArrayList<>();
                                        List<String> item_split_item = new ArrayList<>();
                                        List<String> item_split_price = new ArrayList<>();
                                        List<String> item_split_amount = new ArrayList<>();

                                        for (int j = 0; j < items_array1[i][0].length(); j += 5) {
                                            item_split_qty.add(items_array1[i][0].substring(j, Math.min(items_array1[i][0].length(), j + 5)));
                                        }
                                        for (int j = 0; j < items_array1[i][1].length(); j += 25) {
                                            item_split_item.add(items_array1[i][1].substring(j, Math.min(items_array1[i][1].length(), j + 25)));
                                        }
                                        for (int j = 0; j < items_array1[i][2].length(); j += 7) {
                                            item_split_price.add(items_array1[i][2].substring(j, Math.min(items_array1[i][2].length(), j + 7)));
                                        }
                                        for (int j = 0; j < items_array1[i][3].length(); j += 7) {
                                            item_split_amount.add(items_array1[i][3].substring(j, Math.min(items_array1[i][3].length(), j + 7)));
                                        }

                                        Log.d("DATA_QTY", String.valueOf(item_split_qty));
                                        Log.d("DATA_ITEM", String.valueOf(item_split_item));
                                        Log.d("DATA_PRICE", String.valueOf(item_split_price));
                                        Log.d("DATA_Amount", String.valueOf(item_split_amount));

                                        List<Integer> maxListValue = new ArrayList<>();
                                        maxListValue.add(item_split_qty.size());
                                        maxListValue.add(item_split_item.size());
                                        maxListValue.add(item_split_price.size());
                                        maxListValue.add(item_split_amount.size());

                                        int maxValue = maxListValue.get(0);

                                        for (int x = 1; x < maxListValue.size(); x++) {
                                            if (maxValue < maxListValue.get(x)) {
                                                maxValue = maxListValue.get(x);
                                            }
                                        }

                                        Log.d("DATA_MAXVALUE", String.valueOf(maxValue));

                                        for (int k = 0; k < maxValue; k++) {

                                            String qty,item,price_new,amount = "";

                                            boolean qty_check = (k >= 0) && (k < item_split_qty.size());
                                            boolean item_check = (k >= 0) && (k < item_split_item.size());
                                            boolean price_check = (k >= 0) && (k < item_split_price.size());
                                            boolean amount_check = (k >= 0) && (k < item_split_amount.size());

                                            if(qty_check == true){
                                                qty = item_split_qty.get(k);
                                            }
                                            else {
                                                qty = " ";
                                            }
                                            if(item_check == true){
                                                item = item_split_item.get(k);
                                            }
                                            else {
                                                item = " ";
                                            }
                                            if(price_check == true){
                                                price_new = item_split_price.get(k);
                                            }
                                            else {
                                                price_new = " ";
                                            }
                                            if(amount_check == true){
                                                amount = item_split_amount.get(k);
                                            }
                                            else {
                                                amount = " ";
                                            }

                                            fmt.format("%-5s %-25s %7s %7s\n",qty,item,price_new,amount);

                                        }
                                        item_split_qty.removeAll(item_split_qty);
                                        item_split_item.removeAll(item_split_item);
                                        item_split_price.removeAll(item_split_price);
                                        item_split_amount.removeAll(item_split_amount);

                                    }
                                }
                            } while (disc_cursor.moveToNext());
                        }

                    }

                }
            } while (ccursorreturn.moveToNext());


        }

        fmt.format("------------------------------------------------", " ");
////////////////////////////////////sub total

        Cursor cursor3 = db1.rawQuery("SELECT SUM(total) FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (cursor3.moveToFirst()) {
            sub1 = cursor3.getFloat(0);
        }

        Cursor cursor4 = db1.rawQuery("SELECT SUM(total) FROM All_Sales_Cancelled WHERE bill_no = '" + billnoget + "'", null);
        if (cursor4.moveToFirst()) {
            sub2 = cursor4.getFloat(0);
        }
        float sub12 = sub1 + sub2;
        String total2 = String.valueOf(sub12);
        float to = Float.parseFloat(total2);
        String tot = String.valueOf(to);

        fmt.format("%-38s %9s\n", "Sub total", tot);

/////////////////////////////////// tax
        TableLayout tableLayout1 = new TableLayout(CancelActivity.this);
        tableLayout1.removeAllViews();

        Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor.moveToFirst()) {

            do {
                String name = ccursor.getString(10);
                String value = ccursor.getString(9);
                String pq = ccursor.getString(50);
                String itna = ccursor.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor.moveToNext());
        }

        Cursor ccursor2 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor2.moveToFirst()) {

            do {
                String name = ccursor2.getString(35);
                String value = ccursor2.getString(36);
                String pq = ccursor2.getString(50);
                String itna = ccursor2.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor2.moveToNext());
        }

        Cursor ccursor3 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor3.moveToFirst()) {

            do {
                String name = ccursor3.getString(37);
                String value = ccursor3.getString(38);
                String pq = ccursor3.getString(50);
                String itna = ccursor3.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor3.moveToNext());
        }

        Cursor ccursor4 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor4.moveToFirst()) {

            do {
                String name = ccursor4.getString(39);
                String value = ccursor4.getString(40);
                String pq = ccursor4.getString(50);
                String itna = ccursor4.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor4.moveToNext());
        }

        Cursor ccursor5 = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursor5.moveToFirst()) {

            do {
                String name = ccursor5.getString(41);
                String value = ccursor5.getString(42);
                String pq = ccursor5.getString(50);
                String itna = ccursor5.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {
                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    tv3.setText(String.valueOf(tota));
                    String bnm = String.format("%.2f", tota);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursor5.moveToNext());
        }


//            ArrayList<String> groupList = new ArrayList<String>();
//
//            float sum_p = 0;
//            for (int i = 0; i < tableLayout1.getChildCount(); i++) {
//                TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
//                TextView mTextView = (TextView) mRow.getChildAt(0);
////                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();
//
//                if (groupList.contains(mTextView.getText().toString())) {
//
//                }else {
//                    sum_p = 0;
//                    for (int j = 0; j < tableLayout1.getChildCount(); j++) {
//                        TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
//                        mTextView1 = (TextView) mRow1.getChildAt(0);
//                        mTextView2 = (TextView) mRow1.getChildAt(2);
//                        if (groupList.contains(mTextView.getText().toString())) {
//                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                            }
//                        } else {
//                            if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
//                                groupList.add(mTextView.getText().toString());
//                                sum_p = sum_p+Float.parseFloat(mTextView2.getText().toString());
////                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
//                            }
//                        }
//                    }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p, Toast.LENGTH_LONG).show();
//
//                    String mod1 = mTextView.getText().toString() + "---" + String.valueOf(sum_p);
//                    allbuftaxestype1 = new byte[][]{
//                            left, normal, mod1.getBytes(), HT, LF
//                            //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                    };
//                    //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                    if (statussusbs.equals("ok")) {
//                        BluetoothPrintDriver.BT_Write(left);    //
//                        BT_Write(normal);
//                        BT_Write(mod1);
//                        BluetoothPrintDriver.BT_Write(HT);    //
//                        BluetoothPrintDriver.BT_Write(LF);    //
//                    } else {
//                        if (statusnets.equals("ok")) {
//                            wifiSocket.WIFI_Write(left);    //
//                            wifiSocket.WIFI_Write(normal);
//                            wifiSocket.WIFI_Write(mod1);
//                            wifiSocket.WIFI_Write(HT);    //
//                            wifiSocket.WIFI_Write(LF);    //
//                        }
//                    }
//
//                    String match = "@";
//                    int position = mTextView.getText().toString().indexOf(match);
//                    String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
//                    Cursor ccursor6 = db1.rawQuery("Select * from All_Sales WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
//                    if (ccursor6.moveToFirst()) {
//                        String hsn = ccursor6.getString(34);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, hsn.getBytes(), HT, LF
//                        };
//
//                        TextView hsn_hsn = new TextView(CancelActivity.this);
//                        hsn_hsn.setText(hsn);
//
//                        if (hsn_hsn.getText().toString().equals("")) {
//                        } else {
//                            if (statussusbs.equals("ok")) {
//                                BluetoothPrintDriver.BT_Write(left);    //
//                                BT_Write(normal);
//                                BT_Write("HSN "+hsn);
//                                BluetoothPrintDriver.BT_Write(HT);    //
//                                BluetoothPrintDriver.BT_Write(LF);    //
//                            } else {
//                                if (statusnets.equals("ok")) {
//                                    wifiSocket.WIFI_Write(left);    //
//                                    wifiSocket.WIFI_Write(normal);
//                                    wifiSocket.WIFI_Write("HSN "+hsn);
//                                    wifiSocket.WIFI_Write(HT);    //
//                                    wifiSocket.WIFI_Write(LF);    //
//                                }
//                            }
//                        }
//                    }
//
//                }
//            }

//            Cursor ccursor = db1.rawQuery("Select * from All_Sales where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursor.moveToFirst()) {
//
//                do {
//                    String name = ccursor.getString(10);
//                    String value = ccursor.getString(9);
//                    String pq = ccursor.getString(4);
//                    String itna = ccursor.getString(1);
//
//                    TextView name1 = new TextView(CancelActivity.this);
//                    name1.setText(name);
//                    if (name1.getText().toString().equals("None") || name1.getText().toString().equals("")) {
//
//                    } else {
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        tv3.setText(String.valueOf(tota));
//                        String bnm = String.format("%.2f", tota);
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(bnm);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                        };
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//
//                } while (ccursor.moveToNext());
//            }


        Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn.moveToFirst()) {

            do {
                String name = ccursortaxreturn.getString(10);
                String value = ccursortaxreturn.getString(9);
                String pq = ccursortaxreturn.getString(39);
                String itna = ccursortaxreturn.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn.moveToNext());
        }

        Cursor ccursortaxreturn2 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn2.moveToFirst()) {

            do {
                String name = ccursortaxreturn2.getString(30);
                String value = ccursortaxreturn2.getString(31);
                String pq = ccursortaxreturn2.getString(39);
                String itna = ccursortaxreturn2.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn2.moveToNext());
        }

        Cursor ccursortaxreturn3 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn3.moveToFirst()) {

            do {
                String name = ccursortaxreturn3.getString(32);
                String value = ccursortaxreturn3.getString(33);
                String pq = ccursortaxreturn3.getString(39);
                String itna = ccursortaxreturn3.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn3.moveToNext());
        }

        Cursor ccursortaxreturn4 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn4.moveToFirst()) {

            do {
                String name = ccursortaxreturn4.getString(34);
                String value = ccursortaxreturn4.getString(35);
                String pq = ccursortaxreturn4.getString(39);
                String itna = ccursortaxreturn4.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn4.moveToNext());
        }

        Cursor ccursortaxreturn5 = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
        if (ccursortaxreturn5.moveToFirst()) {

            do {
                String name = ccursortaxreturn5.getString(36);
                String value = ccursortaxreturn5.getString(37);
                String pq = ccursortaxreturn5.getString(39);
                String itna = ccursortaxreturn5.getString(1);

                TextView v = new TextView(CancelActivity.this);
                v.setText(value);

                TextView v1 = new TextView(CancelActivity.this);
                v1.setText(name);
                if (v.getText().toString().equals("0") || v1.getText().toString().equals("NONE") || v1.getText().toString().equals("None") || v.getText().toString().equals("0.0")
                        || v.getText().toString().equals("")) {

                } else {

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(
                            TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT, 4.5f));

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tv1.setText(value);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + "@" + value + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));

                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);
                }

            } while (ccursortaxreturn5.moveToNext());
        }


        ArrayList<String> groupList1 = new ArrayList<String>();

        float sum_p1 = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(0);
//                                Toast.makeText(CancelActivity.this, "a "+mTextView.getText().toString(), Toast.LENGTH_LONG).show();

            if (groupList1.contains(mTextView.getText().toString())) {

            }else {
                sum_p1 = 0;
                for (int j = 0; j < tableLayout1.getChildCount(); j++) {
                    TableRow mRow1 = (TableRow) tableLayout1.getChildAt(j);
                    mTextView1 = (TextView) mRow1.getChildAt(0);
                    mTextView2 = (TextView) mRow1.getChildAt(2);
                    if (groupList1.contains(mTextView.getText().toString())) {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "b " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    } else {
                        if (mTextView.getText().toString().equals(mTextView1.getText().toString())) {
                            groupList1.add(mTextView.getText().toString());
                            sum_p1 = sum_p1+Float.parseFloat(mTextView2.getText().toString());
//                                                Toast.makeText(CancelActivity.this, "c " + mTextView2.getText().toString()+" "+sum, Toast.LENGTH_LONG).show();
                        }
                    }
                }
//                    Toast.makeText(CancelActivity.this, "aa "+mTextView.getText().toString() +" "+sum_p1, Toast.LENGTH_LONG).show();

                String mod1 = mTextView.getText().toString() + "---" + String.valueOf(String.format("%.2f", sum_p1));
                allbuftaxestype1 = new byte[][]{
                        left, normal, mod1.getBytes(), HT, LF
                        //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
//						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
//						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
                };
                //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

                fmt.format(mod1, " ");

                String match = "@";
                int position = mTextView.getText().toString().indexOf(match);
                String mod2 = mTextView.getText().toString().substring(0, position);//keep toastmessage
//                    Toast.makeText(CancelActivity.this, " "+mod2, Toast.LENGTH_LONG).show();
                Cursor ccursor6 = db1.rawQuery("Select * from All_Sales_Cancelled WHERE bill_no = '" + billnoget + "' AND taxname = '"+mod2+"' OR taxname2 = '"+mod2+"' OR taxname3 = '"+mod2+"' OR taxname4 = '"+mod2+"' OR taxname5 = '"+mod2+"'", null);//replace to cursor = dbHelper.fetchAllHotels();
                if (ccursor6.moveToFirst()) {
                    String hsn = ccursor6.getString(38);

                    TextView hsn_hsn = new TextView(CancelActivity.this);
                    hsn_hsn.setText(hsn);

                    if (hsn_hsn.getText().toString().equals("")) {
                    } else {
                        fmt.format("HSN "+hsn, " ");
                    }
                }

            }
        }

//            Cursor ccursortaxreturn = db1.rawQuery("Select * from All_Sales_Cancelled where bill_no = '" + billnoget + "'", null);//replace to cursor = dbHelper.fetchAllHotels();
//            if (ccursortaxreturn.moveToFirst()) {
//
//                do {
//
//                    String name = ccursortaxreturn.getString(10);
//                    String value = ccursortaxreturn.getString(9);
//                    String pq = ccursortaxreturn.getString(4);
//                    String itna = ccursortaxreturn.getString(1);
//
//                    if (value.toString().equals("0") || name.toString().equals("NONE") || name.toString().equals("None")) {
//
//                    } else {
//
////                    final TableRow row = new TableRow(CancelActivity.this);
////                    row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.FILL_PARENT,
////                            TableRow.LayoutParams.WRAP_CONTENT));
////                    row.setGravity(Gravity.CENTER);
//
//                        final TableRow row = new TableRow(CancelActivity.this);
//                        row.setLayoutParams(new TableLayout.LayoutParams(
//                                TableRow.LayoutParams.MATCH_PARENT,
//                                TableRow.LayoutParams.WRAP_CONTENT, 4.5f));
//
//                        TableRow.LayoutParams lp, lp1, lp2;
//
////                                    final TextView tv = new TextView(CancelActivity.this);
////                                    //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
////                                    tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
////                                    tv.setTextSize(16);
////                                    tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
////                                    row.addView(tv);
//
//                        TextView tvv = new TextView(CancelActivity.this);
//                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        //tv.setBackgroundResource(R.drawable.cell_shape);
//                        tvv.setGravity(Gravity.START);
//                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tvv.setText(name);
//
//                        TextView tv1 = new TextView(CancelActivity.this);
//                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
//                        tv1.setGravity(Gravity.START);
//                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        tv1.setText(value);
//                        String value1 = tv1.getText().toString();
//
//                        TextView tv2 = new TextView(CancelActivity.this);
////                    tv2.setLayoutParams(new android.widget.TableRow.LayoutParams(145,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
//                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
//                        tv2.append(name + " @ " + value + "%" + "(" + itna + ")");
//                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        tv2.setPadding(0, 0, 20, 0);
//                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        //tv2.setTextColor(Color.parseColor("#000000"));
//                        row.addView(tv2);
//
//                        TextView textView1 = new TextView(CancelActivity.this);
//                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        row.addView(textView1);
//
//                        TextView tv3 = new TextView(CancelActivity.this);
////                    tv3.setLayoutParams(new android.widget.TableRow.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT,
////                            android.widget.TableRow.LayoutParams.WRAP_CONTENT));
//                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
//                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
//                        float mul = Float.parseFloat(value1) * Float.parseFloat(pq) / 100;
//                        float tota = mul;
//                        String tota1 = String.format("%.2f", tota);
//                        //tv3.setPadding(0,0,10,0);
//                        tv3.setText(String.valueOf(tota));
//                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                        //tv3.setTextColor(Color.parseColor("#000000"));
//                        //row.addView(tv3);
//
//
//                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
//                        String value2 = tv3.getText().toString();
//                        row.addView(tv3);
//
//                        tableLayout1.addView(row);
//                        String mod1 = name + " @ " + value + "%" + "(" + itna + ")" + "---" + String.valueOf(tota1);
//                        allbuftaxestype1 = new byte[][]{
//                                left, normal, mod1.getBytes(), HT, LF
//                                //setHT34, normal,total.getBytes(),HT,modiname.getBytes(),HT, modiprice.getBytes(),HT, "125.0".getBytes(),LF
////						left, normal, setHT22, "DECAF16".getBytes(), HT, right, "30".getBytes(), LF,
////						left, normal, setHT22, "BREVE".getBytes(), HT, right, "1000".getBytes(), LF,
//                        };
//                        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);
//
//                        if (statussusbs.toString().equals("ok")) {
//                            BluetoothPrintDriver.BT_Write(left);    //
//                            BT_Write(normal);
//                            BT_Write(mod1);
//                            BluetoothPrintDriver.BT_Write(HT);    //
//                            BluetoothPrintDriver.BT_Write(LF);    //
//                        } else {
//                            if (statusnets.toString().equals("ok")) {
//                                wifiSocket.WIFI_Write(left);    //
//                                wifiSocket.WIFI_Write(normal);
//                                wifiSocket.WIFI_Write(mod1);
//                                wifiSocket.WIFI_Write(HT);    //
//                                wifiSocket.WIFI_Write(LF);    //
//                            }
//                        }
//                    }
//
//
//                } while (ccursortaxreturn.moveToNext());
//            }


        String phon = "0";

        Cursor caddress1 = db1.rawQuery("SELECT * FROM Customerdetails WHERE billnumber = '" + billnoget + "'", null);
        if (caddress1.moveToFirst()) {
            phon = caddress1.getString(2);
        }

        TextView tvvs = new TextView(CancelActivity.this);
        tvvs.setText(phon);


        Cursor us_name1 = db1.rawQuery("Select * from Customerdetails WHERE phoneno = '" + tvvs.getText().toString() + "'", null);
        if (us_name1.moveToLast()) {
//            Toast.makeText(CancelActivity.this, "user id there", Toast.LENGTH_LONG).show();
            String na53 = us_name1.getString(53);
            String na38 = us_name1.getString(38);
            String na39 = us_name1.getString(39);
            String na40 = us_name1.getString(40);
            String na41 = us_name1.getString(41);
            String na42 = us_name1.getString(42);
            String na43 = us_name1.getString(43);
            String na44 = us_name1.getString(44);
            String na45 = us_name1.getString(45);
            String na46 = us_name1.getString(46);
            String na47 = us_name1.getString(47);
            String na48 = us_name1.getString(48);
            String na49 = us_name1.getString(49);
            String na50 = us_name1.getString(50);
            String na51 = us_name1.getString(51);
            String na52 = us_name1.getString(52);
            String na38_value = us_name1.getString(54);
            String na39_value = us_name1.getString(55);
            String na40_value = us_name1.getString(56);
            String na41_value = us_name1.getString(57);
            String na42_value = us_name1.getString(58);
            String na43_value = us_name1.getString(59);
            String na44_value = us_name1.getString(60);
            String na45_value = us_name1.getString(61);
            String na46_value = us_name1.getString(62);
            String na47_value = us_name1.getString(63);
            String na48_value = us_name1.getString(64);
            String na49_value = us_name1.getString(65);
            String na50_value = us_name1.getString(66);
            String na51_value = us_name1.getString(67);
            String na52_value = us_name1.getString(68);

            String proc = us_name1.getString(69);

            TextView hid = new TextView(CancelActivity.this);
            hid.setText(proc);

            if (hid.getText().toString().equals("off")) {
                Cursor cursorr = null;
                if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
                if (paymmethoda.toString().equals("  Home delivery")) {
                    cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
                }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
                if (cursorr.moveToFirst()) {

                    do {

                        String name = cursorr.getString(1);
                        String value = cursorr.getString(2);

                        final TableRow row = new TableRow(CancelActivity.this);
                        row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                                TableRow.LayoutParams.WRAP_CONTENT));
                        row.setGravity(Gravity.CENTER);

                        TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                        TextView tvv = new TextView(CancelActivity.this);
                        tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        //tv.setBackgroundResource(R.drawable.cell_shape);
                        tvv.setGravity(Gravity.START);
                        tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tvv.setText(name);

                        TextView tv1 = new TextView(CancelActivity.this);
                        tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                        tv1.setGravity(Gravity.START);
                        tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv1.setText(value);
                        tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value1 = tv1.getText().toString();

                        TextView tv2 = new TextView(CancelActivity.this);
                        //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                        //tv2.setLayoutParams(lp);
                        tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                        tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                        tv2.append(name + " @ " + value + "%");
                        tv2.setPadding(0, 0, 20, 0);
                        tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(tv2);

                        TextView textView1 = new TextView(CancelActivity.this);
                        textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        row.addView(textView1);

                        TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                        tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                        //tv3.setPadding(0,0,10,0);
                        tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                        tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                        float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                        float tota = mul;
                        String tota1 = String.format("%.2f", tota);
                        tv3.setText(String.valueOf(tota));
                        //row.addView(tv3);


                        tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                        String value2 = tv3.getText().toString();
                        row.addView(tv3);

                        tableLayout1.addView(row);

                        String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);

                        fmt.format(mod1, " ");

                    } while (cursorr.moveToNext());
                }
            } else {
                for (int i2 = 38; i2 < 53; i2++) {

//                                tv33.setText("0.0");
//                                for (int i1 = 54; i1<69; i1++) {
                    int i1 = 0;
                    if (i2 == 38) {
                        i1 = 54;
                    }
                    if (i2 == 39) {
                        i1 = 55;
                    }
                    if (i2 == 40) {
                        i1 = 56;
                    }
                    if (i2 == 41) {
                        i1 = 57;
                    }
                    if (i2 == 42) {
                        i1 = 58;
                    }
                    if (i2 == 43) {
                        i1 = 59;
                    }
                    if (i2 == 44) {
                        i1 = 60;
                    }
                    if (i2 == 45) {
                        i1 = 61;
                    }
                    if (i2 == 46) {
                        i1 = 62;
                    }
                    if (i2 == 47) {
                        i1 = 63;
                    }
                    if (i2 == 48) {
                        i1 = 64;
                    }
                    if (i2 == 49) {
                        i1 = 65;
                    }
                    if (i2 == 50) {
                        i1 = 66;
                    }
                    if (i2 == 51) {
                        i1 = 67;
                    }
                    if (i2 == 52) {
                        i1 = 68;
                    }


                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

                    TextView tv = new TextView(CancelActivity.this);
                    tv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv.setGravity(Gravity.START);
                    tv.setTextSize(15);
                    //text = cursor.getString(1);
//                String v = na;

                    tv.setText(us_name1.getString(i2));


                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    //text = cursor.getString(1);
                    tv1.setText(us_name1.getString(i1));
                    String value1 = "0";
                    if (tv1.getText().toString().equals("")) {

                    } else {
                        value1 = tv1.getText().toString();
                    }


                    TextView tv2 = new TextView(CancelActivity.this);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%");
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);
//                    Toast.makeText(CancelActivity.this, "hiii "+na38 + " @ " + us_name1.getString(i1) + "%", Toast.LENGTH_LONG).show();

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

//                    Toast.makeText(CancelActivity.this, " "+i1 + " @ " + value1 + "%", Toast.LENGTH_LONG).show();

                    TextView tv33 = new TextView(CancelActivity.this);
                    tv33.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    tv33.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(sub) / 100;
//                float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(to)) / 100;
//                float mul = ((Float.parseFloat(total2)+Float.parseFloat(total_disc_print)) / 100) * Float.parseFloat(value1);
//                    float mul = Float.parseFloat(value1) * (Float.parseFloat(total)+Float.parseFloat(total_disc)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv33.setText(String.valueOf(tota));
                    tv33.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    //tv3.setTextColor(Color.parseColor("#000000"));
                    //row.addView(tv3);


                    tv33.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv33);

                    String value2 = tv33.getText().toString();
//                    Toast.makeText(CancelActivity.this, "11 " + String.valueOf(tota1), Toast.LENGTH_LONG).show();

                    if (tv33.getText().toString().equals("0") || tv33.getText().toString().equals("0.0") || tv33.getText().toString().equals("0.00")
                            || tv33.getText().toString().equals("") || tv.getText().toString().equals("")) {

                    } else {
                        tableLayout1.addView(row);

                        String mod1 = us_name1.getString(i2) + " @ " + us_name1.getString(i1) + "%" + "---" + String.valueOf(tota1);

                        fmt.format(mod1, " ");

                    }

                }
            }

        } else {
//            Toast.makeText(CancelActivity.this, "user id not there", Toast.LENGTH_LONG).show();
            Cursor cursorr = null;
            if (paymmethoda.toString().equals("  Dine-in") || paymmethoda.toString().equals("  General") || paymmethoda.toString().equals("  Others")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax1 = 'dine_in'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Takeaway") || paymmethoda.toString().equals("  Main")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax2 = 'takeaway'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
            if (paymmethoda.toString().equals("  Home delivery")) {
                cursorr = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax' AND tax3 = 'homedelivery'", null);//replace to cursor = dbHelper.fetchAllHotels();
            }
//            ccursor = db.rawQuery("Select * from Taxes WHERE taxtype = 'Globaltax'", null);//replace to ccursor = dbHelper.fetchAllHotels();
            if (cursorr.moveToFirst()) {

                do {

                    String name = cursorr.getString(1);
                    String value = cursorr.getString(2);

                    final TableRow row = new TableRow(CancelActivity.this);
                    row.setLayoutParams(new TableLayout.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,
                            TableRow.LayoutParams.WRAP_CONTENT));
                    row.setGravity(Gravity.CENTER);

                    TableRow.LayoutParams lp, lp1, lp2;

//                                final TextView tv = new TextView(CancelActivity.this);
//                                //tv.setLayoutParams(new TableRow.LayoutParams(40, TableRow.LayoutParams.MATCH_PARENT));
//                                tv.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 0.7f));
//                                tv.setTextSize(16);
//                                tv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
//                                row.addView(tv);

                    TextView tvv = new TextView(CancelActivity.this);
                    tvv.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    //tv.setBackgroundResource(R.drawable.cell_shape);
                    tvv.setGravity(Gravity.START);
                    tvv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    tvv.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tvv.setText(name);

                    TextView tv1 = new TextView(CancelActivity.this);
                    tv1.setLayoutParams(new TableRow.LayoutParams(89, 34));
                    tv1.setGravity(Gravity.START);
                    tv1.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv1.setText(value);
                    tv1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value1 = tv1.getText().toString();

                    TextView tv2 = new TextView(CancelActivity.this);
                    //lp = new TableRow.LayoutParams(145, TableRow.LayoutParams.WRAP_CONTENT);
                    //tv2.setLayoutParams(lp);
                    tv2.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 2.6f));
                    tv2.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv2.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
                    tv2.append(name + " @ " + value + "%");
                    tv2.setPadding(0, 0, 20, 0);
                    tv2.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(tv2);

                    TextView textView1 = new TextView(CancelActivity.this);
                    textView1.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    row.addView(textView1);

                    TextView tv3 = new TextView(CancelActivity.this);
//                lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT);
//                tv3.setLayoutParams(lp2);
                    tv3.setLayoutParams(new TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1.2f));
                    //tv3.setPadding(0,0,10,0);
                    tv3.setTypeface(Typeface.create("sans-serif-thin", Typeface.NORMAL));
                    tv3.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
                    float mul = Float.parseFloat(value1) * Float.parseFloat(String.valueOf(sub12)) / 100;
                    float tota = mul;
                    String tota1 = String.format("%.2f", tota);
                    tv3.setText(String.valueOf(tota));
                    //row.addView(tv3);


                    tv3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);
                    String value2 = tv3.getText().toString();
                    row.addView(tv3);

                    tableLayout1.addView(row);

                    String mod1 = name + " @ " + value + "%" + "---" + String.valueOf(tota1);

                    fmt.format(mod1, " ");

                } while (cursorr.moveToNext());
            }
        }


        float sum = 0;
        for (int i = 0; i < tableLayout1.getChildCount(); i++) {
            TableRow mRow = (TableRow) tableLayout1.getChildAt(i);
            TextView mTextView = (TextView) mRow.getChildAt(2);
            sum = sum
                    + Float.parseFloat(mTextView.getText().toString());
        }


        String newsum = String.format("%.2f", sum);

        if (sum == 0 || sum == 0.0 || sum == 0.00) {

        } else {
            fmt.format("%-38s %9s\n", "Tax", newsum);
        }


///////////////////////////////// discount


        Cursor cursor5 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor5.moveToFirst()) {
            dsirs = cursor5.getString(7);
            float ds = Float.parseFloat(dsirs);
            dsirs1 = String.format("%.2f", ds);
        } else {
            dsirs = "0";
        }
        TextView dis = new TextView(CancelActivity.this);
        Cursor cursor7 = db1.rawQuery("SELECT * FROM Discountdetails WHERE billno = '" + billnoget + "'", null);
        if (cursor7.moveToFirst()) {
            taxpe = cursor7.getString(5);
            float on = (Float.parseFloat(tot) / 100) * Float.parseFloat(taxpe);
            on1 = String.format("%.1f", on);
            if (on % 1 != 0) {
                // //////Toast.makeText(CancelActivity.this, "Decimal values"+newe, Toast.LENGTH_SHORT).show();
                int newww = (int) on;
                float decpart = on - newww;
                ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+newww, Toast.LENGTH_SHORT).show();
                ////////Toast.makeText(CancelActivity.this, "DECIMALLLLLLLLLLLLLLLL"+decpart, Toast.LENGTH_SHORT).show();
                if (decpart > 0.5) {
                    ////////Toast.makeText(CancelActivity.this, "1", Toast.LENGTH_SHORT).show();

//                            String rou = round.getText().toString();
//                            float roun = Float.parseFloat(rou);
                    float addall = on;
                    //alltotal.setText(String.valueOf(newww + 1));
                    //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                    float dee = 1 - decpart;
                    dis.setText("+ " + String.format("%.2f", dee));

                } else {
                    // //////Toast.makeText(CancelActivity.this, "2", Toast.LENGTH_SHORT).show();
                    //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                    float addall = on;
                    //alltotal1.setText(String.valueOf(newww));
                    //TextView round1 = (TextView) mView.findViewById(R.id.roundvalue);
                    dis.setText("- " + String.format("%.2f", decpart));

                }
            } else {
                ////////Toast.makeText(CancelActivity.this, "Not having decimals", Toast.LENGTH_SHORT).show();

                //TextView alltotal1 = (TextView) mView.findViewById(R.id.fulltotal1);
                int addall = (int) on;
                //alltotal1.setText(String.valueOf(addall));
                //TextView round = (TextView) mView.findViewById(R.id.roundvalue);
                dis.setText("+ " + "0.00");
                ////////Toast.makeText(MainActivity.this, "decimal is there", Toast.LENGTH_SHORT).show();
            }
        } else {
            taxpe = "0";
            dis.setText("+ " + "0.00");
            on1 = "0";
        }

        //tot-is-subtotal

        String alldiscinperc1 = "Discount(" + taxpe + "%)";

        fmt.format("%-38s %9s\n", alldiscinperc1, on1);

        float newe;

//////////////////////////////////////////

        Cursor cursor113 = db1.rawQuery("SELECT SUM(disc_indiv_total) FROM All_Sales WHERE bill_no = '" + billnoget + "' AND disc_thereornot = 'yes'", null);
        if (cursor113.moveToFirst()) {
            float level = cursor113.getFloat(0);
            total = String.valueOf(level);
            total1 = Float.parseFloat(total);
            total_disc_print_q = String.format("%.2f", total1);

            fmt.format("%-38s %9s\n", "Savings", total_disc_print_q);

        }

////////////////////////////////rounded

        if (taxpe.toString().equals("")) {
            newe = sum + Float.parseFloat(String.valueOf(tot));
        } else {
            newe = sum + Float.parseFloat(String.valueOf(tot)) + Float.parseFloat(on1);
        }

        if (str_round_off.toString().equals("No")) {

        }else {
            TextView round = new TextView(CancelActivity.this);
            if (newe % 1 != 0) {
                int newww = (int) newe;
                float decpart = newe - newww;
                if (decpart > 0.5) {
                    float addall = newe;
                    float dee = 1 - decpart;
                    round.setText("+ " + String.format("%.2f", dee));
                } else {
                    float addall = newe;
                    round.setText("- " + String.format("%.2f", decpart));
                }
            } else {
                int addall = (int) newe;
                round.setText("+ " + "0.00");
            }

            fmt.format("%-38s %9s\n", "Rounded", round.getText().toString());

        }

        fmt.format("------------------------------------------------", " ");

/////////////////////refund

        //19
        Cursor billcan = db1.rawQuery("SELECT * FROM All_Sales WHERE bill_no = '" + billnoget + "'", null);
        if (billcan.moveToFirst()) {
            String asd = billcan.getString(18);
            refundamounta = String.valueOf(asd);
        } else {
            Cursor billcan_cancel = db1.rawQuery("SELECT * FROM All_Sales_cancelled WHERE bill_no = '" + billnoget + "'", null);
            if (billcan_cancel.moveToFirst()) {
                String asd = billcan_cancel.getString(17);
                refundamounta = String.valueOf(asd);
            }
        }

        Cursor c1 = db1.rawQuery("SELECT * FROM Billnumber WHERE billnumber = '" + billnoget + "'", null);
        if (c1.moveToFirst()) {
            String c11 = c1.getString(2);
            alltotal1 = c11;
        } else {
            alltotal1 = "0";
        }
        float min = Float.parseFloat(refundamounta) - Float.parseFloat(alltotal1);
        String mn1 = String.valueOf(min);

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

        fmt.format("%-34s %13s\n", "Refund", "-"+mn1);

        SimpleDateFormat normal5 = new SimpleDateFormat("ddMMMyy");
        final String normal1 = normal5.format(new Date());

        Date dt = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ssaa");
        final String time1 = sdf1.format(dt);

        Date dtt = new Date();
        SimpleDateFormat sdf1t = new SimpleDateFormat("yyyyMMddkk:mm:ss");
        String time24 = sdf1t.format(dtt);

        String refundtime = "(" + normal1 + "," + time1 + ")";

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

        fmt.format(refundtime+"\n", " ");

        fmt.format("------------------------------------------------"+"\n", " ");
/////////////////////////

        float all = Float.parseFloat(alltotal1);
        String newf = String.valueOf(all);

        //byte[] buf1 = DataUtils.byteArraysToBytes(compname);

        fmt.format("%-34s %13s\n", "Total", insert1_rs+""+newf);

        fmt.format("------------------------------------------------", " ");
        fmt.format("\n", " ");

        tvkot.setText(strbillone);
        if (tvkot.getText().toString().equals("")){

        }else {
            fmt.format(strbillone+"\n");
        }

        fmt.format("\n", " ");

        testBytes = fmt.toString().getBytes();

        //Getting current device count to check if the printer is attached or not
        mUsbManager = (UsbManager) getSystemService(this.USB_SERVICE);
        mDeviceList = mUsbManager.getDeviceList();

        if (mDeviceList.size() > 0) {

            mDeviceIterator = mDeviceList.values().iterator();
            String usbDevice = "";
            while (mDeviceIterator.hasNext()) {
                UsbDevice usbDevice1 = mDeviceIterator.next();
                mDevice = usbDevice1;
            }

            mInterface = mDevice.getInterface(0);
            mEndPoint = mInterface.getEndpoint(1);// 0 IN and  1 OUT to printer.
            mConnection = mUsbManager.openDevice(mDevice);


            if (mInterface == null) {
                Toast.makeText(this, "INTERFACE IS NULL", Toast.LENGTH_SHORT).show();
            } else if (mConnection == null) {
                Toast.makeText(this, "CONNECTION IS NULL", Toast.LENGTH_SHORT).show();
            } else if (forceCLaim == null) {
                Toast.makeText(this, "FORCE CLAIM IS NULL", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Prepare print... ", Toast.LENGTH_SHORT).show();
                int finalImage_there = image_there;
                Thread thread = new Thread(new Runnable() {
                    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
                    @Override
                    public void run() {
                        Log.e("u", "Printing.. ");
                        UsbInterface intf = mDevice.getInterface(0);
                        UsbEndpoint endpoint = intf.getEndpoint(0);
                        UsbDeviceConnection conn = mUsbManager.openDevice(mDevice);
                        conn.claimInterface(intf, true);

                        byte[] center = new byte[]{0x1b, 0x61, 0x00};
                        byte[] cut_paper = {0x1D, 0x56, 0x41, 0x10};

//                        try {
//                            Bitmap bmp = BitmapFactory.decodeResource(getResources(),
//                                    R.drawable.titto);
//                            if(bmp!=null){
//                                command = Utils.decodeBitmap(bmp);
//
//                            }else{
//                                Log.e("Print Photo error", "the file isn't exists");
//                            }
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                            Log.e("PrintTools", "the file isn't exists");
//                        }

                        conn.bulkTransfer(endpoint,center,center.length,0);
                        if (finalImage_there == 1) {
                            conn.bulkTransfer(endpoint, command, command.length, 0);
                        }
                        conn.bulkTransfer(endpoint, testBytes, testBytes.length, 0);
                        conn.bulkTransfer(endpoint, cut_paper, cut_paper.length, 0);
                    }
                });
                thread.run();
            }
        } else {
            Toast.makeText(this, "No Printer Attached ", Toast.LENGTH_SHORT).show();
        }

    }
}
